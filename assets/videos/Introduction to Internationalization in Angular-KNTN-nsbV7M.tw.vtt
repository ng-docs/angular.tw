WEBVTT
Kind: subtitles
Language: zh-TW

00:00:00.000 --> 00:00:01.850
馬克·湯普森：嗯

00:00:01.850 --> 00:00:07.593
我希望有一些方法可以讓我的應用程式以
我的使用者的語言顯示

00:00:07.490 --> 00:00:08.810
哦，等等，確實有

00:00:08.810 --> 00:00:10.380
你想知道怎麼做嗎？好吧

00:00:10.380 --> 00:00:11.450
你知道該怎麼做

00:00:11.450 --> 00:00:13.338
坐在這兒聽我說

00:00:13.338 --> 00:00:23.970
[音樂播放] 嘿，朋友們

00:00:23.970 --> 00:00:26.250
我是來自 Angular 團隊的 Mark

00:00:26.250 --> 00:00:29.160
我很高興能帶著另一個精彩的新影片回來

00:00:29.160 --> 00:00:32.622
我們將一起學習國際化和 Angular

00:00:32.622 --> 00:00:35.190
並對應用程式進行國際化

00:00:35.190 --> 00:00:38.350
這會很棒

00:00:38.350 --> 00:00:41.754
讓我們在編寫任何程式碼之前複習一些術語

00:00:41.754 --> 00:00:43.870
以便我們有共同的背景知識

00:00:43.870 --> 00:00:47.329
如果你已經熟悉國際化

00:00:47.329 --> 00:00:50.130
則可以跳到下一章

00:00:50.130 --> 00:00:54.314
在談論以不同語言提供你的應用程式時

00:00:54.314 --> 00:00:58.020
你可能會聽到術語"國際化"和"本地化"

00:00:58.020 --> 00:01:01.620
儘管這些術語相關，但並不相同

00:01:01.620 --> 00:01:02.580
讓我解釋一下

00:01:02.580 --> 00:01:05.972
國際化，或通常縮寫為 i18n

00:01:05.972 --> 00:01:14.926
是準備和設計你的應用程式以支援其在不同
語言和語言方言中使用的過程

00:01:14.790 --> 00:01:18.630
這可能包括透過分離隨後將要翻譯的內容

00:01:18.630 --> 00:01:22.470
使你的應用程式能夠支援以不同語言渲染

00:01:22.470 --> 00:01:23.061
此外

00:01:23.061 --> 00:01:31.329
準備工作可能包括更新你的應用程式以支援
雙向文字 —— 即從左到右或從右到左

00:01:31.210 --> 00:01:32.874
準備好應用程式後

00:01:32.874 --> 00:01:35.320
下一步就是本地化應用程式

00:01:35.320 --> 00:01:41.098
本地化是為不同語言環境建構專案版本的過程

00:01:40.960 --> 00:01:43.314
等等，什麼是語言環境？

00:01:43.314 --> 00:01:48.728
語言環境標識人們使用某種語言或語言變體
的區域

00:01:48.610 --> 00:01:50.782
對於給定的語言環境

00:01:50.782 --> 00:01:54.670
時間、數字和貨幣的單位都有特定的格式

00:01:54.670 --> 00:02:01.420
還有名字的翻譯，包括時區、語言和國家

00:02:01.420 --> 00:02:08.598
檢視描述以獲取更多資源和包含有關
區域設定資訊的有用連結

00:02:08.470 --> 00:02:16.176
本地採用語言 ID 連字元區域設定擴充的
格式 —— 例如

00:02:16.176 --> 00:02:19.548
en-US 表示英語和美國

00:02:19.548 --> 00:02:23.241
fr-CA 表示法語和加拿大

00:02:23.080 --> 00:02:25.240
這裡還有一些需要考慮的事情

00:02:25.240 --> 00:02:28.634
國際化過程從技術上說只需要做一次

00:02:28.634 --> 00:02:34.805
然後你就可以根據需要將你的應用程式本地化
到儘可能多的語言環境

00:02:34.805 --> 00:02:37.582
而無需更改你的應用程式程式碼

00:02:37.480 --> 00:02:40.211
如果你擴充應用程式

00:02:40.211 --> 00:02:44.380
則需要確保這些新頁面已國際化

00:02:44.380 --> 00:02:44.944
現在

00:02:44.944 --> 00:02:50.583
團隊可能會多次執行本地化過程以支援不同
的語言環境

00:02:50.470 --> 00:02:52.219
並且根據目標語言的不同

00:02:52.219 --> 00:02:58.083
可能會發現來自其中一個語言環境的字串
大小可能會破壞 UI

00:02:57.980 --> 00:03:00.980
例如，這可能發生在德語等語言中

00:03:00.980 --> 00:03:04.690
所以一定要檢查你的使用者介面

00:03:04.690 --> 00:03:05.410
好吧，就說到這

00:03:05.410 --> 00:03:06.659
說完語言

00:03:06.659 --> 00:03:11.240
讓我們回顧一下今天要一起做的事情

00:03:11.240 --> 00:03:16.791
我們將安裝依賴項以新增對本地化和國際化
的支援

00:03:16.670 --> 00:03:19.310
我們將使我們的應用程式國際化

00:03:19.310 --> 00:03:23.240
然後我們將本地化我們的應用程式

00:03:23.240 --> 00:03:26.050
現在這是我們要本地化的應用程式

00:03:26.050 --> 00:03:30.490
它代表電子商務應用程式中的訂單確認頁面

00:03:30.490 --> 00:03:33.430
好吧，讓我們轉到程式碼

00:03:33.430 --> 00:03:36.130
首先，讓我們安裝這些依賴項

00:03:36.130 --> 00:03:39.967
我們將使用 Angular localize 包來做到這
一點

00:03:39.880 --> 00:03:42.213
在專案的命令列中

00:03:42.213 --> 00:03:46.330
鍵入 ng add @angular/localize

00:03:46.330 --> 00:03:49.930
當被問及是否要繼續時，回答是

00:03:49.930 --> 00:03:53.894
該軟體包為我們提供了本地化應用程式的工具

00:03:53.800 --> 00:03:55.915
在整理依賴項的同時

00:03:55.915 --> 00:03:58.810
我們還將更新 angular.json

00:03:58.810 --> 00:04:01.990
首先，我們將指定要支援的語言環境

00:04:01.990 --> 00:04:04.810
在這個例子中，我將使用西班牙語

00:04:04.810 --> 00:04:08.134
在專案下，我們的應用程式名稱

00:04:08.134 --> 00:04:10.390
我將新增 i18n 屬性

00:04:10.390 --> 00:04:13.823
接下來，我將指定源語言環境屬性

00:04:13.823 --> 00:04:17.600
這是我們在原始碼中使用的語言環境

00:04:17.600 --> 00:04:21.519
所以對於這個例子，它將是 en-US

00:04:21.519 --> 00:04:25.206
讓我們新增另一個名為 locale 的屬性

00:04:25.206 --> 00:04:31.526
並指定此應用程式將支援哪些區域設定以及
翻譯檔案將儲存在何處

00:04:31.420 --> 00:04:34.390
那將是 src/local/messages.es.xlf

00:04:34.390 --> 00:04:42.970
我們尚未建立此檔案，但很快就會建立

00:04:42.970 --> 00:04:46.593
在 architect, build, options 下

00:04:46.593 --> 00:04:49.650
讓我們新增另一個本地化屬性

00:04:49.650 --> 00:04:52.254
併為其賦予一個數組的值

00:04:52.254 --> 00:04:54.971
其中 es-PR 作為唯一元素

00:04:54.970 --> 00:05:00.989
這會告訴 Angular 在本地化應用程式時要
建構哪個語言環境

00:05:00.880 --> 00:05:02.101
另外請注意

00:05:02.101 --> 00:05:07.651
新增此屬性還允許我們在 ng serve 中預覽
特定區域設定

00:05:07.540 --> 00:05:11.795
我們無法使用 ng serve 同時預覽多個
語言環境

00:05:11.795 --> 00:05:21.824
因此將多個語言環境新增到陣列或將屬性值
設定為 true 將導致在使用開發伺服器執行
我們的應用程式時出錯

00:05:21.520 --> 00:05:23.950
好了，我們的應用配置完成了

00:05:23.950 --> 00:05:25.630
做得好

00:05:25.630 --> 00:05:26.310
接下來

00:05:26.310 --> 00:05:29.710
讓我們檢查我們的應用程式並查詢 OTI

00:05:29.710 --> 00:05:33.880
這就是國際化的機會

00:05:33.880 --> 00:05:35.921
在我們的應用程式中

00:05:35.921 --> 00:05:38.822
我們在哪裡可以找到一些 OTI？

00:05:38.822 --> 00:05:45.483
此應用程式具有相當多的可以國際化的字串
—— 你的訂單正在傳送中

00:05:45.483 --> 00:05:49.995
感謝你與我們一起購物並且你的訂單已被處理

00:05:49.995 --> 00:05:53.218
表格標題的專案數量、日期和金額

00:05:53.218 --> 00:05:55.044
最後是總金額文字

00:05:54.830 --> 00:06:00.490
我們還可以將總金額和日期值的貨幣國際化

00:06:00.490 --> 00:06:05.020
還有別的事嗎？現在，這個很容易錯過

00:06:05.020 --> 00:06:06.574
如果你說的是圖片

00:06:06.574 --> 00:06:09.407
那麼我希望你現在拿住這個手柄

00:06:09.407 --> 00:06:10.961
因為我還有東西給你

00:06:10.960 --> 00:06:12.740
恩，擊掌鼓勵

00:06:12.740 --> 00:06:13.540
你是對的

00:06:13.540 --> 00:06:19.606
圖像將包含需要翻譯成我們語言環境語言的
替代文字

00:06:19.480 --> 00:06:23.181
現在我們知道哪些東西要國際化了

00:06:23.181 --> 00:06:25.450
讓我們再來看看程式碼

00:06:25.450 --> 00:06:27.750
在 app.component.html 中

00:06:27.750 --> 00:06:30.970
讓我們從更新應用程式的文字部分開始

00:06:30.970 --> 00:06:37.763
我們將透過新增 i18n 屬性將這些標記為將
在所選語言環境中顯示的內容

00:06:37.660 --> 00:06:39.274
在我們的例子中

00:06:39.274 --> 00:06:41.964
我們將使用屬性的基本形式

00:06:41.964 --> 00:06:46.160
但開發人員也可以新增更多元資料詳細資訊

00:06:46.160 --> 00:06:48.850
如自訂 ID 和譯者上下文

00:06:48.850 --> 00:06:49.443
接下來

00:06:49.443 --> 00:06:52.750
我們將使用管道來標記要翻譯的日期和貨幣

00:06:52.750 --> 00:06:53.828
預設情況下

00:06:53.828 --> 00:06:58.728
日期管道和貨幣管道都支援特定於語言環境
的格式設定

00:06:58.630 --> 00:07:05.199
我們將利用 i18n 屬性來標記要翻譯的圖像
的 Alt 文字屬性

00:07:05.080 --> 00:07:08.470
alt 屬性不是這裡唯一的選項

00:07:08.470 --> 00:07:12.370
我們也可以標記翻譯的其他屬性

00:07:12.370 --> 00:07:13.795
在繼續下一步之前

00:07:13.795 --> 00:07:20.922
讓我們使用美元符號 localize 在我們的元件類
app.component.ts 中標記要翻譯的頁面標題

00:07:20.755 --> 00:07:21.885
就這樣

00:07:21.885 --> 00:07:26.890
我們已經國際化了我們的應用程式

00:07:26.890 --> 00:07:28.180
我們繼續！

00:07:28.180 --> 00:07:29.650
現在進入重點部分

00:07:29.650 --> 00:07:37.857
我們將使用 Angular CLI 的 extract i18n
命令來提取所有已標記為翻譯的元素

00:07:37.750 --> 00:07:41.947
在命令提示符中，鍵入 ng extract --i18n

00:07:41.947 --> 00:07:47.077
然後使用輸出路徑選項指定翻譯檔案的存放
位置

00:07:46.960 --> 00:07:50.690
在此範例中，我將新增 source/locale

00:07:50.690 --> 00:07:54.310
它與 angular.json 中的位置相匹配

00:07:54.310 --> 00:07:56.837
在我們剛剛建立的 locale 資料夾中

00:07:56.837 --> 00:07:59.440
現在有了我們的訊息檔案，這很棒

00:07:59.440 --> 00:08:02.230
但是這些訊息是用原始語言寫的

00:08:02.230 --> 00:08:03.730
這是下一步該做什麼

00:08:03.730 --> 00:08:07.629
我們將為每個支援的語言環境製作此檔案的
副本

00:08:07.540 --> 00:08:13.568
我要製作一個名為 messages.es.xlf 的文
件的副本

00:08:13.440 --> 00:08:20.964
這是使用我們在 angular.json 中指定的語
言環境 ID

00:08:20.810 --> 00:08:24.335
此時，我們將本地檔案傳遞給翻譯器

00:08:24.335 --> 00:08:28.190
然後使用更新後的檔案更新我們的專案

00:08:28.190 --> 00:08:32.490
但是對於這個例子，我們將自己新增翻譯

00:08:32.490 --> 00:08:35.315
所以在 messages.es.xlf 中

00:08:35.315 --> 00:08:39.879
我們發現我們專案中的每條訊息都有一個部分

00:08:39.770 --> 00:08:41.532
在該部分中

00:08:41.532 --> 00:08:47.780
我們在源元素下找到翻譯的 ID 和原始文字

00:08:47.780 --> 00:08:53.515
我們的下一步是向名為 target 的源元素新增
同級元素

00:08:53.390 --> 00:08:58.070
target 表示此語言環境的翻譯文字

00:08:58.070 --> 00:09:00.020
讓我們現在進行這些更新

00:09:00.020 --> 00:09:01.400
這是關鍵時刻

00:09:01.400 --> 00:09:04.940
是時候檢視我們的本地化應用程式了

00:09:04.940 --> 00:09:08.270
從命令列，我們將執行 ng serve

00:09:08.270 --> 00:09:11.534
現在在瀏覽器中檢查我們的應用程式

00:09:11.534 --> 00:09:16.479
我們已經有了它 —— 一個完全國際化和本地化
的應用程式

00:09:16.380 --> 00:09:18.110
多麼令人興奮啊

00:09:18.110 --> 00:09:20.714
ng serve 只是我們的開發伺服器

00:09:20.714 --> 00:09:24.967
我們還可以使用 ng build 建構應用程式的
本地化版本

00:09:24.967 --> 00:09:28.613
並傳遞本地化標誌來建構我們所有的語言環境

00:09:28.613 --> 00:09:33.821
或者將其關閉以建構 angular.json 中建構
配置中指定的語言環境

00:09:33.560 --> 00:09:37.524
我將使用本地伺服器來為我們的建構提供服務

00:09:37.430 --> 00:09:38.142
接下來

00:09:38.142 --> 00:09:43.532
我將轉到本地主機埠 3000/es 以獲取西
班牙語語言環境

00:09:43.430 --> 00:09:45.290
我們有了它

00:09:45.290 --> 00:09:53.892
我們還可以轉到 en-US 以獲取英語語言環
境以及你為此範例配置的任何其他語言環境

00:09:53.780 --> 00:09:56.540
現在，我們可以看到本地伺服器的變化

00:09:56.540 --> 00:09:58.543
當部署應用程式時

00:09:58.543 --> 00:10:02.313
我們需要配置伺服器、base href 等

00:10:02.313 --> 00:10:06.201
以正確地向用戶顯示他們的首選語言

00:10:06.200 --> 00:10:11.055
Angular 文件有一些關於如何設定這些的
重要資訊

00:10:11.055 --> 00:10:14.116
你可以在下面的描述中找到連結

00:10:14.010 --> 00:10:21.156
最後要注意的一件事 —— 你可能想知道為什麼
我們需要為每個區域設定一個版本的 Web
應用程式

00:10:20.990 --> 00:10:24.546
為什麼不遵循其他解決方案定義的模式？

00:10:24.546 --> 00:10:27.390
好吧，這些都是一些很好的問題

00:10:27.390 --> 00:10:33.310
首先要考慮的是翻譯步驟是作為建構後過程
的一部分完成的

00:10:33.200 --> 00:10:37.400
因此你的建構時間不受本地化步驟的影響

00:10:37.400 --> 00:10:38.495
接下來

00:10:38.495 --> 00:10:43.970
考慮即時更改應用程式語言的效能成本

00:10:43.970 --> 00:10:48.131
為了能夠在不重新載入頁面的情況下更改語言

00:10:48.131 --> 00:10:51.599
每個翻譯字串都將建立一個新的繫結

00:10:51.500 --> 00:10:55.468
但大多數時候，使用者不會更改語言

00:10:55.468 --> 00:10:59.040
因此這些繫結的值將保持不變

00:10:59.040 --> 00:11:01.307
然後，當變更檢測執行時

00:11:01.307 --> 00:11:03.677
即使你沒有更改任何內容

00:11:03.677 --> 00:11:05.841
它也必須檢查所有繫結

00:11:05.840 --> 00:11:06.561
此外

00:11:06.561 --> 00:11:12.614
每個繫結都是新增到應用程式套件中的額外指令

00:11:12.470 --> 00:11:16.760
要在執行時更改語言需要傳送翻譯庫

00:11:16.760 --> 00:11:20.270
這也會增加你的應用程式大小

00:11:20.270 --> 00:11:24.800
還有另一個考慮因素 —— 翻譯檔案不可搖樹最佳化

00:11:24.800 --> 00:11:26.750
讓我再解釋一下

00:11:26.750 --> 00:11:31.657
一個應用程式可以有數千個給定語言的翻譯
字串

00:11:31.550 --> 00:11:33.463
對於選定的語言

00:11:33.463 --> 00:11:37.800
很難知道哪些翻譯會被使用，哪些不會

00:11:37.800 --> 00:11:42.819
在執行時應用翻譯意味著我們要載入所有翻譯
字串

00:11:42.819 --> 00:11:46.419
即使它們沒有在你的應用程式中使用

00:11:46.310 --> 00:11:49.449
因為 Angular 會在建構時進行本地化

00:11:49.449 --> 00:11:52.680
所以我們只會包含應用中使用的字串

00:11:52.680 --> 00:11:55.550
當然，Angular 解決方案也有成本

00:11:55.550 --> 00:12:00.419
每當你的使用者選擇你的應用程式支援的
新語言環境時

00:12:00.419 --> 00:12:03.361
你都必須重新整理頁面才能看到翻譯

00:12:03.260 --> 00:12:06.020
現在，每種方法都有其權衡取捨

00:12:06.020 --> 00:12:11.255
Angular 的建構時間 i18n 針對負載和效能
進行了最佳化

00:12:11.150 --> 00:12:14.430
我們相信使用者不會過於頻繁地更改語言環境

00:12:14.430 --> 00:12:14.989
因此

00:12:14.989 --> 00:12:18.680
頁面重新載入一次是一個合理的權衡

00:12:18.680 --> 00:12:19.245
朋友們

00:12:19.245 --> 00:12:22.071
如果你確實需要在執行時載入你的翻譯

00:12:22.071 --> 00:12:25.220
有一種方法可以使用美元符號本地化來完成

00:12:25.220 --> 00:12:27.170
但這也是一次性的

00:12:27.170 --> 00:12:31.250
如果你有興趣，請看下面的文件連結

00:12:31.250 --> 00:12:33.290
好吧，朋友，這對我有用

00:12:33.290 --> 00:12:34.254
這很有趣

00:12:34.254 --> 00:12:38.430
我希望你今天和我們一起度過了愉快的時光

00:12:38.430 --> 00:12:39.920
這個範例專案

00:12:39.920 --> 00:12:43.817
指向官方 Angular 國際化指南的連結

00:12:43.817 --> 00:12:47.600
以及更多內容都在這個影片的描述中

00:12:47.600 --> 00:12:50.872
喜歡這個影片，如果還沒有訂閱就訂閱吧

00:12:50.872 --> 00:12:53.780
朋友們，下次再去構建出色的應用吧

00:12:53.780 --> 00:12:56.830
[音樂播放]
