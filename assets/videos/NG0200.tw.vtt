WEBVTT
Kind: subtitles
Language: zh-TW

00:00.240 --> 00:04.080
Circular dependency in DI detected.
當你遇到某個依賴其自身的依賴項時，就會出現本錯誤

00:04.080 --> 00:09.200
有時是直接依賴，但更常見的是間接依賴

00:09.200 --> 00:13.600
瀏覽器的控制檯中會丟擲一個執行時錯誤，告訴你哪個類受到了影響

00:13.600 --> 00:18.400
更有用的是，此警告會同時顯示在瀏覽器控制檯和命令列終端裡

00:18.400 --> 00:21.760
最重要的是，它提供了此迴圈依賴的依賴路徑

00:21.760 --> 00:26.960
仔細去看，它還會告訴我們，我們的一個 Storage 類注入了某個 User 類

00:26.960 --> 00:31.520
而這個 User 類本身又依賴原來那個 Storage 類
我們繼續前進，來看一個簡單的重現過程

00:31.520 --> 00:35.680
然後我們會花一些時間，來深入理解 Angular 的依賴注入體系

00:35.680 --> 00:40.480
仔細看原始碼，你會注意到我們有兩個服務，User 和 Storage

00:40.480 --> 00:45.600
問題在於 User 類在自己的建構函式中注入了一個 Storage 類

00:45.600 --> 00:49.840
而 Storage 類也在自己的建構函式中注入了一個 User 類
這導致它們陷入了一種不正常的“相互依賴”關係中

00:49.840 --> 00:54.800
此問題的解決方案是要打破這種依賴，因此要做某種重構

00:54.800 --> 00:59.440
讓某個 @Injectable 依賴另一個 @Injectable 固然是沒問題的

00:59.440 --> 01:04.640
但這種依賴關係只應該是單向的，這意味著我們需要重構

01:04.640 --> 01:10.400
以便從 Storage 中移除 User 服務
或者反過來，從 User 中移除 Storage 服務

01:10.400 --> 01:14.800
一般而言，最好將 @Injectable 服務中依賴項的數量最小化

01:14.800 --> 01:20.000
因為那樣也會減少將來出現類似問題的可能性
目前，我們的 Storage 類中有一個方法

01:20.000 --> 01:25.040
用來把此使用者寫入資料庫中，但是它依賴 User 服務，以獲取當前使用者的值

01:25.040 --> 01:30.480
我們可以透過重構程式碼來解決此問題：
改用引數接收此使用者的值，而不再注入完整的使用者類

01:30.480 --> 01:35.120
這不僅能讓我們從建構函式中移除此依賴項

01:35.120 --> 01:39.040
還能讓程式碼更便於進行單元測試，因為你不再

01:39.040 --> 01:44.320
需要 Mock 或關心一個額外的依賴項，該方法將只依賴其輸入引數

01:44.320 --> 01:49.600
這會讓測試更簡單。現在，我們儲存這些修改，此錯誤消失了

01:49.600 --> 01:54.480
但是在結束討論之前，我們先對 Angular 的依賴注入體系做一個深入研究

01:54.480 --> 01:59.280
以便理解為什麼會出現本錯誤
當你使用 Angular CLI 產生某個服務時，你會注意到

01:59.280 --> 02:04.000
該類帶有 @Injectable 裝飾器
當它帶有 \{ providedIn: 'root' \} 選項時

02:04.000 --> 02:07.840
Angular 就會例項化此類，並且讓他在整個應用中可見

02:08.400 --> 02:13.040
和元件不同，該類只會作為單例物件例項化一次

02:13.040 --> 02:17.760
那麼，如果有兩個類互相依賴，你要如何決定先例項化哪個呢？

02:17.760 --> 02:21.760
這是一個經典的先有雞還是先有蛋的悖論
並且，如果你要遵循依賴倒置原則，它也是不合理的

02:21.760 --> 02:26.960
讓我們簡要回顧一下。當你遇到了 DI 檢測到迴圈依賴的情況時

02:26.960 --> 02:31.600
第一步是透過元件和服務的建構函式來找出

02:31.600 --> 02:35.680
到底是哪些依賴項產生了迴圈依賴

02:35.680 --> 02:40.160
找出來之後，你可以重構程式碼以打破這種迴圈

02:40.160 --> 02:44.720
欲知詳情和範例，請閱讀Angular官方文件的“依賴注入”指南
