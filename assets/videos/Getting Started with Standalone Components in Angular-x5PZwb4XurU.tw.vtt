WEBVTT
Kind: subtitles
Language: zh-TW

00:00:00.682 --> 00:00:01.890
JESSICA JANIUK： 嘿，朋友們

00:00:01.890 --> 00:00:03.312
我是 Jessica

00:00:03.312 --> 00:00:07.906
今天我獨自站在這裡向你介紹
我們最新的功能

00:00:07.906 --> 00:00:09.109
即獨立元件

00:00:09.000 --> 00:00:22.520
[音樂播放] Angular 應用程式由元件組成

00:00:22.520 --> 00:00:23.690
直到現在

00:00:23.690 --> 00:00:31.230
開發人員都必須建立或更新現有的 ng 模組
才能使用新建立的元件

00:00:31.100 --> 00:00:38.821
Ng 模組用來指定哪些元件、指令和管道
可用於範本

00:00:38.660 --> 00:00:45.200
新的獨立 API 使編寫 Angular
元件、指令和管道

00:00:45.200 --> 00:00:48.606
而無需建立關聯的 ng 模組成為可能

00:00:48.470 --> 00:00:51.101
獨立元件是自包含的

00:00:51.101 --> 00:00:54.840
直接管理它們的範本依賴關係

00:00:54.840 --> 00:00:59.952
這使得 ng 模組對於許多實際的開發任務來
說是可選的

00:00:59.850 --> 00:01:04.540
重點從 ng 模組轉移到元件

00:01:04.540 --> 00:01:08.050
元件正在成為 Angular 的核心概念

00:01:08.050 --> 00:01:11.080
讓我們討論一下這種新方法的好處

00:01:11.080 --> 00:01:16.660
使 ng 模組可選減少了建立新元件的阻力

00:01:16.660 --> 00:01:19.135
只需編寫更少的程式碼

00:01:19.135 --> 00:01:21.870
開啟和修改的檔案更少

00:01:21.870 --> 00:01:24.630
但這不僅僅是語法更改

00:01:24.630 --> 00:01:29.310
我們減少了開發人員需要理解的概念數量

00:01:29.310 --> 00:01:33.960
這對於簡化 Angular 學習之旅至關重要

00:01:33.960 --> 00:01:35.691
最重要的是

00:01:35.691 --> 00:01:41.670
自包含元件可以自行打包、重用和延遲載入

00:01:41.670 --> 00:01:48.313
這讓以前很難甚至不可能實現的一系列
使用場景成為可能

00:01:48.180 --> 00:01:50.374
為了感受這些新的 API

00:01:50.374 --> 00:01:54.240
讓我們為本地愛狗社群建立一個應用程式

00:01:54.240 --> 00:01:58.890
它可以用來安排鄰居之間的互助遛狗

00:01:58.890 --> 00:02:02.890
此應用程式有一個列表和詳細資訊檢視

00:02:02.890 --> 00:02:07.259
讓我們從使用 Angular CLI 搭建我們的
應用程式開始

00:02:07.170 --> 00:02:10.830
我在終端視窗中使用 ng new 命令

00:02:10.830 --> 00:02:14.970
我們將在此範例中使用內聯範本和樣式

00:02:14.970 --> 00:02:17.790
這就是我們使用 --inline 標誌的原因

00:02:17.790 --> 00:02:19.184
我將新增路由

00:02:19.184 --> 00:02:22.080
以便我們可以在頁面之間導航

00:02:22.080 --> 00:02:25.540
常規 CSS 將適用於我們的範例應用程式

00:02:25.540 --> 00:02:27.490
我們還需要一些資料來顯示

00:02:27.490 --> 00:02:28.018
因此

00:02:28.018 --> 00:02:34.246
讓我們使用 ng generate 命令快速產生
一些帶有模擬資料的服務

00:02:34.140 --> 00:02:36.399
我切換到程式碼編輯器

00:02:36.399 --> 00:02:43.177
開啟產生的 dogs.service.ts 檔案並貼上
我之前準備的一些範例資料

00:02:43.070 --> 00:02:45.311
完成所有準備工作後

00:02:45.311 --> 00:02:48.260
我可以建立第一個獨立元件

00:02:48.260 --> 00:02:51.650
它將顯示可以呼吸新鮮空氣的狗的列表

00:02:51.650 --> 00:02:56.090
Angular CLI 將有助於快速建構元件程式碼

00:02:56.090 --> 00:02:56.784
請注意

00:02:56.784 --> 00:03:02.039
我將新的 --standalone 選項傳遞給 ng generate
原理圖

00:03:01.940 --> 00:03:04.340
大膽的選擇

00:03:04.340 --> 00:03:08.596
在我們產生的元件 DogsListComponent.ts 中

00:03:08.596 --> 00:03:12.852
元件裝飾器有一個名為 standalone 的新屬性

00:03:12.852 --> 00:03:14.473
其值設定為 true

00:03:14.270 --> 00:03:17.501
該元件現在是一個獨立元件了

00:03:17.501 --> 00:03:20.990
不需要在任何 ng 模組中宣告

00:03:20.990 --> 00:03:25.103
元件裝飾器中還有另一個名為 imports 的
屬性

00:03:25.103 --> 00:03:27.686
它有一個包含公共模組的陣列

00:03:27.590 --> 00:03:33.626
現在元件可以使用 ngIf、ngFor
和其他控制流指令

00:03:33.500 --> 00:03:37.685
dogs 列表元件將顯示來自 NOC 資料服務的
資料

00:03:37.685 --> 00:03:42.631
該資料服務注入到 DogsListComponent.ts
的建構函式中

00:03:42.440 --> 00:03:43.594
準備好資料後

00:03:43.594 --> 00:03:48.919
我們可以將一些基本的 HTML 新增到 component.html
並顯示資料

00:03:48.830 --> 00:03:52.430
稍後我們將改進此元件的外觀

00:03:52.430 --> 00:03:54.680
在測試我們的列表元件之前

00:03:54.680 --> 00:03:56.210
我們還需要最後一步

00:03:56.210 --> 00:03:59.900
更新路由器配置

00:03:59.900 --> 00:04:07.972
我在之前由 CLI 產生的 AppRoutingModule.ts
檔案中建立了一個新的路由條目

00:04:07.860 --> 00:04:08.692
接下來

00:04:08.692 --> 00:04:17.249
我們將使用路徑和元件屬性將我們的獨立元件
直接新增到路由器配置路由變數中

00:04:17.130 --> 00:04:19.819
我還設定了一個路由器重新導向

00:04:19.819 --> 00:04:22.110
以便預設顯示我們的列表

00:04:22.110 --> 00:04:22.603
此時

00:04:22.603 --> 00:04:26.748
我們將有一個由獨立元件渲染的工作列表頁面

00:04:26.650 --> 00:04:28.230
讓我們一起測試一下

00:04:28.230 --> 00:04:33.423
我將開啟一個終端並使用 ng serve 命令
啟動一個開發伺服器

00:04:33.330 --> 00:04:41.997
讓我們透過瀏覽器中的埠 4200 導航到
本地主機來確認一切都如預期般工作

00:04:41.870 --> 00:04:45.110
我們的列表渲染正常，但還不是很漂亮

00:04:45.110 --> 00:04:49.970
讓我們透過引入狗狗卡片元件來改進設計

00:04:49.970 --> 00:04:51.919
再次使用 Angular CLI

00:04:51.919 --> 00:04:57.953
我在終端中使用 ng generate component
命令搭建了一個新的獨立元件

00:04:57.860 --> 00:05:01.006
在 DogsListCardComponent.ts 中

00:05:01.006 --> 00:05:07.501
我將透過新增一些以前編寫的程式碼來更新
元件裝飾器的範本和樣式屬性

00:05:07.400 --> 00:05:17.040
狗的資訊將作為輸入傳遞到此元件中

00:05:17.040 --> 00:05:20.280
此時，我有兩個獨立的元件

00:05:20.280 --> 00:05:22.530
一張清單和一張卡片

00:05:22.530 --> 00:05:25.579
我怎麼能在列表中使用卡片呢？

00:05:25.579 --> 00:05:30.773
讓我切換回狗列表元件並匯入我們剛剛建立
的卡片

00:05:30.660 --> 00:05:35.757
匯入獨立元件使其在範本中可用

00:05:35.757 --> 00:05:42.260
並且可以透過其選擇器在元件範本中參考

00:05:42.260 --> 00:05:46.660
在這種情況下，app dogs list card

00:05:46.660 --> 00:05:49.175
請記住，在獨立元件之前

00:05:49.175 --> 00:05:56.264
你必須新增對 ng 模組的參考才能使元件
可用於應用程式的其他部分

00:05:56.150 --> 00:05:59.650
現在不再需要了

00:05:59.650 --> 00:06:03.730
獨立元件顯式管理它們自己的依賴項

00:06:03.730 --> 00:06:06.375
透過預期元件的匯入列表

00:06:06.375 --> 00:06:10.400
我們可以確切地知道範本中可用的內容

00:06:10.400 --> 00:06:14.020
這非常重要

00:06:14.020 --> 00:06:15.160
我們的清單完成了

00:06:15.160 --> 00:06:20.103
我現在將按照類似的編碼模式建立詳細資訊
檢視元件

00:06:20.000 --> 00:06:23.350
這是一個檢視

00:06:23.350 --> 00:06:24.403
在命令列中

00:06:24.403 --> 00:06:29.860
我將再次使用 --standalone 選項鍵入 ng generate component

00:06:29.860 --> 00:06:32.040
在狗狗檢視元件類中

00:06:32.040 --> 00:06:35.759
狗的 ID 將作為路由器引數傳入

00:06:35.759 --> 00:06:41.658
因此我需要在建構函式中注入啟用的路由和
狗狗服務

00:06:41.530 --> 00:06:48.418
設定對路由引數更改的訂閱將確保我們在
頁面之間導航時更新狗的資料

00:06:48.310 --> 00:06:51.120
要測試詳細資訊檢視

00:06:51.120 --> 00:07:02.658
我們需要將狗狗檢視元件新增到路由器配置並
從 ListComponentRoutes.ts 檔案連結到它

00:07:02.510 --> 00:07:03.022
然後

00:07:03.022 --> 00:07:06.400
我們需要從 dogs 列表元件連結到它

00:07:06.400 --> 00:07:15.717
我們將透過開啟 AppRoutingModule.ts
檔案並在路由陣列中新增新條目來更新路由器
配置

00:07:15.490 --> 00:07:17.399
有了新的路由條目

00:07:17.399 --> 00:07:23.013
我們現在可以開啟 dogs 列表元件檔案並
引入路由連結

00:07:22.900 --> 00:07:27.290
獨立元件顯式匯入其範本依賴項

00:07:27.290 --> 00:07:32.595
所以我們需要將路由器模組新增到元件匯入
列表中

00:07:32.480 --> 00:07:33.717
完成此步驟後

00:07:33.717 --> 00:07:38.665
我們可以使用路由器連結屬性新增到
詳細檢視元件的連結

00:07:38.570 --> 00:07:56.440
我們現在可以測試應用程式的全部功能

00:07:56.440 --> 00:07:59.460
在瀏覽器中，我可以開啟應用程式 URL

00:07:59.460 --> 00:08:00.970
仍然可以看到列表

00:08:00.970 --> 00:08:01.753
這很好

00:08:01.753 --> 00:08:08.462
但現在我還可以單擊“詳細資訊”連結並
導航到專用於給定狗的頁面

00:08:08.350 --> 00:08:08.861
至此

00:08:08.861 --> 00:08:13.972
我們知道了如何建立獨立元件並管理它們的
範本依賴項

00:08:13.870 --> 00:08:20.268
我們還成功地使用路由在獨立元件渲染的
頁面之間導航

00:08:20.140 --> 00:08:25.102
我現在想重點介紹獨立元件的主要好處之一

00:08:25.102 --> 00:08:27.010
即簡化延遲載入

00:08:27.010 --> 00:08:34.260
Angular 路由器中的新功能支援細粒度的
延遲載入和元件級別的程式碼拆分

00:08:34.150 --> 00:08:36.031
為了在實踐中示範它

00:08:36.031 --> 00:08:39.100
我們將延遲載入詳細資訊檢視元件

00:08:39.100 --> 00:08:44.575
讓我們導航到應用程式路由模組中的路由器
配置

00:08:44.575 --> 00:08:47.935
並更改狗狗檢視元件的路由條目

00:08:47.810 --> 00:08:49.881
我們需要，

00:08:49.881 --> 00:08:54.540
一、將元件屬性更改為載入元件

00:08:54.540 --> 00:08:59.160
二、將元件型別改為動態匯入

00:08:59.160 --> 00:09:04.470
三，刪除對元件型別的靜態匯入

00:09:04.470 --> 00:09:10.934
讓我們確認 dog view 元件程式碼在瀏覽器中
是延遲載入的

00:09:10.810 --> 00:09:12.511
在 Chrome DevTools 中

00:09:12.511 --> 00:09:13.670
開啟網路選項卡

00:09:13.670 --> 00:09:18.781
這樣我們就可以在採取行動時觀察延遲載入
的活動

00:09:18.670 --> 00:09:20.380
現在回到應用程式中

00:09:20.380 --> 00:09:22.090
單擊“詳細資訊”連結

00:09:22.090 --> 00:09:27.714
你會注意到狗狗檢視元件的程式碼在我們單擊時
立即下載並執行

00:09:27.610 --> 00:09:30.034
這表明程式碼載入被延遲

00:09:30.034 --> 00:09:32.920
並且僅在載入根目錄時發生

00:09:32.920 --> 00:09:36.926
這意味著應用程式可以更快地載入和引導

00:09:36.926 --> 00:09:40.066
因為這條路由不是主套件的一部分

00:09:40.066 --> 00:09:41.690
而是單獨載入的

00:09:41.690 --> 00:09:47.414
將應用程式中的路由切換到延遲載入模式只
用了幾秒鐘

00:09:47.300 --> 00:09:50.810
我們希望這能為開發人員帶來更好的體驗

00:09:50.810 --> 00:09:57.941
今天討論的所有新功能和 API 現在都可以
在 Angular 版本 14 中使用

00:09:57.830 --> 00:10:03.230
獨立元件與你現有的 Angular 應用程式
完全相容

00:10:03.110 --> 00:10:06.342
它們不會引入任何重大更改

00:10:06.342 --> 00:10:08.540
也不需要任何重寫

00:10:08.540 --> 00:10:09.655
在 v14 中

00:10:09.655 --> 00:10:13.670
我們釋出了獨立的 API 作為開發者預覽

00:10:13.670 --> 00:10:17.818
這意味著 API 是完整的、完善的

00:10:17.818 --> 00:10:20.250
可供你試驗和探索

00:10:20.250 --> 00:10:20.927
但是

00:10:20.927 --> 00:10:26.210
我們還沒有準備好將它們標記為穩定的 API

00:10:26.210 --> 00:10:29.330
如果我們從開發者社群得到反饋

00:10:29.330 --> 00:10:32.450
認為它們在某些使用案例中執行不佳

00:10:32.450 --> 00:10:35.140
我們希望能夠立即進行調整

00:10:35.140 --> 00:10:40.627
而無需等待穩定 API 的兩個主要版本的
定期棄用時間表

00:10:40.520 --> 00:10:46.650
使 ng 模組可選需要對整個 Angular 生態
系統進行調整

00:10:46.530 --> 00:10:49.319
我們今天釋出了核心功能

00:10:49.319 --> 00:10:52.350
但還有幾個後續專案在排隊

00:10:52.350 --> 00:10:57.971
我們將圍繞獨立元件不斷改進 API、工具和
文件

00:10:57.840 --> 00:11:02.220
目標是使開發人員的旅程儘可能順利

00:11:02.220 --> 00:11:06.745
我們非常希望你測試新的 API 並分享你的
反饋

00:11:06.640 --> 00:11:09.720
我們迫不及待地想聽聽你的新開發者體驗

00:11:09.720 --> 00:11:13.654
如果你有問題、功能請求或其他問題

00:11:13.654 --> 00:11:17.220
請開啟 GitHub 問題並告知我們

00:11:17.220 --> 00:11:23.294
範例專案和 Angular 文件的連結位於
該影片的說明中

00:11:23.170 --> 00:11:27.447
訂閱此頻道並在 Twitter 上關注我們以
獲取更多更新

00:11:27.360 --> 00:11:30.034
在你的 Angular 學習之旅中

00:11:30.034 --> 00:11:32.400
該影片肯定不是獨一份

00:11:32.400 --> 00:11:34.870
還有更多讓你享受

00:11:34.870 --> 00:11:36.780
謝謝各位的觀看

00:11:36.780 --> 00:11:39.480
嘿，長壽與繁榮，朋友們

00:11:39.480 --> 00:11:41.930
[音樂播放]
