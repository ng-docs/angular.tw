{"id":"start/start-data","title":"Managing data","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/start/start-data.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"managing-data\" translation-result=\"on\">管理資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Managing data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本章基於<a href=\"start\">以一個基本 Angular 應用快速上手</a>的第二步 —— <a href=\"start/start-routing\" title=\"Adding navigation\">新增導航</a>。在此開發階段，本商店應用具有一個包含兩個檢視的商品名錄：商品列表和商品詳情。使用者點選清單中的某個商品名稱，就會在新檢視中看到具有專門的 URL 或路由的詳情頁。</p><p translation-origin=\"off\">This guide builds on the second step of the <a href=\"start\">Getting started with a basic Angular application</a> tutorial, <a href=\"start/start-routing\" title=\"Adding navigation\">Adding navigation</a>.\nAt this stage of development, the store application has a product catalog with two views: a product list and product details.\nUsers can click on a product name from the list to see details in a new view, with a distinct URL, or route.</p>\n\n<p translation-result=\"on\">本頁將指導你分三個步驟建立購物車：</p><p translation-origin=\"off\">This step of the tutorial guides you through creating a shopping cart in the following phases:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">修改商品詳情檢視，讓它包含一個 “Buy” 按鈕，它會把當前商品新增到由 \"購物車服務\" 管理的商品列表中。</p><p translation-origin=\"off\">Update the product details view to include a <strong>Buy</strong> button, which adds the current product to a list of products that a cart service manages</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增一個購物車元件，它會顯示購物車中的商品。</p><p translation-origin=\"off\">Add a cart component, which displays the items in the cart</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增一個配送元件，它會使用 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 從 <code>.json</code> 檔案中檢索配送資料來取得購物車中這些商品的運費。</p><p translation-origin=\"off\">Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to retrieve shipping data from a <code>.json</code> file</p>\n\n</li>\n</ul>\n<p><a id=\"create-cart-service\"></a></p>\n<h2 id=\"create-the-shopping-cart-service\" translation-result=\"on\">建立購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the shopping cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中, 服務是類別的一個例項, 藉助 Angular 的<a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">依賴注入體系</a>，你可以在應用中的任意部分使用它。</p><p translation-origin=\"off\">In Angular, a service is an instance of a class that you can make available to any part of your application using Angular's <a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">dependency injection system</a>.</p>\n\n<p translation-result=\"on\">現在, 使用者可以瀏覽產品資訊，而應用可以模擬分享產品，以及發出產品變更通知。</p><p translation-origin=\"off\">Currently, users can view product information, and the application can simulate sharing and  notifications about product changes.</p>\n\n<p translation-result=\"on\">下一步是為使用者提供一種把產品新增到購物車中的方法。本章節將帶領你新增一個 <strong>Buy</strong> 按鈕並且建立一個購物車服務以儲存購物車中的產品資訊。</p><p translation-origin=\"off\">The next step is to build a way for users to add products to a cart.\nThis section walks you through adding a <strong>Buy</strong> button and setting up a cart service to store information about products in the cart.</p>\n\n<p><a id=\"generate-cart-service\"></a></p>\n<h3 id=\"define-a-cart-service\" translation-result=\"on\">定義購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Define a cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本節將引導你建立用於追蹤新增到購物車的產品的 <code>CartService</code>。</p><p translation-origin=\"off\">This section walks you through creating the <code>CartService</code> that tracks products added to shopping cart.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在終端中透過執行以下命令產生一個新的 <code>cart</code> 服務：</p><p translation-origin=\"off\">In the terminal generate a new <code>cart</code> service by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service cart\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">將 <code>Product</code> 介面從 <code>./products.ts</code> 匯入到 <code>cart.service.ts</code> 檔案中，在 <code>CartService</code> 類中，定義一個 <code>items</code> 屬性來儲存購物車中當前產品的陣列。</p><p translation-origin=\"off\">Import the <code>Product</code> interface from <code>./products.ts</code> into the <code>cart.service.ts</code> file, and in the <code>CartService</code> class, define an <code>items</code> property to store the array of the current products in the cart.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"props\">\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n/* . . . */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定義把商品新增到購物車、返回購物車商品以及清除購物車商品的方法。</p><p translation-origin=\"off\">Define methods to add items to the cart, return cart items, and clear the cart items.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"methods\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n/* . . . */\n\n  addToCart(product: Product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n/* . . . */\n}\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><code>addToCart()</code> 方法會將產品附加到 <code>items</code> 陣列中。</p><p translation-origin=\"off\">The <code>addToCart()</code> method appends a product to an array of <code>items</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>getItems()</code> 方法會收集使用者加到購物車中的商品，並返回每個商品及其數量。</p><p translation-origin=\"off\">The <code>getItems()</code> method collects the items users add to the cart and returns each item with its associated quantity</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>clearCart()</code> 方法返回一個空陣列。</p><p translation-origin=\"off\">The <code>clearCart()</code> method returns an empty array of items, which empties the cart</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"product-details-use-cart-service\"></a></p>\n<h3 id=\"use-the-cart-service\" translation-result=\"on\">使用購物車服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use the cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本節會教你使用 <code>CartService</code> 來把一個商品新增到購物車中。</p><p translation-origin=\"off\">This section walks you through using the <code>CartService</code> to add a product to the cart.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-details.component.ts</code> 中匯入購物車服務。</p><p translation-origin=\"off\">In <code>product-details.component.ts</code>, import the cart service.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { Product, products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">透過把購物車服務注入到這裡的 <code>constructor()</code> 中來注入它。</p><p translation-origin=\"off\">Inject the cart service by adding it to the <code>constructor()</code>.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定義 <code>addToCart()</code> 方法，該方法會當前商品新增到購物車中。</p><p translation-origin=\"off\">Define the <code>addToCart()</code> method, which adds the current product to the cart.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  addToCart(product: Product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>addToCart()</code> 方法做了如下事情:</p><p translation-origin=\"off\">The <code>addToCart()</code> method does the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">以當前'product'作為引數</p><p translation-origin=\"off\">Takes the current <code>product</code> as an argument</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>CartService</code> <code>addToCart()</code> 方法去新增產品到購物車中</p><p translation-origin=\"off\">Uses the <code>CartService</code> <code>addToCart()</code> method to add the product to the cart</p>\n\n</li>\n<li>\n<p translation-result=\"on\">顯示一條你已經添加了一個產品到購物車到訊息</p><p translation-origin=\"off\">Displays a message that you've added a product to the cart</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>product-details.component.html</code> 中，新增一個帶有 <strong>Buy</strong> 標籤的按鈕，並且把其 <code>click()</code> 事件繫結到 <code>addToCart()</code> 方法上。這段程式碼會為產品詳情範本新增一個 <strong>Buy</strong> 按鈕，並把當前產品新增到購物車中。</p><p translation-origin=\"off\">In <code>product-details.component.html</code>, add a button with the label <strong>Buy</strong>, and bind the <code>click()</code> event to the <code>addToCart()</code> method.\nThis code updates the product details template with a <strong>Buy</strong> button that adds the current product to the cart.</p>\n\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&lt;h2&gt;Product Details&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\"&gt;\n  &lt;h3&gt;{{ product.name }}&lt;/h3&gt;\n  &lt;h4&gt;{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/h4&gt;\n  &lt;p&gt;{{ product.description }}&lt;/p&gt;\n  &lt;button type=\"button\" (click)=\"addToCart(product)\"&gt;Buy&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">重新整理應用，以驗證新的 <strong>Buy</strong> 按鈕如預期般出現了，並且單擊某個產品的名稱，以展示其詳情。</p><p translation-origin=\"off\">Verify that the new <strong>Buy</strong> button appears as expected by refreshing the application and clicking on a product's name to display its details.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/product-details-buy.png\" width=\"259\" height=\"233\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">點選“Buy”按鈕來把該商品新增到購物車中儲存的商品列表中，並顯示一條確認訊息。</p><p translation-origin=\"off\">Click the <strong>Buy</strong> button to add the product to the stored list of items in the cart and display a confirmation message.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Display details for selected product with a Buy button\" src=\"generated/images/guide/start/buy-alert.png\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<h2 id=\"create-the-cart-view\" translation-result=\"on\">建立購物車檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the cart view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">為了讓顧客看到他們的購物車，你可以用兩步建立購物車檢視：</p><p translation-origin=\"off\">For customers to see their cart, you can create the cart view in two steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立一個購物車元件並配置指向這個新元件的路由。</p><p translation-origin=\"off\">Create a cart component and configure routing to the new component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">顯示購物車商品。</p><p translation-origin=\"off\">Display the cart items.</p>\n\n</li>\n</ol>\n<h3 id=\"set-up-the-cart-component\" translation-result=\"on\">設定該元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Set up the cart component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要建立購物車檢視，可遵循與建立 <code>ProductDetailsComponent</code> 相同的步驟，並且為這個新元件配置路由。</p><p translation-origin=\"off\"> To create the cart view, follow the same steps you did to create the <code>ProductDetailsComponent</code> and configure routing for the new component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">透過執行以下命令在終端中產生一個名為 <code>cart</code> 的新元件：</p><p translation-origin=\"off\">Generate a new component named <code>cart</code> in the terminal by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component cart\n\n</code-example>\n<p translation-result=\"on\">此命令將產生 <code>cart.component.ts</code> 檔案及其關聯的範本和樣式檔案。</p><p translation-origin=\"off\">This command will generate the <code>cart.component.ts</code> file and its associated template and styles files.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent {\n\n\n}\n\n\n</code-example>\n<p translation-result=\"on\">StackBlitz 還在元件中預設產生一個 <code>ngOnInit()</code>。對於本課程，你可以忽略 <code>CartComponent</code> 的 <code>ngOnInit()</code>。</p><p translation-origin=\"off\">StackBlitz also generates an <code>ngOnInit()</code> by default in components.\nYou can ignore the <code>CartComponent</code> <code>ngOnInit()</code> for this tutorial.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">請注意，新建立的 <code>CartComponent</code> 已新增到 <code>app.module.ts</code> 中模組的 <code>declarations</code> 中。</p><p translation-origin=\"off\">Notice that the newly created <code>CartComponent</code> is added to the module's <code>declarations</code> in <code>app.module.ts</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"declare-cart\">\nimport { CartComponent } from './cart/cart.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>app.module.ts</code>，為元件 <code>CartComponent</code> 新增一個路由，其路由為 <code>cart</code>。</p><p translation-origin=\"off\">Still in <code>app.module.ts</code>, add a route for the component <code>CartComponent</code>, with a <code>path</code> of <code>cart</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改 \"Checkout\" 按鈕，以便讓它路由到 <code>/cart</code>。在 <code>top-bar.component.html</code> 中新增一個指向 <code>/cart</code> 的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p><p translation-origin=\"off\">Update the <strong>Checkout</strong> button so that it routes to the <code>/cart</code> URL.\nIn <code>top-bar.component.html</code>, add a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive pointing to <code>/cart</code>.</p>\n\n<code-example header=\"src/app/top-bar/top-bar.component.html\" path=\"getting-started/src/app/top-bar/top-bar.component.html\" region=\"cart-route\">\n&lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/cart\" class=\"button fancy-button\"&gt;\n  &lt;i class=\"material-icons\"&gt;shopping_cart&lt;/i&gt;Checkout\n&lt;/a&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要檢視新的購物車元件，請點選“Checkout”按鈕。你會看到預設文字“cart works!”，該 URL 的格式為 <code>https://getting-started.stackblitz.io/cart</code>，其中的 getting-started.stackblitz.io 部分可能與你的 StackBlitz 專案不同。</p><p translation-origin=\"off\">Verify the new <code>CartComponent</code> works as expected by clicking the <strong>Checkout</strong> button.\nYou can see the \"cart works!\" default text, and the URL has the pattern <code>https://getting-started.stackblitz.io/cart</code>, where <code>getting-started.stackblitz.io</code> may be different for your StackBlitz project.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Display cart view before customizing\" src=\"generated/images/guide/start/cart-works.png\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<h3 id=\"display-the-cart-items\" translation-result=\"on\">顯示購物車商品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Display the cart items<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本節將告訴你如何修改購物車元件以使用購物車服務來顯示購物車中的商品。</p><p translation-origin=\"off\">This section shows you how to use the cart service to display the products in the cart.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>cart.component.ts</code> 中，從 <code>cart.service.ts</code> 檔案中匯入 <code>CartService</code>。</p><p translation-origin=\"off\">In <code>cart.component.ts</code>, import the <code>CartService</code> from the <code>cart.service.ts</code> file.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">注入 <code>CartService</code>，以便購物車元件可以使用它。</p><p translation-origin=\"off\">Inject the <code>CartService</code> so that the <code>CartComponent</code> can use it by adding it to the <code>constructor()</code>.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定義 <code>items</code> 屬性，以便把商品存放在購物車中。</p><p translation-origin=\"off\">Define the <code>items</code> property to store the products in the cart.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"items\">\nexport class CartComponent {\n\n  items = this.cartService.getItems();\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<p translation-result=\"on\">這段程式碼使用 <code>CartService</code> 的 <code>getItems()</code> 方法來設定條目。你以前在<a href=\"start/start-data#generate-cart-service\">建立 <code>cart.service.ts</code></a> 時定義過此方法。</p><p translation-origin=\"off\">This code sets the items using the <code>CartService</code> <code>getItems()</code> method.\nYou defined this method <a href=\"start/start-data#generate-cart-service\">when you created <code>cart.service.ts</code></a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改範本，加上標題，用帶有 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>&lt;div&gt;</code> 來顯示每個購物車商品的名字和價格。</p><p translation-origin=\"off\">Update the cart template with a header, and use a <code>&lt;div&gt;</code> with an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to display each of the cart items with its name and price.</p>\n\n<p translation-result=\"on\">產生的 <code>CartComponent</code> 範本如下：</p><p translation-origin=\"off\">The resulting <code>CartComponent</code> template is as follows.</p>\n\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">驗證你的購物車如預期般工作：</p><p translation-origin=\"off\">Verify that your cart works as expected:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">點選 <strong>My Store</strong>。</p><p translation-origin=\"off\">Click <strong>My Store</strong>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">單擊商品名稱以顯示其詳細資訊。</p><p translation-origin=\"off\">Click on a product name to display its details.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">點選<strong>Buy</strong> 將商品新增到購物車。</p><p translation-origin=\"off\">Click <strong>Buy</strong> to add the product to the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">點選<strong>Checkout</strong>檢視購物車。</p><p translation-origin=\"off\">Click <strong>Checkout</strong> to see the cart.</p>\n\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"Cart view with products added\" src=\"generated/images/guide/start/cart-page-full.png\" width=\"259\" height=\"238\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">要了解關於服務的更多資訊，請參閱<a href=\"guide/architecture-services\" title=\"概念>服務簡介和 DI\">“服務和依賴注入簡介”</a>。</p><p translation-origin=\"off\">For more information about services, see <a href=\"guide/architecture-services\" title=\"Concepts > Intro to Services and DI\">Introduction to Services and Dependency Injection</a>.</p>\n\n<h2 id=\"retrieve-shipping-prices\" translation-result=\"on\">檢索運費價格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Retrieve shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">伺服器通常採用流的形式返回資料。流是很有用的，因為它們可以很容易地轉換返回的資料，也可以修改你請求資料的方式。Angular 的 HTTP 客戶端（<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>）是一種內建的方式，可以從外部 API 中獲取資料，並以流的形式提供給你的應用。</p><p translation-origin=\"off\">Servers often return data in the form of a stream.\nStreams are useful because they make it easy to transform the returned data and make modifications to the way you request that data.\nAngular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is a built-in way to fetch data from external APIs and provide them to your application as a stream.</p>\n\n<p translation-result=\"on\">本節會為你展示如何使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 從外部檔案中檢索運費。</p><p translation-origin=\"off\">This section shows you how to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to retrieve shipping prices from an external file.</p>\n\n<p translation-result=\"on\">在本指南的 StackBlitz 應用中，透過 <code>assets/shipping.json</code> 檔案提供了一些預定義的配送資料。你可以利用這些資料為購物車中的商品新增運費。</p><p translation-origin=\"off\">The application that StackBlitz generates for this guide comes with predefined shipping data in <code>assets/shipping.json</code>.\nUse this data to add shipping prices for items in the cart.</p>\n\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"configure-appmodule-to-use-httpclient\" translation-result=\"on\">配置 <code>AppModule</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#配置-appmodule-以使用-httpclient\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configure <code>AppModule</code> to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-appmodule-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要使用 Angular 的 HTTP 客戶端之前，你必須先配置你的應用來使用 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p><p translation-origin=\"off\">To use Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you must configure your application to use <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.</p>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 中註冊了在整個應用中使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務的單個例項所需的服務提供者。</p><p translation-origin=\"off\">Angular's <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> registers the providers your application needs to use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service throughout your application.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 的頂部從 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件中匯入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 以及其它匯入項。由於有很多其它匯入項，因此這裡的程式碼片段省略它們，以保持簡潔。請確保現有的匯入都還在原地。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, import <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package at the top of the file with the other imports.\nAs there are a number of other imports, this code snippet omits them for brevity.\nBe sure to leave the existing imports in place.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 新增到 <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>imports</code> 陣列中，以便全域註冊 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">To register Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> providers globally, add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <code>imports</code> array.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-use-httpclient\" translation-result=\"on\">配置 <code>CartService</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#配置-cartservice-以使用-httpclient\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configure <code>CartService</code> to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下一步是注入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務到你的服務中, 這樣你的應用可以獲取資料並且與外部 API 和資源互動。</p><p translation-origin=\"off\">The next step is to inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service into your service so your application can fetch data and interact with external APIs and resources.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">從 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件中匯入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">In <code>cart.service.ts</code>, import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { Product } from './products';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到 <code>CartService</code> 的建構函式中。</p><p translation-origin=\"off\">Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the <code>CartService</code> <code>constructor()</code>.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"inject-http\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n  items: Product[] = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n/* . . . */\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-get-shipping-prices\" translation-result=\"on\">配置 <code>CartService</code> 以得到商品價格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configure <code>CartService</code> to get shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要從 <code>shipping.json</code> 中得到商品資料, 你可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> 方法。</p><p translation-origin=\"off\">To get shipping data, from <code>shipping.json</code>, You can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> method.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>cart.service.ts</code> 中 <code>clearCart()</code> 方法下面，定義一個新的 <code>getShippingPrices()</code> 方法，該方法會呼叫 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> 方法。</p><p translation-origin=\"off\">In <code>cart.service.ts</code>, below the <code>clearCart()</code> method, define a new <code>getShippingPrices()</code> method that uses the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> method.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n/* . . . */\n  getShippingPrices() {\n    return this.http.get&lt;{type: string, price: number}[]&gt;('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">要了解關於 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的更多資訊，請參閱<a href=\"guide/http\" title=\"HttpClient 指南\">客戶端-伺服器整合</a>指南。</p><p translation-origin=\"off\">For more information about Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, see the <a href=\"guide/http\" title=\"Server interaction through HTTP\">Client-Server Interaction</a> guide.</p>\n\n<h2 id=\"create-a-shipping-component\" translation-result=\"on\">建立配送元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create a shipping component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">現在你的應用已經可以檢索配送資料了，你還要建立一個配送元件和相關的範本。</p><p translation-origin=\"off\">Now that you've configured your application to retrieve shipping data, you can create a place to render that data.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在終端視窗中執行如下命令，以產生名為 <code>shipping</code> 的元件：</p><p translation-origin=\"off\">Generate a cart component named <code>shipping</code> in the terminal by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component shipping\n\n</code-example>\n<p translation-result=\"on\">該命令會產生 <code>shipping.component.ts</code> 檔案及其關聯的範本和樣式檔案。</p><p translation-origin=\"off\">This command will generate the <code>shipping.component.ts</code> file and it associated template and styles files.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\nexport class ShippingComponent {\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 中，新增一個配送路由。其 <code>path</code> 為 <code>shipping</code>，其 component 為 <code>ShippingComponent</code>。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, add a route for shipping.\nSpecify a <code>path</code> of <code>shipping</code> and a component of <code>ShippingComponent</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p translation-result=\"on\">新的配送元件尚未連結到任何其它元件，但你可以透過輸入其路由指定的 URL 在預覽窗格中看到它的範本。該 URL 具有以下模式：<code>https://angular-ynqttp--4200.local.webcontainer.io/shipping</code>，其 <code>angular-ynqttp--4200.local.webcontainer.io</code> 部分可能與你的 StackBlitz 專案有所不同。</p><p translation-origin=\"off\">There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies.\nThe URL has the pattern: <code>https://angular-ynqttp--4200.local.webcontainer.io/shipping</code> where the <code>angular-ynqttp--4200.local.webcontainer.io</code> part may be different for your StackBlitz project.</p>\n\n</li>\n</ol>\n<h3 id=\"configuring-the-shippingcomponent-to-use-cartservice\" translation-result=\"on\">配置 <code>ShippingComponent</code> 以使用 <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the <code>ShippingComponent</code> to use <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">這個章節將指導你修改 <code>ShippingComponent</code> 以透過 HTTP 從 <code>shipping.json</code> 檔案中提取商品資料。</p><p translation-origin=\"off\">This section guides you through modifying the <code>ShippingComponent</code> to retrieve shipping data via HTTP from the <code>shipping.json</code> file.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>shipping.component.ts</code> 中匯入 <code>CartService</code>。</p><p translation-origin=\"off\">In <code>shipping.component.ts</code>, import <code>CartService</code>.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把購物車服務注入到 <code>ShippingComponent</code> 的 <code>constructor()</code> 建構函式中。</p><p translation-origin=\"off\">Inject the cart service in the <code>ShippingComponent</code> <code>constructor()</code>.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(private cartService: CartService) { }\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定義一個 <code>shippingCosts</code> 屬性，並從 <code>CartService</code> 中利用購物車服務的 <code>getShippingPrices()</code> 方法設定它。在 <code>ngOnInit()</code> 方法內部初始化 <code>shippingCosts</code> 屬性。</p><p translation-origin=\"off\">Define a <code>shippingCosts</code> property that sets the <code>shippingCosts</code> property using the <code>getShippingPrices()</code> method from the <code>CartService</code>.\nInitialize the <code>shippingCosts</code> property inside <code>ngOnInit()</code> method.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  shippingCosts!: Observable&lt;{ type: string, price: number }[]&gt;;\n\n  ngOnInit(): void {\n    this.shippingCosts =  this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">利用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道修改配送元件的範本，以顯示配送型別和價格。</p><p translation-origin=\"off\">Update the <code>ShippingComponent</code> template to display the shipping types and prices using the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&lt;h3&gt;Shipping Prices&lt;/h3&gt;\n\n&lt;div class=\"shipping-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>\"&gt;\n  &lt;span&gt;{{ shipping.type }}&lt;/span&gt;\n  &lt;span&gt;{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道從資料流中返回最新值，並在所屬元件的生命期內持續返回。當 Angular 銷燬該元件時，<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道會自動停止。關於 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道的詳細資訊，請參閱 <a href=\"api/common/AsyncPipe\">AsyncPipe API 文件</a>。</p><p translation-origin=\"off\">The <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe returns the latest value from a stream of data and continues to do so for the life of a given component.\nWhen Angular destroys that component, the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe automatically stops.\nFor detailed information about the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe, see the <a href=\"api/common/AsyncPipe\">AsyncPipe API documentation</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在購物車檢視中新增一個到配送檢視的連結。</p><p translation-origin=\"off\">Add a link from the <code>CartComponent</code> view to the <code>ShippingComponent</code> view.</p>\n\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;p&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\"&gt;Shipping Prices&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;div class=\"cart-item\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">點選 <strong>Checkout</strong> 按鈕，檢視更新後的購物車。注意，修改本應用會導致預覽窗格重新整理，這會清空購物車。</p><p translation-origin=\"off\">Click the <strong>Checkout</strong> button to see the updated cart.\nRemember that changing the application causes the preview to refresh, which empties the cart.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Cart with link to shipping prices\" src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" width=\"301\" height=\"208\">\n</div>\n<p translation-result=\"on\">點選此連結可以導航到運費頁。</p><p translation-origin=\"off\">Click on the link to navigate to the shipping prices.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Display shipping prices\" src=\"generated/images/guide/start/shipping-prices.png\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">現在你有了一個帶有商品名錄和購物車的商店應用了，而且你還可以查詢運費。</p><p translation-origin=\"off\">You now have a store application with a product catalog, a shopping cart, and you can look up shipping prices.</p>\n\n<p translation-result=\"on\">要繼續探索 Angular，你可以：</p><p translation-origin=\"off\">To continue exploring Angular:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">繼續閱讀<a href=\"start/start-forms\" title=\"Forms for User Input\">表單與使用者輸入</a>部分，新增購物車檢視和結賬檢視，以完成本應用。</p><p translation-origin=\"off\">Continue to <a href=\"start/start-forms\" title=\"Forms for User Input\">Forms for User Input</a> to finish the application by adding the shopping cart view and a checkout form</p>\n\n</li>\n<li>\n<p translation-result=\"on\">跳到<a href=\"start/start-deployment\" title=\"Deployment\">部署</a>部分來轉為本地開發，或者把你的應用部署到 Firebase 或你自己的伺服器上。</p><p translation-origin=\"off\">Skip ahead to <a href=\"start/start-deployment\" title=\"Deployment\">Deployment</a> to move to local development, or deploy your application to Firebase or your own server</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/localizing-angular\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/http\n - start\n - start/start-data#configure-appmodule-to-use-httpclient\n - start/start-data#configure-cartservice-to-get-shipping-prices\n - start/start-data#configure-cartservice-to-use-httpclient\n - start/start-data#configuring-the-shippingcomponent-to-use-cartservice\n - start/start-data#create-a-shipping-component\n - start/start-data#create-the-cart-view\n - start/start-data#create-the-shopping-cart-service\n - start/start-data#define-a-cart-service\n - start/start-data#display-the-cart-items\n - start/start-data#generate-cart-service\n - start/start-data#managing-data\n - start/start-data#retrieve-shipping-prices\n - start/start-data#set-up-the-cart-component\n - start/start-data#use-the-cart-service\n - start/start-data#whats-next\n - start/start-data#下一步呢\n - start/start-data#使用購物車服務\n - start/start-data#建立購物車服務\n - start/start-data#建立購物車檢視\n - start/start-data#建立配送元件\n - start/start-data#定義購物車服務\n - start/start-data#顯示購物車商品\n - start/start-data#檢索運費價格\n - start/start-data#管理資料\n - start/start-data#設定該元件\n - start/start-data#配置-appmodule-以使用-httpclient\n - start/start-data#配置-cartservice-以使用-httpclient\n - start/start-data#配置-cartservice-以得到商品價格\n - start/start-data#配置-shippingcomponent-以使用-cartservice\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/start/start-data.md?message=docs%3A%20請簡述你的修改...\n-->"}