{"id":"start","title":"Getting started with Angular","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/start/index.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"getting-started-with-angular\" translation-result=\"on\">Angular 入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#getting-started-with-angular\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Getting started with Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#getting-started-with-angular\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 歡迎你！</p><p translation-origin=\"off\">Welcome to Angular!</p>\n\n<p translation-result=\"on\">本課程將透過建構一個電子商務網站，向你介紹 Angular 的基本知識。該網站具有商品名錄、購物車和結賬表單。</p><p translation-origin=\"off\">This tutorial introduces you to the essentials of Angular by walking you through building an e-commerce site with a catalog, shopping cart, and check-out form.</p>\n\n<p translation-result=\"on\">為了幫助你更好地起步，本課程提供了一個已完成的應用，你可以在 <a href=\"https://stackblitz.com\">Stackblitz</a> 上試驗及互動，而不用<a href=\"guide/setup-local\" title=\"Setup guide\">建立本地開發環境</a>。StackBlitz 是一個基於瀏覽器的開發環境，你可以在其中使用各種技術來建立、儲存和共享專案。</p><p translation-origin=\"off\">To help you get started right away, this tutorial uses a ready-made application that you can examine and modify interactively on <a href=\"https://stackblitz.com\">StackBlitz</a> —without having to <a href=\"guide/setup-local\" title=\"Setup guide\">set up a local work environment</a>.\nStackBlitz is a browser-based development environment where you can create, save, and share projects using a variety of technologies.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">為了充分利用本課程，你應該已經對以下內容有基本的瞭解。</p><p translation-origin=\"off\">To get the most out of this tutorial, you should already have a basic understanding of the following.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/docs/Learn/HTML\" title=\"學習 HTML：指南和課程\">HTML</a></p><p translation-origin=\"off\"><a href=\"https://developer.mozilla.org/docs/Learn/HTML\" title=\"Learning HTML: Guides and tutorials\">HTML</a></p>\n\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript\" title=\"JavaScript\">JavaScript</a></p>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 語言\">TypeScript</a></p><p translation-origin=\"off\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a></p>\n\n</li>\n</ul>\n<p><a id=\"components\"></a></p>\n<h2 id=\"take-a-tour-of-the-example-application\" translation-result=\"on\">瀏覽範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#take-a-tour-of-the-example-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Take a tour of the example application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#take-a-tour-of-the-example-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以用元件建構 Angular 應用。元件定義了 UI 中的職責範圍，讓你可以複用某些 UI 功能集。</p><p translation-origin=\"off\">You build Angular applications with components.\nComponents define areas of responsibility in the UI that let you reuse sets of UI functionality.</p>\n\n<p translation-result=\"on\">一個元件由三部分組成：</p><p translation-origin=\"off\">A component consists of three things:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">部分</nt-wrapper><nt-wrapper translation-origin=\"off\">Component Part</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件類</nt-wrapper><nt-wrapper translation-origin=\"off\">A component class</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">處理資料和功能。</nt-wrapper><nt-wrapper translation-origin=\"off\">Handles data and functionality</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">HTML 範本</nt-wrapper><nt-wrapper translation-origin=\"off\">An HTML template</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">決定 UI。</nt-wrapper><nt-wrapper translation-origin=\"off\">Determines the UI</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件專屬樣式</nt-wrapper><nt-wrapper translation-origin=\"off\">Component-specific styles</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義外觀和感覺。</nt-wrapper><nt-wrapper translation-origin=\"off\">Define the look and feel</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">本指南示範瞭如何使用下列元件建構應用：</p><p translation-origin=\"off\">This guide demonstrates building an application with the following components:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">元件</nt-wrapper><nt-wrapper translation-origin=\"off\">Components</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>&lt;app-root&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">第一個載入的元件，並且是其他元件的容器。</nt-wrapper><nt-wrapper translation-origin=\"off\">The first component to load and the container for the other components</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-top-bar&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">商店名稱和結帳按鈕。</nt-wrapper><nt-wrapper translation-origin=\"off\">The store name and checkout button</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-product-list&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">產品列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">The product list</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>&lt;app-product-alerts&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含應用中各種通知的元件。</nt-wrapper><nt-wrapper translation-origin=\"off\">A component that contains the application's alerts</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"lightbox\">\n<img alt=\"Online store with three components\" src=\"generated/images/guide/start/app-components.png\" width=\"324\" height=\"527\">\n</div>\n<p translation-result=\"on\">有關元件的更多資訊，請參見<a href=\"guide/architecture-components\" title=\"元件和範本簡介\">元件簡介</a>。</p><p translation-origin=\"off\">For more information about components, see <a href=\"guide/architecture-components\" title=\"Introduction to Components and Templates\">Introduction to Components</a>.</p>\n\n<p><a id=\"new-project\"></a></p>\n<h2 id=\"create-the-sample-project\" translation-result=\"on\">建立範例專案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the sample project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-sample-project\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要建立範例專案，請<live-example name=\"getting-started-v0\" nodownload=\"\">在 StackBlitz 中產生一個預置的範例專案</live-example>。要儲存你的工作，請執行以下操作：</p><p translation-origin=\"off\">To create the sample project, generate the <live-example name=\"getting-started-v0\" nodownload=\"\">ready-made sample project in StackBlitz</live-example>.\nTo save your work:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">登入到 StackBlitz。</p><p translation-origin=\"off\">Log into StackBlitz.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對你產生的專案進行分支。</p><p translation-origin=\"off\">Fork the project you generated.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定時儲存。</p><p translation-origin=\"off\">Save periodically.</p>\n\n</li>\n</ol>\n<div class=\"lightbox\">\n<img alt=\"Fork the project\" src=\"generated/images/guide/start/fork-the-project.png\" width=\"200\" height=\"118\">\n</div>\n<p translation-result=\"on\">在 StackBlitz 中，右側的預覽窗格會顯示範例應用的啟動狀態。此預覽有兩個區域：</p><p translation-origin=\"off\">In StackBlitz, the preview pane on the right shows the starting state of the example application.\nThe preview features two areas:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">帶有商店名稱（<code>My Store</code>）和結賬按鈕的頂部欄</p><p translation-origin=\"off\">A top bar with the store name, <code>My Store</code>, and a checkout button</p>\n\n</li>\n<li>\n<p translation-result=\"on\">產品列表（<code>Products</code>）及其標題</p><p translation-origin=\"off\">A header for a product list, <code>Products</code></p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Starter online store application\" src=\"generated/images/guide/start/new-app-all.gif\" width=\"600\" height=\"219\">\n</div>\n<p translation-result=\"on\">左側的專案區顯示了構成本應用的原始檔，包括基礎結構和配置檔案。</p><p translation-origin=\"off\">The project section on the left shows the source files that make up the application, including the infrastructure and configuration files.</p>\n\n<p translation-result=\"on\">當你產生本課程隨附的 StackBlitz 範例應用時，StackBlitz 會為你建立啟動程式檔案和模擬資料。本課程中用到的檔案位於 <code>src</code> 資料夾中。</p><p translation-origin=\"off\">When you generate the StackBlitz example applications that accompany the tutorials, StackBlitz creates the starter files and mock data for you.\nThe files you use throughout the tutorial are in the <code>src</code> folder.</p>\n\n<p translation-result=\"on\">有關如何使用 StackBlitz 的更多資訊，請參見 <a href=\"https://developer.stackblitz.com/docs/platform\">StackBlitz 的文件</a>。</p><p translation-origin=\"off\">For more information on how to use StackBlitz, see the <a href=\"https://developer.stackblitz.com/docs/platform\">StackBlitz documentation</a>.</p>\n\n<p><a id=\"product-list\"></a></p>\n<h2 id=\"create-the-product-list\" translation-result=\"on\">建立產品列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-product-list\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the product list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#create-the-product-list\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本節中，你將修改應用以顯示產品列表。你會用到來自 <code>products.ts</code> 檔案的預定義產品資料，和一些來自 <code>product-list.component.ts</code> 檔案的方法。本節將指導你完成編輯 HTML（也稱為範本）的過程。</p><p translation-origin=\"off\">In this section, you'll update the application to display a list of products.\nYou'll use predefined product data from the <code>products.ts</code> file and methods from the <code>product-list.component.ts</code> file.\nThis section guides you through editing the HTML, also known as the template.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-list</code> 資料夾中，開啟範本檔案 <code>product-list.component.html</code>。</p><p translation-origin=\"off\">In the <code>product-list</code> folder, open the template file <code>product-list.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>&lt;div&gt;</code> 上新增一個結構型指令 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，如下所示。</p><p translation-origin=\"off\">Add an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> structural directive on a <code>&lt;div&gt;</code>, as follows.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"ngfor\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，會把這個 <code>&lt;div&gt;</code> 針對列表中的每個產品進行復寫。</p><p translation-origin=\"off\">With <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, the <code>&lt;div&gt;</code> repeats for each product in the list.</p>\n\n<p translation-result=\"on\">結構型指令會透過新增、刪除和操作元素來調整或重塑 DOM 結構。有關結構型指令的更多資訊，請參見<a href=\"guide/structural-directives\">結構型指令</a>。</p><p translation-origin=\"off\">Structural directives shape or reshape the DOM's structure, by adding, removing, and manipulating elements.\nFor more information about structural directives, see <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在此 <code>&lt;div&gt;</code> 中，新增 <code>&lt;h3&gt;</code> 和 <code>{{ product.name }}</code>。<code>{{ product.name }}</code> 陳述式是 Angular 插值語法的範例。插值 <code>{{ }}</code> 可以讓你把屬性值渲染為文字。</p><p translation-origin=\"off\">Inside the <code>&lt;div&gt;</code>, add an <code>&lt;h3&gt;</code> and <code>{{ product.name }}</code>.\nThe <code>{{ product.name }}</code> statement is an example of Angular's interpolation syntax.\nInterpolation <code>{{ }}</code> lets you render the property value as text.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"interpolation\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n      {{ product.name }}\n  &lt;/h3&gt;\n\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">預覽窗格將會更新，以顯示列表中每個商品的名稱。</p><p translation-origin=\"off\">The preview pane updates to display the name of each product in the list.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product names added to list\" src=\"generated/images/guide/start/template-syntax-product-names.png\" width=\"259\" height=\"271\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">為了讓每個商品名稱都能連結到商品詳情，請圍繞 <code>{{ product.name }}</code> 新增一個 <code>&lt;a&gt;</code> 元素。</p><p translation-origin=\"off\">To make each product name a link to product details, add the <code>&lt;a&gt;</code> element around <code>{{ product.name }}</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>[ ]</code> 語法將標題設定為此產品的名稱，如下所示：</p><p translation-origin=\"off\">Set the title to be the product's name by using the property binding <code>[ ]</code> syntax, as follows:</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">在預覽窗格中，將滑鼠懸停在產品名稱上，可以檢視所繫結的 name 屬性值，該值是產品名加上單詞 “details”。透過屬性繫結 <code>[ ]</code> 可以在範本表示式中使用屬性值。</p><p translation-origin=\"off\">In the preview pane, hover over a product name to see the bound name property value, which is the product name plus the word \"details\".\nProperty binding <code>[ ]</code> lets you use the property value in a template expression.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product name anchor text is product name property\" src=\"generated/images/guide/start/template-syntax-product-anchor.png\" width=\"259\" height=\"271\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">新增產品說明。在 <code>&lt;p&gt;</code> 元素上使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，以便 Angular 只讓當前產品有描述 <code>&lt;p&gt;</code>。</p><p translation-origin=\"off\">Add the product descriptions.\nOn a <code>&lt;p&gt;</code> element, use an <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive so that Angular only creates the <code>&lt;p&gt;</code> element if the current product has a description.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.3.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n  &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\"&gt;\n    Description: {{ product.description }}\n  &lt;/p&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">現在，該應用將在列表中顯示每個產品的名稱和描述。請注意，最後一項產品沒有描述段落。Angular 不會建立 <code>&lt;p&gt;</code> 元素，因為此產品的 description 屬性為空。</p><p translation-origin=\"off\">The application now displays the name and description of each product in the list.\nNotice that the final product does not have a description paragraph.\nAngular doesn't create the <code>&lt;p&gt;</code> element because the product's description property is empty.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product descriptions added to list\" src=\"generated/images/guide/start/template-syntax-product-description.png\" width=\"259\" height=\"289\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">新增一個按鈕，以便使用者可以共享產品。將按鈕的 <code>click</code> 事件繫結到 <code>product-list.component.ts</code> 中的 <code>share()</code> 方法。事件繫結要在此事件用一組圓括號 <code>( )</code> 括起來，就比如 <code>&lt;button&gt;</code> 元素上的 <code>(click)</code>。</p><p translation-origin=\"off\">Add a button so users can share a product.\nBind the button's <code>click</code> event to the <code>share()</code> method in <code>product-list.component.ts</code>.\nEvent binding uses a set of parentheses, <code>( )</code>, around the event, as in the <code>(click)</code> event on the  <code>&lt;button&gt;</code> element.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.4.html\">\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let product of products\"&gt;\n\n  &lt;h3&gt;\n    &lt;a [title]=\"product.name + ' details'\"&gt;\n      {{ product.name }}\n    &lt;/a&gt;\n  &lt;/h3&gt;\n\n  &lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\"&gt;\n    Description: {{ product.description }}\n  &lt;/p&gt;\n\n  &lt;button type=\"button\" (click)=\"share()\"&gt;\n    Share\n  &lt;/button&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">每個產品現在都有一個 “<strong>Share</strong>” 按鈕。</p><p translation-origin=\"off\">Each product now has a <strong>Share</strong> button.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Share button added for each product\" src=\"generated/images/guide/start/template-syntax-product-share-button.png\" width=\"259\" height=\"376\">\n</div>\n<p translation-result=\"on\">單擊 “<strong>Share</strong>” 按鈕將觸發一條通知，指出 “The product has been shared!”。</p><p translation-origin=\"off\">Clicking the <strong>Share</strong> button triggers an alert that states, \"The product has been shared!\".</p>\n\n<div class=\"lightbox\">\n<img alt=\"Alert box indicating product has been shared\" src=\"generated/images/guide/start/template-syntax-product-share-alert.png\" width=\"330\" height=\"104\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">在編輯範本時，你已經瞭解了 Angular 範本的一些最常用的功能。更多資訊，請參閱<a href=\"guide/architecture-components#template-syntax\" title=\"範本語法\">元件和範本簡介</a>。</p><p translation-origin=\"off\">In editing the template, you have explored some of the most popular features of Angular templates.\nFor more information, see <a href=\"guide/architecture-components#template-syntax\" title=\"Template Syntax\">Introduction to components and templates</a>.</p>\n\n<p><a id=\"passing-data-in\"></a></p>\n<h2 id=\"pass-data-to-a-child-component\" translation-result=\"on\">將資料傳遞給子元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Pass data to a child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">目前，產品列表中顯示了每個產品的名稱和描述。<code>ProductListComponent</code> 還定義了一個 <code>products</code> 屬性，包含從 <code>products.ts</code> 的 <code>products</code> 陣列匯入的各個產品的資料。</p><p translation-origin=\"off\">Currently, the product list displays the name and description of each product.\nThe <code>ProductListComponent</code> also defines a <code>products</code> property that contains imported data for each product from the <code>products</code> array in <code>products.ts</code>.</p>\n\n<p translation-result=\"on\">下一步是建立一個新的通知功能，該功能會使用來自 <code>ProductListComponent</code> 的產品資料。通知會檢查產品的價格，如果價格大於 700 美元，則會顯示 <strong>Notify Me</strong> 按鈕，當產品上市銷售時，使用者可以透過該按鈕註冊通知。</p><p translation-origin=\"off\">The next step is to create a new alert feature that uses product data from the <code>ProductListComponent</code>.\nThe alert checks the product's price, and, if the price is greater than $700, displays a <strong>Notify Me</strong> button that lets users sign up for notifications when the product goes on sale.</p>\n\n<p translation-result=\"on\">本節將引導你建立一個子元件 <code>ProductAlertsComponent</code>，該子元件可以從其父元件 <code>ProductListComponent</code> 接收資料。</p><p translation-origin=\"off\">This section walks you through creating a child component, <code>ProductAlertsComponent</code>, that can receive data from its parent component, <code>ProductListComponent</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">點選當前終端上方的加號，新建一個終端，執行命令產生元件。</p><p translation-origin=\"off\">Click on the plus sign above the current terminal to create a new terminal to run the command to generate the component.</p>\n\n<div class=\"lightbox\">\n<img alt=\"StackBlitz command to generate component\" src=\"generated/images/guide/start/create-new-terminal.png\" width=\"620\" height=\"204\">\n</div>\n</li>\n<li>\n<p translation-result=\"on\">在新終端中，透過執行以下命令產生一個名為 <code>product-alerts</code> 的新元件：</p><p translation-origin=\"off\">In the new terminal, generate a new component named <code>product-alerts</code> by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\n`ng generate component product-alerts`\n\n</code-example>\n<p translation-result=\"on\">該產生器會為元件的三個部分建立初始檔案：</p><p translation-origin=\"off\">The generator creates starter files for the three parts of the component:</p>\n\n<ul>\n<li>\n<p><code>product-alerts.component.ts</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.html</code></p>\n</li>\n<li>\n<p><code>product-alerts.component.css</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>product-alerts.component.ts</code>。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器會指出它後面的類是元件。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 還會提供有關元件的元資料，包括其選擇器、範本和樣式。</p><p translation-origin=\"off\">Open <code>product-alerts.component.ts</code>.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator indicates that the following class is a component.\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> also provides metadata about the component, including its selector, templates, and styles.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"as-generated\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-product-alerts',\n  templateUrl: './product-alerts.component.html',\n  styleUrls: ['./product-alerts.component.css']\n})\nexport class ProductAlertsComponent {\n\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 中的主要功能如下：</p><p translation-origin=\"off\">Key features in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> are as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>selector</code>（<code>app-product-alerts</code>）用於標識元件。按照慣例，Angular 元件選擇器以字首 <code>app-</code> 開頭，後跟元件名稱。</p><p translation-origin=\"off\">The <code>selector</code>, <code>app-product-alerts</code>, identifies the component.\nBy convention, Angular component selectors begin with the prefix <code>app-</code>, followed by the component name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">範本和樣式檔名參考了元件的 HTML 和 CSS。</p><p translation-origin=\"off\">The template and style filenames reference the component's HTML and CSS</p>\n\n</li>\n<li>\n<p translation-result=\"on\">這個 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 定義還匯出了類 <code>ProductAlertsComponent</code>，該類會處理元件的功能。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> definition also exports the class, <code>ProductAlertsComponent</code>, which handles functionality for the component</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">要將 <code>ProductAlertsComponent</code> 設定為接收產品資料，請首先從 <code>@angular/core</code> 中匯入符號 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">To set up <code>ProductAlertsComponent</code> to receive product data, first import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Product } from '../products';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ProductAlertsComponent</code> 類定義中，使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器定義一個名為 <code>product</code> 的屬性。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器指出此屬性值要從本元件的父元件 <code>ProductListComponent</code> 中傳入。</p><p translation-origin=\"off\">In the <code>ProductAlertsComponent</code> class definition, define a property named <code>product</code> with an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator.\nThe <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator indicates that the property value passes in from the component's parent, <code>ProductListComponent</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"input-decorator\">\nexport class ProductAlertsComponent {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product: Product | undefined;\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>product-alerts.component.html</code> 並將佔位符段落替換為 <strong>Notify Me</strong> 按鈕，如果產品價格超過 700 美元，就會出現此按鈕。</p><p translation-origin=\"off\">Open <code>product-alerts.component.html</code> and replace the placeholder paragraph with a <strong>Notify Me</strong> button that appears if the product price is over $700.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.html\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product &amp;&amp; product.price &gt; 700\"&gt;\n  &lt;button type=\"button\"&gt;Notify Me&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">產生器會自動把 <code>ProductAlertsComponent</code> 新增到 <code>AppModule</code> 中，以便它能用於本應用的其它元件中。</p><p translation-origin=\"off\">The generator automatically added the <code>ProductAlertsComponent</code> to the <code>AppModule</code> to make it available to other components in the application.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"declare-product-alerts\">\nimport { ProductAlertsComponent } from './product-alerts/product-alerts.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n  ],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">最後，要將 <code>ProductAlertsComponent</code> 顯示為 <code>ProductListComponent</code> 的子級，請將 <code>&lt;app-product-alerts&gt;</code> 元素新增到 <code>product-list.component.html</code> 中。使用屬性繫結將當前產品作為輸入傳給此元件。</p><p translation-origin=\"off\">Finally, to display <code>ProductAlertsComponent</code> as a child of <code>ProductListComponent</code>, add the <code>&lt;app-product-alerts&gt;</code> element to <code>product-list.component.html</code>.\nPass the current product as input to the component using property binding.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.5.html\" region=\"app-product-alerts\">\n&lt;button type=\"button\" (click)=\"share()\"&gt;\n  Share\n&lt;/button&gt;\n\n&lt;app-product-alerts\n  [product]=\"product\"&gt;\n&lt;/app-product-alerts&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">這個新的產品通知元件將產品作為產品列表中的輸入。使用該輸入，它將根據產品的價格顯示或隱藏 <strong>Notify Me</strong> 按鈕。Phone XL 的價格超過了 700 美元，因此該產品上會顯示 <strong>Notify Me</strong> 按鈕。</p><p translation-origin=\"off\">The new product alert component takes a product as input from the product list.\nWith that input, it shows or hides the <strong>Notify Me</strong> button, based on the price of the product.\nThe Phone XL price is over $700, so the <strong>Notify Me</strong> button appears on that product.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product alert button added to products over $700\" src=\"generated/images/guide/start/product-alert-button.png\" width=\"259\" height=\"406\">\n</div>\n<p><a id=\"output\"></a></p>\n<h2 id=\"pass-data-to-a-parent-component\" translation-result=\"on\">將資料傳遞到父元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Pass data to a parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#pass-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">為了使 <strong>Notify Me</strong> 按鈕起作用，子元件需要通知並將資料傳遞給父元件。當用戶單擊 <strong>Notify Me</strong> 時 <code>ProductAlertsComponent</code> 需要引發一個事件，並且 <code>ProductListComponent</code> 需要響應此事件。</p><p translation-origin=\"off\">To make the <strong>Notify Me</strong> button work, the child component needs to notify and pass the data to the parent component.\nThe <code>ProductAlertsComponent</code> needs to emit an event when the user clicks <strong>Notify Me</strong> and the <code>ProductListComponent</code> needs to respond to the event.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在新建元件時，Angular 產生器會包含一個空的 <code>constructor()</code>、<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 介面和 <code>ngOnInit()</code> 方法。由於這些步驟不會使用它們，下列範例程式碼中都省略了它們，以求簡潔。</p><p translation-origin=\"off\">In new components, the Angular Generator includes an empty <code>constructor()</code>, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface, and the <code>ngOnInit()</code> method.\nSince these steps don't use them, the following code examples omit them for brevity.</p>\n\n</div>\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-alerts.component.ts</code> 中，從 <code>@angular/core</code> 匯入符號 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>。</p><p translation-origin=\"off\">In <code>product-alerts.component.ts</code>, import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> from <code>@angular/core</code>.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\nimport { Product } from '../products';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在元件類中，使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 裝飾器和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code> 的例項定義一個名為 <code>notify</code> 的屬性。使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 配置 <code>ProductAlertsComponent</code>，這會讓 <code>ProductAlertsComponent</code> 在 <code>notify</code> 屬性的值發生變化時引發一個事件。</p><p translation-origin=\"off\">In the component class, define a property named <code>notify</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator and an instance of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code>.\nConfiguring <code>ProductAlertsComponent</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allows the <code>ProductAlertsComponent</code> to emit an event when the value of the <code>notify</code> property changes.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"input-output\">\nexport class ProductAlertsComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product: Product | undefined;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() notify = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>product-alerts.component.html</code> 中，修改 <strong>Notify Me</strong> 按鈕，增加事件繫結，並呼叫 <code>notify.emit()</code> 方法。</p><p translation-origin=\"off\">In <code>product-alerts.component.html</code>, update the <strong>Notify Me</strong> button with an event binding to call the <code>notify.emit()</code> method.</p>\n\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.html\">\n&lt;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product &amp;&amp; product.price &gt; 700\"&gt;\n  &lt;button type=\"button\" (click)=\"notify.emit()\"&gt;Notify Me&lt;/button&gt;\n&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定義使用者單擊按鈕時發生的行為。當子元件引發事件時，父元件 <code>ProductListComponent</code>（而不是 <code>ProductAlertsComponent</code>）會採取行動。在 <code>product-list.component.ts</code> 中，定義一個 <code>onNotify()</code> 方法，類似於 <code>share()</code> 方法。</p><p translation-origin=\"off\">Define the behavior that happens when the user clicks the button.\nThe parent, <code>ProductListComponent</code> —not the <code>ProductAlertsComponent</code>— acts when the child raises the event.\nIn  <code>product-list.component.ts</code>, define an <code>onNotify()</code> method, similar to the <code>share()</code> method.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.ts\" path=\"getting-started/src/app/product-list/product-list.component.ts\" region=\"on-notify\">\nexport class ProductListComponent {\n\n  products = [...products];\n\n  share() {\n    window.alert('The product has been shared!');\n  }\n\n  onNotify() {\n    window.alert('You will be notified when the product goes on sale');\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">更新 <code>ProductListComponent</code>，以從 <code>ProductAlertsComponent</code> 中接收資料。</p><p translation-origin=\"off\">Update the <code>ProductListComponent</code> to receive data from the <code>ProductAlertsComponent</code>.</p>\n\n<p translation-result=\"on\">在 <code>product-list.component.html</code> 中，將 <code>&lt;app-product-alerts&gt;</code> 繫結到產品列表元件的 <code>onNotify()</code> 方法。<code>&lt;app-product-alerts&gt;</code> 會顯示 <strong>Notify Me</strong> 按鈕的內容。</p><p translation-origin=\"off\">In <code>product-list.component.html</code>, bind <code>&lt;app-product-alerts&gt;</code>  to the <code>onNotify()</code> method of the product list component.\n<code>&lt;app-product-alerts&gt;</code> is what displays the <strong>Notify Me</strong> button.</p>\n\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.6.html\" region=\"on-notify\">\n&lt;button type=\"button\" (click)=\"share()\"&gt;\n  Share\n&lt;/button&gt;\n\n&lt;app-product-alerts\n  [product]=\"product\" \n  (notify)=\"onNotify()\"&gt;\n&lt;/app-product-alerts&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">單擊 <strong>Notify Me</strong> 按鈕以觸發一條通知，內容為：\"You will be notified when the product goes on sale\"。</p><p translation-origin=\"off\">Click the <strong>Notify Me</strong> button to trigger an alert which reads, \"You will be notified when the product goes on sale\".</p>\n\n<div class=\"lightbox\">\n<img alt=\"Product alert notification confirmation dialog\" src=\"generated/images/guide/start/product-alert-notification.png\" width=\"329\" height=\"104\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">有關元件之間的通訊的更多資訊，請參見<a href=\"guide/component-interaction\" title=\"元件互動\">元件互動</a>。</p><p translation-origin=\"off\">For more information on communication between components, see <a href=\"guide/component-interaction\" title=\"Component interaction\">Component Interaction</a>.</p>\n\n<p><a id=\"whats-next\"></a></p>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本節中，你已經建立了一個應用，該應用會遍歷資料，並讓特性元件彼此通訊。</p><p translation-origin=\"off\">In this section, you've created an application that iterates through data and features components that communicate with each other.</p>\n\n<p translation-result=\"on\">要繼續探索 Angular 並開發此應用，請執行以下操作：</p><p translation-origin=\"off\">To continue exploring Angular and developing this application:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">繼續進行<a href=\"start/start-routing\" title=\"入門：應用內導航\">應用內導航</a>，以建立產品詳情頁。</p><p translation-origin=\"off\">Continue to <a href=\"start/start-routing\" title=\"Getting started: In-app navigation\">In-app navigation</a> to create a product details page.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">跳至<a href=\"start/start-deployment\" title=\"入門：部署\">部署</a>以轉為本地開發，或將你的應用部署到 Firebase 或你自己的伺服器上。</p><p translation-origin=\"off\">Skip ahead to <a href=\"start/start-deployment\" title=\"Getting started: Deployment\">Deployment</a> to move to local development, or deploy your application to Firebase or your own server.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/developer-guide-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/setup-local\n - guide/understanding-angular-overview\n - guide/what-is-angular\n - quick-start\n - start/start-data\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - tutorial/tour-of-heroes\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - guide/architecture-components\n - guide/architecture-components#template-syntax\n - guide/component-interaction\n - guide/setup-local\n - guide/structural-directives\n - start#angular-入門\n - start#create-the-product-list\n - start#create-the-sample-project\n - start#getting-started-with-angular\n - start#pass-data-to-a-child-component\n - start#pass-data-to-a-parent-component\n - start#prerequisites\n - start#take-a-tour-of-the-example-application\n - start#whats-next\n - start#下一步呢\n - start#建立產品列表\n - start#建立範例專案\n - start#前提條件\n - start#將資料傳遞到父元件\n - start#將資料傳遞給子元件\n - start#瀏覽範例應用\n - start/start-deployment\n - start/start-routing\n - https://developer.mozilla.org/docs/Learn/HTML\n - https://developer.mozilla.org/docs/Web/JavaScript\n - https://developer.stackblitz.com/docs/platform\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/start/index.md?message=docs%3A%20請簡述你的修改...\n - https://stackblitz.com\n - https://www.typescriptlang.org/\n-->"}