{"id":"api/router/Route","title":"Route","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/Route\", \"name\": \"Route\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/router/src/models.ts?message=docs(router)%3A%20請簡述你的修改...#L316-L891\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/router/src/models.ts#L316-L891\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"route\">Route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#route\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">定義單個路由的配置物件。一組路由被收集在 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 陣列中以定義 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 配置。路由器會嘗試使用此物件中定義的配置選項，將給定 URL 的段與每個路由進行匹配。</p><p translation-origin=\"off\">A configuration object that defines a single route.\nA set of routes are collected in a <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array to define a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> configuration.\nThe router attempts to match segments of a given URL against each route,\nusing the configuration options defined in this object.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/router/Route#description\">檢視\"說明\"...</a></p>\n  </section><section ng-should-translate=\"\" class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> {\n  <a class=\"code-anchor\" href=\"api/router/Route#title\"><span class=\"member-name\">title</span>?: string | Type&lt;Resolve&lt;string&gt;&gt; | ResolveFn&lt;string&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#path\"><span class=\"member-name\">path</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#pathMatch\"><span class=\"member-name\">pathMatch</span>?: 'prefix' | 'full'</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#matcher\"><span class=\"member-name\">matcher</span>?: UrlMatcher</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#component\"><span class=\"member-name\">component</span>?: Type&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadComponent\"><span class=\"member-name\">loadComponent</span>?: () =&gt; Type&lt;unknown&gt; | Observable&lt;Type&lt;unknown&gt; | DefaultExport&lt;Type&lt;unknown&gt;&gt;&gt; | Promise&lt;Type&lt;unknown&gt; | DefaultExport&lt;Type&lt;unknown&gt;&gt;&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#redirectTo\"><span class=\"member-name\">redirectTo</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#outlet\"><span class=\"member-name\">outlet</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivate\"><span class=\"member-name\">canActivate</span>?: Array&lt;CanActivateFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canMatch\"><span class=\"member-name\">canMatch</span>?: Array&lt;CanMatchFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivateChild\"><span class=\"member-name\">canActivateChild</span>?: Array&lt;CanActivateChildFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canDeactivate\"><span class=\"member-name\">canDeactivate</span>?: Array&lt;CanDeactivateFn&lt;any&gt; | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/router/Route#canLoad\"><span class=\"member-name\">canLoad</span>?: Array&lt;CanLoadFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#data\"><span class=\"member-name\">data</span>?: Data</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#resolve\"><span class=\"member-name\">resolve</span>?: ResolveData</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#children\"><span class=\"member-name\">children</span>?: Routes</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadChildren\"><span class=\"member-name\">loadChildren</span>?: LoadChildren</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#runGuardsAndResolvers\"><span class=\"member-name\">runGuardsAndResolvers</span>?: RunGuardsAndResolvers</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#providers\"><span class=\"member-name\">providers</span>?: Array&lt;Provider | EnvironmentProviders&gt;</a>\n}\n</code-example>\n\n\n</section>\n\n  \n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">欲知詳情，請參閱<a href=\"guide/router\">《路由指南》</a>。</p><p translation-origin=\"off\">Supports static, parameterized, redirect, and wildcard routes, as well as\ncustom route data and resolve methods.</p>\n\n<p translation-result=\"on\">有關詳細的用法資訊，請參閱<a href=\"guide/router\">路由指南</a>。</p><p translation-origin=\"off\">For detailed usage information, see the <a href=\"guide/router\">Routing Guide</a>.</p>\n\n  <p>Further information is available in the <a href=\"api/router/Route#usage-notes\">Usage Notes...</a></p>\n</section>\n  \n<section ng-should-translate=\"\" class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>屬性</th>\n        <th>說明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"title\"></a>\n          <code class=\"\"><span class=\"member-name\">title</span>?: string | <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;<a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;string&gt;&gt; | <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;string&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用於定義路由的頁面標題。這可以是靜態字串或實現 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code>。</p><p translation-origin=\"off\">Used to define a page title for the route. This can be a static string or an <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> that\nimplements <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n</div>\n          \n          <p>參見:</p>\n          <ul>\n            <li><p><code>PageTitleStrategy</code></p>\n</li>\n          </ul>\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"path\"></a>\n          <code class=\"\"><span class=\"member-name\">path</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">匹配的路徑。不能與自訂 <code>matcher</code> 功能一起使用。使用路由器匹配表示法的 URL 字串。可以是與任何 URL 匹配的萬用字元（<code>**</code>）（請參閱下面的使用說明）。預設值為 “/”（根路徑）。</p><p translation-origin=\"off\">The path to match against. Cannot be used together with a custom <code>matcher</code> function.\nA URL string that uses router matching notation.\nCan be a wild card (<code>**</code>) that matches any URL (see Usage Notes below).\nDefault is \"/\" (the root path).</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"pathMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">pathMatch</span>?: 'prefix' | 'full'</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配策略，為 “prefix” 或 “full” 之一。預設為“prefix”。</p><p translation-origin=\"off\">The path-matching strategy, one of 'prefix' or 'full'.\nDefault is 'prefix'.</p>\n</div>\n          <p translation-result=\"on\">預設情況下，路由器會從左側檢查 URL 元素以檢視 URL 是否與給定路徑匹配，並在匹配上某個配置時停止。重要的是，URL 的每個段仍然必須與某個配置匹配。例如，如果路由的子項（children）之一與段“user”匹配，則認為“/team/11/user”與字首“team/:id”匹配。也就是說，URL '/team/11/user' 可以匹配 <code>{path: 'team/:id', children: [{path: ':user', component: User}]}</code> 配置項，但當 <code>{path: 'team/:id', component: Team}</code> 中沒有子項（children 屬性）時則不匹配。</p><p translation-origin=\"off\">By default, the router checks URL elements from the left to see if the URL\nmatches a given path and stops when there is a config match. Importantly there must still be a\nconfig match for each segment of the URL. For example, '/team/11/user' matches the prefix\n'team/:id' if one of the route's children matches the segment 'user'. That is, the URL\n'/team/11/user' matches the config\n<code>{path: 'team/:id', children: [{path: ':user', component: User}]}</code>\nbut does not match when there are no children as in <code>{path: 'team/:id', component: Team}</code>.</p>\n\n<p translation-result=\"on\">路徑匹配策略 'full' 匹配整個 URL。重新導向空路徑路由時，這樣做很重要。否則，由於空路徑是任何 URL 的字首，因此路由器即使導航到重新導向目標時也會應用重新導向，從而建立一個無限迴圈。</p><p translation-origin=\"off\">The path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\nOtherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating\nto the redirect destination, creating an endless loop.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"matcher\"></a>\n          <code class=\"\"><span class=\"member-name\">matcher</span>?: <a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">自訂 URL 匹配功能。不能與 <code>path</code> 一起使用。</p><p translation-origin=\"off\">A custom URL-matching function. Cannot be used together with <code>path</code>.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"component\"></a>\n          <code class=\"\"><span class=\"member-name\">component</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配時例項化的元件。如果要由其子路由指定元件，則可以為空。</p><p translation-origin=\"off\">The component to instantiate when the path matches.\nCan be empty if child routes specify components.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadComponent\"></a>\n          <code class=\"\"><span class=\"member-name\">loadComponent</span>?: () =&gt; <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | Observable&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | <a href=\"api/router/DefaultExport\" class=\"code-anchor\">DefaultExport</a>&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt;&gt;&gt; | Promise&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | <a href=\"api/router/DefaultExport\" class=\"code-anchor\">DefaultExport</a>&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt;&gt;&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">指定延遲載入元件的物件。</p><p translation-origin=\"off\">An object specifying a lazy-loaded component.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"redirectTo\"></a>\n          <code class=\"\"><span class=\"member-name\">redirectTo</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配時要重新導向到的 URL。</p><p translation-origin=\"off\">A URL to redirect to when the path matches.</p>\n</div>\n          <p translation-result=\"on\">如果 URL 以斜槓 (/) 開頭，則為絕對值，否則相對於路徑 URL。請注意，在絕對重新導向之後不會估算進一步的重新導向。</p><p translation-origin=\"off\">Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\nNote that no further redirects are evaluated after an absolute redirect.</p>\n\n<p translation-result=\"on\">當不存在時，路由器不會重新導向。</p><p translation-origin=\"off\">When not present, router does not redirect.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"outlet\"></a>\n          <code class=\"\"><span class=\"member-name\">outlet</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 物件的名字，當路徑匹配時會把元件放置在其中。</p><p translation-origin=\"off\">Name of a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> object where the component can be placed\nwhen the path matches.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivate</span>?: Array&lt;<a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一個依賴注入標記的陣列，用於查詢 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 處理程式，以確定是否允許當前使用者啟用元件。預設情況下，任何使用者都可以啟用。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nactivate the component. By default, any user can activate.</p>\n</div>\n          <p translation-result=\"on\">當使用函式而不是 DI 標記時，函式可以呼叫 <code>inject</code> 來獲取任何所需的依賴項。此 <code>inject</code> 呼叫必須在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">canMatch</span>?: Array&lt;<a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用於查詢 <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a>()</code> 處理程式的 <code><a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a></code> 或 DI 標記的陣列，以確定是否允許當前使用者匹配 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。預設情況下，任何路由都可以匹配。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nmatch the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>. By default, any route can match.</p>\n</div>\n          <p translation-result=\"on\">當使用函式而不是 DI 標記時，函式可以呼叫 <code>inject</code> 來獲取任何所需的依賴項。此 <code>inject</code> 呼叫必須在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivateChild\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivateChild</span>?: Array&lt;<a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用於查詢 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> 處理程式的 DI 標記陣列，以確定是否允許當前使用者啟用元件的子項。預設情況下，任何使用者都可以啟用子項。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> handlers,\nin order to determine if the current user is allowed to activate\na child of the component. By default, any user can activate a child.</p>\n</div>\n          <p translation-result=\"on\">當使用函式而不是 DI 標記時，函式可以呼叫 <code>inject</code> 來獲取任何所需的依賴項。此 <code>inject</code> 呼叫必須在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canDeactivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canDeactivate</span>?: Array&lt;<a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;any&gt; | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用於查詢 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code> 處理程式的 DI 標記陣列，以確定是否允許當前使用者停用元件。預設情況下，任何使用者都可以停用。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\ndeactivate the component. By default, any user can deactivate.</p>\n</div>\n          <p translation-result=\"on\">當使用函式而不是 DI 標記時，函式可以呼叫 <code>inject</code> 來獲取任何所需的依賴項。此 <code>inject</code> 呼叫必須在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canLoad\"></a>\n          <code class=\"deprecated-api-item\"><span class=\"member-name\">canLoad</span>?: Array&lt;<a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <label class=\"api-status-label deprecated\" title=\"本 API 已棄用\">已棄用</label>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">用於查詢 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code> 處理程式的 DI 標記陣列，以確定是否允許當前使用者載入元件。預設情況下，任何使用者都可以載入。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nload the component. By default, any user can load.</p>\n</div>\n          <p translation-result=\"on\">當使用函式而不是 DI 標記時，函式可以呼叫 <code>inject</code> 來獲取任何所需的依賴項。此 <code>inject</code> 呼叫必須在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n          <p translation-result=\"on\">改為使用 <code>canMatch</code></p><p translation-origin=\"off\"><strong>Deprecated</strong> Use <code>canMatch</code> instead</p>\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"data\"></a>\n          <code class=\"\"><span class=\"member-name\">data</span>?: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供給元件的由開發人員定義的額外資料。預設情況下，不傳遞任何額外資料。</p><p translation-origin=\"off\">Additional developer-defined data provided to the component via\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>. By default, no additional data is passed.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"resolve\"></a>\n          <code class=\"\"><span class=\"member-name\">resolve</span>?: <a href=\"api/router/ResolveData\" class=\"code-anchor\">ResolveData</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌的對映，用於查詢資料解析器。請參閱 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>。</p><p translation-origin=\"off\">A map of DI tokens used to look up data resolvers. See <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"children\"></a>\n          <code class=\"\"><span class=\"member-name\">children</span>?: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一個子 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 物件陣列，用於指定巢狀(Nesting)路由配置。</p><p translation-origin=\"off\">An array of child <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> objects that specifies a nested route\nconfiguration.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadChildren\"></a>\n          <code class=\"\"><span class=\"member-name\">loadChildren</span>?: <a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一個物件，指定要延遲載入的子路由。</p><p translation-origin=\"off\">An object specifying lazy-loaded child routes.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"runGuardsAndResolvers\"></a>\n          <code class=\"\"><span class=\"member-name\">runGuardsAndResolvers</span>?: <a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">何時在路由上執行警衛和解析器的策略。</p><p translation-origin=\"off\">A policy for when to run guards and resolvers on a route.</p>\n</div>\n          <p translation-result=\"on\">啟用或停用路由時，守衛和/或解析器將始終執行。當路由未更改時，預設行為與 <code>paramsChange</code> 相同。</p><p translation-origin=\"off\">Guards and/or resolvers will always run when a route is activated or deactivated. When a route\nis unchanged, the default behavior is the same as <code>paramsChange</code>.</p>\n\n<p translation-result=\"on\"><code>paramsChange</code>：當路徑或路徑引數更改時重新執行警衛和解析器。這不包括查詢引數。此選項是預設值。</p><p translation-origin=\"off\"><code>paramsChange</code> : Rerun the guards and resolvers when path or\npath param changes. This does not include query parameters. This option is the default.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>always</code>：在每次執行時執行。</p><p translation-origin=\"off\"><code>always</code> : Run on every execution.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>pathParamsChange</code>：路徑引數更改時重新執行保護器和解析器。這不會比較矩陣或查詢引數。</p><p translation-origin=\"off\"><code>pathParamsChange</code> : Rerun guards and resolvers when the path params\nchange. This does not compare matrix or query parameters.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>paramsOrQueryParamsChange</code>：在路徑、矩陣或查詢引數更改時執行。</p><p translation-origin=\"off\"><code>paramsOrQueryParamsChange</code> : Run when path, matrix, or query parameters change.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>pathParamsOrQueryParamsChange</code>：當路徑引數更改或查詢引數更改時，重新執行保護器和解析器。這不包括矩陣引數。</p><p translation-origin=\"off\"><code>pathParamsOrQueryParamsChange</code> : Rerun guards and resolvers when the path params\nchange or query params have changed. This does not include matrix parameters.</p>\n\n</li>\n</ul>\n\n          <p>參見:</p>\n          <ul>\n            <li><p><code><a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code></p>\n</li>\n          </ul>\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"providers\"></a>\n          <code class=\"\"><span class=\"member-name\">providers</span>?: Array&lt;<a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a> | <a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用於此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 及其 <code>children</code> 項的 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 陣列。</p><p translation-origin=\"off\">A <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> array to use for this <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and its <code>children</code>.</p>\n</div>\n          <p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 將為此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 建立一個新的 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>，並將其用於此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 及其 <code>children</code>。如果此路由還有一個返回 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <code>loadChildren</code> 函式，則此注入器將被用作延遲載入模組的父級。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> will create a new <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> for this\n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and use it for this <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and its <code>children</code>. If this\nroute also has a <code>loadChildren</code> function which returns an <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>, this injector will be\nused as the parent of the lazy loaded module.</p>\n\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n  \n\n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"simple-configuration\" translation-result=\"on\">簡單配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Simple Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由指定在導航到 <code>/team/11/user/bob</code> 時，路由器會在其中建立帶有 'User' 子元件的 'Team' 元件。</p><p translation-origin=\"off\">The following route specifies that when navigating to, for example,\n<code>/team/11/user/bob</code>, the router creates the 'Team' component\nwith the 'User' child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<h3 id=\"multiple-outlets\" translation-result=\"on\">多重出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Multiple Outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由建立具有多個出口的兄弟元件。當導航到 <code>/team/11(aux:chat/jim)</code> 時，路由器會在 'Chat' 元件旁邊建立 'Team' 元件。'Chat' 元件放置在 'aux' 出口中。</p><p translation-origin=\"off\">The following route creates sibling components with multiple outlets.\nWhen navigating to <code>/team/11(aux:chat/jim)</code>, the router creates the 'Team' component next to\nthe 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<h3 id=\"wild-cards\" translation-result=\"on\">萬用字元<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Wild Cards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由使用萬用字元表示法來指定始終例項化的元件，無論你導航到何處。</p><p translation-origin=\"off\">The following route uses wild-card notation to specify a component\nthat is always instantiated regardless of where you navigate to.</p>\n\n<code-example>\n[{\n  path: '**',\n  component: WildcardComponent\n}]\n</code-example>\n<h3 id=\"redirects\" translation-result=\"on\">重新導向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由在查詢子路徑時使用 <code>redirectTo</code> 屬性忽略給定 URL 的一部分。</p><p translation-origin=\"off\">The following route uses the <code>redirectTo</code> property to ignore a segment of\na given URL when looking for a child path.</p>\n\n<p translation-result=\"on\">當導航到“/team/11/legacy/user/jim”時，路由器將 URL 段“/team/11/legacy/user/jim”更改為“/team/11/user/jim”，然後例項化包含 User 子元件的團隊元件。</p><p translation-origin=\"off\">When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\nthe Team component with the User child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    redirectTo: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">重新導向路徑可以是相對的（如本範例所示），也可以是絕對的。<code>redirectTo</code> 值更改為絕對 URL 段 '/user/:name'，則結果 URL 也是絕對 URL，'/user/jim'。</p><p translation-origin=\"off\">The redirect path can be relative, as shown in this example, or absolute.\nIf we change the <code>redirectTo</code> value in the example to the absolute URL segment '/user/:name',\nthe result URL is also absolute, '/user/jim'.</p>\n\n<h3 id=\"empty-path\" translation-result=\"on\">空路徑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Empty Path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在下列配置中，當導航到 <code>/team/11</code> 時，路由器會例項化 'AllUsers' 元件。</p><p translation-origin=\"off\">Empty-path route configurations can be used to instantiate components that do not 'consume'\nany URL segments.</p>\n\n<p translation-result=\"on\">在以下配置中，導航到 <code>/team/11</code> 時，路由器會例項化 'AllUsers' 元件。</p><p translation-origin=\"off\">In the following configuration, when navigating to\n<code>/team/11</code>, the router instantiates the 'AllUsers' component.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">請注意，空路徑路由會繼承其父級的引數和資料。</p><p translation-origin=\"off\">Empty-path routes can have children. In the following example, when navigating\nto <code>/team/11/user/jim</code>, the router instantiates the wrapper component with\nthe user component in it.</p>\n\n<p translation-result=\"on\">請注意，空路徑路由會繼承其父級的引數和資料。</p><p translation-origin=\"off\">Note that an empty path route inherits its parent's parameters and data.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: User\n    }]\n  }]\n}]\n</code-example>\n<h3 id=\"matching-strategy\" translation-result=\"on\">匹配策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Matching Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">預設的路徑匹配策略是 'prefix'，這意味著路由器從左開始檢查 URL 元素以檢視 URL 是否與指定的路徑匹配。比如，'/team/11/user' 與 'team/:id' 匹配。</p><p translation-origin=\"off\">The default path-match strategy is 'prefix', which means that the router\nchecks URL elements from the left to see if the URL matches a specified path.\nFor example, '/team/11/user' matches 'team/:id'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p translation-result=\"on\">在以下範例中，提供 'full' <code>pathMatch</code> 策略可確保路由器僅在導航到 '/' 時才應用重新導向。</p><p translation-origin=\"off\">You can specify the path-match strategy 'full' to make sure that the path\ncovers the whole unconsumed URL. It is important to do this when redirecting\nempty-path routes. Otherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating to the redirect destination,\ncreating an endless loop.</p>\n\n<p translation-result=\"on\">在以下範例中，提供 'full' <code>pathMatch</code> 策略可確保路由器當且僅當導航到 '/' 時應用重新導向。</p><p translation-origin=\"off\">In the following example, supplying the 'full' <code>pathMatch</code> strategy ensures\nthat the router applies the redirect if and only if navigating to '/'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" translation-result=\"on\">無元件路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Componentless Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在以下範例中，'MainChild' 和 'AuxChild' 是同級。當導航到 'parent/10/(a//aux:b)' 時，該路由會例項化彼此相鄰的主要子元件和 aux 子元件。為此，應用程式元件必須定義主要和輔助出口。</p><p translation-origin=\"off\">You can share parameters between sibling components.\nFor example, suppose that two sibling components should go next to each other,\nand both of them require an ID parameter. You can accomplish this using a route\nthat does not specify a component at the top level.</p>\n\n<p translation-result=\"on\">在以下範例中，“MainChild”和“AuxChild”是同級。當導航到 'parent/10/(a//aux:b)' 時，該路由會例項化彼此相鄰的主子元件和輔助子元件。為此，應用程式元件必須定義主要的出口和輔助出口。</p><p translation-origin=\"off\">In the following example, 'MainChild' and 'AuxChild' are siblings.\nWhen navigating to 'parent/10/(a//aux:b)', the route instantiates\nthe main child and aux child components next to each other.\nFor this to work, the application component must have the primary and aux outlets defined.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">當用空路徑字串定義子元件時，這特別有用，如以下範例所示。使用此配置，導航到 '/parent/10' 將建立主要子元件和 aux 元件。</p><p translation-origin=\"off\">The router merges the parameters, data, and resolve of the componentless\nparent into the parameters, data, and resolve of the children.</p>\n\n<p translation-result=\"on\">當使用空路徑字串定義子元件時，這特別有用，如下例所示。使用此配置，導航到 '/parent/10' 會建立主子元件和 aux 元件。</p><p translation-origin=\"off\">This is especially useful when child components are defined\nwith an empty path string, as in the following example.\nWith this configuration, navigating to '/parent/10' creates\nthe main child and aux components.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<h3 id=\"lazy-loading\" translation-result=\"on\">延遲載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Lazy Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">給定以下範例路由，路由器將使用瀏覽器原生匯入體系按需延遲載入相關模組。</p><p translation-origin=\"off\">Lazy loading speeds up application load time by splitting the application\ninto multiple bundles and loading them on demand.\nTo use lazy loading, provide the <code>loadChildren</code> property in the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> object,\ninstead of the <code>children</code> property.</p>\n\n<p translation-result=\"on\">對於以下範例路由，路由器將使用瀏覽器原生匯入系統按需延遲載入關聯的模組。</p><p translation-origin=\"off\">Given the following example route, the router will lazy load\nthe associated module on demand using the browser native import system.</p>\n\n<code-example>\n[{\n  path: 'lazy',\n  loadChildren: () =&gt; import('./lazy-route/lazy.module').then(mod =&gt; mod.LazyModule),\n}];\n</code-example>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core/importProvidersFrom\n - api/router\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivate\n - api/router/CanDeactivateFn\n - api/router/CanLoad\n - api/router/CanLoadFn\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/Data\n - api/router/DefaultExport\n - api/router/ExtraOptions\n - api/router/LoadChildrenCallback\n - api/router/NoPreloading\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ROUTES\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/ResolveFn\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/RouterConfigOptions\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutletContract\n - api/router/Routes\n - api/router/RunGuardsAndResolvers\n - api/router/TitleStrategy\n - api/router/UrlMatcher\n - api/router/defaultUrlMatcher\n - api/router/mapToCanActivate\n - api/router/mapToCanActivateChild\n - api/router/mapToCanDeactivate\n - api/router/mapToCanMatch\n - api/router/mapToResolve\n - api/router/provideRouter\n - api/router/testing/RouterTestingHarness\n - api/router/testing/setupTestingRouter\n - api/router/withComponentInputBinding\n - guide/cheatsheet\n - guide/deprecations\n - guide/route-animations\n - guide/router\n - guide/router-reference\n - guide/router-tutorial\n - guide/router-tutorial-toh\n - guide/standalone-components\n - guide/update-to-version-14\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - /api\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/Injectable\n - api/core/NgModuleRef\n - api/core/Provider\n - api/core/Type\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivate\n - api/router/CanDeactivateFn\n - api/router/CanLoad\n - api/router/CanLoadFn\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/Data\n - api/router/DefaultExport\n - api/router/DeprecatedGuard\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/ResolveFn\n - api/router/Route#canActivate\n - api/router/Route#canActivateChild\n - api/router/Route#canDeactivate\n - api/router/Route#canLoad\n - api/router/Route#canMatch\n - api/router/Route#children\n - api/router/Route#component\n - api/router/Route#componentless-routes\n - api/router/Route#data\n - api/router/Route#description\n - api/router/Route#empty-path\n - api/router/Route#instance-properties\n - api/router/Route#lazy-loading\n - api/router/Route#loadChildren\n - api/router/Route#loadComponent\n - api/router/Route#matcher\n - api/router/Route#matching-strategy\n - api/router/Route#multiple-outlets\n - api/router/Route#outlet\n - api/router/Route#path\n - api/router/Route#pathMatch\n - api/router/Route#providers\n - api/router/Route#redirectTo\n - api/router/Route#redirects\n - api/router/Route#resolve\n - api/router/Route#route\n - api/router/Route#runGuardsAndResolvers\n - api/router/Route#simple-configuration\n - api/router/Route#title\n - api/router/Route#usage-notes\n - api/router/Route#wild-cards\n - api/router/Route#匹配策略\n - api/router/Route#多重出口\n - api/router/Route#延遲載入\n - api/router/Route#無元件路由\n - api/router/Route#空路徑\n - api/router/Route#簡單配置\n - api/router/Route#萬用字元\n - api/router/Route#重新導向\n - api/router/Router\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - guide/router\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/router/src/models.ts?message=docs(router)%3A%20請簡述你的修改...#L316-L891\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/router/src/models.ts#L316-L891\n-->"}