{"id":"api/router/Route","title":"Route","contents":"\n\n<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/Route\", \"name\": \"Route\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20請簡述你的修改...#L214-L660\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/config.ts#L214-L660\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  \n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"route\">Route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#route\"><i class=\"material-icons\">link</i></a></h1>\n    \n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n  </header>\n  \n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">定義單個路由的配置物件。在 <code><a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code> 陣列中收集了一組路由定義，以用作 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的配置。路由器會嘗試使用此物件中定義的配置選項，將給定 URL 段與每個路由進行匹配。</p><p translation-origin=\"off\">A configuration object that defines a single route.\nA set of routes are collected in a <code><a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code> array to define a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> configuration.\nThe router attempts to match segments of a given URL against each route,\nusing the configuration options defined in this object.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/router/Route#description\">檢視\"說明\"...</a></p>\n  </section>\n  \n\n  \n\n  <section ng-should-translate=\"\" class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> {\n  <a class=\"code-anchor\" href=\"api/router/Route#path\"><span class=\"member-name\">path</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#pathMatch\"><span class=\"member-name\">pathMatch</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#matcher\"><span class=\"member-name\">matcher</span>?: UrlMatcher</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#component\"><span class=\"member-name\">component</span>?: Type&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#redirectTo\"><span class=\"member-name\">redirectTo</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#outlet\"><span class=\"member-name\">outlet</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivate\"><span class=\"member-name\">canActivate</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivateChild\"><span class=\"member-name\">canActivateChild</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canDeactivate\"><span class=\"member-name\">canDeactivate</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canLoad\"><span class=\"member-name\">canLoad</span>?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#data\"><span class=\"member-name\">data</span>?: Data</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#resolve\"><span class=\"member-name\">resolve</span>?: ResolveData</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#children\"><span class=\"member-name\">children</span>?: Routes</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadChildren\"><span class=\"member-name\">loadChildren</span>?: LoadChildren</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#runGuardsAndResolvers\"><span class=\"member-name\">runGuardsAndResolvers</span>?: RunGuardsAndResolvers</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n\n  \n  \n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">支援靜態、引數化、重新導向和萬用字元路由，以及自訂路由資料和解析方法。</p><p translation-result=\"on\">欲知詳情，請參閱<a href=\"guide/router\">《路由指南》</a> 。</p><p translation-origin=\"off\">Supports static, parameterized, redirect, and wildcard routes, as well as\ncustom route data and resolve methods.</p>\n\n<p translation-origin=\"off\">For detailed usage information, see the <a href=\"guide/router\">Routing Guide</a>.</p>\n\n\n  <p>Further information available in the <a href=\"api/router/Route#usage-notes\">Usage Notes</a>...</p>\n</section>\n\n\n  \n<section ng-should-translate=\"\" class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>屬性</th>\n        <th>說明</th>\n      </tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"path\"></a>\n          <code class=\"\"><span class=\"member-name\">path</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">匹配的路徑。不能與自訂 <code>matcher</code> 功能一起使用。使用路由器匹配表示法的 URL 字串。可以是與任何 URL 匹配的萬用字元（<code>**</code>）（請參閱下面的使用說明）。預設值為 “/”（根路徑）。</p><p translation-origin=\"off\">The path to match against. Cannot be used together with a custom <code>matcher</code> function.\nA URL string that uses router matching notation.\nCan be a wild card (<code>**</code>) that matches any URL (see Usage Notes below).\nDefault is \"/\" (the root path).</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"pathMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">pathMatch</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配策略，為 “prefix” 或 “full” 之一。預設為“prefix”。</p><p translation-origin=\"off\">The path-matching strategy, one of 'prefix' or 'full'.\nDefault is 'prefix'.</p>\n\n</div>\n          <p translation-result=\"on\">預設情況下，路由器會從左邊開始檢查 URL 中的各個元素，以檢視此 URL 是否匹配給定的路徑，遇到任何一個匹配的，就停止。比如，'/team/11/user' 能匹配 'team/:id'。</p><p translation-result=\"on\">路徑匹配策略 “full” 表示與整個 URL 匹配。重新導向空路徑路由時，執行此操作很重要。否則，因為空路徑是任何 URL 的字首，所以路由器即使在導航到重新導向目標時也會進行重新導向，從而造成無限迴圈。</p><p translation-origin=\"off\">By default, the router checks URL elements from the left to see if the URL\nmatches a given  path, and stops when there is a match. For example,\n'/team/11/user' matches 'team/:id'.</p>\n\n<p translation-origin=\"off\">The path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\nOtherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating\nto the redirect destination, creating an endless loop.</p>\n\n\n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"matcher\"></a>\n          <code class=\"\"><span class=\"member-name\">matcher</span>?: <a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">自訂 URL 匹配功能。不能與 <code>path</code> 一起使用。</p><p translation-origin=\"off\">A custom URL-matching function. Cannot be used together with <code>path</code>.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"component\"></a>\n          <code class=\"\"><span class=\"member-name\">component</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配時例項化的元件。如果要由其子路由指定元件，則可以為空。</p><p translation-origin=\"off\">The component to instantiate when the path matches.\nCan be empty if child routes specify components.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"redirectTo\"></a>\n          <code class=\"\"><span class=\"member-name\">redirectTo</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">路徑匹配時重新導向到的 URL。如果 URL 以斜槓（/）開頭，則為絕對值，否則相對於當前路徑 URL。如果不存在，則路由器不會重新導向。</p><p translation-origin=\"off\">A URL to redirect to when the path matches.\nAbsolute if the URL begins with a slash (/), otherwise relative to the path URL.\nWhen not present, router does not redirect.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"outlet\"></a>\n          <code class=\"\"><span class=\"member-name\">outlet</span>?: string</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 物件的名字，當路徑匹配時會把元件放置在其中。</p><p translation-origin=\"off\">Name of a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> object where the component can be placed\nwhen the path matches.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivate</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一組依賴項注入令牌，用於查詢 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 處理器，以確定是否允許當前使用者啟用該元件。預設情況下，任何使用者都可以啟用。</p><p translation-origin=\"off\">An array of dependency-injection tokens used to look up <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nactivate the component. By default, any user can activate.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivateChild\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivateChild</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌陣列，用於查詢 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> 處理器，以確定是否允許當前使用者啟用元件的子級。預設情況下，任何使用者都可以啟用子路由。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> handlers,\nin order to determine if the current user is allowed to activate\na child of the component. By default, any user can activate a child.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canDeactivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canDeactivate</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌陣列，用於查詢 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code> 處理器，以確定是否允許當前使用者停用該元件。預設情況下，任何使用者都可以停用。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\ndeactivate the component. By default, any user can deactivate.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canLoad\"></a>\n          <code class=\"\"><span class=\"member-name\">canLoad</span>?: any[]</code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌陣列，用於查詢 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code> 處理器，以確定是否允許當前使用者載入元件。預設情況下，任何使用者都可以載入。</p><p translation-origin=\"off\">An array of DI tokens used to look up <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nload the component. By default, any user can load.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"data\"></a>\n          <code class=\"\"><span class=\"member-name\">data</span>?: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供給元件的由開發人員定義的額外資料。預設情況下，不傳遞任何額外資料。</p><p translation-origin=\"off\">Additional developer-defined data provided to the component via\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>. By default, no additional data is passed.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"resolve\"></a>\n          <code class=\"\"><span class=\"member-name\">resolve</span>?: <a href=\"api/router/ResolveData\" class=\"code-anchor\">ResolveData</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌的對映，用於查詢資料解析器。請參閱 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 。</p><p translation-origin=\"off\">A map of DI tokens used to look up data resolvers. See <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"children\"></a>\n          <code class=\"\"><span class=\"member-name\">children</span>?: <a href=\"api/router/Routes-0\" class=\"code-anchor\">Routes</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一個子 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 物件陣列，用於指定巢狀(Nesting)路由配置。</p><p translation-origin=\"off\">An array of child <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> objects that specifies a nested route\nconfiguration.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadChildren\"></a>\n          <code class=\"\"><span class=\"member-name\">loadChildren</span>?: <a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">一個物件，指定要延遲載入的子路由。</p><p translation-origin=\"off\">An object specifying lazy-loaded child routes.</p>\n\n</div>\n          \n          </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"runGuardsAndResolvers\"></a>\n          <code class=\"\"><span class=\"member-name\">runGuardsAndResolvers</span>?: <a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code>\n        </td>\n        <td>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">定義何時執行守衛（guard）和解析器（resolver）。為下列值之一</p><p translation-origin=\"off\">Defines when guards and resolvers will be run. One of</p>\n\n</div>\n          <ul>\n<li>\n<p translation-result=\"on\"><code>paramsOrQueryParamsChange</code> ：當查詢引數發生變化時執行。</p><p translation-origin=\"off\"><code>paramsOrQueryParamsChange</code> : Run when query parameters change.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">    <code>always</code> ：在每次執行時執行。預設情況下，僅當路由的矩陣引數發生更改時，守衛和解析器才會執行。</p><p translation-origin=\"off\"><code>always</code> : Run on every execution.\nBy default, guards and resolvers run only when the matrix\nparameters of the route change.</p>\n\n</li>\n</ul>\n\n          </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"simple-configuration\" translation-result=\"on\">簡單配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"simple-configuration\">Simple Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由指定在導航到 <code>/team/11/user/bob</code> 時，路由器會在其中建立帶有 'User' 子元件的 'Team' 元件。</p><p translation-origin=\"off\">The following route specifies that when navigating to, for example,\n<code>/team/11/user/bob</code>, the router creates the 'Team' component\nwith the 'User' child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<h3 id=\"multiple-outlets\" translation-result=\"on\">多重出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"multiple-outlets\">Multiple Outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由建立具有多個出口的兄弟元件。當導航到 <code>/team/11(aux:chat/jim)</code> 時，路由器會在 'Chat' 元件旁邊建立 'Team' 元件。 'Chat' 元件放置在 'aux' 出口中。</p><p translation-origin=\"off\">The following route creates sibling components with multiple outlets.\nWhen navigating to <code>/team/11(aux:chat/jim)</code>, the router creates the 'Team' component next to\nthe 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<h3 id=\"wild-cards\" translation-result=\"on\">萬用字元<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"wild-cards\">Wild Cards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由使用萬用字元表示法來指定始終例項化的元件，無論你導航到何處。</p><p translation-origin=\"off\">The following route uses wild-card notation to specify a component\nthat is always instantiated regardless of where you navigate to.</p>\n\n<code-example>\n[{\n  path: '**',\n  component: WildcardComponent\n}]\n</code-example>\n<h3 id=\"redirects\" translation-result=\"on\">重新導向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"redirects\">Redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當尋找子路徑時，以下路由使用 <code>redirectTo</code> 屬性忽略給定 URL 的一部分。</p><p translation-result=\"on\">導航到 '/team/11/legacy/user/jim' 時，路由器將 URL 段 '/team/11/legacy/user/jim' 更改為 '/team/11/user/jim'，然後例項化 Team 元件以及其中的 User 子元件。</p><p translation-origin=\"off\">The following route uses the <code>redirectTo</code> property to ignore a segment of\na given URL when looking for a child path.</p>\n\n<p translation-origin=\"off\">When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\nthe Team component with the User child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    redirectTo: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">重新導向路徑可以是相對的（如本範例所示），也可以是絕對的。 <code>redirectTo</code> 值更改為絕對 URL 段 '/user/:name'，則結果 URL 也是絕對 URL，'/user/jim'。</p><p translation-origin=\"off\">The redirect path can be relative, as shown in this example, or absolute.\nIf we change the <code>redirectTo</code> value in the example to the absolute URL segment '/user/:name',\nthe result URL is also absolute, '/user/jim'.</p>\n\n<h3 id=\"empty-path\" translation-result=\"on\">空路徑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"empty-path\">Empty Path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">空路徑路由可用來例項化一些不\"消費\"任何 url 區段的元件。</p><p translation-result=\"on\">在下列配置中，當導航到 <code>/team/11</code> 時，路由器會例項化 'AllUsers' 元件。</p><p translation-origin=\"off\">Empty-path route configurations can be used to instantiate components that do not 'consume'\nany URL segments.</p>\n\n<p translation-origin=\"off\">In the following configuration, when navigating to\n<code>/team/11</code>, the router instantiates the 'AllUsers' component.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">空路徑路由可以有子路由。在以下範例中，當導航到 <code>/team/11/user/jim</code> 時，路由器會例項化帶有使用者元件的包裝器元件。</p><p translation-result=\"on\">請注意，空路徑路由會繼承其父級的引數和資料。</p><p translation-origin=\"off\">Empty-path routes can have children. In the following example, when navigating\nto <code>/team/11/user/jim</code>, the router instantiates the wrapper component with\nthe user component in it.</p>\n\n<p translation-origin=\"off\">Note that an empty path route inherits its parent's parameters and data.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: User\n    }]\n  }]\n}]\n</code-example>\n<h3 id=\"matching-strategy\" translation-result=\"on\">匹配策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"matching-strategy\">Matching Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">預設的路徑匹配策略是 'prefix'，這意味著路由器從左開始檢查 URL 元素以檢視 URL 是否與指定的路徑匹配。比如，'/team/11/user' 與 'team/:id' 匹配。</p><p translation-origin=\"off\">The default path-match strategy is 'prefix', which means that the router\nchecks URL elements from the left to see if the URL matches a specified path.\nFor example, '/team/11/user' matches 'team/:id'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p translation-result=\"on\">你可以將路徑匹配策略指定為 'full'，以確保路徑覆蓋整個未使用的 URL。重新導向到空路徑路由時，這樣做很重要。否則，因為空路徑是任何 URL 的字首，所以路由器即使在導航到重新導向目標時又會被再次重新導向，從而造成無限迴圈。</p><p translation-result=\"on\">在以下範例中，提供 'full' <code>pathMatch</code> 策略可確保路由器僅在導航到 '/' 時才應用重新導向。</p><p translation-origin=\"off\">You can specify the path-match strategy 'full' to make sure that the path\ncovers the whole unconsumed URL. It is important to do this when redirecting\nempty-path routes. Otherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating to the redirect destination,\ncreating an endless loop.</p>\n\n<p translation-origin=\"off\">In the following example, supplying the 'full' <code>pathMatch</code> strategy ensures\nthat the router applies the redirect if and only if navigating to '/'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" translation-result=\"on\">無元件路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"componentless-routes\">Componentless Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以在同級元件之間共享引數。比如，假設兩個同級元件應該彼此相鄰，並且它們兩個都需要 ID 引數。你可以使用不在最上層指定元件的路由來完成此操作。</p><p translation-result=\"on\">在以下範例中，'MainChild' 和 'AuxChild' 是同級。當導航到 'parent/10/(a//aux:b)' 時，該路由會例項化彼此相鄰的主要子元件和 aux 子元件。為此，應用程式元件必須定義主要和輔助出口。</p><p translation-origin=\"off\">You can share parameters between sibling components.\nFor example, suppose that two sibling components should go next to each other,\nand both of them require an ID parameter. You can accomplish this using a route\nthat does not specify a component at the top level.</p>\n\n<p translation-origin=\"off\">In the following example, 'MainChild' and 'AuxChild' are siblings.\nWhen navigating to 'parent/10/(a//aux:b)', the route instantiates\nthe main child and aux child components next to each other.\nFor this to work, the application component must have the primary and aux outlets defined.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">路由器將無元件父級的引數、資料和解析結果合併為子級的引數、資料和解析結果。</p><p translation-result=\"on\">當用空路徑字串定義子元件時，這特別有用，如以下範例所示。使用此配置，導航到 '/parent/10' 將建立主要子元件和 aux 元件。</p><p translation-origin=\"off\">The router merges the parameters, data, and resolve of the componentless\nparent into the parameters, data, and resolve of the children.</p>\n\n<p translation-origin=\"off\">This is especially useful when child components are defined\nwith an empty path string, as in the following example.\nWith this configuration, navigating to '/parent/10' creates\nthe main child and aux components.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<h3 id=\"lazy-loading\" translation-result=\"on\">延遲載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loading\">Lazy Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">延遲載入透過將應用程式拆分為多個包並按需載入它們來加快應用程式載入時間。要使用延遲載入，請在 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 中提供 <code>loadChildren</code> 屬性，而不是 <code>children</code> 屬性。</p><p translation-result=\"on\">給定以下範例路由，路由器將使用瀏覽器原生匯入體系按需延遲載入相關模組。</p><p translation-origin=\"off\">Lazy loading speeds up application load time by splitting the application\ninto multiple bundles and loading them on demand.\nTo use lazy loading, provide the <code>loadChildren</code> property in the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> object,\ninstead of the <code>children</code> property.</p>\n\n<p translation-origin=\"off\">Given the following example route, the router will lazy load\nthe associated module on demand using the browser native import system.</p>\n\n<code-example>\n[{\n  path: 'lazy',\n  loadChildren: () =&gt; import('./lazy-route/lazy.module').then(mod =&gt; mod.LazyModule),\n}];\n</code-example>\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/router\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/Data\n - api/router/ExtraOptions\n - api/router/LoadChildrenCallback\n - api/router/NoPreloading\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ROUTES-1\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutletContract\n - api/router/Routes-0\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - api/router/provideRoutes\n - api/router/testing/RouterTestingModule\n - api/router/testing/setupTestingRouter\n - guide/cheatsheet\n - guide/router\n - guide/router-reference\n - guide/router-tutorial-toh\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - /api\n - api/core/Type\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/Data\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/Route#canActivate\n - api/router/Route#canActivateChild\n - api/router/Route#canDeactivate\n - api/router/Route#canLoad\n - api/router/Route#children\n - api/router/Route#component\n - api/router/Route#componentless-routes\n - api/router/Route#data\n - api/router/Route#description\n - api/router/Route#empty-path\n - api/router/Route#instance-properties\n - api/router/Route#lazy-loading\n - api/router/Route#loadChildren\n - api/router/Route#matcher\n - api/router/Route#matching-strategy\n - api/router/Route#multiple-outlets\n - api/router/Route#outlet\n - api/router/Route#path\n - api/router/Route#pathMatch\n - api/router/Route#redirectTo\n - api/router/Route#redirects\n - api/router/Route#resolve\n - api/router/Route#route\n - api/router/Route#runGuardsAndResolvers\n - api/router/Route#simple-configuration\n - api/router/Route#usage-notes\n - api/router/Route#wild-cards\n - api/router/Router\n - api/router/RouterOutlet\n - api/router/Routes-0\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - guide/router\n - https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20請簡述你的修改...#L214-L660\n - https://github.com/angular/angular-cn/tree/12.1.0-next.1/packages/router/src/config.ts#L214-L660\n-->"}