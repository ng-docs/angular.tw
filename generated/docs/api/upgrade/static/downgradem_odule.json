{"id":"api/upgrade/static/downgradeModule","title":"downgradeModule","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/upgrade\", \"name\": \"@angular/upgrade\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/upgrade/static\", \"name\": \"@angular/upgrade/static\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.cn/api/upgrade/static/downgradeModule\", \"name\": \"downgradeModule\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/upgrade\">@angular/upgrade</a> &gt; <a href=\"api/upgrade/static\">@angular/upgrade/static</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/upgrade/static/src/downgrade_module.ts?message=docs(upgrade)%3A%20請簡述你的修改...#L419-L682\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/upgrade/static/src/downgrade_module.ts#L419-L682\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"downgrademodule\">downgradeModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrademodule\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">一個用於建立 AngularJS 模組的幫助器函式，當需要例項化 <a href=\"api/upgrade/static/downgradeComponent\">降級元件</a>\n時，可以“按需”（可能是延遲）引導 Angular 模組。</p><p translation-origin=\"off\">A helper function for creating an AngularJS module that can bootstrap an Angular module\n\"on-demand\" (possibly lazily) when a <a href=\"api/upgrade/static/downgradeComponent\">downgraded component</a> needs to be\ninstantiated.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/upgrade/static/downgradeModule#description\">檢視\"說明\"...</a></p>\n  </section>\n<div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;T&gt; | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; Promise&lt;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&lt;T&gt;&gt;)): string</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;T&gt; | ((extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; Promise&lt;<a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a>&lt;T&gt;&gt;)</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code>string</code></p>\n\n</div>\n    <hr class=\"hr-margin fullwidth\">\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <span class=\"member-name\"><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></span>(moduleOrBootstrapFn: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&lt;T&gt;): string</code-example>\n  <div class=\"deprecated\">\n    <p translation-result=\"on\">不推薦將 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 作為 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> 函式引數傳遞，請改為傳遞 NgModule 類參考。</p><p translation-origin=\"off\"><strong>Deprecated</strong> Passing <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> as the <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> function argument is deprecated,\nplease pass an NgModule class reference instead.</p>\n\n\n  </div>\n\n  <h6 class=\"no-anchor\" id=\"引數-1\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>moduleOrBootstrapFn</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory&lt;T&gt;</a></code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-1\">返回值</h6>\n  <p><code>string</code></p>\n\n</div>\n    \n  \n\n\n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><em>支援 AOT 編譯的混合升級應用程式的<a href=\"api?query=upgrade/static\">upgrade/靜態</a>庫的一部分。</em></p><p translation-origin=\"off\"><em>Part of the <a href=\"api?query=upgrade/static\">upgrade/static</a> library for hybrid upgrade apps that\nsupport AOT compilation.</em></p>\n\n<p translation-result=\"on\">它允許延遲載入/引導混合應用程式的 Angular 部分，而無需預先支付成本。例如，你可以有一個 AngularJS\n應用程式，將 Angular 用於特定路由，並且只有在/當用戶存取這些路由之一時才例項化 Angular 模組。</p><p translation-origin=\"off\">It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\npay the cost up-front. For example, you can have an AngularJS application that uses Angular for\nspecific routes and only instantiate the Angular modules if/when the user visits one of these\nroutes.</p>\n\n<p translation-result=\"on\">Angular 模組將被引導一次（第一次請求時），並且從那時起將使用相同的參考。</p><p translation-origin=\"off\">The Angular module will be bootstrapped once (when requested for the first time) and the same\nreference will be used from that point onwards.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 需要 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>、<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類或函式：</p><p translation-origin=\"off\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> requires either an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>, <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class or a function:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>：如果你傳遞了 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>，它將用於使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 的 <a href=\"api/core/PlatformRef#bootstrapModuleFactory\">bootstrapModuleFactory\\(\\)</a>\n來例項化模組。注意：這種型別的引數已被棄用。請提供 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類或引導函式。</p><p translation-origin=\"off\"><code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>: If you pass an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>, it will be used to instantiate a module\nusing <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>'s <a href=\"api/core/PlatformRef#bootstrapModuleFactory\">bootstrapModuleFactory\\(\\)</a>.\nNOTE: this type of the argument is deprecated. Please either provide an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class or a\nbootstrap function instead.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類：如果你傳遞了 NgModule 類，它將用於使用 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 的 <a href=\"api/core/PlatformRef#bootstrapModule\">bootstrapModule\\(\\)</a> 來例項化模組。</p><p translation-origin=\"off\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class: If you pass an NgModule class, it will be used to instantiate a module\nusing <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code>'s <a href=\"api/core/PlatformRef#bootstrapModule\">bootstrapModule\\(\\)</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>Function</code>：如果你傳遞了一個函式，它應該會返回一個解析為 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的\nPromise。使用額外的 <a href=\"api/core/StaticProvider\">Providers</a> 陣列來呼叫該函式，這些陣列可以從返回的\n<code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 中獲得。</p><p translation-origin=\"off\"><code>Function</code>: If you pass a function, it is expected to return a promise resolving to an\n<code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>. The function is called with an array of extra <a href=\"api/core/StaticProvider\">Providers</a>\nthat are expected to be available from the returned <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>'s <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 會返回建立的 AngularJS 包裝器模組的名稱。你可以用它在主 AngularJS\n模組中宣告依賴項。</p><p translation-origin=\"off\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> returns the name of the created AngularJS wrapper module. You can use it to\ndeclare a dependency in your main AngularJS module.</p>\n\n<code-example path=\"upgrade/static/ts/lite/module.ts\" region=\"basic-how-to\">\nimport {<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>} from '@angular/platform-browser-dynamic';\nimport {<a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>, <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>, <a href=\"api/upgrade/static/UpgradeComponent\" class=\"code-anchor\">UpgradeComponent</a>} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';\n\n\n\n\n// The function that will bootstrap the Angular module (when/if necessary).\n// (This would be omitted if we provided an `<a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>` directly.)\nconst ng2BootstrapFn = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt;\n    <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders).bootstrapModule(MyLazyAngularModule);\n\n\n// This AngularJS module represents the AngularJS pieces of the application.\nconst myMainAngularJsModule = angular.module('myMainAngularJsModule', [\n  // We declare a dependency on the \"downgraded\" Angular module.\n  <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(ng2BootstrapFn)\n  // or\n  // <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(MyLazyAngularModuleFactory)\n]);\n\n</code-example>\n<p translation-result=\"on\">有關如何使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 的更多詳細資訊，請參閱<a href=\"guide/upgrade-performance\">效能升級</a>。</p><p translation-origin=\"off\">For more details on how to use <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> see\n<a href=\"guide/upgrade-performance\">Upgrading for Performance</a>.</p>\n\n  <p>Further information is available in the <a href=\"api/upgrade/static/downgradeModule#usage-notes\">Usage Notes...</a></p>\n</section>\n\n\n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">除了 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>，你可以像往常一樣使用其餘的 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code>\n幫助器來建構混合應用程式。請注意，在降級的模組被引導（即透過例項化降級元件）之前，Angular\n部分（例如降級的服務）將不可用。</p><p translation-origin=\"off\">Apart from <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, you can use the rest of the <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> helpers as usual to\nbuild a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\navailable until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\ncomponent.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">你不能在同一個混合應用程式中使用 <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>。<br>使用兩者之一。</p><p translation-origin=\"off\">  You cannot use <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> and <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> in the same hybrid application.<br>\nUse one or the other.</p>\n\n</div>\n<h3 id=\"differences-with-upgrademodule\" translation-result=\"on\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 的區別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#與-upgrademodule-的區別\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Differences with <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#differences-with-upgrademodule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">除了它們不同的 API 之外，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 和 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n之間還有兩個重要的內部區別會影響混合應用程式的行為：</p><p translation-origin=\"off\">Besides their different API, there are two important internal differences between\n<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> and <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> that affect the behavior of hybrid applications:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> 不會引導 <a href=\"api/core/NgZone\">Angular zone</a> 中的主\nAngularJS 模組。</p><p translation-origin=\"off\">Unlike <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> does not bootstrap the main AngularJS module\ninside the <a href=\"api/core/NgZone\">Angular zone</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">與 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> 不同，當檢測到應用程式的 Angular 部分發生更改時，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不會自動執行<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$digest()</a>。</p><p translation-origin=\"off\">Unlike <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>, <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code> does not automatically run a\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$digest()</a> when changes are\ndetected in the Angular part of the application.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">這意味著使用 <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code>\n的應用程式將更頻繁地執行變更檢測，以確保這兩個框架都得到有關可能的更改的正確通知。這將不可避免地導致比必要的變更檢測執行更多。</p><p translation-origin=\"off\">What this means is that applications using <code><a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a></code> will run change detection more\nfrequently in order to ensure that both frameworks are properly notified about possible changes.\nThis will inevitably result in more change detection runs than necessary.</p>\n\n<p translation-result=\"on\">另一方面，<code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>\n不會嘗試將兩個變更檢測系統緊密聯絡起來，而是將顯式變更檢測限制僅在它知道有必要的情況下執行（例如，當降級元件的輸入更改時）。這提高了效能，尤其是在需要大量變更檢測的應用程式中，但讓開發人員根據需要手動通知每個框架。</p><p translation-origin=\"off\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>()</code>, on the other side, does not try to tie the two change detection systems as\ntightly, restricting the explicit change detection runs only to cases where it knows it is\nnecessary (e.g. when the inputs of a downgraded component change). This improves performance,\nespecially in change-detection-heavy applications, but leaves it up to the developer to manually\nnotify each framework as needed.</p>\n\n<p translation-result=\"on\">有關區別及其含義的更詳細討論，請參閱<a href=\"guide/upgrade-performance\">升級以提高效能</a>。</p><p translation-origin=\"off\">For a more detailed discussion of the differences and their implications, see\n<a href=\"guide/upgrade-performance\">Upgrading for Performance</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你可以用<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply(…)</a>或<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$rootScope.$digest()</a>手動觸發\nAngularJS 中執行的變更檢測。</p><p translation-origin=\"off\">  You can manually trigger a change detection run in AngularJS using\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\">scope.$apply(...)</a> or\n<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\">$rootScope.$digest()</a>.</p>\n\n<p translation-result=\"on\">你可以用 <a href=\"api/core/NgZone#run\">ngZone.run(…)</a> 手動觸發 Angular 中執行的變更檢測。</p><p translation-origin=\"off\">  You can manually trigger a change detection run in Angular using <a href=\"api/core/NgZone#run\">ngZone.run(...)</a>.</p>\n\n</div>\n<h3 id=\"downgrading-multiple-modules\" translation-result=\"on\">降級多個模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrading-multiple-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Downgrading multiple modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/downgradeModule#downgrading-multiple-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以降級多個模組並將它們包含在 AngularJS\n應用程式中。在這種情況下，當需要例項化關聯的降級元件或可注入時，每個降級的模組都將被引導。</p><p translation-origin=\"off\">It is possible to downgrade multiple modules and include them in an AngularJS application. In\nthat case, each downgraded module will be bootstrapped when an associated downgraded component or\ninjectable needs to be instantiated.</p>\n\n<p translation-result=\"on\">降級多個模組時要記住的事情：</p><p translation-origin=\"off\">Things to keep in mind, when downgrading multiple modules:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">每個降級的元件/可注入物都需要與降級的模組顯式關聯。有關更多詳細資訊，請參閱\n<code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> 和 <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code>。</p><p translation-origin=\"off\">Each downgraded component/injectable needs to be explicitly associated with a downgraded\nmodule. See <code><a href=\"api/upgrade/static/downgradeComponent\" class=\"code-anchor\">downgradeComponent</a>()</code> and <code><a href=\"api/upgrade/static/downgradeInjectable\" class=\"code-anchor\">downgradeInjectable</a>()</code> for more details.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果你希望在所有降級模組之間共享某些注入器，可以在建立 <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code> 時將它們作為\n<code><a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a></code> 提供（例如透過 <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> 或 <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>）。</p><p translation-origin=\"off\">If you want some injectables to be shared among all downgraded modules, you can provide them as\n<code><a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a></code>s, when creating the <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code> (e.g. via <code><a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a></code> or\n<code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <a href=\"api/core/PlatformRef#bootstrapmodule\">`bootstrapModule()`</a> 或 <a href=\"api/core/PlatformRef#bootstrapmodulefactory\">`bootstrapModuleFactory()`</a>\n引導降級模組時，每個都被認為是一個“根”模組。因此，將為 <code>\"root\"</code>\n中提供的每個可注入物建立一個新例項（透過 <a href=\"api/core/Injectable#providedIn\">`providedIn`</a>\n）。如果這不是你的意圖，你可以有一個共享模組（將作為“根”模組）並使用該模組的注入器建立所有降級模組：</p><p translation-origin=\"off\">When using <a href=\"api/core/PlatformRef#bootstrapmodule\">`bootstrapModule()`</a> or\n<a href=\"api/core/PlatformRef#bootstrapmodulefactory\">`bootstrapModuleFactory()`</a> to bootstrap the\ndowngraded modules, each one is considered a \"root\" module. As a consequence, a new instance\nwill be created for every injectable provided in <code>\"root\"</code> (via\n<a href=\"api/core/Injectable#providedIn\">`providedIn`</a>).\nIf this is not your intention, you can have a shared module (that will act as act as the \"root\"\nmodule) and create all downgraded modules using that module's injector:</p>\n\n<code-example path=\"upgrade/static/ts/lite-multi-shared/module.ts\" region=\"shared-root-module\">\nlet rootInjectorPromise: Promise&lt;<a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>&gt;|null = null;\nconst getRootInjector = (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  if (!rootInjectorPromise) {\n    rootInjectorPromise = <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>(extraProviders)\n                              .bootstrapModule(Ng2RootModule)\n                              .then(moduleRef =&gt; moduleRef.injector);\n  }\n  return rootInjectorPromise;\n};\n\nconst downgradedNg2AModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(async (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleAFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2AModule);\n  return moduleAFactory.create(rootInjector);\n});\nconst downgradedNg2BModule = <a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a>(async (extraProviders: <a href=\"api/core/StaticProvider\" class=\"code-anchor\">StaticProvider</a>[]) =&gt; {\n  const rootInjector = await getRootInjector(extraProviders);\n  const moduleBFactory = await rootInjector.get(<a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a>).compileModuleAsync(Ng2BModule);\n  return moduleBFactory.create(rootInjector);\n});\n/* . . . */\nconst appModule =\n    angular\n        .module(\n            'exampleAppModule', [downgradedNg2AModule, downgradedNg2BModule, downgradedNg2CModule])\n\n</code-example>\n</li>\n</ul>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/upgrade/static\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/testing/createAngularJSTestingModule\n - api/upgrade/static/testing/createAngularTestingModule\n - guide/deprecations\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - /api\n - api/core/Compiler\n - api/core/Injectable#providedIn\n - api/core/Injector\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgZone\n - api/core/NgZone#run\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/PlatformRef#bootstrapmodule\n - api/core/PlatformRef#bootstrapmodulefactory\n - api/core/StaticProvider\n - api/core/Type\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/platformBrowser\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api/upgrade/static/downgradeModule#description\n - api/upgrade/static/downgradeModule#differences-with-upgrademodule\n - api/upgrade/static/downgradeModule#downgrademodule\n - api/upgrade/static/downgradeModule#downgrading-multiple-modules\n - api/upgrade/static/downgradeModule#usage-notes\n - api/upgrade/static/downgradeModule#與-upgrademodule-的區別\n - api/upgrade/static/downgradeModule#降級多個模組\n - api?query=upgrade/static\n - guide/upgrade-performance\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\n - https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/upgrade/static/src/downgrade_module.ts?message=docs(upgrade)%3A%20請簡述你的修改...#L419-L682\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/upgrade/static/src/downgrade_module.ts#L419-L682\n-->"}