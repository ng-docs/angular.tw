{"id":"api/core","title":"@angular/core","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/core/PACKAGE.md?message=docs(...)%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/PACKAGE.md\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n<header ng-should-translate=\"\" class=\"api-header\">\n  <h1 id=\"angularcore\">@angular/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#angularcore\"><i class=\"material-icons\">link</i></a></h1>\n  <label class=\"api-type-label package\">package</label>\n  \n  \n  \n</header>\n\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\"><p>Implements Angular's core functionality, low-level services, and utilities.</p>\n\n  <ul>\n<li>\n<p>Defines the class infrastructure for components, view hierarchies, change detection, rendering, and event handling.</p>\n</li>\n<li>\n<p>Defines the decorators that supply metadata and context for Angular constructs. </p>\n</li>\n<li>\n<p>Defines infrastructure for dependency injection (DI), internationalization (i18n), and various testing and debugging facilities.</p>\n</li>\n</ul>\n\n\n  \n\n  \n  <h2 translation-result=\"on\" id=\"入口點\">入口點<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#入口點\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"entry-points\">Entry points<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#entry-points\"><i class=\"material-icons\">link</i></a></h2>\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"主要\">主要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#主要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"primary\">Primary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core#primary-entry-point-exports\">@angular/core</a></code></td>\n        <td>\n          \n          <p>Implements Angular's core functionality, low-level services, and utilities.</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"次要\">次要<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#次要\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"secondary\">Secondary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#secondary\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/global\">@angular/core/global</a></code></td>\n        <td>\n          \n          <p>Exposes a set of functions in the global namespace which are useful for debugging the current state\nof your application.\nThese functions are exposed via the global <code>ng</code> \"namespace\" variable automatically when you import\nfrom <code>@angular/core</code> and run your application in development mode. These functions are not exposed\nwhen the application runs in a production mode.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/rxjs-interop\">@angular/core/rxjs-interop</a></code></td>\n        <td>\n          \n          <p>Includes utilities related to using the RxJS library in conjunction with Angular's signal-based reactivity system.</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/testing\">@angular/core/testing</a></code></td>\n        <td>\n          \n          <p>Provides infrastructure for testing Angular core functionality.</p>\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n\n  <h2 translation-result=\"on\" id=\"主要入口點的匯出\">主要入口點的匯出<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#主要入口點的匯出\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"primary-entry-point-exports\">Primary entry point exports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#primary-entry-point-exports\"><i class=\"material-icons\">link</i></a></h2>\n  \n  \n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationModule\">ApplicationModule</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">由 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 重新匯出，當你使用 CLI <code>new</code> 命令建立新應用時，它會自動包含在根 <code>AppModule</code>\n中。</p><p translation-origin=\"off\">Re-exported by <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, which is included automatically in the root\n<code>AppModule</code> when you create a new app with the CLI <code>new</code> command. Eagerly injects\n<code><a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a></code> to instantiate it.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"類\">類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#類\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"classes\">Classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#classes\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationInitStatus\">ApplicationInitStatus</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">反映正在執行的 <a href=\"api/core/APP_INITIALIZER\"><code>APP_INITIALIZER</code></a> 函式狀態的類別。</p><p translation-origin=\"off\">A class that reflects the state of running <a href=\"api/core/APP_INITIALIZER\"><code>APP_INITIALIZER</code></a> functions.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationRef\">ApplicationRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">對頁面上執行的 Angular 應用程式的參考。</p><p translation-origin=\"off\">A reference to an Angular application running on a page.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectorRef\">ChangeDetectorRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">Angular 各種檢視的基礎類，提供變更檢測功能。\n變更檢測樹會收集要檢查的所有檢視。\n使用這些方法從樹中新增或移除檢視、初始化變更檢測並明確地把這些檢視標記為<em>髒的</em>，意思是它們變了、需要重新渲染。</p><p translation-origin=\"off\">Base class that provides change detection functionality.\nA change-detection tree collects all views that are to be checked for changes.\nUse the methods to add and remove views from the tree, initiate change-detection,\nand explicitly mark views as <em>dirty</em>, meaning that they have changed and need to be re-rendered.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/Compiler\" class=\"deprecated-api-item\">Compiler</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要存取此符號。有關其他上下文，請參閱<a href=\"guide/deprecations#jit-api-changes\">由於 ViewEngine 棄用導致的 JIT API\n更改</a>。</p>\n\n          <p translation-result=\"on\">本底層服務用於供 Angular 編譯器在執行期間建立 <a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a>，該工廠以後可用於建立和渲染元件例項。</p><p translation-origin=\"off\">Low-level service for running the angular compiler during runtime\nto create <a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a>s, which\ncan later be used to create and render a Component instance.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/CompilerFactory\" class=\"deprecated-api-item\">CompilerFactory</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要存取此符號。有關其他上下文，請參閱<a href=\"guide/deprecations#jit-api-changes\">由於 ViewEngine 棄用導致的 JIT API\n更改</a>。</p>\n\n          <p translation-result=\"on\">用於建立編譯器的工廠</p><p translation-origin=\"off\">A factory for creating a Compiler</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactory\" class=\"deprecated-api-item\">ComponentFactory</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n<p>Angular 不再需要元件工廠。請使用可以直接使用 Component 類別的其他 API。</p>\n\n          <p translation-result=\"on\">可用來動態建立元件的工廠的基底類別。<code>resolveComponentFactory()</code>\n例項化給定型別的元件的工廠。使用產生的 <code>ComponentFactory.create()</code> 方法建立該型別的元件。</p><p translation-origin=\"off\">Base class for a factory that can create a component dynamically.\nInstantiate a factory for a given type of component with <code>resolveComponentFactory()</code>.\nUse the resulting <code>ComponentFactory.create()</code> method to create a component of that type.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ComponentFactoryResolver\" class=\"deprecated-api-item\">ComponentFactoryResolver</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Angular no longer requires Component factories. Please use other APIs where\nComponent class can be used directly.</p>\n<p>Angular 不再需要元件工廠。請使用可以直接使用 Component 類別的其他 API。</p>\n\n          <p translation-result=\"on\">一個簡單的登錄檔，它將 <code>Components</code> 對映到產生的 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>\n類，該類可用於建立元件的例項。用於獲取給定元件型別的工廠，然後使用工廠的 <code>create()</code>\n方法建立該型別的元件。</p><p translation-origin=\"off\">A simple registry that maps <code>Components</code> to generated <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> classes\nthat can be used to create instances of components.\nUse to obtain the factory for a given component type,\nthen use the factory's <code>create()</code> method to create a component of that type.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentRef\">ComponentRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示由 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 建立的元件。提供對元件例項和相關物件的存取，並提供銷燬例項的方法。</p><p translation-origin=\"off\">Represents a component created by a <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code>.\nProvides access to the component instance and related objects,\nand provides the means of destroying the instance.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugElement\">DebugElement</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugEventListener\">DebugEventListener</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DebugNode\">DebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/DefaultIterableDiffer\" class=\"deprecated-api-item\">DefaultIterableDiffer</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> v4.0.0 - Should not be part of public API.</p>\n<p>v4.0.0-不應成為公共 API 的一部分。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DestroyRef\">DestroyRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\"><code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 允許你設定回呼(Callback)以針對任何清理或銷燬行為執行。這種銷燬的範圍取決於注入 <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 位置。如果將 <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> 注入到元件或指令中，則回呼(Callback)會在該元件或指令被銷燬時執行。否則回呼(Callback)會在相應的注入器被銷燬時執行。</p><p translation-origin=\"off\"><code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> lets you set callbacks to run for any cleanup or destruction behavior.\nThe scope of this destruction depends on where <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code> is injected. If <code><a href=\"api/core/DestroyRef\" class=\"code-anchor\">DestroyRef</a></code>\nis injected in a component or directive, the callbacks run when that component or\ndirective is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ElementRef\">ElementRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">對檢視中某個原生元素的包裝器。</p><p translation-origin=\"off\">A wrapper around a native element inside of a View.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EmbeddedViewRef\">EmbeddedViewRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示檢視容器中的 Angular\n<a href=\"guide/glossary#view\">檢視</a>。<a href=\"guide/glossary#view-tree\">嵌入檢視</a>可以從在範本中定義它的宿主元件之外的元件中參考，也可以由\n<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 進行獨立定義。</p><p translation-origin=\"off\">Represents an Angular <a href=\"guide/glossary#view\">view</a> in a view container.\nAn <a href=\"guide/glossary#view-hierarchy\">embedded view</a> can be referenced from a component\nother than the hosting component whose template defines it, or it can be defined\nindependently by a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentInjector\">EnvironmentInjector</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個新的 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，它是使用 <code><a href=\"api/core/InjectorType\" class=\"code-anchor\">InjectorType</a>&lt;any&gt;</code> 的 <code>defType</code> 配置的。</p><p translation-origin=\"off\">An <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> that's part of the environment injector hierarchy, which exists outside of the\ncomponent tree.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ErrorHandler\">ErrorHandler</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">提供用於集中式例外處理的掛鉤。</p><p translation-origin=\"off\">Provides a hook for centralized exception handling.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EventEmitter\">EventEmitter</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用在帶有 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>\n指令的元件中，以同步或非同步方式發出自訂事件，並透過訂閱例項來為這些事件註冊處理器。</p><p translation-origin=\"off\">Use in components with the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> directive to emit custom events\nsynchronously or asynchronously, and register handlers for those events\nby subscribing to an instance.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectionToken\">InjectionToken</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立可用於 DI 提供者的令牌。</p><p translation-origin=\"off\">Creates a token that can be used in a DI Provider.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injector\">Injector</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">具體的注入器會實現此介面。配置有<a href=\"guide/glossary#provider\">某些提供者</a>的注入器，這些提供者會將各種型別的依賴項與<a href=\"guide/glossary#di-token\">注入令牌</a>相關聯。</p><p translation-origin=\"off\">Concrete injectors implement this interface. Injectors are configured\nwith <a href=\"guide/glossary#provider\">providers</a> that associate\ndependencies of various types with <a href=\"guide/glossary#di-token\">injection tokens</a>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffers\">IterableDiffers</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">NgFor、NgClass 等使用的不同迭代策略的儲存庫。</p><p translation-origin=\"off\">A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffers\">KeyValueDiffers</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">NgClass、NgStyle 等使用的不同對映表差異策略的儲存庫。</p><p translation-origin=\"off\">A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ModuleWithComponentFactories\" class=\"deprecated-api-item\">ModuleWithComponentFactories</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Ivy JIT mode doesn't require accessing this symbol.\nSee <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for\nadditional context.</p>\n<p>Ivy JIT 模式不需要存取此符號。有關其他上下文，請參閱<a href=\"guide/deprecations#jit-api-changes\">由於 ViewEngine 棄用導致的 JIT API\n更改</a>。</p>\n\n          <p translation-result=\"on\">NgModuleFactory 和一些 ComponentFactory 的組合。</p><p translation-origin=\"off\">Combination of NgModuleFactory and ComponentFactories.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/NgModuleFactory\" class=\"deprecated-api-item\">NgModuleFactory</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\nJIT mode. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a>\nfor additional context. Angular provides APIs that accept NgModule classes directly (such as\n<a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> and\n<a href=\"api/core/createNgModule\">createNgModule</a>), consider switching to those APIs instead of\nusing factory-based ones.</p>\n<p>此類主要作為 ViewEngine-based JIT API 的一部分使用，在 Ivy JIT\n模式下不再需要。有關其他上下文，請參閱<a href=\"guide/deprecations#jit-api-changes\">由於 ViewEngine 棄用導致的 JIT API\n更改</a>。Angular 提供了直接接受 NgModule 類別的\nAPI（例如<a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a>和<a href=\"api/core/createNgModuleRef\">createNgModuleRef</a>\n），請考慮切換到這些 API，而不是使用基於工廠的 API。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModuleRef\">NgModuleRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\"><code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 建立的 <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code> 的例項。提供對 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 例項和相關物件的存取。</p><p translation-origin=\"off\">Represents an instance of an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> created by an <code><a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a></code>.\nProvides access to the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> instance and related objects.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgProbeToken\">NgProbeToken</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">本令牌可以在 NgProbe 中註冊自己的第三方元件。</p><p translation-origin=\"off\">A token for third-party components that can register themselves with NgProbe.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgZone\">NgZone</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一種用於在 Angular Zone 內部或外部執行任務的可注入服務。</p><p translation-origin=\"off\">An injectable service for executing work inside or outside of the Angular zone.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PlatformRef\">PlatformRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">Angular 平台是 Angular 在網頁上的入口點。每個頁面只有一個平台。頁面上執行的每個 Angular 應用程式所共有的服務（比如反射）都在其範圍內繫結。當使用 <code>PlatformBrowser</code> 這樣的平台工廠建立平台時，將隱含初始化此頁面的平台；也可以透過呼叫 <code><a href=\"api/core/createPlatform\" class=\"code-anchor\">createPlatform</a>()</code> 函式來顯式初始化此頁面的平台。</p><p translation-origin=\"off\">The Angular platform is the entry point for Angular on a web page.\nEach page has exactly one platform. Services (such as reflection) which are common\nto every Angular application running on the page are bound in its scope.\nA page's platform is initialized implicitly when a platform is created using a platform\nfactory such as <code>PlatformBrowser</code>, or explicitly by calling the <code><a href=\"api/core/createPlatform\" class=\"code-anchor\">createPlatform</a>()</code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Query\">Query</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">查詢元資料的基底類別。</p><p translation-origin=\"off\">Base class for query metadata.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/QueryList\">QueryList</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個不可修改的條目列表，當應用狀態變化時，Angular 會保證它是最新的。</p><p translation-origin=\"off\">An unmodifiable list of items that Angular keeps up to date when the state\nof the application changes.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Renderer2\">Renderer2</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">擴充此基底類別以實現自訂渲染器。預設情況下，Angular 會把範本渲染成 DOM。\n你可以使用自訂渲染器來攔截渲染類呼叫，或用於渲染一些非 DOM 的東西。</p><p translation-origin=\"off\">Extend this base class to implement custom rendering. By default, Angular\nrenders a template into DOM. You can use custom rendering to intercept\nrendering calls, or to render to something other than DOM.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererFactory2\">RendererFactory2</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立並初始化實現 <code><a href=\"api/core/Renderer2\" class=\"code-anchor\">Renderer2</a></code> 基底類別的自訂渲染器。</p><p translation-origin=\"off\">Creates and initializes a custom renderer that implements the <code><a href=\"api/core/Renderer2\" class=\"code-anchor\">Renderer2</a></code> base class.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Sanitizer\">Sanitizer</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">檢視使用消毒器來對潛在的危險值進行無害化處理。</p><p translation-origin=\"off\">Sanitizer is used by the views to sanitize potentially dangerous values.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChange\">SimpleChange</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示指令例項上單個屬性從先前值到新值的基本變更物件。在 <a href=\"api/core/SimpleChanges\"><code>SimpleChanges</code></a> 物件中作為值傳遞給 <code>ngOnChanges</code> 掛鉤。</p><p translation-origin=\"off\">Represents a basic change from a previous to a new value for a single\nproperty on a directive instance. Passed as a value in a\n<a href=\"api/core/SimpleChanges\"><code>SimpleChanges</code></a> object to the <code>ngOnChanges</code> hook.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TemplateRef\">TemplateRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示一個內嵌範本，它可用於例項化內嵌的檢視。\n要想根據範本例項化內嵌的檢視，請使用 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法。</p><p translation-origin=\"off\">Represents an embedded template that can be used to instantiate embedded views.\nTo instantiate embedded views based on a template, use the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>\nmethod <code>createEmbeddedView()</code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Testability\">Testability</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">Testability 服務提供了可以從瀏覽器存取的測試鉤子。</p><p translation-origin=\"off\">The Testability service provides testing hooks that can be accessed from\nthe browser.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TestabilityRegistry\">TestabilityRegistry</a></code></td>\n        <td>\n          \n          <p>A global registry of <a href=\"api/core/Testability\"><code>Testability</code></a> instances for specific elements.</p>\n<a href=\"api/core/Testability\"><code>Testability</code></a>\n<p> 例項的全域登錄檔，用於特定元素。</p>\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TransferState\">TransferState</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">從伺服器端的應用程式傳到客戶端的應用程式的鍵值儲存。</p><p translation-origin=\"off\">A key value store that is transferred from the application on the server side to the application\non the client side.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Type\">Type</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示 Component 或其他物件的型別。</p><p translation-origin=\"off\">Represents a type that a Component or other object is instances of.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Version\">Version</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示 Angular 的版本</p><p translation-origin=\"off\">Represents the version of Angular</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示可以將一個或多個檢視附著到元件中的容器。</p><p translation-origin=\"off\">Represents a container where one or more views can be attached to a component.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewRef\">ViewRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示一個 Angular <a href=\"guide/glossary#view\" title=\"Definition\">檢視</a>。</p><p translation-origin=\"off\">Represents an Angular <a href=\"guide/glossary#view\" title=\"Definition\">view</a>.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"裝飾器\">裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#裝飾器\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"decorators\">Decorators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#decorators\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Attribute\">Attribute</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">指令建構函式的引數修飾器，用於指定宿主元素屬性，其值作為常量字串文字注入。</p><p translation-origin=\"off\">Parameter decorator for a directive constructor that designates\na host-element attribute whose value is injected as a constant string literal.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Component\">Component</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個裝飾器，用於把某個類標記為 Angular 元件，併為它配置一些元資料，以決定該元件在執行期間該如何處理、例項化和使用。</p><p translation-origin=\"off\">Decorator that marks a class as an Angular component and provides configuration\nmetadata that determines how the component should be processed,\ninstantiated, and used at runtime.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChild\">ContentChild</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用於配置內容查詢的引數裝飾器。</p><p translation-origin=\"off\">Property decorator that configures a content query.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ContentChildren\">ContentChildren</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用於配置內容查詢的引數裝飾器。</p><p translation-origin=\"off\">Property decorator that configures a content query.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Directive\">Directive</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將類標記為 Angular 指令的裝飾器。你可以定義自己的指令，以將自訂行為附加到 DOM 中的元素。</p><p translation-origin=\"off\">Decorator that marks a class as an Angular directive.\nYou can define your own directives to attach custom behavior to elements in the DOM.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Host\">Host</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">類建構函式的檢視提供者引數上的引數修飾器，用於指示 DI 框架透過檢查子元素的注入器來解析檢視，並在到達當前元件的宿主元素時停止。</p><p translation-origin=\"off\">Parameter decorator on a view-provider parameter of a class constructor\nthat tells the DI framework to resolve the view by checking injectors of child\nelements, and stop when reaching the host element of the current component.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostBinding\">HostBinding</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個裝飾器，用於把一個 DOM 屬性標記為繫結到宿主的屬性，並提供配置元資料。Angular 在變更檢測期間會自動檢查宿主屬性繫結，如果這個繫結變化了，它就會更新該指令所在的宿主元素。</p><p translation-origin=\"off\">Decorator that marks a DOM property as a host-binding property and supplies configuration\nmetadata.\nAngular automatically checks host property bindings during change detection, and\nif a binding changes it updates the host element of the directive.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/HostListener\">HostListener</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個裝飾器，用於宣告要監聽的 DOM 事件，並提供在該事件發生時要執行的處理器方法。</p><p translation-origin=\"off\">Decorator that declares a DOM event to listen for,\nand provides a handler method to run when that event occurs.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Inject\">Inject</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">類建構函式中依賴項引數上的引數裝飾器，用於指定依賴項的自訂提供者。</p><p translation-origin=\"off\">Parameter decorator on a dependency parameter of a class constructor\nthat specifies a custom provider of the dependency.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Injectable\">Injectable</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">標記性元資料，表示一個類別可以由 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 進行建立。</p><p translation-origin=\"off\">Decorator that marks a class as available to be\nprovided and injected as a dependency.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Input\">Input</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個裝飾器，用來把某個類欄位標記為輸入屬性，並提供配置元資料。該輸入屬性會繫結到範本中的某個 DOM 屬性。當變更檢測時，Angular 會自動使用這個 DOM 屬性的值來更新此資料屬性。</p><p translation-origin=\"off\">Decorator that marks a class field as an input property and supplies configuration metadata.\nThe input property is bound to a DOM property in the template. During change detection,\nAngular automatically updates the data property with the DOM property's value.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgModule\">NgModule</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">把一個類別標記為 NgModule，並提供配置元資料。</p><p translation-origin=\"off\">Decorator that marks a class as an NgModule and supplies configuration metadata.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Optional\">Optional</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用於建構函式引數的引數裝飾器，將引數標記為可選依賴項。如果找不到依賴項，則 DI 框架提供 null。</p><p translation-origin=\"off\">Parameter decorator to be used on constructor parameters,\nwhich marks the parameter as being an optional dependency.\nThe DI framework provides <code>null</code> if the dependency is not found.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Output\">Output</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個裝飾器，用於把一個類別欄位標記為輸出屬性，並提供配置元資料。凡是繫結到輸出屬性上的 DOM 屬性，Angular 在變更檢測期間都會自動進行更新。</p><p translation-origin=\"off\">Decorator that marks a class field as an output property and supplies configuration metadata.\nThe DOM property bound to the output property is automatically updated during change detection.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Pipe\">Pipe</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">本裝飾器用於將類標記為管道並提供配置元資料。</p><p translation-origin=\"off\">Decorator that marks a class as pipe and supplies configuration metadata.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Self\">Self</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將在建構函式引數上使用引數裝飾器，該裝飾器告訴 DI 框架從本地注入器開始解析依賴項。</p><p translation-origin=\"off\">Parameter decorator to be used on constructor parameters,\nwhich tells the DI framework to start dependency resolution from the local injector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SkipSelf\">SkipSelf</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將在建構函式引數上使用的引數裝飾器，該引數指示 DI 框架從父注入器啟動依賴項解析。解析器在注入器層次結構中向上查詢，因此不會檢查本地注入器的提供者。</p><p translation-origin=\"off\">Parameter decorator to be used on constructor parameters,\nwhich tells the DI framework to start dependency resolution from the parent injector.\nResolution works upward through the injector hierarchy, so the local injector\nis not checked for a provider.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChild\">ViewChild</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">屬性裝飾器，用於配置一個檢視查詢。變更檢測器會在檢視的 DOM 中查詢能匹配上該選擇器的第一個元素或指令。如果檢視的 DOM 發生了變化，出現了匹配該選擇器的新的子節點，該屬性就會被更新。</p><p translation-origin=\"off\">Property decorator that configures a view query.\nThe change detector looks for the first element or the directive matching the selector\nin the view DOM. If the view DOM changes, and a new child matches the selector,\nthe property is updated.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewChildren\">ViewChildren</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用於配置檢視查詢的引數裝飾器。</p><p translation-origin=\"off\">Property decorator that configures a view query.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"函式\">函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#函式\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"functions\">Functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#functions\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/asNativeElements\">asNativeElements</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertInInjectionContext\">assertInInjectionContext</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">斷言當前堆疊幀在注入上下文中並且可以存取 <code>inject</code>。</p><p translation-origin=\"off\">Asserts that the current stack frame is within an injection context and has access to <code>inject</code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/assertPlatform\">assertPlatform</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">檢查當前是否存在以給定標記為提供者的平台。</p><p translation-origin=\"off\">Checks that there is currently a platform that contains the given token as a provider.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/booleanAttribute\">booleanAttribute</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將值（通常是字串）轉換為布林值。旨在用作輸入的轉換函式。</p><p translation-origin=\"off\">Transforms a value (typically a string) to a boolean.\nIntended to be used as a transform function of an input.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/computed\">computed</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個計算 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它從表示式中匯出反應值。</p><p translation-origin=\"off\">Create a computed <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> which derives a reactive value from an expression.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createComponent\">createComponent</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">根據提供的元件型別和一組選項建立一個 <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> 例項。</p><p translation-origin=\"off\">Creates a <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> instance based on provided component type and a set of options.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createEnvironmentInjector\">createEnvironmentInjector</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個新的環境注入器。</p><p translation-origin=\"off\">Create a new environment injector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createNgModule\">createNgModule</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">根據提供的 NgModule 類和父注入器返回一個新的 NgModuleRef 例項。</p><p translation-origin=\"off\">Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatform\">createPlatform</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個平台。必須使用此函式在啟動時建立平台。</p><p translation-origin=\"off\">Creates a platform.\nPlatforms must be created on launch using this function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/createPlatformFactory\">createPlatformFactory</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">為平台建立工廠。可用於提供或覆蓋針對你的應用程式的執行時需求的 <code>Providers</code>，比如 <code><a href=\"api/core/PLATFORM_INITIALIZER\" class=\"code-anchor\">PLATFORM_INITIALIZER</a></code> 和 <code><a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a></code>。</p><p translation-origin=\"off\">Creates a factory for a platform. Can be used to provide or override <code>Providers</code> specific to\nyour application's runtime needs, such as <code><a href=\"api/core/PLATFORM_INITIALIZER\" class=\"code-anchor\">PLATFORM_INITIALIZER</a></code> and <code><a href=\"api/core/PLATFORM_ID\" class=\"code-anchor\">PLATFORM_ID</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/destroyPlatform\">destroyPlatform</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">銷燬頁面上的當前 Angular 平臺和所有 Angular 應用程式。銷燬在平臺上註冊的所有模組和監聽器。</p><p translation-origin=\"off\">Destroys the current Angular platform and all Angular applications on the page.\nDestroys all modules and listeners registered with the platform.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/effect\">effect</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">為給定的反應函式建立一個全域 <code>Effect</code>。</p><p translation-origin=\"off\">Create a global <code>Effect</code> for the given reactive function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/enableProdMode\">enableProdMode</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">禁用 Angular 的開發模式，該模式將關閉框架中的斷言和其他檢查。</p><p translation-origin=\"off\">Disable Angular's development mode, which turns off assertions and other\nchecks within the framework.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/forwardRef\">forwardRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">允許參考尚未定義的參考。</p><p translation-origin=\"off\">Allows to refer to references which are not yet defined.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getDebugNode\">getDebugNode</a></code></td>\n        <td>\n          \n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/getModuleFactory\" class=\"deprecated-api-item\">getModuleFactory</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Use <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code> instead.</p>\n<p>改用 <code><a href=\"api/core/getNgModuleById\" class=\"code-anchor\">getNgModuleById</a></code>。</p>\n\n          <p translation-result=\"on\">返回具有給定 id 的 NgModuleFactory（如果存在並且已載入）。無法檢索未指定過 <code>id</code>\n的模組工廠。如果找不到模組，則丟擲該例外。</p><p translation-origin=\"off\">Returns the NgModuleFactory with the given id (specified using <a href=\"api/core/NgModule#id\">@NgModule.id\nfield</a>), if it exists and has been loaded. Factories for NgModules that do\nnot specify an <code>id</code> cannot be retrieved. Throws if an NgModule cannot be found.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getNgModuleById\">getNgModuleById</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">返回具有給定 id（使用<a href=\"api/core/NgModule#id\">@NgModule.id 欄位</a>指定）的 NgModule\n類（如果存在並且已載入）。無法檢索未指定 <code>id</code> 的 NgModules 類別。如果找不到 NgModule，則丟擲。</p><p translation-origin=\"off\">Returns the NgModule class with the given id (specified using <a href=\"api/core/NgModule#id\">@NgModule.id\nfield</a>), if it exists and has been loaded. Classes for NgModules that do\nnot specify an <code>id</code> cannot be retrieved. Throws if an NgModule cannot be found.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/getPlatform\">getPlatform</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">返回當前平台。</p><p translation-origin=\"off\">Returns the current platform.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/importProvidersFrom\">importProvidersFrom</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">從所有 NgModule 和獨立元件（包括可傳遞匯入的元件）收集提供程式。</p><p translation-origin=\"off\">Collects providers from all NgModules and standalone components, including transitively imported\nones.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/inject\">inject</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">從當前活動的注入器注入令牌。<code>inject</code> 僅在 DI 系統例項化依賴項期間受支援。它可以在以下期間使用：</p><p translation-origin=\"off\">Injects a token from the currently active injector.\n<code>inject</code> is only supported during instantiation of a dependency by the DI system. It can be used\nduring:</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isDevMode\">isDevMode</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">返回 Angular 是否處於開發模式。</p><p translation-origin=\"off\">Returns whether Angular is in development mode.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isSignal\">isSignal</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">檢查給定 <code>value</code> 是否為反應 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Checks if the given <code>value</code> is a reactive <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/isStandalone\">isStandalone</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">檢查給定的元件、指令或管道是否被標記為獨立的。如果傳遞的不是元件、指令或管道類，這將返回 false 請參閱<a href=\"/guide/standalone-components\">本指南</a>以獲取更多資訊：</p><p translation-origin=\"off\">Checks whether a given Component, Directive or Pipe is marked as standalone.\nThis will return false if passed anything other than a Component, Directive, or Pipe class\nSee <a href=\"/guide/standalone-components\">this guide</a> for additional information:</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/makeEnvironmentProviders\">makeEnvironmentProviders</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 陣列包裝到 <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code> 中，以防止它們在元件注入器的 `@Component 中被意外參考。</p><p translation-origin=\"off\">Wrap an array of <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>s into <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code>, preventing them from being accidentally\nreferenced in `@Component in a component injector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/makeStateKey\">makeStateKey</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個 <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a>&lt;T&gt;</code>，可用於把 T 型別的值儲存在 <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> 中。</p><p translation-origin=\"off\">Create a <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a>&lt;T&gt;</code> that can be used to store value of type T with <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/mergeApplicationConfig\">mergeApplicationConfig</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">從左到右合併多個應用程式配置。</p><p translation-origin=\"off\">Merge multiple application configurations from left to right.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/numberAttribute\">numberAttribute</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將值（通常是字串）轉換為數字。旨在用作輸入的轉換函式。</p><p translation-origin=\"off\">Transforms a value (typically a string) to a number.\nIntended to be used as a transform function of an input.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/provideZoneChangeDetection\">provideZoneChangeDetection</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">為使用 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 引導的應用程式提供基於 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的變更檢測。</p><p translation-origin=\"off\">Provides <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code>-based change detection for the application bootstrapped using\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/reflectComponentType\">reflectComponentType</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個允許檢索元件元資料的物件。</p><p translation-origin=\"off\">Creates an object that allows to retrieve component metadata.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/resolveForwardRef\">resolveForwardRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">從 forwardRef 惰性檢索參考值。</p><p translation-origin=\"off\">Lazily retrieves the reference value from a forwardRef.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/runInInjectionContext\">runInInjectionContext</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在給定 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 的上下文中執行給定函式。</p><p translation-origin=\"off\">Runs the given function in the context of the given <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/setTestabilityGetter\">setTestabilityGetter</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">設定 Angular 測試框架使用的 <a href=\"api/core/GetTestability\"><code>GetTestability</code></a> 實現。</p><p translation-origin=\"off\">Set the <a href=\"api/core/GetTestability\"><code>GetTestability</code></a> implementation used by the Angular testing framework.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/signal\">signal</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立一個可以直接設定或更新的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Create a <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> that can be set or updated directly.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/untracked\">untracked</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在非反應性（非追蹤）上下文中執行任意函式。執行的函式可以選擇返回一個值。</p><p translation-origin=\"off\">Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\ncan, optionally, return a value.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"結構\">結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#結構\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"structures\">Structures<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#structures\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AbstractType\">AbstractType</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示抽象類別 <code>T</code>，如果將其應用於具體類，它將無法被例項化。</p><p translation-origin=\"off\">Represents an abstract class <code>T</code>, if applied to a concrete class it would stop being\ninstantiable.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentChecked\">AfterContentChecked</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，它會在預設的變更檢測器對指令的所有內容完成了變更檢查之後呼叫。</p><p translation-origin=\"off\">A lifecycle hook that is called after the default change detector has\ncompleted checking all content of a directive. It will run after the content\nhas been checked and most of the time it's during a change detection cycle.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterContentInit\">AfterContentInit</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，它會在 Angular 完全例項化了指令的所有內容之後呼叫。\n定義一個 <code>ngAfterContentInit()</code> 方法來處理額外的初始化任務。</p><p translation-origin=\"off\">A lifecycle hook that is called after Angular has fully initialized\nall content of a directive. It will run only once when the projected content is initialized.\nDefine an <code>ngAfterContentInit()</code> method to handle any additional initialization tasks.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewChecked\">AfterViewChecked</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，它會在預設的變更檢測器完成了對元件檢視的變更檢測之後呼叫。</p><p translation-origin=\"off\">A lifecycle hook that is called after the default change detector has\ncompleted checking a component's view for changes.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/AfterViewInit\">AfterViewInit</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，會在 Angular 完全初始化了元件的檢視後呼叫。\n定義一個 <code>ngAfterViewInit()</code> 方法來處理一些額外的初始化任務。</p><p translation-origin=\"off\">A lifecycle hook that is called after Angular has fully initialized\na component's view.\nDefine an <code>ngAfterViewInit()</code> method to handle any additional initialization tasks.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ApplicationConfig\">ApplicationConfig</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在引導操作期間透過 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 呼叫可用的一組配置選項。</p><p translation-origin=\"off\">Set of config options available during the application bootstrap operation.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/BootstrapOptions\">BootstrapOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">為引導過程提供其他選項。</p><p translation-origin=\"off\">Provides additional options to the bootstrapping process.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ChangeDetectionStrategy\">ChangeDetectionStrategy</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">預設變更檢測器用來檢測更改的策略。設定後，將在下次觸發變更檢測時生效。</p><p translation-origin=\"off\">The strategy that the default change detector uses to detect changes.\nWhen set, takes effect the next time change detection is triggered.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassProvider\">ClassProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便為令牌返回 <code>useClass</code> 的例項。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ClassSansProvider\">ClassSansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以透過呼叫 <code>useClass</code> 函式返回某個值。是 <code><a href=\"api/core/ClassProvider\" class=\"code-anchor\">ClassProvider</a></code> 裝飾器的基介面。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useClass</code> function.\nBase for <code><a href=\"api/core/ClassProvider\" class=\"code-anchor\">ClassProvider</a></code> decorator.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ComponentMirror\">ComponentMirror</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個介面，描述可以用 <code><a href=\"api/core/reflectComponentType\" class=\"code-anchor\">reflectComponentType</a></code> 函式檢索的元件元資料子集。</p><p translation-origin=\"off\">An interface that describes the subset of component metadata\nthat can be retrieved using the <code><a href=\"api/core/reflectComponentType\" class=\"code-anchor\">reflectComponentType</a></code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorProvider\">ConstructorProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以返回令牌的例項。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of a token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ConstructorSansProvider\">ConstructorSansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的例項。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of a token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateComputedOptions\">CreateComputedOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">傳遞給 <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> 建立函式的選項。</p><p translation-origin=\"off\">Options passed to the <code><a href=\"api/core/computed\" class=\"code-anchor\">computed</a></code> creation function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateEffectOptions\">CreateEffectOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">傳遞給 <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> 函式的選項。</p><p translation-origin=\"off\">Options passed to the <code><a href=\"api/core/effect\" class=\"code-anchor\">effect</a></code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CreateSignalOptions\">CreateSignalOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">傳遞給 <code><a href=\"api/core/signal\" class=\"code-anchor\">signal</a></code> 建立函式的選項。</p><p translation-origin=\"off\">Options passed to the <code><a href=\"api/core/signal\" class=\"code-anchor\">signal</a></code> creation function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoBootstrap\">DoBootstrap</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">掛鉤應用程式的手動引導，而不使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 標記中的 bootstrap 陣列。這個鉤子只有在 bootstrap\n陣列為空或未提供時才會被呼叫。</p><p translation-origin=\"off\">Hook for manual bootstrapping of the application instead of using <code>bootstrap</code> array in <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>\nannotation. This hook is invoked only when the <code>bootstrap</code> array is empty or not provided.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DoCheck\">DoCheck</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，除了使用預設的變更檢查器執行檢查之外，還會為指令執行自訂的變更檢測函式。</p><p translation-origin=\"off\">A lifecycle hook that invokes a custom change-detection function for a directive,\nin addition to the check performed by the default change-detector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EffectRef\">EffectRef</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">全域反應效果，可以手動銷燬。</p><p translation-origin=\"off\">A global reactive effect, which can be manually destroyed.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingProvider\">ExistingProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一個 <code>useExisting</code> 令牌的值。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value of another <code>useExisting</code> token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ExistingSansProvider\">ExistingSansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回另一個 <code>useExisting</code> 令牌的值。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value of another <code>useExisting</code> token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactoryProvider\">FactoryProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以便呼叫 <code>useFactory</code> 函式返回一個值。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useFactory</code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/FactorySansProvider\">FactorySansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">把此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 配置為呼叫 <code>useFactory</code> 函式返回一個值。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value by invoking a <code>useFactory</code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ForwardRefFn\">ForwardRefFn</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">要傳給 <a href=\"api/core/forwardRef\"><code>forwardRef</code></a> 的函式時必須實現的介面。</p><p translation-origin=\"off\">An interface that a function passed into <a href=\"api/core/forwardRef\"><code>forwardRef</code></a> has to implement.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/GetTestability\">GetTestability</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">介面卡介面，用於檢索與特定上下文關聯 <code><a href=\"api/core/Testability\" class=\"code-anchor\">Testability</a></code></p><p translation-origin=\"off\">Adapter interface for retrieving the <code><a href=\"api/core/Testability\" class=\"code-anchor\">Testability</a></code> service associated for a\nparticular context.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/InjectFlags\" class=\"deprecated-api-item\">InjectFlags</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> use an options object for <code>inject</code> instead.</p>\n<p>改用選項物件進行 <code>inject</code>。</p>\n\n          <p translation-result=\"on\">DI 的注入標誌。</p><p translation-origin=\"off\">Injection flags for DI.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectOptions\">InjectOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">要 <code>inject</code> 選項引數的型別。</p><p translation-origin=\"off\">Type of the options argument to <code>inject</code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableType\">InjectableType</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">具有 <code>InjectableDef</code> 靜態欄位的 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code></p><p translation-origin=\"off\">A <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> which has a <code>ɵprov: ɵɵInjectableDeclaration</code> static field.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectorType\">InjectorType</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">具有 <code>InjectorDef</code> 靜態欄位的型別。</p><p translation-origin=\"off\">A type which has an <code>InjectorDef</code> static field.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChangeRecord\">IterableChangeRecord</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">代表條目變更資訊的記錄。</p><p translation-origin=\"off\">Record representing the item change information.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableChanges\">IterableChanges</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">本物件描述自上次呼叫 <code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a>#diff()</code> 以來 <code>Iterable</code> 集合中的變更。</p><p translation-origin=\"off\">An object describing the changes in the <code>Iterable</code> collection since last time\n<code><a href=\"api/core/IterableDiffer\" class=\"code-anchor\">IterableDiffer</a>#diff()</code> was invoked.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDiffer\">IterableDiffer</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用來追蹤一個迭代內的更改的策略。<a href=\"api/common/NgForOf\"><code>NgForOf</code></a> 使用它透過對 DOM\n進行等效更改來響應此迭代內的更改。</p><p translation-origin=\"off\">A strategy for tracking changes over time to an iterable. Used by <a href=\"api/common/NgForOf\"><code>NgForOf</code></a> to\nrespond to changes in an iterable by effecting equivalent changes in the DOM.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/IterableDifferFactory\">IterableDifferFactory</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">提供 <a href=\"api/core/IterableDiffer\"><code>IterableDiffer</code></a> 的工廠。</p><p translation-origin=\"off\">Provides a factory for <a href=\"api/core/IterableDiffer\"><code>IterableDiffer</code></a>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChangeRecord\">KeyValueChangeRecord</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">代表條目變更資訊的記錄。</p><p translation-origin=\"off\">Record representing the item change information.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueChanges\">KeyValueChanges</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個物件，描述自上次呼叫 <code><a href=\"api/core/KeyValueDiffer\" class=\"code-anchor\">KeyValueDiffer</a>#diff()</code> 以來的變化的 <code>Map</code> 或 <code>{[k:string]: string}</code>。</p><p translation-origin=\"off\">An object describing the changes in the <code>Map</code> or <code>{[k:string]: string}</code> since last time\n<code><a href=\"api/core/KeyValueDiffer\" class=\"code-anchor\">KeyValueDiffer</a>#diff()</code> was invoked.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDiffer\">KeyValueDiffer</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">追蹤物件隨時間變化的差異。</p><p translation-origin=\"off\">A differ that tracks changes made to an object over time.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/KeyValueDifferFactory\">KeyValueDifferFactory</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">提供 <a href=\"api/core/KeyValueDiffer\"><code>KeyValueDiffer</code></a> 的工廠。</p><p translation-origin=\"off\">Provides a factory for <a href=\"api/core/KeyValueDiffer\"><code>KeyValueDiffer</code></a>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/MissingTranslationStrategy\">MissingTranslationStrategy</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在系統啟動時使用此列舉作為 <code>bootstrapModule</code>\n的一個選項來定義策略，編譯器應該在缺少翻譯的情況下使用：</p><p translation-origin=\"off\">Use this enum at bootstrap as an option of <code>bootstrapModule</code> to define the strategy\nthat the compiler should use in case of missing translations:</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">將 NgModule 與<a href=\"guide/glossary#provider\" title=\"定義\">provider</a>關聯的 NgModule\n的包裝器。不推薦使用沒有泛型型別的用法。</p><p translation-origin=\"off\">A wrapper around an NgModule that associates it with <a href=\"guide/glossary#provider\" title=\"Definition\">providers</a>. Usage without a generic type is deprecated.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgZoneOptions\">NgZoneOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用於配置事件並使用 <code><a href=\"api/core/provideZoneChangeDetection\" class=\"code-anchor\">provideZoneChangeDetection</a></code> 執行合併。</p><p translation-origin=\"off\">Used to configure event and run coalescing with <code><a href=\"api/core/provideZoneChangeDetection\" class=\"code-anchor\">provideZoneChangeDetection</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnChanges\">OnChanges</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，當指令的任何一個可繫結屬性發生變化時呼叫。\n定義一個 <code>ngOnChanges()</code> 方法來處理這些變更。</p><p translation-origin=\"off\">A lifecycle hook that is called when any data-bound property of a directive changes.\nDefine an <code>ngOnChanges()</code> method to handle the changes.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnDestroy\">OnDestroy</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，它會在指令、管道或服務被銷燬時呼叫。\n用於在例項被銷燬時，執行一些自訂清理程式碼。</p><p translation-origin=\"off\">A lifecycle hook that is called when a directive, pipe, or service is destroyed.\nUse for any custom cleanup that needs to occur when the\ninstance is destroyed.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/OnInit\">OnInit</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個生命週期鉤子，它會在 Angular 初始化完了該指令的所有資料繫結屬性之後呼叫。\n定義 <code>ngOnInit()</code> 方法可以處理所有附加的初始化任務。</p><p translation-origin=\"off\">A lifecycle hook that is called after Angular has initialized\nall data-bound properties of a directive.\nDefine an <code>ngOnInit()</code> method to handle any additional initialization tasks.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PipeTransform\">PipeTransform</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個需要由管道實現的介面，用於執行轉換操作。\nAngular 會呼叫它的 <code>transform</code>\n方法，並把要繫結的值作為第一個引數傳入，其它引數會依次從第二個引數的位置開始傳入。</p><p translation-origin=\"off\">An interface that is implemented by pipes in order to perform a transformation.\nAngular invokes the <code>transform</code> method with the value of a binding\nas the first argument, and any parameters as the second argument in list form.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Predicate\">Predicate</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">根據引數值返回布林值的函式，可能包括該值在陣列中位置的上下文資訊。</p><p translation-origin=\"off\">A boolean-valued function over a value, possibly including context information\nregarding that value's position in an array.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererStyleFlags2\">RendererStyleFlags2</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">渲染器特有樣式修飾符的標誌。</p><p translation-origin=\"off\">Flags for renderer-specific style modifiers.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/RendererType2\">RendererType2</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">供 <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> 用於將自訂渲染資料和樣式與某個渲染器的實現相關聯。</p><p translation-origin=\"off\">Used by <code><a href=\"api/core/RendererFactory2\" class=\"code-anchor\">RendererFactory2</a></code> to associate custom rendering data and styles\nwith a rendering implementation.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SchemaMetadata\">SchemaMetadata</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">與 NgModule 關聯的架構定義。</p><p translation-origin=\"off\">A schema definition associated with an NgModule.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SecurityContext\">SecurityContext</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">SecurityContext 標記了具有危險安全隱患的位置，比如，像 <code>innerHTML</code> 這樣的 DOM\n屬性，如果處理不當，可能會導致跨站點指令碼（XSS）安全錯誤。</p><p translation-origin=\"off\">A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\nlike <code>innerHTML</code> that could cause Cross Site Scripting (XSS) security bugs when improperly\nhandled.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/SimpleChanges\">SimpleChanges</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">用 <a href=\"api/core/SimpleChange\"><code>SimpleChange</code></a> 物件表示的變更的雜湊表，這些物件以宣告的屬性名稱儲存在指令或元件上，這些屬性屬於它們。這是傳遞給 <code>ngOnChanges</code> 鉤子的型別。</p><p translation-origin=\"off\">A hashtable of changes represented by <a href=\"api/core/SimpleChange\"><code>SimpleChange</code></a> objects stored\nat the declared property name they belong to on a Directive or Component. This is\nthe type passed to the <code>ngOnChanges</code> hook.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassProvider\">StaticClassProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回 <code>useClass</code> 的令牌例項。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticClassSansProvider\">StaticClassSansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回 <code>useClass</code> 的令牌例項。這是 <code><a href=\"api/core/StaticClassProvider\" class=\"code-anchor\">StaticClassProvider</a></code> 裝飾器的基介面。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code>useClass</code> for a token.\nBase for <code><a href=\"api/core/StaticClassProvider\" class=\"code-anchor\">StaticClassProvider</a></code> decorator.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TrackByFunction\">TrackByFunction</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個可選地傳入 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令的函式，以自訂 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 如何唯一標識迭代中的條目。</p><p translation-origin=\"off\">A function optionally passed into the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive to customize how <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> uniquely\nidentifies items in an iterable.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeDecorator\">TypeDecorator</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">由所有 Angular 型別裝飾器實現的介面，該介面允許將它們用作裝飾器以及 Angular 語法。</p><p translation-origin=\"off\">An interface implemented by all Angular type decorators, which allows them to be used as\ndecorators as well as Angular syntax.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TypeProvider\">TypeProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>，以將“型別”用作令牌時返回 <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> 的例項。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return an instance of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> when `Type' is used as the token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueProvider\">ValueProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置此 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value for a token.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueSansProvider\">ValueSansProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 以返回令牌的值。是 <code><a href=\"api/core/ValueProvider\" class=\"code-anchor\">ValueProvider</a></code> 裝飾器的基介面。</p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value for a token.\nBase for <code><a href=\"api/core/ValueProvider\" class=\"code-anchor\">ValueProvider</a></code> decorator.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ViewEncapsulation\">ViewEncapsulation</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">定義可用於 Component 的 <a href=\"api/core/Component\"><code>Component</code></a> 的範本和樣式封裝選項。</p><p translation-origin=\"off\">Defines the CSS styles encapsulation policies for the <a href=\"api/core/Component\"><code>Component</code></a> decorator's\n<code>encapsulation</code> option.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/WritableSignal\">WritableSignal</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，其值可以透過 setter 介面改變。</p><p translation-origin=\"off\">A <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> with a value that can be mutated via a setter interface.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#-1\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"elements\">Elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#elements\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-container\">&lt;ng-container&gt;</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一種特殊元素，可以在不向 DOM 新增新元素的情況下承載結構型指令。</p><p translation-origin=\"off\">A special element that can hold structural directives without adding new elements to the DOM.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-content\">&lt;ng-content&gt;</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\"><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素指定了在元件範本中投影內容的位置。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element specifies where to project content inside a component template.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ng-template\">&lt;ng-template&gt;</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">Angular 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定義了一個預設不渲染的範本。</p><p translation-origin=\"off\">Angular's <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element defines a template that is not rendered by default.</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n\n  \n  \n  \n\n  \n  \n  \n  <section ng-should-translate=\"\" class=\"export-list\">\n    <h3 translation-result=\"on\" id=\"型別\">型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#型別\"><i class=\"material-icons\">link</i></a></h3>\n    <h3 translation-origin=\"off\" id=\"types\">Types<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core#types\"><i class=\"material-icons\">link</i></a></h3>\n    <table class=\"is-full-width list-table\">\n      \n      <tbody><tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ANIMATION_MODULE_TYPE\">ANIMATION_MODULE_TYPE</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個<a href=\"guide/glossary#di-token\" title=\"DI 令牌定義\">DI 令牌</a>，表明已載入了哪個動畫模組。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that indicates which animations\nmodule has been loaded.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_BOOTSTRAP_LISTENER\">APP_BOOTSTRAP_LISTENER</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個 <a href=\"guide/glossary#di-token\" title=\"DI\n令牌定義\">DI 令牌</a>，該令牌提供了一組針對每個要引導的元件呼叫的回呼(Callback)。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that provides a set of callbacks to\nbe called for every component that is bootstrapped.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_ID\">APP_ID</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">表示字串 ID 的<a href=\"guide/glossary#di-token\" title=\"DI 代幣定義\">DI 令牌</a>，主要用於在使用 <a href=\"api/core/ViewEncapsulation#Emulated\">ViewEncapsulation.Emulated</a> 時為應用程式屬性和 CSS 樣式新增字首。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> representing a string ID, used\nprimarily for prefixing application attributes and CSS styles when\n<a href=\"api/core/ViewEncapsulation#Emulated\">ViewEncapsulation.Emulated</a> is being used.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/APP_INITIALIZER\">APP_INITIALIZER</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">可用於提供一個或多個初始化功能的 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定義\">DI 令牌</a>。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that you can use to provide\none or more initialization functions.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/COMPILER_OPTIONS\">COMPILER_OPTIONS</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在平台注入器中提供 CompilerOptions 的令牌。</p><p translation-origin=\"off\">Token to provide CompilerOptions in the platform injector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CSP_NONCE\">CSP_NONCE</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">Token 用於配置 Angular 在插入內聯樣式時應用的<a href=\"https://web.dev/strict-csp/\">內容安全策略</a>隨機數。如果未提供，Angular 將從應用程式根節點的 <code>ngCspNonce</code> 屬性中查詢它的值。</p><p translation-origin=\"off\">Token used to configure the <a href=\"https://web.dev/strict-csp/\">Content Security Policy</a> nonce that\nAngular will apply when inserting inline styles. If not provided, Angular will look up its value\nfrom the <code>ngCspNonce</code> attribute of the application root node.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CUSTOM_ELEMENTS_SCHEMA\">CUSTOM_ELEMENTS_SCHEMA</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">定義一個架構，該架構允許 NgModule 包含以下內容：</p><p translation-origin=\"off\">Defines a schema that allows an NgModule to contain the following:</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/CompilerOptions\">CompilerOptions</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">建立編譯器的選項。</p><p translation-origin=\"off\">Options for creating a compiler.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/DEFAULT_CURRENCY_CODE\">DEFAULT_CURRENCY_CODE</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">如果沒有傳遞任何貨幣程式碼，請提供此令牌來設定你的應用程式用於 CurrencyPipe 的預設貨幣程式碼。僅由\nCurrencyPipe 使用，與語言環境的貨幣無關。如果未配置，則預設為 USD。</p><p translation-origin=\"off\">Provide this token to set the default currency code your application uses for\nCurrencyPipe when there is no currency code passed into it. This is only used by\nCurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ENVIRONMENT_INITIALIZER\">ENVIRONMENT_INITIALIZER</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">初始化函式的多提供者令牌，將在建構環境注入器時執行。</p><p translation-origin=\"off\">A multi-provider token for initialization functions that will run upon construction of an\nenvironment injector.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EffectCleanupFn\">EffectCleanupFn</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個效果可以選擇註冊一個清理函式。如果已註冊，則在下一次效果執行之前執行清理。清理功能可以“取消”之前效果執行可能已經開始的任何工作。</p><p translation-origin=\"off\">An effect can, optionally, register a cleanup function. If registered, the cleanup is executed\nbefore the next effect run. The cleanup function makes it possible to \"cancel\" any work that the\nprevious effect run might have started.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/EnvironmentProviders\">EnvironmentProviders</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">封裝的 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 僅在建立 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 期間被接受（例如在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中）。</p><p translation-origin=\"off\">Encapsulated <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code>s that are only accepted during creation of an <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> (e.g.\nin an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>).</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/INJECTOR\">INJECTOR</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個 InjectionToken，用於獲取當前 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> 的 <code>createInjector()</code> 式的注入器。</p><p translation-origin=\"off\">An InjectionToken that gets the current <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> for <code>createInjector()</code>-style injectors.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ImportProvidersSource\">ImportProvidersSource</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\"><code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函式的提供程式來源。</p><p translation-origin=\"off\">A source of providers for the <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/ImportedNgModuleProviders\" class=\"deprecated-api-item\">ImportedNgModuleProviders</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> replaced by <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code></p>\n<p>替換為 <code><a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a></code></p>\n\n          <p translation-result=\"on\">透過 <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> 函式從 NgModules 匯入的提供程式。</p><p translation-origin=\"off\">Providers that were imported from NgModules via the <code><a href=\"api/core/importProvidersFrom\" class=\"code-anchor\">importProvidersFrom</a></code> function.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/InjectableProvider\">InjectableProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器中使用的可注入物件提供者。</p><p translation-origin=\"off\">Injectable providers used in <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/LOCALE_ID\">LOCALE_ID</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">提供此令牌以設定應用程式的語言環境。它透過 i18n\n管道（DatePipe、I18nPluralPipe、CurrencyPipe、DecimalPipe 和 PercentPipe）和 ICU 表示式用於 i18n\n提取。</p><p translation-origin=\"off\">Provide this token to set the locale of your application.\nIt is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\nDecimalPipe and PercentPipe) and by ICU expressions.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NO_ERRORS_SCHEMA\">NO_ERRORS_SCHEMA</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">定義一個架構，該架構允許任何元素上的任何屬性。</p><p translation-origin=\"off\">Defines a schema that allows any property on any element.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/NgIterable\">NgIterable</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">描述受支援的可迭代型別的型別。</p><p translation-origin=\"off\">A type describing supported iterable types.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PACKAGE_ROOT_URL\">PACKAGE_ROOT_URL</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">一個 <a href=\"guide/glossary#di-token\" title=\"DI 令牌定義\">DI 令牌</a>，指示應用程式的根目錄</p><p translation-origin=\"off\">A <a href=\"guide/glossary#di-token\" title=\"DI token definition\">DI token</a> that indicates the root directory of\nthe application</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_ID\">PLATFORM_ID</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">標識不透明平台 ID 的令牌。</p><p translation-origin=\"off\">A token that indicates an opaque platform ID.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/PLATFORM_INITIALIZER\">PLATFORM_INITIALIZER</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">平台初始化時執行的函式。</p><p translation-origin=\"off\">A function that is executed when a platform is initialized.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Provider\">Provider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">描述應該如何配置 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p><p translation-origin=\"off\">Describes how the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> should be configured.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ProviderToken\">ProviderToken</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">可用於從注入器或透過查詢檢索例項的標記。</p><p translation-origin=\"off\">Token that can be used to retrieve an instance from an injector or through a query.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/Signal\">Signal</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">通知消費者任何更改的反應值。</p><p translation-origin=\"off\">A reactive value which notifies consumers of any changes.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StateKey\">StateKey</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">與 <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> 一起使用的型別安全的鍵名。</p><p translation-origin=\"off\">A type-safe key to use with <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/StaticProvider\">StaticProvider</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">描述如何將 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n配置為靜態的（即不需要反射）。靜態提供者為各種型別的依賴項提供令牌給注入器。</p><p translation-origin=\"off\">Describes how an <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> should be configured as static (that is, without reflection).\nA static provider provides tokens to an injector for various types of dependencies.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS\">TRANSLATIONS</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">當你想用另一種語言翻譯應用程式時，可以在載入程式中使用此令牌來提供翻譯檔案的內容（<code>xtb</code>、<code>xlf</code>\n或 <code>xlf2</code>）</p><p translation-origin=\"off\">Use this token at bootstrap to provide the content of your translation file (<code>xtb</code>,\n<code>xlf</code> or <code>xlf2</code>) when you want to translate your application in another language.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/TRANSLATIONS_FORMAT\">TRANSLATIONS_FORMAT</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">在載入程式中提供此令牌以設定 <a href=\"api/core/TRANSLATIONS\"><code>TRANSLATIONS</code></a> 的格式：<code>xtb</code>、<code>xlf</code> 或 <code>xlf2</code>。</p><p translation-origin=\"off\">Provide this token at bootstrap to set the format of your <a href=\"api/core/TRANSLATIONS\"><code>TRANSLATIONS</code></a>: <code>xtb</code>,\n<code>xlf</code> or <code>xlf2</code>.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/ValueEqualityFn\">ValueEqualityFn</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">可以確定兩個值是否相等的比較函式。</p><p translation-origin=\"off\">A comparison function which can determine if two values are equal.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/createNgModuleRef\" class=\"deprecated-api-item\">createNgModuleRef</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> Use <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> instead.</p>\n<p>改用 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code>。</p>\n\n          <p translation-result=\"on\">向後相容的 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> 函式別名。請避免直接使用它，而改用 <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code>。</p><p translation-origin=\"off\">The <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> function alias for backwards-compatibility.\nPlease avoid using it directly and use <code><a href=\"api/core/createNgModule\" class=\"code-anchor\">createNgModule</a></code> instead.</p>\n\n\n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor deprecated-api-item\"><a href=\"api/core/defineInjectable\" class=\"deprecated-api-item\">defineInjectable</a></code></td>\n        <td>\n          <p><strong>已棄用:</strong> in v8, delete after v10. This API should be used only by generated code, and that\ncode should now use ɵɵdefineInjectable instead.</p>\n<p>在 v8 中棄用，在 v10 之後刪除。此 API 僅應由產生的程式碼使用，並且該程式碼現在應改用\nɵɵdefineInjectable。</p>\n\n          \n        </td>\n      </tr>\n      \n      <tr>\n        <td><code class=\"code-anchor\"><a href=\"api/core/platformCore\">platformCore</a></code></td>\n        <td>\n          \n          <p translation-result=\"on\">任何其他平台都必須包含此平台</p><p translation-origin=\"off\">This platform has to be included in any other platform</p>\n\n\n        </td>\n      </tr>\n      \n    </tbody></table>\n  </section>\n  \n</div>\n</article>\n\n<!-- links to this doc:\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationConfig\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CSP_NONCE\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/CreateComputedOptions\n - api/core/CreateEffectOptions\n - api/core/CreateSignalOptions\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/DestroyRef\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/EffectCleanupFn\n - api/core/EffectRef\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/NgZoneOptions\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/Signal\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StateKey\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/TransferState\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueEqualityFn\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewRef\n - api/core/WritableSignal\n - api/core/asNativeElements\n - api/core/assertInInjectionContext\n - api/core/assertPlatform\n - api/core/booleanAttribute\n - api/core/computed\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/effect\n - api/core/enableProdMode\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/global\n - api/core/global/ComponentDebugMetadata\n - api/core/global/DirectiveDebugMetadata\n - api/core/global/Listener\n - api/core/global/ngApplyChanges\n - api/core/global/ngGetComponent\n - api/core/global/ngGetContext\n - api/core/global/ngGetDirectiveMetadata\n - api/core/global/ngGetDirectives\n - api/core/global/ngGetHostElement\n - api/core/global/ngGetInjector\n - api/core/global/ngGetListeners\n - api/core/global/ngGetOwningComponent\n - api/core/global/ngGetRootComponents\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/isDevMode\n - api/core/isSignal\n - api/core/isStandalone\n - api/core/makeEnvironmentProviders\n - api/core/makeStateKey\n - api/core/mergeApplicationConfig\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/numberAttribute\n - api/core/platformCore\n - api/core/provideZoneChangeDetection\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/runInInjectionContext\n - api/core/rxjs-interop\n - api/core/rxjs-interop/ToObservableOptions\n - api/core/rxjs-interop/ToSignalOptions\n - api/core/rxjs-interop/takeUntilDestroyed\n - api/core/rxjs-interop/toObservable\n - api/core/rxjs-interop/toSignal\n - api/core/setTestabilityGetter\n - api/core/signal\n - api/core/testing\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/ComponentFixtureNoNgZone\n - api/core/testing/InjectSetupWrapper\n - api/core/testing/MetadataOverride\n - api/core/testing/ModuleTeardownOptions\n - api/core/testing/TestBed\n - api/core/testing/TestBedStatic\n - api/core/testing/TestComponentRenderer\n - api/core/testing/TestEnvironmentOptions\n - api/core/testing/TestModuleMetadata\n - api/core/testing/async\n - api/core/testing/discardPeriodicTasks\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/flushMicrotasks\n - api/core/testing/getTestBed\n - api/core/testing/inject\n - api/core/testing/resetFakeAsyncZone\n - api/core/testing/tick\n - api/core/testing/waitForAsync\n - api/core/testing/withModule\n - api/core/untracked\n - guide/aot-compiler\n - guide/npm-packages\n-->\n<!-- links from this doc:\n - /api\n - /guide/standalone-components\n - api/common/NgForOf\n - api/core#\n - api/core#-1\n - api/core#angularcore\n - api/core#classes\n - api/core#decorators\n - api/core#elements\n - api/core#entry-points\n - api/core#functions\n - api/core#ngmodules\n - api/core#primary\n - api/core#primary-entry-point-exports\n - api/core#secondary\n - api/core#structures\n - api/core#types\n - api/core#主要\n - api/core#主要入口點的匯出\n - api/core#入口點\n - api/core#函式\n - api/core#次要\n - api/core#類\n - api/core#型別\n - api/core#結構\n - api/core#裝飾器\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/AbstractType\n - api/core/AfterContentChecked\n - api/core/AfterContentInit\n - api/core/AfterViewChecked\n - api/core/AfterViewInit\n - api/core/ApplicationConfig\n - api/core/ApplicationInitStatus\n - api/core/ApplicationModule\n - api/core/ApplicationRef\n - api/core/Attribute\n - api/core/BootstrapOptions\n - api/core/COMPILER_OPTIONS\n - api/core/CSP_NONCE\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/ChangeDetectionStrategy\n - api/core/ChangeDetectorRef\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ComponentMirror\n - api/core/ComponentRef\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/CreateComputedOptions\n - api/core/CreateEffectOptions\n - api/core/CreateSignalOptions\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/DebugElement\n - api/core/DebugEventListener\n - api/core/DebugNode\n - api/core/DefaultIterableDiffer\n - api/core/DestroyRef\n - api/core/Directive\n - api/core/DoBootstrap\n - api/core/DoCheck\n - api/core/ENVIRONMENT_INITIALIZER\n - api/core/EffectCleanupFn\n - api/core/EffectRef\n - api/core/ElementRef\n - api/core/EmbeddedViewRef\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/ErrorHandler\n - api/core/EventEmitter\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/ForwardRefFn\n - api/core/GetTestability\n - api/core/Host\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/INJECTOR\n - api/core/ImportProvidersSource\n - api/core/ImportedNgModuleProviders\n - api/core/Inject\n - api/core/InjectFlags\n - api/core/InjectOptions\n - api/core/Injectable\n - api/core/InjectableProvider\n - api/core/InjectableType\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/InjectorType\n - api/core/Input\n - api/core/IterableChangeRecord\n - api/core/IterableChanges\n - api/core/IterableDiffer\n - api/core/IterableDifferFactory\n - api/core/IterableDiffers\n - api/core/KeyValueChangeRecord\n - api/core/KeyValueChanges\n - api/core/KeyValueDiffer\n - api/core/KeyValueDifferFactory\n - api/core/KeyValueDiffers\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgIterable\n - api/core/NgModule\n - api/core/NgModule#id\n - api/core/NgModuleFactory\n - api/core/NgModuleRef\n - api/core/NgProbeToken\n - api/core/NgZone\n - api/core/NgZoneOptions\n - api/core/OnChanges\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/Optional\n - api/core/Output\n - api/core/PACKAGE_ROOT_URL\n - api/core/PLATFORM_ID\n - api/core/PLATFORM_INITIALIZER\n - api/core/Pipe\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/PlatformRef#bootstrapModule\n - api/core/Predicate\n - api/core/Provider\n - api/core/ProviderToken\n - api/core/Query\n - api/core/QueryList\n - api/core/Renderer2\n - api/core/RendererFactory2\n - api/core/RendererStyleFlags2\n - api/core/RendererType2\n - api/core/Sanitizer\n - api/core/SchemaMetadata\n - api/core/SecurityContext\n - api/core/Self\n - api/core/Signal\n - api/core/SimpleChange\n - api/core/SimpleChanges\n - api/core/SkipSelf\n - api/core/StateKey\n - api/core/StaticClassProvider\n - api/core/StaticClassSansProvider\n - api/core/StaticProvider\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/TemplateRef\n - api/core/Testability\n - api/core/TestabilityRegistry\n - api/core/TrackByFunction\n - api/core/TransferState\n - api/core/Type\n - api/core/TypeDecorator\n - api/core/TypeProvider\n - api/core/ValueEqualityFn\n - api/core/ValueProvider\n - api/core/ValueSansProvider\n - api/core/Version\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/ViewContainerRef\n - api/core/ViewEncapsulation\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewRef\n - api/core/WritableSignal\n - api/core/asNativeElements\n - api/core/assertInInjectionContext\n - api/core/assertPlatform\n - api/core/booleanAttribute\n - api/core/computed\n - api/core/createComponent\n - api/core/createEnvironmentInjector\n - api/core/createNgModule\n - api/core/createNgModuleRef\n - api/core/createPlatform\n - api/core/createPlatformFactory\n - api/core/defineInjectable\n - api/core/destroyPlatform\n - api/core/effect\n - api/core/enableProdMode\n - api/core/forwardRef\n - api/core/getDebugNode\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/getPlatform\n - api/core/global\n - api/core/importProvidersFrom\n - api/core/inject\n - api/core/isDevMode\n - api/core/isSignal\n - api/core/isStandalone\n - api/core/makeEnvironmentProviders\n - api/core/makeStateKey\n - api/core/mergeApplicationConfig\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - api/core/numberAttribute\n - api/core/platformCore\n - api/core/provideZoneChangeDetection\n - api/core/reflectComponentType\n - api/core/resolveForwardRef\n - api/core/runInInjectionContext\n - api/core/rxjs-interop\n - api/core/setTestabilityGetter\n - api/core/signal\n - api/core/testing\n - api/core/untracked\n - api/platform-browser/BrowserModule\n - api/platform-browser/bootstrapApplication\n - guide/deprecations#jit-api-changes\n - guide/glossary#di-token\n - guide/glossary#provider\n - guide/glossary#view\n - guide/glossary#view-hierarchy\n - guide/glossary#view-tree\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/core/PACKAGE.md?message=docs(...)%3A%20請簡述你的修改...\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/PACKAGE.md\n - https://web.dev/strict-csp/\n-->"}