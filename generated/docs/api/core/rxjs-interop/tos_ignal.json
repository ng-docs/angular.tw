{"id":"api/core/rxjs-interop/toSignal","title":"toSignal","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/core/rxjs-interop\", \"name\": \"@angular/core/rxjs-interop\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.cn/api/core/rxjs-interop/toSignal\", \"name\": \"toSignal\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/core\">@angular/core</a> &gt; <a href=\"api/core/rxjs-interop\">@angular/core/rxjs-interop</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/core/rxjs-interop/src/to_signal.ts?message=docs(core)%3A%20請簡述你的修改...#L221-L272\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/rxjs-interop/src/to_signal.ts#L221-L272\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"tosignal\">toSignal<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/rxjs-interop/toSignal#tosignal\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    \n  </section>\n\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></span>&lt;T, U = undefined&gt;(source: Observable&lt;T&gt;, options?: <a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;U&gt;): <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | U&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>source</code>\n      </td>\n      <td class=\"param-type\"><code>Observable&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;U&gt;</code></td>\n      <td class=\"param-description\">\n        <p>可選值。預設值為 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | U&gt;</code></p>\n\n</div>\n\n\n\n\n<section ng-should-translate=\"\" class=\"overloads\">\n  <h2 id=\"overloads\">重載形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/rxjs-interop/toSignal#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <div class=\"overload-info\">\n  <div class=\"short-description\">\n    <p translation-result=\"on\">獲取 <code>Observable</code> 的當前值作為反應 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Get the current value of an <code>Observable</code> as a reactive <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>.</p>\n\n\n  </div>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></span>(source: Observable&lt;T&gt;): <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | undefined&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數-1\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>source</code>\n      </td>\n      <td class=\"param-type\"><code>Observable&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-1\">返回值</h6>\n  <p><code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | undefined&gt;</code></p>\n\n  <div class=\"description\">\n    <p translation-result=\"on\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 返回一個 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它透過訂閱給定的 <code>Observable</code> 來提供對給定 <code>Observable</code> 產生的值的同步反應存取。返回的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將始終具有訂閱發出的最新值，如果 <code>Observable</code> 出錯，則會丟擲錯誤。</p><p translation-origin=\"off\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> returns a <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> which provides synchronous reactive access to values produced\nby the given <code>Observable</code>, by subscribing to that <code>Observable</code>. The returned <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will always\nhave the most recent value emitted by the subscription, and will throw an error if the\n<code>Observable</code> errors.</p>\n\n<p translation-result=\"on\">在 <code>Observable</code> 發出它的第一個值之前，<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將返回 <code>undefined</code>。為避免這種情況，可以傳遞 <code>initialValue</code> 或啟用 <code>requireSync</code> 選項。</p><p translation-origin=\"off\">Before the <code>Observable</code> emits its first value, the <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will return <code>undefined</code>. To avoid\nthis, either an <code>initialValue</code> can be passed or the <code>requireSync</code> option enabled.</p>\n\n<p translation-result=\"on\">預設情況下，訂閱會在當前注入上下文被銷燬時自動清理。例如，在元件建構過程中呼叫 <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> 時，訂閱將在元件銷燬時被清除。如果注入上下文不可用，則可以傳遞顯式 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p><p translation-origin=\"off\">By default, the subscription will be automatically cleaned up when the current injection context\nis destroyed. For example, when <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> is called during the construction of a component,\nthe subscription will be cleaned up when the component is destroyed. If an injection context is\nnot available, an explicit <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> can be passed instead.</p>\n\n<p translation-result=\"on\">如果訂閱應該持續到 <code>Observable</code> 本身完成，則可以指定 <code>manualCleanup</code> 選項，這會禁用自動訂閱拆卸。此配置中也不需要注入上下文。</p><p translation-origin=\"off\">If the subscription should persist until the <code>Observable</code> itself completes, the <code>manualCleanup</code>\noption can be specified instead, which disables the automatic subscription teardown. No injection\ncontext is needed in this configuration as well.</p>\n\n  </div>\n</div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <div class=\"overload-info\">\n  <div class=\"short-description\">\n    <p translation-result=\"on\">獲取 <code>Observable</code> 的當前值作為反應 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Get the current value of an <code>Observable</code> as a reactive <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>.</p>\n\n\n  </div>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></span>(source: Observable&lt;T&gt;, options?: <a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;undefined&gt; &amp; { requireSync?: false; }): <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | undefined&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數-2\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>source</code>\n      </td>\n      <td class=\"param-type\"><code>Observable&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;undefined&gt; &amp; { requireSync?: false; }</code></td>\n      <td class=\"param-description\">\n        <p>可選值。預設值為 <code>undefined</code>。</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-2\">返回值</h6>\n  <p><code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | undefined&gt;</code></p>\n\n  <div class=\"description\">\n    <p translation-result=\"on\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 返回一個 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它透過訂閱給定的 <code>Observable</code> 來提供對給定 <code>Observable</code> 產生的值的同步反應存取。返回的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將始終具有訂閱發出的最新值，如果 <code>Observable</code> 出錯，則會丟擲錯誤。</p><p translation-origin=\"off\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> returns a <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> which provides synchronous reactive access to values produced\nby the given <code>Observable</code>, by subscribing to that <code>Observable</code>. The returned <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will always\nhave the most recent value emitted by the subscription, and will throw an error if the\n<code>Observable</code> errors.</p>\n\n<p translation-result=\"on\">在 <code>Observable</code> 發出它的第一個值之前，<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將返回配置的 <code>initialValue</code>，如果沒有提供 <code>initialValue</code> 則 <code>undefined</code>。如果 <code>Observable</code> 保證同步發出，則可以傳遞 <code>requireSync</code> 選項。</p><p translation-origin=\"off\">Before the <code>Observable</code> emits its first value, the <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will return the configured\n<code>initialValue</code>, or <code>undefined</code> if no <code>initialValue</code> is provided. If the <code>Observable</code> is\nguaranteed to emit synchronously, then the <code>requireSync</code> option can be passed instead.</p>\n\n<p translation-result=\"on\">預設情況下，訂閱會在當前注入上下文被銷燬時自動清理。例如，在元件建構過程中呼叫 <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> 時，訂閱將在元件銷燬時被清除。如果注入上下文不可用，則可以傳遞顯式 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p><p translation-origin=\"off\">By default, the subscription will be automatically cleaned up when the current injection context\nis destroyed. For example, when <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> is called during the construction of a component,\nthe subscription will be cleaned up when the component is destroyed. If an injection context is\nnot available, an explicit <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> can be passed instead.</p>\n\n<p translation-result=\"on\">如果訂閱應該持續到 <code>Observable</code> 本身完成，則可以指定 <code>manualCleanup</code> 選項，這會禁用自動訂閱拆卸。此配置中也不需要注入上下文。</p><p translation-origin=\"off\">If the subscription should persist until the <code>Observable</code> itself completes, the <code>manualCleanup</code>\noption can be specified instead, which disables the automatic subscription teardown. No injection\ncontext is needed in this configuration as well.</p>\n\n  </div>\n</div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <div class=\"overload-info\">\n  <div class=\"short-description\">\n    <p translation-result=\"on\">獲取 <code>Observable</code> 的當前值作為反應 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Get the current value of an <code>Observable</code> as a reactive <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>.</p>\n\n\n  </div>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></span>(source: Observable&lt;T&gt;, options: <a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;U&gt; &amp; { initialValue: U; requireSync?: false; }): <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | U&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數-3\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>source</code>\n      </td>\n      <td class=\"param-type\"><code>Observable&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;U&gt; &amp; { initialValue: U; requireSync?: false; }</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-3\">返回值</h6>\n  <p><code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T | U&gt;</code></p>\n\n  <div class=\"description\">\n    <p translation-result=\"on\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 返回一個 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它透過訂閱給定的 <code>Observable</code> 來提供對給定 <code>Observable</code> 產生的值的同步反應存取。返回的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將始終具有訂閱發出的最新值，如果 <code>Observable</code> 出錯，則會丟擲錯誤。</p><p translation-origin=\"off\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> returns a <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> which provides synchronous reactive access to values produced\nby the given <code>Observable</code>, by subscribing to that <code>Observable</code>. The returned <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will always\nhave the most recent value emitted by the subscription, and will throw an error if the\n<code>Observable</code> errors.</p>\n\n<p translation-result=\"on\">在 <code>Observable</code> 發出它的第一個值之前，<code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將返回配置的 <code>initialValue</code>。如果 <code>Observable</code> 保證同步發出，則可以傳遞 <code>requireSync</code> 選項。</p><p translation-origin=\"off\">Before the <code>Observable</code> emits its first value, the <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will return the configured\n<code>initialValue</code>. If the <code>Observable</code> is guaranteed to emit synchronously, then the <code>requireSync</code>\noption can be passed instead.</p>\n\n<p translation-result=\"on\">預設情況下，訂閱會在當前注入上下文被銷燬時自動清理。例如，在元件建構過程中呼叫 <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> 時，訂閱將在元件銷燬時被清除。如果注入上下文不可用，則可以傳遞顯式 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p><p translation-origin=\"off\">By default, the subscription will be automatically cleaned up when the current injection context\nis destroyed. For example, when <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> is called during the construction of a component,\nthe subscription will be cleaned up when the component is destroyed. If an injection context is\nnot available, an explicit <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> can be passed instead.</p>\n\n<p translation-result=\"on\">如果訂閱應該持續到 <code>Observable</code> 本身完成，則可以指定 <code>manualCleanup</code> 選項，這會禁用自動訂閱拆卸。此配置中也不需要注入上下文。</p><p translation-origin=\"off\">If the subscription should persist until the <code>Observable</code> itself completes, the <code>manualCleanup</code>\noption can be specified instead, which disables the automatic subscription teardown. No injection\ncontext is needed in this configuration as well.</p>\n\n  </div>\n</div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <div class=\"overload-info\">\n  <div class=\"short-description\">\n    <p translation-result=\"on\">獲取 <code>Observable</code> 的當前值作為反應 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>。</p><p translation-origin=\"off\">Get the current value of an <code>Observable</code> as a reactive <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>.</p>\n\n\n  </div>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></span>(source: Observable&lt;T&gt;, options: <a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;undefined&gt; &amp; { requireSync: true; }): <a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數-4\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>source</code>\n      </td>\n      <td class=\"param-type\"><code>Observable&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/rxjs-interop/ToSignalOptions\" class=\"code-anchor\">ToSignalOptions</a>&lt;undefined&gt; &amp; { requireSync: true; }</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值-4\">返回值</h6>\n  <p><code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a>&lt;T&gt;</code></p>\n\n  <div class=\"description\">\n    <p translation-result=\"on\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 返回一個 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code>，它透過訂閱給定的 <code>Observable</code> 來提供對給定 <code>Observable</code> 產生的值的同步反應存取。返回的 <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> 將始終具有訂閱發出的最新值，如果 <code>Observable</code> 出錯，則會丟擲錯誤。</p><p translation-origin=\"off\"><code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> returns a <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> which provides synchronous reactive access to values produced\nby the given <code>Observable</code>, by subscribing to that <code>Observable</code>. The returned <code><a href=\"api/core/Signal\" class=\"code-anchor\">Signal</a></code> will always\nhave the most recent value emitted by the subscription, and will throw an error if the\n<code>Observable</code> errors.</p>\n\n<p translation-result=\"on\">當 <code>requireSync</code> 設定為 <code>true</code> 時，<code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> 將斷言 <code>Observable</code> 在訂閱後立即產生一個值。在這種情況下不需要 <code>initialValue</code>，並且返回的訊號不包含 <code>undefined</code> 型別。</p><p translation-origin=\"off\">With <code>requireSync</code> set to <code>true</code>, <code><a href=\"api/core/rxjs-interop/toSignal\" class=\"code-anchor\">toSignal</a></code> will assert that the <code>Observable</code> produces a value\nimmediately upon subscription. No <code>initialValue</code> is needed in this case, and the returned signal\ndoes not include an <code>undefined</code> type.</p>\n\n<p translation-result=\"on\">預設情況下，訂閱會在當前注入上下文被銷燬時自動清理。例如，在元件建構過程中呼叫 <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> 時，訂閱將在元件銷燬時被清除。如果注入上下文不可用，則可以傳遞顯式 <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>。</p><p translation-origin=\"off\">By default, the subscription will be automatically cleaned up when the current injection context\nis destroyed. For example, when <code><a href=\"api/core/rxjs-interop/toObservable\" class=\"code-anchor\">toObservable</a></code> is called during the construction of a component,\nthe subscription will be cleaned up when the component is destroyed. If an injection context is\nnot available, an explicit <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> can be passed instead.</p>\n\n<p translation-result=\"on\">如果訂閱應該持續到 <code>Observable</code> 本身完成，則可以指定 <code>manualCleanup</code> 選項，這會禁用自動訂閱拆卸。此配置中也不需要注入上下文。</p><p translation-origin=\"off\">If the subscription should persist until the <code>Observable</code> itself completes, the <code>manualCleanup</code>\noption can be specified instead, which disables the automatic subscription teardown. No injection\ncontext is needed in this configuration as well.</p>\n\n  </div>\n</div>\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n</div>\n</article>\n\n<!-- links to this doc:\n - api/core/rxjs-interop\n - api/core/rxjs-interop/ToSignalOptions\n - guide/rxjs-interop\n-->\n<!-- links from this doc:\n - /api\n - api/core\n - api/core/Injector\n - api/core/Signal\n - api/core/rxjs-interop\n - api/core/rxjs-interop/ToSignalOptions\n - api/core/rxjs-interop/toObservable\n - api/core/rxjs-interop/toSignal#overloads\n - api/core/rxjs-interop/toSignal#tosignal\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/core/rxjs-interop/src/to_signal.ts?message=docs(core)%3A%20請簡述你的修改...#L221-L272\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/rxjs-interop/src/to_signal.ts#L221-L272\n-->"}