{"id":"api/core/createComponent","title":"createComponent","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/core/createComponent\", \"name\": \"createComponent\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/core/src/render3/component.ts?message=docs(core)%3A%20請簡述你的修改...#L17-L115\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/src/render3/component.ts#L17-L115\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"createcomponent\">createComponent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/createComponent#createcomponent\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">根據提供的元件型別和一組選項建立一個 <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> 例項。</p><p translation-origin=\"off\">Creates a <code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a></code> instance based on provided component type and a set of options.</p>\n\n\n  </section>\n\n  <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <span class=\"member-name\"><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></span>&lt;C&gt;(component: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;C&gt;, options: { environmentInjector: <a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>; hostElement?: Element; elementInjector?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>; projectableNodes?: Node[][]; }): <a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a>&lt;C&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>component</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;C&gt;</code></td>\n      <td class=\"param-description\">\n        <p translation-result=\"on\">元件類參考。</p><p translation-origin=\"off\">Component class reference.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>options</code>\n      </td>\n      <td class=\"param-type\"><code>object</code></td>\n      <td class=\"param-description\">\n        <p translation-result=\"on\">要使用的選項集：</p><p translation-origin=\"off\">Set of options to use:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>environmentInjector</code>：要用於元件的 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> 例項，請在 <a href=\"https://angular.io/guide/standalone-components#environment-injectors\">https://angular.io/guide/standalone-components#environment-injectors</a> 中檢視有關它的其他資訊。</p><p translation-origin=\"off\"><code>environmentInjector</code>: An <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> instance to be used for the component, see\nadditional info about it <a href=\"/guide/standalone-components#environment-injectors\">here</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>hostElement</code> （可選）：應該作為元件的宿主節點的 DOM 節點。如果未提供，Angular 會根據元件選擇器中使用的標籤名稱建立一個（如果選擇器沒有標籤名稱資訊，則回用 <code>div</code> ）。</p><p translation-origin=\"off\"><code>hostElement</code> (optional): A DOM node that should act as a host node for the component. If not\nprovided, Angular creates one based on the tag name used in the component selector (and falls\nback to using <code>div</code> if selector doesn't have tag name info).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>elementInjector</code> （可選）：一個 <code>ElementInjector</code> 例項，請在 <a href=\"https://angular.io/guide/hierarchical-dependency-injection#elementinjector\">https://angular.io/guide/hierarchical-dependency-injection#elementinjector</a> 上檢視有關它的其他資訊。</p><p translation-origin=\"off\"><code>elementInjector</code> (optional): An <code>ElementInjector</code> instance, see additional info about it\n<a href=\"/guide/hierarchical-dependency-injection#elementinjector\">here</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>projectableNodes</code> （可選）：應該透過新元件例項的<a href=\"api/core/ng-content\"><code>&lt;ng-content&gt;</code></a>投影的 DOM 節點列表。</p><p translation-origin=\"off\"><code>projectableNodes</code> (optional): A list of DOM nodes that should be projected through\n<a href=\"api/core/ng-content\"><code>&lt;ng-content&gt;</code></a> of the new component instance.</p>\n\n</li>\n</ul>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p translation-result=\"on\">表示給定 Component 的 ComponentRef 例項。</p><p translation-origin=\"off\"><code><a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef&lt;C&gt;</a></code>: ComponentRef instance that represents a given Component.</p>\n\n\n</div>\n\n\n\n\n\n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/createComponent#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">下面的範例示範瞭如何使用 <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> 函式動態建立 ComponentRef 的例項並將其附加到 ApplicationRef 上，以便它被包含在變更檢測週期中。</p><p translation-origin=\"off\">The example below demonstrates how the <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> function can be used\nto create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\nso that it gets included into change detection cycles.</p>\n\n<p translation-result=\"on\">注：該範例使用了獨立元件，但該函式也可用於非獨立元件（在 NgModule 中宣告）。</p><p translation-origin=\"off\">Note: the example uses standalone components, but the function can also be used for\nnon-standalone components (declared in an NgModule) as well.</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `Hello {{ name }}!`\n})\nclass HelloComponent {\n  name = 'Angular';\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  template: `&lt;div id=\"hello-component-host\"&gt;&lt;/div&gt;`\n})\nclass RootComponent {}\n\n// Bootstrap an application.\nconst applicationRef = await <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(RootComponent);\n\n// Locate a DOM node that would be used as a host.\nconst host = document.getElementById('hello-component-host');\n\n// Get an `<a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a>` instance from the `<a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>`.\nconst environmentInjector = applicationRef.injector;\n\n// We can now create a `<a href=\"api/core/ComponentRef\" class=\"code-anchor\">ComponentRef</a>` instance.\nconst componentRef = <a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>(HelloComponent, {host, environmentInjector});\n\n// Last step is to register the newly created ref using the `<a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>` instance\n// to include the component view into change detection cycles.\napplicationRef.attachView(componentRef.hostView);\n</code-example>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - api/core/ViewContainerRef\n - api/core/testing/TestBed\n - errors/NG0503\n - guide/deprecations\n - guide/dynamic-component-loader\n - guide/elements\n - guide/testing-components-basics\n - guide/testing-components-scenarios\n - guide/testing-utility-apis\n-->\n<!-- links from this doc:\n - /api\n - /guide/hierarchical-dependency-injection#elementinjector\n - /guide/standalone-components#environment-injectors\n - api/core\n - api/core/ApplicationRef\n - api/core/Component\n - api/core/ComponentRef\n - api/core/EnvironmentInjector\n - api/core/Injector\n - api/core/Type\n - api/core/createComponent#createcomponent\n - api/core/createComponent#usage-notes\n - api/core/ng-content\n - api/platform-browser/bootstrapApplication\n - https://angular.io/guide/hierarchical-dependency-injection#elementinjector\n - https://angular.io/guide/standalone-components#environment-injectors\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/core/src/render3/component.ts?message=docs(core)%3A%20請簡述你的修改...#L17-L115\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/core/src/render3/component.ts#L17-L115\n-->"}