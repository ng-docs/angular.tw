{"id":"api/common/NgIf","title":"NgIf","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/common\", \"name\": \"@angular/common\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/common/NgIf\", \"name\": \"NgIf\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/common\">@angular/common</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20請簡述你的修改...#L10-L322\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_if.ts#L10-L322\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#ngif\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">本結構型指令用於根據表示式的值（強轉為\nboolean）是否為真值，來有條件的包含某個範本。當表示式計算為 true 時，Angular 會渲染 <code>then</code>\n子句中提供的範本，當為 false 或 null 時則渲染可選的 <code>else</code> 子句中的範本。<code>else</code>\n子句的預設範本是空白範本。</p><p translation-origin=\"off\">A structural directive that conditionally includes a template based on the value of\nan expression coerced to Boolean.\nWhen the expression evaluates to true, Angular renders the template\nprovided in a <code>then</code> clause, and when  false or null,\nAngular renders the template provided in an optional <code>else</code> clause. The default\ntemplate for the <code>else</code> clause is blank.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/common/NgIf#description\">檢視\"說明\"...</a></p>\n  </section>\n<h2 id=\"匯出自\">匯出自<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#匯出自\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/common/CommonModule\">\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box\">CommonModule</code-example>\n    </a>\n  </li>\n</ul>\n  \n<section ng-should-translate=\"\" class=\"selector-list\">\n  <h2 id=\"selectors\">選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]</code></li>\n  </ul>\n</section>\n\n  \n<section ng-should-translate=\"\" class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>屬性</th>\n        <th>說明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIf\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\"><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></span>: T</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只寫</span>\n          <div no-translate=\"\"><p translation-result=\"on\">布林表示式，將其作為顯示範本的條件進行計算。</p><p translation-origin=\"off\">The Boolean expression to evaluate as the condition for showing a template.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIfThen\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngIfThen</span>: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;T&gt;&gt;</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只寫</span>\n          <div no-translate=\"\"><p translation-result=\"on\">當此條件表示式計算為 true 時要顯示的範本。</p><p translation-origin=\"off\">A template to show if the condition expression evaluates to true.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngIfElse\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngIfElse</span>: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;<a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;T&gt;&gt;</code>\n        </td>\n        <td>\n          <span class=\"write-only-property\">只寫</span>\n          <div no-translate=\"\"><p translation-result=\"on\">當此條件表示式計算為 false 時要顯示的範本。</p><p translation-origin=\"off\">A template to show if the condition expression evaluates to false.</p>\n</div>\n          \n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n  \n  <section ng-should-translate=\"\" class=\"description\">\n    <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\">通常使用指令的<a href=\"guide/structural-directives#asterisk\">簡寫形式</a>\n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"</code>，作為插入範本的錨點元素的屬性提供。Angular\n將其擴充為更明確的版本，其中錨點元素包含在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素中。</p><p translation-origin=\"off\">A <a href=\"guide/structural-directives#asterisk\">shorthand form</a> of the directive,\n<code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"</code>, is generally used, provided\nas an attribute of the anchor element for the inserted template.\nAngular expands this into a more explicit version, in which the anchor element\nis contained in an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element.</p>\n\n<p translation-result=\"on\">具有簡寫語法的簡單形式：</p><p translation-origin=\"off\">Simple form with shorthand syntax:</p>\n\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"&gt;Content to render when condition is true.&lt;/div&gt;\n</code-example>\n<p translation-result=\"on\">具有擴充語法的簡單形式：</p><p translation-origin=\"off\">Simple form with expanded syntax:</p>\n\n<code-example>\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"condition\"&gt;&lt;div&gt;Content to render when condition is\ntrue.&lt;/div&gt;&lt;/ng-template&gt;\n</code-example>\n<p translation-result=\"on\">帶有 “else” 塊的格式：</p><p translation-origin=\"off\">Form with an \"else\" block:</p>\n\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else elseBlock\"&gt;Content to render when condition is true.&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;Content to render when condition is false.&lt;/ng-template&gt;\n</code-example>\n<p translation-result=\"on\">帶 “then” 和 “else” 塊的簡寫形式：</p><p translation-origin=\"off\">Shorthand form with \"then\" and \"else\" blocks:</p>\n\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; then thenBlock else elseBlock\"&gt;&lt;/div&gt;\n&lt;ng-template #thenBlock&gt;Content to render when condition is true.&lt;/ng-template&gt;\n&lt;ng-template #elseBlock&gt;Content to render when condition is false.&lt;/ng-template&gt;\n</code-example>\n<p translation-result=\"on\">本地儲存值的形式：</p><p translation-origin=\"off\">Form with storing the value locally:</p>\n\n<code-example>\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition as value; else elseBlock\"&gt;{{value}}&lt;/div&gt;\n&lt;ng-template #elseBlock&gt;Content to render when value is null.&lt;/ng-template&gt;\n</code-example>\n\n    <p translation-result=\"on\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令通常用於根據條件顯示內聯範本，就像下面的例子展示的一樣。預設的 <code>else</code> 範本是空白的。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive is most commonly used to conditionally show an inline template,\nas seen in the following  example.\nThe default <code>else</code> template is blank.</p>\n\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfSimple\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-simple',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt;\n    show = {{show}}\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show\"&gt;Text to show&lt;/div&gt;\n`\n})\nexport class NgIfSimple {\n  show = true;\n}\n\n</code-example>\n<h3 id=\"showing-an-alternative-template-using-else\" translation-result=\"on\">使用 <code>else</code> 顯示替代範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#showing-an-alternative-template-using-else\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Showing an alternative template using <code>else</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#showing-an-alternative-template-using-else\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要在 <code>expression</code> 計算為 false 時顯示一個範本，請使用如下所示的 <code>else</code> 範本繫結。<code>else</code>\n繫結指向一個帶有 <code>#elseBlock</code> 標籤的\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。該範本可以定義在元件檢視中的任何地方，但通常放在 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的緊後方，以提高可讀性。</p><p translation-origin=\"off\">To display a template when <code>expression</code> evaluates to false, use an <code>else</code> template\nbinding as shown in the following example.\nThe <code>else</code> binding points to an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>  element labeled <code>#elseBlock</code>.\nThe template can be defined anywhere in the component view, but is typically placed right after\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> for readability.</p>\n\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfElse\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt;\n    show = {{show}}\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; else elseBlock\"&gt;Text to show&lt;/div&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n`\n})\nexport class NgIfElse {\n  show = true;\n}\n\n</code-example>\n<h3 id=\"using-an-external-then-template\" translation-result=\"on\">使用內部 <code>then</code> 範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#using-an-external-then-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using an external <code>then</code> template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#using-an-external-then-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在前面的例子中，then 子句的範本是內聯的，也就是作為 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>\n指令所在標籤的內容。你還可以透過參考一個帶標籤的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>\n元素來指定一個在外部定義的範本。這樣就可以讓你在執行時更改範本，就像下面的例子所示範的。</p><p translation-origin=\"off\">In the previous example, the then-clause template is specified inline, as the content of the\ntag that contains the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive. You can also specify a template that is defined\nexternally, by referencing a labeled <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element. When you do this, you can\nchange which template to use at runtime, as shown in the following example.</p>\n\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfThenElse\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-then-else',\n  template: `\n    &lt;button (click)=\"show = !show\"&gt;{{show ? 'hide' : 'show'}}&lt;/button&gt;\n    &lt;button (click)=\"switchPrimary()\"&gt;Switch Primary&lt;/button&gt;\n    show = {{show}}\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"show; then thenBlock; else elseBlock\"&gt;this is ignored&lt;/div&gt;\n    &lt;ng-template #primaryBlock&gt;Primary text to show&lt;/ng-template&gt;\n    &lt;ng-template #secondaryBlock&gt;Secondary text to show&lt;/ng-template&gt;\n    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;\n`\n})\nexport class NgIfThenElse implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  thenBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n  show = true;\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('primaryBlock', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) primaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('secondaryBlock', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) secondaryBlock: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;|null = null;\n\n  switchPrimary() {\n    this.thenBlock = this.thenBlock === this.primaryBlock ? this.secondaryBlock : this.primaryBlock;\n  }\n\n  ngOnInit() {\n    this.thenBlock = this.primaryBlock;\n  }\n}\n\n</code-example>\n<h3 id=\"storing-a-conditional-result-in-a-variable\" translation-result=\"on\">把條件結果儲存在變數中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#storing-a-conditional-result-in-a-variable\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Storing a conditional result in a variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#storing-a-conditional-result-in-a-variable\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">比如你想顯示同一個物件中的一組屬性。如果你在等待非同步資料，此物件可能是未定義的。這時候，你可以使用\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，並且把此條件結果儲存在一個區域變數中，如下例所示。</p><p translation-origin=\"off\">You might want to show a set of properties from the same object. If you are waiting\nfor asynchronous data, the object can be undefined.\nIn this case, you can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and store the result of the condition in a local\nvariable as shown in the following example.</p>\n\n<code-example path=\"common/ngIf/ts/module.ts\" region=\"NgIfAs\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-if-as',\n  template: `\n    &lt;button (click)=\"nextUser()\"&gt;Next User&lt;/button&gt;\n    &lt;br&gt;\n    &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"userObservable | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a> as user; else loading\"&gt;\n      Hello {{user.last}}, {{user.first}}!\n    &lt;/div&gt;\n    &lt;ng-template #loading let-user&gt;Waiting... (user is {{user|json}})&lt;/ng-template&gt;\n`\n})\nexport class NgIfAs {\n  userObservable = new Subject&lt;{first: string, last: string}&gt;();\n  first = ['John', 'Mike', 'Mary', 'Bob'];\n  firstIndex = 0;\n  last = ['Smith', 'Novotny', 'Angular'];\n  lastIndex = 0;\n\n  nextUser() {\n    let first = this.first[this.firstIndex++];\n    if (this.firstIndex &gt;= this.first.length) this.firstIndex = 0;\n    let last = this.last[this.lastIndex++];\n    if (this.lastIndex &gt;= this.last.length) this.lastIndex = 0;\n    this.userObservable.next({first, last});\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">這段程式碼只使用了一個 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>，所以只會建立一個訂閱。此條件表示式把 <code>userStream|<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code>\n的結果儲存在區域變數 <code>user</code> 中。然後你就可以反覆繫結這個區域變數 <code>user</code> 了。</p><p translation-origin=\"off\">This code uses only one <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>, so only one subscription is created.\nThe conditional statement stores the result of <code>userStream|<a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> in the local variable <code>user</code>.\nYou can then bind the local <code>user</code> repeatedly.</p>\n\n<p translation-result=\"on\">只有當 <code>userStream</code> 返回了值的時候，才會有條件的顯示此資料。所以你不用使用安全導航運運算元（<code>?.</code>）\n來在存取屬性時避免空值。你可以在等待資料時顯示一個備用範本。</p><p translation-origin=\"off\">The conditional displays the data only if <code>userStream</code> returns a value,\nso you don't need to use the\nsafe-navigation-operator (<code>?.</code>)\nto guard against null values when accessing properties.\nYou can display an alternative template while waiting for the data.</p>\n\n<h3 id=\"shorthand-syntax\" translation-result=\"on\">簡寫語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#shorthand-syntax\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Shorthand syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#shorthand-syntax\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 的簡寫語法會把 \"then\" 和 \"else\"\n子句分別擴充成兩個獨立的範本。比如，考慮下列簡寫陳述式，它要在等待資料載入期間顯示一個載入中頁面。</p><p translation-origin=\"off\">The shorthand syntax <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> expands into two separate template specifications\nfor the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\nthat is meant to show a loading page while waiting for data to be loaded.</p>\n\n<code-example>\n&lt;div class=\"hero-list\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes else loading\"&gt;\n ...\n&lt;/div&gt;\n\n&lt;ng-template #loading&gt;\n &lt;div&gt;Loading...&lt;/div&gt;\n&lt;/ng-template&gt;\n</code-example>\n<p translation-result=\"on\">你可以看到，\"else\" 子句參考了帶有 <code>#loading</code> 標籤的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>，而 \"then\"\n子句的範本是作為宿主元素的內容提供的。</p><p translation-origin=\"off\">You can see that the \"else\" clause references the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>\nwith the <code>#loading</code> label, and the template for the \"then\" clause\nis provided as the content of the anchor element.</p>\n\n<p translation-result=\"on\">不過，當 Angular 擴充此簡寫語法的時候，它建立了另一個帶有 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>ngIfElse</code> 指令的\n<code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。此宿主元素包含的 \"then\" 子句的範本變成了無標籤的  <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的內容。</p><p translation-origin=\"off\">However, when Angular expands the shorthand syntax, it creates\nanother <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> tag, with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>ngIfElse</code> directives.\nThe anchor element containing the template for the \"then\" clause becomes\nthe content of this unlabeled <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> tag.</p>\n\n<code-example>\n&lt;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"heroes\" [ngIfElse]=\"loading\"&gt;\n &lt;div class=\"hero-list\"&gt;\n  ...\n &lt;/div&gt;\n&lt;/ng-template&gt;\n\n&lt;ng-template #loading&gt;\n &lt;div&gt;Loading...&lt;/div&gt;\n&lt;/ng-template&gt;\n</code-example>\n<p translation-result=\"on\"> 隱含範本物件的存在，影響了結構型指令的巢狀(Nesting)規則。欲知詳情，參見<a href=\"https://angular.io/guide/structural-directives#one-per-element\">結構型指令</a>。</p><p translation-origin=\"off\">The presence of the implicit template object has implications for the nesting of\nstructural directives. For more on this subject, see\n<a href=\"guide/structural-directives#one-per-element\">Structural Directives</a>.</p>\n\n\n  </section>\n\n  \n<section ng-should-translate=\"\" class=\"static-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"static-properties\">靜態屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#static-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>屬性</th>\n        <th>說明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"static-property\">\n        <td>\n          <a id=\"ngTemplateGuard_ngIf\"></a>\n          <code class=\"\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> <span class=\"member-name\">ngTemplateGuard_ngIf</span>: 'binding'</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">為繫結到 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 輸入屬性上的範本確保正確的型別。</p><p translation-origin=\"off\">Assert the correct type of the expression bound to the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> input within the template.</p>\n</div>\n          <p translation-result=\"on\">該靜態欄位的存在向 Ivy 範本型別檢查編譯器發出訊號，即當 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>\n結構化指令渲染其範本時，應以某種方式窄化 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>。對於\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>，繫結表示式本身用於窄化其型別，這允許 TypeScript 的 strictNullChecks 功能與 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>\n一起使用。</p><p translation-origin=\"off\">The presence of this static field is a signal to the Ivy template type check compiler that\nwhen the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> structural directive renders its template, the type of the expression bound\nto <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> should be narrowed in some way. For <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>, the binding expression itself is used to\nnarrow its type, which allows the strictNullChecks feature of TypeScript to work with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.</p>\n\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n  \n<section ng-should-translate=\"\" class=\"static-methods\">\n  <a name=\"methods\"></a>\n  <h2 id=\"static-methods\">靜態方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#static-methods\"><i class=\"material-icons\">link</i></a></h2>\n  <a id=\"ngTemplateContextGuard\"></a>\n<table class=\"is-full-width method-table static-method\">\n  <thead><tr><th>\n    <div class=\"with-github-links\">\n      <h3 id=\"ngtemplatecontextguard\">ngTemplateContextGuard()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgIf#ngtemplatecontextguard\"><i class=\"material-icons\">link</i></a></h3>\n      <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20請簡述你的修改...#L305-L321\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_if.ts#L305-L321\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n    </div>\n  </th></tr></thead>\n  <tbody>\n    <tr>\n      <td class=\"short-description\">\n        <p translation-result=\"on\">為 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 將要渲染的範本確保正確的上下文型別。</p><p translation-origin=\"off\">Asserts the correct type of the context for the template that <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> will render.</p>\n\n</td>\n    </tr>\n    <tr>\n      <td>\n        <div class=\"overload-info\">\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> <span class=\"member-name\">ngTemplateContextGuard</span>&lt;T&gt;(dir: <a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&lt;T&gt;, ctx: any): ctx is <a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;Exclude&lt;T, false | 0 | '' | null | undefined&gt;&gt;</code-example>\n\n  <h6 class=\"no-anchor\" id=\"引數\">引數</h6>\n  <table class=\"is-full-width list-table parameters-table static-method-overload-parameters\">\n  <tbody>\n    <tr class=\"static-method-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>dir</code>\n      </td>\n      <td class=\"param-type\"><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>&lt;T&gt;</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n    <tr class=\"static-method-overload-parameter\">\n      <td class=\"param-name\">\n        <a id=\"\"></a>\n        <code>ctx</code>\n      </td>\n      <td class=\"param-type\"><code>any</code></td>\n      <td class=\"param-description\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n  <h6 class=\"no-anchor\" id=\"返回值\">返回值</h6>\n  <p><code>ctx is <a href=\"api/common/NgIfContext\" class=\"code-anchor\">NgIfContext</a>&lt;Exclude&lt;T, false | 0 | '' | null | undefined&gt;&gt;</code></p>\n\n</div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"description\">\n        <p translation-result=\"on\">該方法用於向 Ivy 範本型別檢查編譯器發出訊號，即 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>\n結構化指令會使用特定的上下文型別渲染其範本。</p><p translation-origin=\"off\">The presence of this method is a signal to the Ivy template type-check compiler that the\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> structural directive renders its template with a specific context type.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n</section>\n  \n  </div>\n</article>\n\n<!-- links to this doc:\n - api/animations/state\n - api/common\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIfContext\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/NgZone\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/core/forwardRef\n - api/core/global\n - api/core/global/ngGetContext\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/NgModelGroup\n - errors/NG0910\n - extended-diagnostics/NG8103\n - guide/ajs-quick-reference\n - guide/animations\n - guide/animations-attach-to-html-template\n - guide/aot-compiler\n - guide/architecture-components\n - guide/built-in-directives\n - guide/cheatsheet\n - guide/content-projection\n - guide/dependency-injection-in-action\n - guide/docs-style-guide\n - guide/dynamic-form\n - guide/feature-modules\n - guide/form-validation\n - guide/frequent-ngmodules\n - guide/glossary\n - guide/migration-dynamic-flag\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/router-tutorial-toh\n - guide/sharing-ngmodules\n - guide/standalone-components\n - guide/standalone-migration\n - guide/static-query-migration\n - guide/structural-directives\n - guide/styleguide\n - guide/template-reference-variables\n - guide/template-typecheck\n - guide/testing-components-scenarios\n - guide/transition-and-triggers\n - guide/upgrade\n - guide/what-is-angular\n - presskit\n - start\n - start/start-data\n - start/start-routing\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3\n - tutorial/tour-of-heroes/toh-pt4\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgIf#description\n - api/common/NgIf#instance-properties\n - api/common/NgIf#ngif\n - api/common/NgIf#ngtemplatecontextguard\n - api/common/NgIf#selectors\n - api/common/NgIf#shorthand-syntax\n - api/common/NgIf#showing-an-alternative-template-using-else\n - api/common/NgIf#static-methods\n - api/common/NgIf#static-properties\n - api/common/NgIf#storing-a-conditional-result-in-a-variable\n - api/common/NgIf#using-an-external-then-template\n - api/common/NgIf#使用-else-顯示替代範本\n - api/common/NgIf#使用內部-then-範本\n - api/common/NgIf#匯出自\n - api/common/NgIf#把條件結果儲存在變數中\n - api/common/NgIf#簡寫語法\n - api/common/NgIfContext\n - api/core/Component\n - api/core/Input\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/ViewChild\n - api/core/ng-template\n - api/upgrade/static\n - guide/structural-directives#asterisk\n - guide/structural-directives#one-per-element\n - https://angular.io/guide/structural-directives#one-per-element\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20請簡述你的修改...#L10-L322\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_if.ts?message=docs(common)%3A%20請簡述你的修改...#L305-L321\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_if.ts#L10-L322\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_if.ts#L305-L321\n-->"}