{"id":"api/common/NgComponentOutlet","title":"NgComponentOutlet","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/common\", \"name\": \"@angular/common\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/common/NgComponentOutlet\", \"name\": \"NgComponentOutlet\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/common\">@angular/common</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_component_outlet.ts?message=docs(common)%3A%20請簡述你的修改...#L10-L170\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_component_outlet.ts#L10-L170\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"ngcomponentoutlet\">NgComponentOutlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#ngcomponentoutlet\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label directive\">directive</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">例項化單個 <a href=\"api/core/Component\"><code>Component</code></a> 型別，並將其宿主檢視插入當前檢視。<code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code>\n為動態元件建立提供了一種宣告式方法。</p><p translation-origin=\"off\">Instantiates a <a href=\"api/core/Component\"><code>Component</code></a> type and inserts its Host View into the current View.\n<code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> provides a declarative approach for dynamic component creation.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/common/NgComponentOutlet#description\">檢視\"說明\"...</a></p>\n  </section>\n<h2 id=\"匯出自\">匯出自<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#匯出自\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n  <li>\n    <a href=\"api/common/CommonModule\">\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box\">CommonModule</code-example>\n    </a>\n  </li>\n</ul>\n  \n<section ng-should-translate=\"\" class=\"selector-list\">\n  <h2 id=\"selectors\">選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#selectors\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n    <li><code>[<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>]</code></li>\n  </ul>\n</section>\n\n  \n<section ng-should-translate=\"\" class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>屬性</th>\n        <th>說明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutlet\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\"><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a></span>: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt; | null</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletInjector\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletInjector</span>?: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletContent\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletContent</span>?: any[][]</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModule\"></a>\n          <code class=\"\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModule</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code>\n        </td>\n        <td>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"ngComponentOutletNgModuleFactory\"></a>\n          <code class=\"deprecated-api-item\"><span class=\"property-binding\">@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</span><br><span class=\"member-name\">ngComponentOutletNgModuleFactory</span>?: <a href=\"api/core/NgModuleFactory\" class=\"code-anchor\">NgModuleFactory</a>&lt;any&gt;</code>\n        </td>\n        <td>\n          <label class=\"api-status-label deprecated\" title=\"本 API 已棄用\">已棄用</label>\n          \n          \n          <p translation-result=\"on\">不推薦使用此輸入，請改用 <code>ngComponentOutletNgModule</code>。</p><p translation-origin=\"off\"><strong>Deprecated</strong> This input is deprecated, use <code>ngComponentOutletNgModule</code> instead.</p>\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n  \n  <section ng-should-translate=\"\" class=\"description\">\n    <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\"><code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> 所需的元件型別，如果設定為假值，則檢視將被清除並且任何現有元件將被銷燬。</p><p translation-origin=\"off\"><code><a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">NgComponentOutlet</a></code> requires a component type, if a falsy value is set the view will clear and\nany existing component will be destroyed.</p>\n\n\n    <h3 id=\"fine-tune-control\" translation-result=\"on\">微調控制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#fine-tune-control\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Fine tune control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#fine-tune-control\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以使用以下可選屬性來控制組件的建立過程：</p><p translation-origin=\"off\">You can control the component creation process by using the following optional attributes:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>ngComponentOutletInjector</code>：可選的自訂 <a href=\"api/core/Injector\"><code>Injector</code></a>，將用作 Component\n的父級。預設為當前檢視容器的注入器。</p><p translation-origin=\"off\"><code>ngComponentOutletInjector</code>: Optional custom <a href=\"api/core/Injector\"><code>Injector</code></a> that will be used as parent for\nthe Component. Defaults to the injector of the current view container.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>ngComponentOutletContent</code>：要插入元件的 content 部分的可專案節點的可選列表（如果存在）。</p><p translation-origin=\"off\"><code>ngComponentOutletContent</code>: Optional list of projectable nodes to insert into the content\nsection of the component, if it exists.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>ngComponentOutletNgModule</code>：可選的 NgModule\n類參考，以允許動態載入另一個模組，然後從該模組載入元件。</p><p translation-origin=\"off\"><code>ngComponentOutletNgModule</code>: Optional NgModule class reference to allow loading another\nmodule dynamically, then loading a component from that module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>ngComponentOutletNgModuleFactory</code>：不推薦使用的配置選項，它允許提供可選的 NgModule\n工廠以允許動態載入另一個模組，然後從該模組載入元件。改用 <code>ngComponentOutletNgModule</code>。</p><p translation-origin=\"off\"><code>ngComponentOutletNgModuleFactory</code>: Deprecated config option that allows providing optional\nNgModule factory to allow loading another module dynamically, then loading a component from\nthat module. Use <code>ngComponentOutletNgModule</code> instead.</p>\n\n</li>\n</ul>\n<h3 id=\"syntax\" translation-result=\"on\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#syntax\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#syntax\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">簡單</p><p translation-origin=\"off\">Simple</p>\n\n<code-example>\n&lt;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression\"&gt;&lt;/ng-container&gt;\n</code-example>\n<p translation-result=\"on\">客製的注入器/內容</p><p translation-origin=\"off\">Customized injector/content</p>\n\n<code-example>\n&lt;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  injector: injectorExpression;\n                                  content: contentNodesExpression;\"&gt;\n&lt;/ng-container&gt;\n</code-example>\n<p translation-result=\"on\">客製的 ngModule 參考</p><p translation-origin=\"off\">Customized NgModule reference</p>\n\n<code-example>\n&lt;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"componentTypeExpression;\n                                  ngModule: ngModuleClass;\"&gt;\n&lt;/ng-container&gt;\n</code-example>\n<h3 id=\"a-simple-example\" translation-result=\"on\">一個簡單的例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#a-simple-example\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">A simple example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#a-simple-example\"><i class=\"material-icons\">link</i></a></h3>\n\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"SimpleExample\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'hello-world', template: 'Hello World!'})\nexport class HelloWorld {\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-simple-example',\n  template: `&lt;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"HelloWorld\"&gt;&lt;/ng-container&gt;`\n})\nexport class NgComponentOutletSimpleExample {\n  // This field is necessary to expose HelloWorld to the template.\n  HelloWorld = HelloWorld;\n}\n\n</code-example>\n<p translation-result=\"on\">帶有附加選項的更完整範例：</p><p translation-origin=\"off\">A more complete example with additional options:</p>\n\n<code-example path=\"common/ngComponentOutlet/ts/module.ts\" region=\"CompleteExample\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class Greeter {\n  suffix = '!';\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'complete-component',\n  template: `Complete: &lt;ng-content&gt;&lt;/ng-content&gt; &lt;ng-content&gt;&lt;/ng-content&gt;{{ greeter.suffix }}`\n})\nexport class CompleteComponent {\n  constructor(public greeter: Greeter) {}\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'ng-component-outlet-complete-example',\n  template: `\n    &lt;ng-template #ahoj&gt;Ahoj&lt;/ng-template&gt;\n    &lt;ng-template #svet&gt;Svet&lt;/ng-template&gt;\n    &lt;ng-container *<a href=\"api/common/NgComponentOutlet\" class=\"code-anchor\">ngComponentOutlet</a>=\"CompleteComponent;\n                                      injector: myInjector;\n                                      content: myContent\"&gt;&lt;/ng-container&gt;`\n})\nexport class NgComponentOutletCompleteExample implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // This field is necessary to expose CompleteComponent to the template.\n  CompleteComponent = CompleteComponent;\n  myInjector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('ahoj', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) ahojTemplateRef!: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('svet', {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) svetTemplateRef!: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;;\n  myContent?: any[][];\n\n  constructor(injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, private vcr: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) {\n    this.myInjector =\n        Injector.create({providers: [{provide: Greeter, deps: []}], parent: injector});\n  }\n\n  ngOnInit() {\n    // Create the projectable content from the templates\n    this.myContent = [\n      this.vcr.createEmbeddedView(this.ahojTemplateRef).rootNodes,\n      this.vcr.createEmbeddedView(this.svetTemplateRef).rootNodes\n    ];\n  }\n}\n\n</code-example>\n\n  </section>\n\n  \n  \n  \n  </div>\n</article>\n\n<!-- links to this doc:\n - api/common\n - api/common/CommonModule\n - api/core/OnChanges\n - api/core/OnDestroy\n - guide/deprecations\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/CommonModule\n - api/common/NgComponentOutlet#a-simple-example\n - api/common/NgComponentOutlet#description\n - api/common/NgComponentOutlet#fine-tune-control\n - api/common/NgComponentOutlet#instance-properties\n - api/common/NgComponentOutlet#ngcomponentoutlet\n - api/common/NgComponentOutlet#selectors\n - api/common/NgComponentOutlet#syntax\n - api/common/NgComponentOutlet#一個簡單的例子\n - api/common/NgComponentOutlet#匯出自\n - api/common/NgComponentOutlet#微調控制\n - api/common/NgComponentOutlet#語法\n - api/core/Component\n - api/core/Injectable\n - api/core/Injector\n - api/core/Input\n - api/core/NgModuleFactory\n - api/core/OnInit\n - api/core/TemplateRef\n - api/core/Type\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/upgrade/static\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/common/src/directives/ng_component_outlet.ts?message=docs(common)%3A%20請簡述你的修改...#L10-L170\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/common/src/directives/ng_component_outlet.ts#L10-L170\n-->"}