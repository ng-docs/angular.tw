{"id":"api/localize/init/$localize","title":"$localize","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/localize\", \"name\": \"@angular/localize\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/localize/init\", \"name\": \"@angular/localize/init\" } },\n            { \"@type\": \"ListItem\", \"position\": 4, \"item\": { \"@id\": \"https://angular.cn/api/localize/init/$localize\", \"name\": \"$localize\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/localize\">@angular/localize</a> &gt; <a href=\"api/localize/init\">@angular/localize/init</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/localize/src/localize/src/localize.ts?message=docs(localize)%3A%20請簡述你的修改...#L214-L226\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/localize/src/localize/src/localize.ts#L214-L226\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"localize\">$localize<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/localize/init/$localize#localize\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label global\">global</label>\n    <label class=\"api-type-label const\">const</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">標記範本文字字串以進行本地化。</p><p translation-origin=\"off\">Tag a template literal string for localization.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/localize/init/$localize#description\">檢視\"說明\"...</a></p>\n  </section>\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\n  const $localize: LocalizeFn;\n  </code-example>\n\n  \n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/localize/init/$localize#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">例如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example language=\"ts\">\n$localize `some string to localize`\n</code-example>\n<p translation-result=\"on\"><strong>提供含義、描述和 id</strong></p><p translation-origin=\"off\"><strong>Providing meaning, description and id</strong></p>\n\n<p translation-result=\"on\">你可以選擇為本地化字串指定 <code>meaning</code>、<code>description</code> 和 <code>id</code>\n中的一個或多個，方法是在其前面使用以下形式的冒號分隔塊：</p><p translation-origin=\"off\">You can optionally specify one or more of <code>meaning</code>, <code>description</code> and <code>id</code> for a localized\nstring by pre-pending it with a colon delimited block of the form:</p>\n\n<code-example language=\"ts\">\n$localize`:meaning|description@@id:source message text`;\n\n$localize`:meaning|:source message text`;\n$localize`:description:source message text`;\n$localize`:@@id:source message text`;\n</code-example>\n<p translation-result=\"on\">此格式與 Angular 範本中用於 <code>i18n</code> 標記的格式相同。請參閱<a href=\"guide/i18n-common-prepare#mark-text-in-component-template\">Angular i18n\n指南</a>。</p><p translation-origin=\"off\">This format is the same as that used for <code>i18n</code> markers in Angular templates. See the\n<a href=\"guide/i18n-common-prepare#mark-text-in-component-template\">Angular i18n guide</a>.</p>\n\n<p translation-result=\"on\"><strong>命名佔位符</strong></p><p translation-origin=\"off\"><strong>Naming placeholders</strong></p>\n\n<p translation-result=\"on\">如果範本文字字串包含表示式，那麼這些表示式將自動為你與佔位符名稱相關聯。</p><p translation-origin=\"off\">If the template literal string contains expressions, then the expressions will be automatically\nassociated with placeholder names for you.</p>\n\n<p translation-result=\"on\">例如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example language=\"ts\">\n$localize `Hi ${name}! There are ${items.length} items.`;\n</code-example>\n<p translation-result=\"on\">將產生 <code>Hi {$PH}! There are {$PH_1} items</code>。</p><p translation-origin=\"off\">will generate a message-source of <code>Hi {$PH}! There are {$PH_1} items</code>.</p>\n\n<p translation-result=\"on\">推薦的實踐是命名與每個表示式關聯的佔位符。</p><p translation-origin=\"off\">The recommended practice is to name the placeholder associated with each expression though.</p>\n\n<p translation-result=\"on\">透過在表示式之後直接提供用 <code>:</code>\n字元包裝的佔位符名稱來實現。這些佔位符名稱會從渲染的本地化字串中刪除。</p><p translation-origin=\"off\">Do this by providing the placeholder name wrapped in <code>:</code> characters directly after the\nexpression. These placeholder names are stripped out of the rendered localized string.</p>\n\n<p translation-result=\"on\">例如，要命名 <code>items.length</code> 表示式佔位符 <code>itemCount</code>，你可以這樣寫：</p><p translation-origin=\"off\">For example, to name the <code>items.length</code> expression placeholder <code>itemCount</code> you write:</p>\n\n<code-example language=\"ts\">\n$localize `There are ${items.length}:itemCount: items`;\n</code-example>\n<p translation-result=\"on\"><strong>轉義冒號標記</strong></p><p translation-origin=\"off\"><strong>Escaping colon markers</strong></p>\n\n<p translation-result=\"on\">如果你需要直接在沒有元資料塊的標記字串的開頭使用 <code>:</code> 字元，或直接在沒有名稱的替換表示式之後使用\n:，你必須在 <code>:</code> 之前使用反斜槓來轉譯：</p><p translation-origin=\"off\">If you need to use a <code>:</code> character directly at the start of a tagged string that has no\nmetadata block, or directly after a substitution expression that has no name you must escape\nthe <code>:</code> by preceding it with a backslash:</p>\n\n<p translation-result=\"on\">例如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example language=\"ts\">\n// message has a metadata block so no need to escape colon\n$localize `:some description::this message starts with a colon (:)`;\n// no metadata block so the colon must be escaped\n$localize `\\:this message starts with a colon (:)`;\n</code-example>\n<code-example language=\"ts\">\n// named substitution so no need to escape colon\n$localize `${label}:label:: ${}`\n// anonymous substitution so colon must be escaped\n$localize `${label}\\: ${}`\n</code-example>\n<p translation-result=\"on\"><strong>處理本地化字串：</strong></p><p translation-origin=\"off\"><strong>Processing localized strings:</strong></p>\n\n<p translation-result=\"on\">有三種情況：</p><p translation-origin=\"off\">There are three scenarios:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong>編譯時內聯</strong>：<code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code>\n標籤在編譯時由轉譯器轉換，刪除標籤並使用提供給轉譯工具的翻譯集合中的翻譯後的文字字串替換範本文字字串。</p><p translation-origin=\"off\"><strong>compile-time inlining</strong>: the <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> tag is transformed at compile time by a\ntranspiler, removing the tag and replacing the template literal string with a translated\nliteral string from a collection of translations provided to the transpilation tool.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>執行時估算</strong>：<code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code>\n標籤是一個執行時函式，它會使用執行時載入的翻譯集合中的字串替換範本文字字串的部分（靜態字串和表示式）並重新排序。</p><p translation-origin=\"off\"><strong>run-time evaluation</strong>: the <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> tag is a run-time function that replaces and\nreorders the parts (static strings and expressions) of the template literal string with strings\nfrom a collection of translations loaded at run-time.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>傳遞估算</strong>：<code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code>\n標籤是一個執行時函式，它只是估算原始範本文字字串，而不對各個部分應用任何翻譯。此版本在開發期間或無需翻譯本地化範本文字的地方使用。</p><p translation-origin=\"off\"><strong>pass-through evaluation</strong>: the <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> tag is a run-time function that simply evaluates\nthe original template literal string without applying any translations to the parts. This\nversion is used during development or where there is no need to translate the localized\ntemplate literals.</p>\n\n</li>\n</ul>\n</section>\n</div>\n</article>\n\n<!-- links to this doc:\n - api/localize\n - api/localize/clearTranslations\n - api/localize/init\n - api/localize/loadTranslations\n - guide/angular-compiler-options\n - guide/i18n-common-add-package\n - guide/i18n-common-merge\n - guide/i18n-common-prepare\n - guide/i18n-common-translation-files\n - guide/i18n-optional-manage-marked-text\n - guide/migration-legacy-message-id\n - guide/migration-localize\n-->\n<!-- links from this doc:\n - /api\n - api/localize\n - api/localize/init\n - api/localize/init/$localize#description\n - api/localize/init/$localize#localize\n - guide/i18n-common-prepare#mark-text-in-component-template\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/localize/src/localize/src/localize.ts?message=docs(localize)%3A%20請簡述你的修改...#L214-L226\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/localize/src/localize/src/localize.ts#L214-L226\n-->"}