{"id":"guide/template-reference-variables","title":"Understanding template variables","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-reference-variables.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"understanding-template-variables\" translation-result=\"on\">理解範本變數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#understanding-template-variables\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Understanding template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#understanding-template-variables\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">範本變數可以幫助你在範本的另一部分使用這個部分的資料。使用範本變數，你可以執行某些任務，比如響應使用者輸入或微調應用的表單。</p><p translation-origin=\"off\">Template variables help you use data from one part of a template in another part of the template.\nUse template variables to perform tasks such as respond to user input or finely tune your application's forms.</p>\n\n<p translation-result=\"on\">範本變數可以參考這些東西：</p><p translation-origin=\"off\">A template variable can refer to the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">範本中的 DOM 元素</p><p translation-origin=\"off\">a DOM element within a template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">指令或元件</p><p translation-origin=\"off\">a directive or component</p>\n\n</li>\n<li>\n<p translation-result=\"on\">來自 <a href=\"api/core/ng-template\">ng-template</a> 的 <a href=\"api/core/TemplateRef\">TemplateRef</a></p><p translation-origin=\"off\">a <a href=\"api/core/TemplateRef\">TemplateRef</a> from an <a href=\"api/core/ng-template\">ng-template</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN：Web Components\">Web 元件</a></p><p translation-origin=\"off\">a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a></p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本章包含程式碼片段的工作例項參閱<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-overview\">瞭解範本</a></p><p translation-origin=\"off\"><a href=\"guide/template-overview\">Understanding templates</a></p>\n\n</li>\n</ul>\n<h2 id=\"syntax\" translation-result=\"on\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在範本中，要使用井號 <code>#</code> 來宣告一個範本變數。下列範本變數 <code>#phone</code> 聲明瞭一個名為 <code>phone</code> 的變數，其值為此 <code>&lt;input&gt;</code> 元素。</p><p translation-origin=\"off\">In the template, you use the hash symbol, <code>#</code>, to declare a template variable.\nThe following template variable, <code>#phone</code>, declares a <code>phone</code> variable with the <code>&lt;input&gt;</code> element as its value.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n</code-example>\n<p translation-result=\"on\">可以在元件範本中的任何地方參考某個範本變數。這裡的 <code>&lt;button&gt;</code> 就參考了 <code>phone</code> 變數。</p><p translation-origin=\"off\">Refer to a template variable anywhere in the component's template.\nHere, a <code>&lt;button&gt;</code> further down the template refers to the <code>phone</code> variable.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n&lt;!-- lots of other elements --&gt;\n\n&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;\n&lt;button type=\"button\" (click)=\"callPhone(phone.value)\"&gt;Call&lt;/button&gt;\n\n</code-example>\n<h2 id=\"how-angular-assigns-values-to-template-variables\" translation-result=\"on\">Angular 是如何為範本變數賦值的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">How Angular assigns values to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 根據你所宣告的變數的位置給範本變數賦值：</p><p translation-origin=\"off\">Angular assigns a template variable a value based on where you declare the variable:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">如果在元件上宣告變數，該變數就會參考該元件例項。</p><p translation-origin=\"off\">If you declare the variable on a component, the variable refers to the component instance.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果在標準的 HTML 標記上宣告變數，該變數就會參考該元素。</p><p translation-origin=\"off\">If you declare the variable on a standard HTML tag, the variable refers to the element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果你在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素上宣告變數，該變數就會參考一個 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 例項來代表此範本。關於 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的更多資訊，請參閱<a href=\"guide/structural-directives#asterisk\">結構型指令</a> 中的 <a href=\"guide/structural-directives#asterisk\">Angular 如何使用 <code>*</code> 語法</a>部分。</p><p translation-origin=\"off\">If you declare the variable on an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance which represents the template.\nFor more information on <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>, see <a href=\"guide/structural-directives#asterisk\">How Angular uses the asterisk, <code>*</code>, syntax</a> in <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n\n</li>\n</ul>\n<h2 id=\"variable-specifying-a-name\" translation-result=\"on\">指定名稱的變數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#variable-specifying-a-name\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Variable specifying a name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#variable-specifying-a-name\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">如果該變數在右側指定了一個名字，比如 <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，那麼該變數就會參考所在元素上具有這個 <code>exportAs</code> 名字的指令或元件。</p><p translation-origin=\"off\">If the variable specifies a name on the right-hand side, such as <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>, the variable refers to the directive or component on the element with a matching <code>exportAs</code> name.</p>\n\n<!-- What does the second half of this mean?^^ Can we explain this more fully? Could I see a working example? -kw -->\n</li>\n</ul>\n<h3 id=\"using-ngform-with-template-variables\" translation-result=\"on\">將 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 與範本變數一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#將-ngform-與範本變數一起使用\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> with template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在大多數情況下，Angular 會把範本變數的值設定為它所在的元素。在前面的例子中，<code>phone</code> 參考的是電話號碼 <code>&lt;input&gt;</code>。該按鈕的 click 處理程式會把這個 <code>&lt;input&gt;</code> 的值傳給該元件的 <code>callPhone()</code> 方法。</p><p translation-origin=\"off\">In most cases, Angular sets the template variable's value to the element on which it occurs.\nIn the previous example, <code>phone</code> refers to the phone number <code>&lt;input&gt;</code>.\nThe button's click handler passes the <code>&lt;input&gt;</code> value to the component's <code>callPhone()</code> method.</p>\n\n<p translation-result=\"on\">這裡的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令示範瞭如何透過參考指令的的 <code>exportAs</code> 名字來參考不同的值。在下面的例子中，範本變數 <code>itemForm</code> 在 HTML 中分別出現了三次。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive demonstrates getting a reference to a different value by referencing a directive's <code>exportAs</code> name.\nIn the following example, the template variable, <code>itemForm</code>, appears three times separated by HTML.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&lt;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required /&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;div [hidden]=\"!itemForm.form.valid\"&gt;\n  &lt;p&gt;{{ submitMessage }}&lt;/p&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">如果沒有 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 這個屬性值，<code>itemForm</code> 參考的值將是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a> 也就是 <code>&lt;form&gt;</code> 元素。如果某元素是一個 Angular 元件，則不帶屬性值的參考會自動參考此元件的例項。否則，不帶屬性值的參考會參考此 DOM 元素，而不管此元素上有一個或多個指令。</p><p translation-origin=\"off\">Without the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> attribute value, the reference value of <code>itemForm</code> would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>, <code>&lt;form&gt;</code>.\nIf an element is an Angular Component, a reference with no attribute value will automatically reference the component instance. Otherwise, a reference with no value will reference the DOM element, even if the element has one or more directives applied to it.</p>\n\n<!-- What is the train of thought from talking about a form element to the difference between a component and a directive? Why is the component directive conversation relevant here?  -kw I agree -alex -->\n<h2 id=\"template-variable-scope\" translation-result=\"on\">範本變數的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template variable scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">就像 JavaScript 或 TypeScript 程式碼中的變數一樣，範本變數的範圍為宣告它們的範本。</p><p translation-origin=\"off\">Just like variables in JavaScript or TypeScript code, template variables are scoped to the template that declares them.</p>\n\n<p translation-result=\"on\">同樣，諸如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 類別的<a href=\"guide/built-in-directives\">結構指令</a>或 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 宣告會建立一個新的巢狀(Nesting)範本範圍，就像 JavaScript 的控制流陳述式（例如 <code>if</code> 和 <code>for</code> 建立新的詞法範圍。你不能從邊界外存取這些結構指令之一中的範本變數。</p><p translation-origin=\"off\">Similarly, <a href=\"guide/built-in-directives\">Structural directives</a> such as <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, or <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> declarations create a new nested template scope, much like JavaScript's control flow statements like <code>if</code> and <code>for</code> create new lexical scopes. You cannot access template variables within one of these structural directives from outside of its boundaries.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">同名變數在範本中只能定義一次，這樣執行時它的值就是可預測的。</p><p translation-origin=\"off\">Define a variable only once in the template so the runtime value remains predictable.</p>\n\n</div>\n<h3 id=\"accessing-in-a-nested-template\" translation-result=\"on\">在巢狀(Nesting)範本中存取<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Accessing in a nested template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">內部範本可以存取外範本定義的範本變數。</p><p translation-origin=\"off\">An inner template can access template variables that the outer template defines.</p>\n\n<p translation-result=\"on\">在下面的例子中，修改 <code>&lt;input&gt;</code> 中的文字值也會改變 <code>&lt;span&gt;</code> 中的值，因為 Angular 會立即透過範本變數 <code>ref1</code> 來更新這種變化。</p><p translation-origin=\"off\">In the following example, changing the text in the <code>&lt;input&gt;</code> changes the value in the <code>&lt;span&gt;</code> because Angular immediately updates changes through the template variable, <code>ref1</code>.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref-vars-scope1\" header=\"src/app/app.component.html\">\n&lt;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" /&gt;\n&lt;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\"&gt;Value: {{ ref1.value }}&lt;/span&gt;\n\n</code-example>\n<p translation-result=\"on\">在這種情況下，<code>&lt;span&gt;</code> 上的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 會建立一個新的範本範圍，其中包括其父範圍中的 <code>ref1</code> 變數。</p><p translation-origin=\"off\">In this case, the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on <code>&lt;span&gt;</code> creates a new template scope, which includes the <code>ref1</code> variable from its parent scope.</p>\n\n<p translation-result=\"on\">但是，從外部的父範本存取子範圍中的變數是行不通的。</p><p translation-origin=\"off\">However, accessing a template variable from a child scope in the parent template doesn't work:</p>\n\n<code-example language=\"html\">\n  &lt;input *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\" #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" /&gt;\n  &lt;span&gt;Value: {{ ref2?.value }}&lt;/span&gt; &lt;!-- doesn't work --&gt;\n</code-example>\n<p translation-result=\"on\">在這裡，<code>ref2</code> 是在 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 建立的子範圍中宣告的，並且無法從父範本存取。</p><p translation-origin=\"off\">Here, <code>ref2</code> is declared in the child scope created by <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, and is not accessible from the parent template.</p>\n\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\" translation-result=\"on\">範本輸入變數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>範本輸入變數</em>是一個具有在建立該範本例項時設定的值的變數。請參閱：<a href=\"/guide/structural-directives\">編寫結構指令</a></p><p translation-origin=\"off\">A <em>template input variable</em> is a variable with a value that is set when an instance of that template is created. See: <a href=\"/guide/structural-directives\">Writing structural directives</a></p>\n\n<p translation-result=\"on\">可以在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 的長格式用法中看到範本輸入變數的作用：</p><p translation-origin=\"off\">Template input variables can be seen in action in the long-form usage of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code>:</p>\n\n<code-example language=\"html\">\n&lt;ul&gt;\n  &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"&gt;\n    &lt;li&gt;{{hero.name}}\n  &lt;/ng-template&gt;\n&lt;/ul&gt;\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令將例項化此<ng-template>為 hero 陣列中的每個 <code>heroes</code> 一次，並將為每個例項相應地設定 <code>hero</code> 變數。</ng-template></p><p translation-origin=\"off\">The <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive will instantiate this <ng-template> once for each hero in the <code>heroes</code> array, and will set the <code>hero</code> variable for each instance accordingly.</ng-template></p>\n\n<p translation-result=\"on\">例項化 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 時，可以傳遞多個命名值，這些值可以繫結到不同的範本輸入變數。輸入變數的 <code>let-</code> 宣告的右側可以指定應該用於該變數的值。</p><p translation-origin=\"off\">When an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> is instantiated, multiple named values can be passed which can be bound to different template input variables. The right-hand side of the <code>let-</code> declaration of an input variable can specify which value should be used for that variable.</p>\n\n<p translation-result=\"on\">例如，<code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 還提供了對陣列中每個英雄的 <code>index</code> 的存取：</p><p translation-origin=\"off\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> for example also provides access to the <code>index</code> of each hero in the array:</p>\n\n<code-example language=\"html\">\n&lt;ul&gt;\n  &lt;ng-template <a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a> let-hero let-i=\"index\" [<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngForOf</a>]=\"heroes\"&gt;\n    &lt;li&gt;Hero number {{i}}: {{hero.name}}\n  &lt;/ng-template&gt;\n&lt;/ul&gt;\n</code-example>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What’s next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"/guide/structural-directives\">編寫結構指令</a></p><p translation-origin=\"off\"><a href=\"/guide/structural-directives\">Writing structural directives</a></p>\n\n\n  <div class=\"reviewed\">最後複查時間：5/12/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/ng-template\n - guide/binding-overview\n - guide/example-apps-list\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/template-overview\n - guide/template-statements\n - guide/template-syntax\n - guide/understanding-template-expr-overview\n - guide/user-input\n-->\n<!-- links from this doc:\n - /guide/structural-directives\n - api/common/NgFor\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/TemplateRef\n - api/core/ng-template\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives\n - guide/structural-directives\n - guide/structural-directives#asterisk\n - guide/template-overview\n - guide/template-reference-variables#accessing-in-a-nested-template\n - guide/template-reference-variables#angular-是如何為範本變數賦值的\n - guide/template-reference-variables#how-angular-assigns-values-to-template-variables\n - guide/template-reference-variables#prerequisites\n - guide/template-reference-variables#syntax\n - guide/template-reference-variables#template-input-variable\n - guide/template-reference-variables#template-variable-scope\n - guide/template-reference-variables#understanding-template-variables\n - guide/template-reference-variables#using-ngform-with-template-variables\n - guide/template-reference-variables#variable-specifying-a-name\n - guide/template-reference-variables#whats-next\n - guide/template-reference-variables#下一步呢\n - guide/template-reference-variables#前提條件\n - guide/template-reference-variables#在巢狀(Nesting)範本中存取\n - guide/template-reference-variables#將-ngform-與範本變數一起使用\n - guide/template-reference-variables#指定名稱的變數\n - guide/template-reference-variables#範本變數的作用域\n - guide/template-reference-variables#範本輸入變數\n - guide/template-reference-variables#理解範本變數\n - guide/template-reference-variables#語法\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-reference-variables.md?message=docs%3A%20請簡述你的修改...\n-->"}