{"id":"guide/architecture","title":"Introduction to Angular concepts","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-angular-concepts\" translation-result=\"on\">Angular 概念簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#introduction-to-angular-concepts\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Introduction to Angular concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#introduction-to-angular-concepts\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 是一個用 HTML 和 TypeScript 建構客戶端應用的平台與框架。Angular 本身就是用 TypeScript 寫成的。它將核心功能和可選功能作為一組 TypeScript 庫進行實現，你可以把它們匯入你的應用中。</p><p translation-origin=\"off\">Angular is a platform and framework for building single-page client applications using HTML and TypeScript.\nAngular is written in TypeScript.\nIt implements core and optional functionality as a set of TypeScript libraries that you import into your applications.</p>\n\n<p translation-result=\"on\">Angular 的基本構成要素是 <em>NgModule</em>，它為<em>元件</em>提供了編譯的上下文環境。NgModule 會把相關的程式碼收集到一些功能集中。Angular 應用就是由一組 NgModule 定義出的。應用至少會有一個用於引導應用的<em>根模組</em>，通常還會有很多<em>特性模組</em>。</p><p translation-origin=\"off\">The architecture of an Angular application relies on certain fundamental concepts.\nThe basic building blocks of the Angular framework are Angular components that are organized into <em>NgModules</em>.\nNgModules collect related code into functional sets; an Angular application is defined by a set of NgModules.\nAn application always has at least a <em>root module</em> that enables bootstrapping, and typically has many more <em>feature modules</em>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">元件定義<em>檢視</em>。檢視是一組可見的螢幕元素，Angular 可以根據你的程式邏輯和資料來選擇和修改它們。每個應用都至少有一個根元件。</p><p translation-origin=\"off\">Components define <em>views</em>, which are sets of screen elements that Angular can choose among and modify according to your program logic and data</p>\n\n</li>\n<li>\n<p translation-result=\"on\">元件使用<em>服務</em>。服務會提供那些與檢視不直接相關的功能。服務提供者可以作為<em>依賴</em>被<em>注入</em>到元件中，這能讓你的程式碼更加模組化、更加可複用、更加高效。</p><p translation-origin=\"off\">Components use <em>services</em>, which provide specific functionality not directly related to views.\nService providers can be <em>injected</em> into components as <em>dependencies</em>, making your code modular, reusable, and efficient.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">模組、元件和服務都是使用<em>裝飾器</em>的類，這些<em>裝飾器</em>會標出它們的型別並提供元資料，以告知 Angular 該如何使用它們。</p><p translation-origin=\"off\">Modules, components and services are classes that use <em>decorators</em>.\nThese decorators mark their type and provide metadata that tells Angular how to use them.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">元件類別的元資料將元件類和一個用來定義檢視的<em>範本</em>關聯起來。範本把普通的 HTML 和 Angular <em>指令</em>與<em>繫結標記（markup）</em>組合起來，這樣 Angular 就可以在渲染 HTML 之前先修改這些 HTML。</p><p translation-origin=\"off\">The metadata for a component class associates it with a <em>template</em> that defines a view.\nA template combines ordinary HTML with Angular <em>directives</em> and <em>binding markup</em> that allow Angular to modify the HTML before rendering it for display.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">服務類別的元資料提供了一些資訊，Angular 要用這些資訊來讓元件可以透過<em>依賴注入（DI）</em>使用該服務。</p><p translation-origin=\"off\">The metadata for a service class provides the information Angular needs to make it available to components through <em>dependency injection (DI)</em></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">應用的元件通常會定義很多檢視，並進行分級組織。Angular 提供了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 服務來幫助你定義檢視之間的導航路徑。路由器提供了先進的瀏覽器內導航功能。</p><p translation-origin=\"off\">An application's components typically define many views, arranged hierarchically.\nAngular provides the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service to help you define navigation paths among views.\nThe router provides sophisticated in-browser navigational capabilities.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">參閱 <a href=\"guide/glossary\">Angular 詞彙表</a> 以瞭解對 Angular 重要名詞和用法的基本定義。</p><p translation-origin=\"off\">See the <a href=\"guide/glossary\">Angular Glossary</a> for basic definitions of important Angular terms and usage.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要想檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"modules\" translation-result=\"on\">模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 定義了 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它和 JavaScript（ES2015）的模組不同而且有一定的互補性。NgModule 為一個元件集聲明瞭編譯的上下文環境，它專注於某個應用領域、某個工作流或一組緊密相關的能力。NgModule 可以將其元件和一組相關程式碼（如服務）關聯起來，形成功能單元。</p><p translation-origin=\"off\">Angular <em>NgModules</em> differ from and complement JavaScript (ES2015) modules.\nAn NgModule declares a compilation context for a set of components that is dedicated to an application domain, a workflow, or a closely related set of capabilities.\nAn NgModule can associate its components with related code, such as services, to form functional units.</p>\n\n<p translation-result=\"on\">每個 Angular 應用都有一個<em>根模組</em>，通常命名為 <code>AppModule</code>。根模組提供了用來啟動應用的引導機制。一個應用通常會包含很多特性模組。</p><p translation-origin=\"off\">Every Angular application has a <em>root module</em>, conventionally named <code>AppModule</code>, which provides the bootstrap mechanism that launches the application.\nAn application typically contains many functional modules.</p>\n\n<p translation-result=\"on\">像 JavaScript 模組一樣，NgModule 也可以從其它 NgModule 中匯入功能，並允許匯出它們自己的功能供其它 NgModule 使用。比如，要在你的應用中使用路由器（Router）服務，就要匯入 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 這個 NgModule。</p><p translation-origin=\"off\">Like JavaScript modules, NgModules can import functionality from other NgModules, and allow their own functionality to be exported and used by other NgModules.\nFor example, to use the router service in your app, you import the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> NgModule.</p>\n\n<p translation-result=\"on\">把你的程式碼組織成一些清晰的特性模組，可以幫助管理複雜應用的開發工作並實現可複用性設計。另外，這項技術還能讓你獲得<em>延遲載入</em>（也就是按需載入模組）的優點，以儘可能減小啟動時需要載入的程式碼體積。</p><p translation-origin=\"off\">Organizing your code into distinct functional modules helps in managing development of complex applications, and in designing for reusability.\nIn addition, this technique lets you take advantage of <em>lazy-loading</em> —that is, loading modules on demand— to minimize the amount of code that needs to be loaded at startup.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">更深入的討論，參閱<a href=\"guide/architecture-modules\">模組簡介</a>。</p><p translation-origin=\"off\">For a more detailed discussion, see <a href=\"guide/architecture-modules\">Introduction to modules</a>.</p>\n\n</div>\n<h2 id=\"components\" translation-result=\"on\">元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每個 Angular 應用都至少有一個元件，也就是<em>根元件</em>，它會把元件樹和頁面中的 DOM 連線起來。每個元件都會定義一個類別，其中包含應用的資料和邏輯，並與一個 HTML <em>範本</em>相關聯，該範本定義了一個供目標環境下顯示的檢視。</p><p translation-origin=\"off\">Every Angular application has at least one component, the <em>root component</em> that connects a component hierarchy with the page document object model (DOM).\nEach component defines a class that contains application data and logic, and is associated with an HTML <em>template</em> that defines a view to be displayed in a target environment.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器表明緊隨它的那個類是一個元件，並提供範本和該元件專屬的元資料。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator identifies the class immediately below it as a component, and provides the template and related component-specific metadata.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">裝飾器是一些用於修飾 JavaScript 類別的函式。Angular 定義了許多裝飾器，這些裝飾器會把一些特定種類的元資料附加到類上，以便 Angular 瞭解這些類別的含義以及該如何使用它們。</p><p translation-origin=\"off\">Decorators are functions that modify JavaScript classes.\nAngular defines a number of decorators that attach specific kinds of metadata to classes, so that the system knows what those classes mean and how they should work.</p>\n\n<p translation-result=\"on\"><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\">到網上學習關於裝飾器的更多知識。</a></p><p translation-origin=\"off\"><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\">Learn more about decorators on the web.</a></p>\n\n</div>\n<h3 id=\"templates-directives-and-data-binding\" translation-result=\"on\">範本、指令和資料繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#templates-directives-and-data-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Templates, directives, and data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#templates-directives-and-data-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">範本會把 HTML 和 Angular 的標記（markup）組合起來，這些標記可以在 HTML 元素顯示出來之前修改它們。範本中的<em>指令</em>會提供程式邏輯，而<em>繫結標記</em>會把你應用中的資料和 DOM 連線在一起。有兩種型別的資料繫結：</p><p translation-origin=\"off\">A template combines HTML with Angular markup that can modify HTML elements before they are displayed.\nTemplate <em>directives</em> provide program logic, and <em>binding markup</em> connects your application data and the DOM.\nThere are two types of data binding:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">資料繫結</nt-wrapper><nt-wrapper translation-origin=\"off\">Data bindings</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">事件繫結</nt-wrapper><nt-wrapper translation-origin=\"off\">Event binding</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">讓你的應用可以透過更新應用的資料來響應目標環境下的使用者輸入。</nt-wrapper><nt-wrapper translation-origin=\"off\">Lets your application respond to user input in the target environment by updating your application data.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">屬性繫結</nt-wrapper><nt-wrapper translation-origin=\"off\">Property binding</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">讓你將從應用資料中計算出來的值插入到 HTML 中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Lets you interpolate values that are computed from your application data into the HTML.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">在檢視顯示出來之前，Angular 會先根據你的應用資料和邏輯來執行範本中的指令並解析繫結表示式，以修改 HTML 元素和 DOM。Angular 支援<em>雙向資料繫結</em>，這意味著 DOM 中發生的變化（比如使用者的選擇）同樣可以反映回你的程式資料中。</p><p translation-origin=\"off\">Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify the HTML elements and the DOM, according to your program data and logic.\nAngular supports <em>two-way data binding</em>, meaning that changes in the DOM, such as user choices, are also reflected in your program data.</p>\n\n<p translation-result=\"on\">你的範本也可以用<em>管道</em>轉換要顯示的值以增強使用者體驗。比如，可以使用管道來顯示適合使用者所在本地環境的日期和貨幣格式。Angular 為一些通用的轉換提供了預定義管道，你還可以定義自己的管道。</p><p translation-origin=\"off\">Your templates can use <em>pipes</em> to improve the user experience by transforming values for display.\nFor example, use pipes to display dates and currency values that are appropriate for a user's locale.\nAngular provides predefined pipes for common transformations, and you can also define your own pipes.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解對這些概念的深入討論，參閱<a href=\"guide/architecture-components\">元件介紹</a>。</p><p translation-origin=\"off\">For a more detailed discussion of these concepts, see <a href=\"guide/architecture-components\">Introduction to components</a>.</p>\n\n</div>\n<p><a id=\"dependency-injection\"></a></p>\n<h2 id=\"services-and-dependency-injection\" translation-result=\"on\">服務與依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Services and dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">對於與特定檢視無關並希望跨元件共享的資料或邏輯，可以建立<em>服務</em>類別。服務類別的定義通常緊跟在 “@Injectable()” 裝飾器之後。該裝飾器提供的元資料可以讓你的服務作為依賴<em>被注入到</em>客戶元件中。</p><p translation-origin=\"off\">For data or logic that isn't associated with a specific view, and that you want to share across components, you create a <em>service</em> class.\nA service class definition is immediately preceded by the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.\nThe decorator provides the metadata that allows other providers to be <strong>injected</strong> as dependencies into your class.</p>\n\n<p translation-result=\"on\"><em>依賴注入</em>（或 DI）讓你可以保持元件類別的精簡和高效。有了 DI，元件就不用從伺服器獲取資料、驗證使用者輸入或直接把日誌寫到控制檯，而是會把這些任務委託給服務。</p><p translation-origin=\"off\"><em>Dependency injection</em> (DI) lets you keep your component classes lean and efficient.\nThey don't fetch data from the server, validate user input, or log directly to the console; they delegate such tasks to services.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">更深入的討論，參閱<a href=\"guide/architecture-services\">服務和 DI 簡介</a>。</p><p translation-origin=\"off\">For a more detailed discussion, see <a href=\"guide/architecture-services\">Introduction to services and DI</a>.</p>\n\n</div>\n<h3 id=\"routing\" translation-result=\"on\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#routing\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#routing\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模組提供了一個服務，它可以讓你定義在應用的各個不同狀態和檢視層次結構之間導航時要使用的路徑。它的工作模型基於人們熟知的瀏覽器導航約定：</p><p translation-origin=\"off\">The Angular <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your application.\nIt is modeled on the familiar browser navigation conventions:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在位址列輸入 URL，瀏覽器就會導航到相應的頁面。</p><p translation-origin=\"off\">Enter a URL in the address bar and the browser navigates to a corresponding page</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在頁面中點選連結，瀏覽器就會導航到一個新頁面。</p><p translation-origin=\"off\">Click links on the page and the browser navigates to a new page</p>\n\n</li>\n<li>\n<p translation-result=\"on\">點選瀏覽器的前進和後退按鈕，瀏覽器就會在你的瀏覽歷史中向前或向後導航。</p><p translation-origin=\"off\">Click the browser's back and forward buttons and the browser navigates backward and forward through the history of pages you've seen</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">不過路由器會把類似 URL 的路徑對映到檢視而不是頁面。當用戶執行一個動作時（比如點選連結），本應該在瀏覽器中載入一個新頁面，但是路由器攔截了瀏覽器的這個行為，並顯示或隱藏一個檢視層次結構。</p><p translation-origin=\"off\">The router maps URL-like paths to views instead of pages.\nWhen a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</p>\n\n<p translation-result=\"on\">如果路由器認為當前的應用狀態需要某些特定的功能，而定義此功能的模組尚未載入，路由器就會按需<em>延遲載入</em>此模組。</p><p translation-origin=\"off\">If the router determines that the current application state requires particular functionality, and the module that defines it hasn't been loaded, the router can <em>lazy-load</em> the module on demand.</p>\n\n<p translation-result=\"on\">路由器會根據你應用中的導航規則和資料狀態來攔截 URL。當用戶點選按鈕、選擇下拉框或收到其它任何來源的輸入時，你可以導航到一個新檢視。路由器會在瀏覽器的歷史日誌中記錄這個動作，所以前進和後退按鈕也能正常工作。</p><p translation-origin=\"off\">The router interprets a link URL according to your application's view navigation rules and data state.\nYou can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source.\nThe router logs activity in the browser's history, so the back and forward buttons work as well.</p>\n\n<p translation-result=\"on\">要定義導航規則，你就要把<em>導航路徑</em>和你的元件關聯起來。路徑（path）使用類似 URL 的語法來和程式資料整合在一起，就像範本語法會把你的檢視和程式資料整合起來一樣。然後你就可以用程式邏輯來決定要顯示或隱藏哪些檢視，以根據你制定的存取規則對使用者的輸入做出響應。</p><p translation-origin=\"off\">To define navigation rules, you associate <em>navigation paths</em> with your components.\nA path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data.\nYou can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">更深入的討論，參閱<a href=\"guide/router\">路由與導航</a>。</p><p translation-origin=\"off\">For a more detailed discussion, see <a href=\"guide/router\">Routing and navigation</a>.</p>\n\n</div>\n<h2 id=\"whats-next\" translation-result=\"on\">接下來呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你已經學完了 Angular 應用的主要構成要素的基礎知識。下面這張圖展示了這些基礎部分之間是如何關聯起來的。</p><p translation-origin=\"off\">You've learned the basics about the main building blocks of an Angular application.\nThe following diagram shows how these basic pieces are related.</p>\n\n<div class=\"lightbox\">\n<img alt=\"overview\" src=\"generated/images/guide/architecture/overview2.png\" width=\"700\" height=\"356\">\n</div>\n<ul>\n<li>\n<p translation-result=\"on\">元件和範本共同定義了 Angular 的檢視。</p><p translation-origin=\"off\">Together, a component and template define an Angular view</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">元件類上的裝飾器為其添加了元資料，其中包括指向相關範本的指標。</p><p translation-origin=\"off\">A decorator on a component class adds the metadata, including a pointer to the associated template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">元件範本中的指令和繫結標記會根據程式資料和程式邏輯修改這些檢視。</p><p translation-origin=\"off\">Directives and binding markup in a component's template modify views based on program data and logic</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">依賴注入器會為元件提供一些服務，比如路由器服務就能讓你定義如何在檢視之間導航。</p><p translation-origin=\"off\">The dependency injector provides services to a component, such as the router service that lets you define navigation among views</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">這些主題的詳情在下列頁面中有介紹：</p><p translation-origin=\"off\">Each of these subjects is introduced in more detail in the following pages.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-modules\">模組簡介</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-modules\">Introduction to Modules</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components\">元件簡介</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components\">Introduction to Components</a></p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components#templates-and-views\">範本與檢視</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components#templates-and-views\">Templates and views</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components#component-metadata\">元件元資料</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components#component-metadata\">Component metadata</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components#data-binding\">資料繫結</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components#data-binding\">Data binding</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components#directives\">指令</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components#directives\">Directives</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-components#pipes\">管道</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-components#pipes\">Pipes</a></p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture-services\">服務與依賴注入簡介</a></p><p translation-origin=\"off\"><a href=\"guide/architecture-services\">Introduction to services and dependency injection</a></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">當你熟悉了這些基礎構成要素之後，就可以在本文件中進一步檢視它們的詳情了。要學習能幫你建構和釋出 Angular 應用的更多工具和技巧，參閱<a href=\"guide/architecture-next-steps\">後續步驟：工具與技巧</a>。</p><p translation-origin=\"off\">When you're familiar with these fundamental building blocks, you can explore them in more detail in the documentation.\nTo learn about more tools and techniques that are available to help you build and deploy Angular applications, see <a href=\"guide/architecture-next-steps\">Next steps: tools and techniques</a>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - docs\n - guide/ajs-quick-reference\n - guide/animations\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary\n - guide/http\n - guide/lifecycle-hooks\n - guide/reactive-forms\n - guide/router-tutorial-toh\n - guide/setup-local\n - guide/template-overview\n - guide/template-syntax\n - guide/testing\n - guide/understanding-angular-animation\n - guide/understanding-communicating-with-http\n - tutorial/tour-of-heroes/toh-pt6\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/router/Router\n - guide/architecture#angular-概念簡介\n - guide/architecture#components\n - guide/architecture#introduction-to-angular-concepts\n - guide/architecture#modules\n - guide/architecture#routing\n - guide/architecture#services-and-dependency-injection\n - guide/architecture#templates-directives-and-data-binding\n - guide/architecture#whats-next\n - guide/architecture#接下來呢\n - guide/architecture#服務與依賴注入\n - guide/architecture#模組\n - guide/architecture#範本指令和資料繫結\n - guide/architecture#元件\n - guide/architecture#路由\n - guide/architecture-components\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#pipes\n - guide/architecture-components#templates-and-views\n - guide/architecture-modules\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/glossary\n - guide/router\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture.md?message=docs%3A%20請簡述你的修改...\n - https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\n-->"}