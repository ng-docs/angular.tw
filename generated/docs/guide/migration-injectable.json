{"id":"guide/migration-injectable","title":"Migration for missing @Injectable() decorators and incomplete provider definitions","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-injectable.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"migration-for-missing-injectable-decorators-and-incomplete-provider-definitions\" translation-result=\"on\">遷移缺少 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器和不完整的服務提供者定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#遷移缺少-injectable-裝飾器和不完整的服務提供者定義\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Migration for missing <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorators and incomplete provider definitions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#migration-for-missing-injectable-decorators-and-incomplete-provider-definitions\"><i class=\"material-icons\">link</i></a></h1>\n\n<h3 id=\"what-does-this-schematic-do\" translation-result=\"on\">這個原理圖做了什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">What does this schematic do?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">該原理圖會為應用中不帶裝飾器的服務提供者新增一個 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。</p><p translation-origin=\"off\">This schematic adds an <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator to classes which are provided in the application but are not decorated.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">該原理圖更新了符合 <code>{provide: SomeToken}</code> 模式的提供者，以幫它顯式指定 <code>useValue: undefined</code>。</p><p translation-origin=\"off\">The schematic updates providers which follow the <code>{provide: SomeToken}</code> pattern to explicitly specify <code>useValue: undefined</code>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><strong>缺少 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的例子</strong></p><p translation-origin=\"off\"><strong>Example for missing <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></strong></p>\n\n<p translation-result=\"on\"><strong>遷移之前</strong>：</p><p translation-origin=\"off\"><strong>Before migration</strong>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class MyService {…}\nexport class MyOtherService {…}\nexport class MyThirdClass {…}\nexport class MyFourthClass {…}\nexport class MyFifthClass {…}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  providers: [\n    MyService,\n    {provide: SOME_TOKEN, useClass: MyOtherService},\n    // The following classes do not need to be decorated because they\n    // are never instantiated and just serve as DI tokens.\n    {provide: MyThirdClass, useValue: …},\n    {provide: MyFourthClass, useFactory: …},\n    {provide: MyFifthClass, useExisting: …},\n  ]\n})\n\n</code-example>\n<p translation-result=\"on\"><strong>遷移後</strong>：</p><p translation-origin=\"off\"><strong>After migration</strong>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MyService {…}\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MyOtherService {…}\nexport class MyThirdClass {…}\nexport class MyFourthClass {…}\nexport class MySixthClass {…}\n\n…\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n<code>MyThirdClass</code>、<code>MyFourthClass</code> 和 <code>MyFifthClass</code> 不需要用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 進行修飾，因為它們永遠不會被例項化，而只是用作<a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌</a>。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\n<code>MyThirdClass</code>, <code>MyFourthClass</code>, and <code>MyFifthClass</code> do not need to be decorated with <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> because they are never instantiated, but just used as a <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a>.</p>\n\n</div>\n<p translation-result=\"on\"><strong>需要 <code>useValue: undefined</code></strong> 的提供者例子</p><p translation-origin=\"off\"><strong>Example for provider needing <code>useValue: undefined</code></strong></p>\n\n<p translation-result=\"on\">這個例子展示了一個符合 <code>{provide: X}</code> 模式的提供者。需要把提供者遷移成一個更明確的定義，其中指定了 <code>useValue: undefined</code>。</p><p translation-origin=\"off\">This example shows a provider following the <code>{provide: X}</code> pattern.\nThe provider needs to be migrated to a more explicit definition where <code>useValue: undefined</code> is specified.</p>\n\n<p translation-result=\"on\"><strong>遷移之前</strong>：</p><p translation-origin=\"off\"><strong>Before migration</strong>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n{provide: MyToken}\n\n</code-example>\n<p translation-result=\"on\"><strong>遷移完成後</strong>：</p><p translation-origin=\"off\"><strong>After migration</strong>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n{provide: MyToken, useValue: undefined}\n\n</code-example>\n<h3 id=\"why-is-adding-injectable-necessary\" translation-result=\"on\">為什麼需要新增 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> ？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#為什麼需要新增-injectable-\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Why is adding <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> necessary?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#why-is-adding-injectable-necessary\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在我們的文件中，始終建議把 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器新增到應用提供或注入的任何類中。但是，舊版本的 Angular 確實允許在沒有裝飾器的情況下注入一個類別，比如 AOT 模式。這意味著，如果你不小心省略了裝飾器，你的應用可能會繼續工作，儘管某些地方缺少 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。對於 Angular 的未來版本，這是有問題的。最終，我們計劃嚴格要求裝飾器，因為這樣可以進一步最佳化編譯器和執行時。這個原理圖添加了任何可能缺失的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器，以適應你的應用的未來發展。</p><p translation-origin=\"off\">In our docs, we've always recommended adding <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorators to any class that is provided or injected in your application.\nHowever, older versions of Angular did allow injection of a class without the decorator in certain cases, such as AOT mode.\nThis means if you accidentally omitted the decorator, your application may have continued to work despite missing <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorators in some places.\nThis is problematic for future versions of Angular.\nEventually, we plan to strictly require the decorator because doing so enables further optimization of both the compiler and the runtime.\nThis schematic adds any <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorators that may be missing to future-proof your app.</p>\n\n<h3 id=\"why-is-adding-usevalue-undefined-necessary\" translation-result=\"on\">為什麼要新增 <code>useValue: undefined</code>，有必要嗎？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#why-is-adding-usevalue-undefined-necessary\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Why is adding <code>useValue: undefined</code> necessary?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#why-is-adding-usevalue-undefined-necessary\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">考慮以下模式：</p><p translation-origin=\"off\">Consider the following pattern:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  providers: [{provide: MyService}]\n})\n\n</code-example>\n<p translation-result=\"on\">那些使用這個模式的服務提供者會把其行為看作 <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌</a> 為 <code>MyService</code>，其值為 <code>undefined</code>。但在 Ivy 的情況下並非如此，這些提供者會被解釋為指定了 <code>useClass: MyService</code>。這意味著當升級到版本 9 或更高版本時，這些提供者的行為會有所不同。為了保證提供者的行為和以前一樣，DI 的值應該顯式設定為 <code>undefined</code>。</p><p translation-origin=\"off\">Providers using this pattern will behave as if they provide <code>MyService</code> as <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a>\nwith the value of <code>undefined</code>.\nThis is not the case in Ivy where such providers will be interpreted as if <code>useClass: MyService</code> is specified.\nThis means that these providers will behave differently when updating to version 9 and above.\nTo ensure that the provider behaves the same as before, the DI value should be explicitly set to <code>undefined</code>.</p>\n\n<h3 id=\"when-should-i-be-adding-injectable-decorators-to-classes\" translation-result=\"on\">我什麼時候應該把 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器新增到類中？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#我什麼時候應該把-injectable-裝飾器新增到類中\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">When should I be adding <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorators to classes?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#when-should-i-be-adding-injectable-decorators-to-classes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">任何提供的類都必須帶有 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。該裝飾器是框架透過 DI 要正確建立該類例項時所必需的。</p><p translation-origin=\"off\">Any class that is provided must have an <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.\nThe decorator is necessary for the framework to properly create an instance of that class through DI.</p>\n\n<p translation-result=\"on\">但是，那些已經用 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>，或 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 裝飾過的類不需要這個裝飾器。現有的類裝飾器已經指示編譯器生成了所需的資訊。</p><p translation-origin=\"off\">However, classes which are already decorated with <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>, <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> or <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> do not need both decorators.\nThe existing class decorator already instructs the compiler to generate the\nneeded information.</p>\n\n<h3 id=\"should-i-update-my-library\" translation-result=\"on\">我應該更新我的函式庫嗎？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#should-i-update-my-library\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Should I update my library?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-injectable#should-i-update-my-library\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">是的，如果你的函式庫中有任何要注入的類，那麼都應該使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器對它們進行更新。在 Angular 的未來版本中，缺少某些 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器會丟擲一個錯誤。</p><p translation-origin=\"off\">Yes, if your library has any classes that are meant to be injected, they should be updated with the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.\nIn a future version of Angular, a missing <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator will always throw an error.</p>\n\n<p translation-result=\"on\">此外，應該更新庫中符合 <code>{provide: X}</code> 模式的提供者，以顯式指定一個值。如果沒有明確的值，這些提供者可能會在使用你的函式庫的應用中根據 Angular 版本而採取不同的行為。</p><p translation-origin=\"off\">Additionally, providers in your library that follow the described <code>{provide: X}</code> pattern should be updated to specify an explicit value.\nWithout explicit value, these providers can behave differently based on the Angular version in applications consuming your library.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Directive\n - api/core/Injectable\n - api/core/NgModule\n - api/core/Pipe\n - guide/glossary#di-token\n - guide/migration-injectable#migration-for-missing-injectable-decorators-and-incomplete-provider-definitions\n - guide/migration-injectable#should-i-update-my-library\n - guide/migration-injectable#what-does-this-schematic-do\n - guide/migration-injectable#when-should-i-be-adding-injectable-decorators-to-classes\n - guide/migration-injectable#why-is-adding-injectable-necessary\n - guide/migration-injectable#why-is-adding-usevalue-undefined-necessary\n - guide/migration-injectable#為什麼要新增-usevalue-undefined有必要嗎\n - guide/migration-injectable#為什麼需要新增-injectable-\n - guide/migration-injectable#我什麼時候應該把-injectable-裝飾器新增到類中\n - guide/migration-injectable#我應該更新我的函式庫嗎\n - guide/migration-injectable#遷移缺少-injectable-裝飾器和不完整的服務提供者定義\n - guide/migration-injectable#這個原理圖做了什麼\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-injectable.md?message=docs%3A%20請簡述你的修改...\n-->"}