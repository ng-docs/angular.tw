{"id":"guide/esbuild","title":"Getting started with the CLI's esbuild-based build system","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/esbuild.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"getting-started-with-the-clis-esbuild-based-build-system\" translation-result=\"on\">開始使用 CLI 的基於 esbuild 的建構系統<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#getting-started-with-the-clis-esbuild-based-build-system\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Getting started with the CLI's esbuild-based build system<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#getting-started-with-the-clis-esbuild-based-build-system\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">這個“基於 esbuild 的 ECMAScript 模組(ESM) 應用程式建構系統”特性在開發者預覽版中可用。\n它已經準備好供你嘗試了，但在出穩定版之前它可能會再發生變化，目前還不推薦用於生產建構。</p><p translation-origin=\"off\">The esbuild-based ECMAScript module (ESM) application build system feature is available for <a href=\"/guide/releases#developer-preview\">developer preview</a>.\nIt's ready for you to try, but it might change before it is stable and is not yet recommended for production builds.</p>\n\n</div>\n<p translation-result=\"on\">在 v16 及更高版本中，新的建構系統提供了一種建構 Angular 應用程式的方法。這個新的建構系統包括：</p><p translation-origin=\"off\">In v16 and higher, the new build system provides a way to build Angular applications. This new build system includes:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">使用 ESM 的現代輸出格式，帶有動態匯入表示式以支援延遲模組載入。</p><p translation-origin=\"off\">A modern output format using ESM, with dynamic import expressions to support lazy module loading.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">初始建構和增量重建的建構時效能更快。</p><p translation-origin=\"off\">Faster build-time performance for both initial builds and incremental rebuilds.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">較新的 JavaScript 生態系統工具，例如<a href=\"https://esbuild.github.io/\">esbuild</a>和<a href=\"https://vitejs.dev/\">Vite</a>。</p><p translation-origin=\"off\">Newer JavaScript ecosystem tools such as <a href=\"https://esbuild.github.io/\">esbuild</a> and <a href=\"https://vitejs.dev/\">Vite</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你可以選擇對每個應用程式單獨使用新的建構器，只需最少的配置更新。</p><p translation-origin=\"off\">You can opt-in to use the new builder on a per application basis with minimal configuration updates required.</p>\n\n<h2 id=\"trying-the-esm-build-system-in-an-angular-cli-application\" translation-result=\"on\">在 Angular CLI 應用程式中嘗試 ESM 建構系統<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#trying-the-esm-build-system-in-an-angular-cli-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Trying the ESM build system in an Angular CLI application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#trying-the-esm-build-system-in-an-angular-cli-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>@angular-devkit/build-angular</code> 套件中有一個名為 <code>browser-esbuild</code> 的新建構器，它存在於 Angular CLI 產生的應用程式中。該建構是現有 <code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 建構器的直接替代品，可提供已穩定的瀏覽器應用程式建構系統。你可以為使用 <code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> 建構器的應用程式試用新的建構系統。</p><p translation-origin=\"off\">A new builder named <code>browser-esbuild</code> is available within the <code>@angular-devkit/build-angular</code> package that is present in an Angular CLI generated application. The build is a drop-in replacement for the existing <code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> builder that provides the current stable browser application build system.\nYou can try out the new build system for applications that use the <code><a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code> builder.</p>\n\n<h3 id=\"updating-the-application-configuration\" translation-result=\"on\">更新應用配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#updating-the-application-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Updating the application configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#updating-the-application-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">實現新的建構系統是為了最大限度地減少轉換應用程式所需的更改量。目前，新的建構系統是透過備用建構器 ( <code>browser-esbuild</code> ) 提供的。你可以更新任何應用程式目標的 <code>build</code> 目標以試用新的建構系統。</p><p translation-origin=\"off\">The new build system was implemented to minimize the amount of changes necessary to transition your applications. Currently, the new build system is provided via an alternate builder (<code>browser-esbuild</code>). You can update the <code>build</code> target for any application target to try out the new build system.</p>\n\n<p translation-result=\"on\">以下是你通常會在應用程式的 <code>angular.json</code> 中找到的內容：</p><p translation-origin=\"off\">The following is what you would typically find in <code>angular.json</code> for an application:</p>\n\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n...\n</code-example>\n<p translation-result=\"on\">更改 <code>builder</code> 欄位就是你要進行的唯一更改。</p><p translation-origin=\"off\">Changing the <code>builder</code> field is the only change you will need to make.</p>\n\n<code-example language=\"json\" hidecopy=\"true\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",\n...\n</code-example>\n<h3 id=\"executing-a-build\" translation-result=\"on\">執行建構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#executing-a-build\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Executing a build<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#executing-a-build\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">更新應用程式配置後，可以像以前一樣使用 <code>ng build</code> 執行建構。對於開發者預覽版中目前尚未實現的其餘選項，將針對每個選項發出警告，並在建構期間忽略該選項。</p><p translation-origin=\"off\">Once you have updated the application configuration, builds can be performed using the <code>ng build</code> as was previously done. For the remaining options that are currently not yet implemented in the developer preview, a warning will be issued for each and the option will be ignored during the build.</p>\n\n<code-example language=\"shell\">\n\nng build\n\n</code-example>\n<h3 id=\"starting-the-development-server\" translation-result=\"on\">啟動開發伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#starting-the-development-server\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Starting the development server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#starting-the-development-server\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">開發伺服器現在能夠自動檢測新的建構系統並使用它來建構應用程式。要啟動開發伺服器，無需更改 <code>dev-server</code> 建構器配置或命令列。</p><p translation-origin=\"off\">The development server now has the ability to automatically detect the new build system and use it to build the application. To start the development server no changes are necessary to the <code>dev-server</code> builder configuration or command line.</p>\n\n<code-example language=\"shell\">\n\nng serve\n\n</code-example>\n<p translation-result=\"on\">你可以繼續使用以前在開發伺服器上使用過的那些<a href=\"/cli/serve\">命令列選項</a>。</p><p translation-origin=\"off\">You can continue to use the <a href=\"/cli/serve\">command line options</a> you have used in the past with the development server.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">開發者預覽版本目前還不支援 HMR，如果使用相關選項將被忽略。支援 Angular 的 HMR 能力正在計劃中，將在未來的版本中引入。</p><p translation-origin=\"off\">The developer preview currently does not provide HMR support and the HMR related options will be ignored if used. Angular focused HMR capabilities are currently planned and will be introduced in a future version.</p>\n\n</div>\n<h3 id=\"unimplemented-options-and-behavior\" translation-result=\"on\">未實現的選項和行為<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#unimplemented-options-and-behavior\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Unimplemented options and behavior<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#unimplemented-options-and-behavior\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">幾個建構選項尚未實現，但將在建構系統走向穩定狀態時新增進去。如果你的應用程式使用這些選項，你仍然可以在不刪除它們的情況下試用建構系統。將為任何未實現的選項發出警告，並在建構時忽略它們。但是，如果你的應用程式依賴於這些選項中的任何一個來執行，你可能需要等等才能嘗試。</p><p translation-origin=\"off\">Several build options are not yet implemented but will be added in the future as the build system moves towards a stable status. If your application uses these options, you can still try out the build system without removing them. Warnings will be issued for any unimplemented options but they will otherwise be ignored. However, if your application relies on any of these options to function, you may want to wait to try.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://github.com/angular/angular-cli/issues/25100\">打包預算</a>（ <code>budgets</code> ）</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/angular-cli/issues/25100\">Bundle budgets</a> (<code>budgets</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://github.com/angular/angular-cli/issues/25099\">本地化</a>（ <code>localize</code> / <code>i18nDuplicateTranslation</code> / <code>i18nMissingTranslation</code> ）</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/angular-cli/issues/25099\">Localization</a> (<code>localize</code>/<code>i18nDuplicateTranslation</code>/<code>i18nMissingTranslation</code>)</p>\n\n</li>\n<li>\n<p><a href=\"https://github.com/angular/angular-cli/issues/25101\">Web workers</a> (<code>webWorkerTsConfig</code>)</p>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://github.com/angular/angular-cli/issues/25102\">WASM 匯入</a> —— WASM 仍然可以透過<a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\">標準的網路 API</a>手動載入。</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/angular-cli/issues/25102\">WASM imports</a> -- WASM can still be loaded manually via <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\">standard web APIs</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">透過 <code>ng-packagr</code> 使用新的建構系統來建構庫目前也不可能，但對建構庫的支援將在未來的版本中提供。</p><p translation-origin=\"off\">Building libraries with the new build system via <code>ng-packagr</code> is also not yet possible but library build support will be available in a future release.</p>\n\n<h3 id=\"esm-default-imports-vs-namespace-imports\" translation-result=\"on\">ESM 預設匯入與名稱空間匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">ESM default imports vs. namespace imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#esm-default-imports-vs-namespace-imports\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">預設情況下，TypeScript 允許將預設匯出作為名稱空間匯入，然後在呼叫表示式中使用。不幸的是，這與 ECMAScript 規範不同。新建構系統中的底層捆綁器 ( <code>esbuild</code> ) 需要符合規範的 ESM 程式碼。如果你的應用程式使用不正確的套件匯入型別，建構系統現在將產生警告。但是，為了讓 TypeScript 接受正確的用法，必須在應用程式的 <code>tsconfig</code> 檔案中啟用 TypeScript 選項。啟用後，<a href=\"https://www.typescriptlang.org/tsconfig#esModuleInterop\"><code>esModuleInterop</code></a>選項可以更好地與 ECMAScript 規範保持一致，並且也被 TypeScript 團隊推薦。啟用後，你可以在適用於 ECMAScript 相容形式的情況下更新套件的匯入程式碼。</p><p translation-origin=\"off\">TypeScript by default allows default exports to be imported as namespace imports and then used in call expressions. This is unfortunately a divergence from the ECMAScript specification. The underlying bundler (<code>esbuild</code>) within the new build system expects ESM code that conforms to the specification. The build system will now generate a warning if your application uses an incorrect type of import of a package. However, to allow TypeScript to accept the correct usage, a TypeScript option must be enabled within the application's <code>tsconfig</code> file. When enabled, the <a href=\"https://www.typescriptlang.org/tsconfig#esModuleInterop\"><code>esModuleInterop</code></a> option provides better alignment with the ECMAScript specification and is also recommended by the TypeScript team. Once enabled, you can update package imports where applicable to an ECMAScript conformant form.</p>\n\n<p translation-result=\"on\">以 <a href=\"https://npmjs.com/package/moment\"><code>moment</code></a> 包為例，以下應用程式碼會導致執行時錯誤：</p><p translation-origin=\"off\">Using the <a href=\"https://npmjs.com/package/moment\"><code>moment</code></a> package as an example, the following application code will cause runtime errors:</p>\n\n<code-example language=\"ts\">\nimport * as moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<p translation-result=\"on\">建構時將產生警告，通知你存在潛在問題。警告將類似於：</p><p translation-origin=\"off\">The build will generate a warning to notify you that there is a potential problem. The warning will be similar to:</p>\n\n<code-example format=\"shell\" language=\"shell\" hidecopy=\"true\">\n▲ [WARNING] Calling \"moment\" will crash at run-time because it's an import namespace object, not a function [call-import-namespace]\n\n    src/main.ts:2:12:\n      2 │ console.log(moment().format());\n        ╵             ~~~~~~\n\nConsider changing \"moment\" to a default import instead:\n\n    src/main.ts:1:7:\n      1 │ import * as moment from 'moment';\n        │        ~~~~~~~~~~~\n        ╵        moment\n\n</code-example>\n<p translation-result=\"on\">但是，你可以透過為應用程式啟用 <code>esModuleInterop</code> TypeScript 選項並將匯入更改為以下內容來避免執行時錯誤和警告：</p><p translation-origin=\"off\">However, you can avoid the runtime errors and the warning by enabling the <code>esModuleInterop</code> TypeScript option for the application and changing the import to the following:</p>\n\n<code-example language=\"ts\">\nimport moment from 'moment';\n\nconsole.log(moment().format());\n</code-example>\n<h2 id=\"vite-as-a-development-server\" translation-result=\"on\">Vite 作為開發伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#vite-as-a-development-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Vite as a development server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#vite-as-a-development-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 中 Vite 目前僅僅用在<strong>開發伺服器範圍</strong>內。即使不使用底層的 Vite 建構系統，Vite 也提供了一個功能齊全的開發伺服器和客戶端支援，該伺服器已被捆綁到一個低依賴性 npm 套件中。這讓它成為提供綜合開發伺服器功能的理想選擇。當前的開發伺服器處理序使用新建構系統在記憶體中產生應用程式的開發建構，並將結果傳遞給 Vite 為應用程式提供服務。Vite 的使用很像基於 Webpack 的開發伺服器，封裝在 Angular CLI <code>dev-server</code> builder 中，目前無法直接配置。</p><p translation-origin=\"off\">The usage of Vite in the Angular CLI is currently only within a <em>development server capacity only</em>. Even without using the underlying Vite build system, Vite provides a full-featured development server with client side support that has been bundled into a low dependency npm package. This makes it an ideal candidate to provide comprehensive development server functionality. The current development server process uses the new build system to generate a development build of the application in memory and passes the results to Vite to serve the application. The usage of Vite, much like the Webpack-based development server, is encapsulated within the Angular CLI <code>dev-server</code> builder and currently cannot be directly configured.</p>\n\n<h2 id=\"known-issues\" translation-result=\"on\">已知的問題<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#known-issues\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Known Issues<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#known-issues\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當前，你在嘗試新建構系統時可能會遇到幾個已知問題。此列表將更新以保持最新。如果這些問題中的任何一個正在阻止你嘗試新的建構系統，請稍後再回來檢視，那時候它可能已經解決了。</p><p translation-origin=\"off\">There are currently several known issues that you may encounter when trying the new build system. This list will be updated to stay current. If any of these issues are currently blocking you from trying out the new build system, please check back in the future as it may have been solved.</p>\n\n<h3 id=\"runtime-evaluated-dynamic-import-expressions\" translation-result=\"on\">執行時計算的動態匯入表示式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#runtime-evaluated-dynamic-import-expressions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Runtime-evaluated dynamic import expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#runtime-evaluated-dynamic-import-expressions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不包含靜態值的動態匯入表示式將保留其原始形式，不會在建構時處理。這是底層捆綁器的限制，但<a href=\"https://github.com/evanw/esbuild/pull/2508\">計劃</a>在未來實現。在許多情況下，可以透過使用某種形式的條件陳述式（例如已知潛在檔案的 <code>if</code> 或 <code>switch</code> 將匯入表示式更改為靜態字串來讓應用程式程式碼正常工作。</p><p translation-origin=\"off\">Dynamic import expressions that do not contain static values will be kept in their original form and not processed at build time. This is a limitation of the underlying bundler but is <a href=\"https://github.com/evanw/esbuild/pull/2508\">planned</a> to be implemented in the future. In many cases, application code can be made to work by changing the import expressions into static strings with some form of conditional statement such as an <code>if</code> or <code>switch</code> for the known potential files.</p>\n\n<p translation-result=\"on\">不支援：</p><p translation-origin=\"off\">Unsupported:</p>\n\n<code-example language=\"ts\">\nreturn await import(`/abc/${name}.json`);\n</code-example>\n<p translation-result=\"on\">支援：</p><p translation-origin=\"off\">Supported:</p>\n\n<code-example language=\"ts\">\nswitch (name) {\n  case 'x':\n    return await import('/abc/x.json');\n  case 'y':\n    return await import('/abc/y.json');\n  case 'z':\n    return await import('/abc/z.json');\n}\n</code-example>\n<h3 id=\"order-dependent-side-effectful-imports-in-lazy-modules\" translation-result=\"on\">惰性模組中依賴於順序的副作用匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Order-dependent side-effectful imports in lazy modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">依賴於特定順序並且也在多個惰性模組中使用的 import 陳述式會導致最上層陳述式亂序執行。這並不常見，因為它取決於有副作用模組的使用，並且不適用於 <code>polyfills</code> 選項。這是由底層捆綁器中的<a href=\"https://github.com/evanw/esbuild/issues/399\">缺陷</a>引起的，但將在未來的更新中解決。</p><p translation-origin=\"off\">Import statements that are dependent on a specific ordering and are also used in multiple lazy modules can cause top-level statements to be executed out of order.\nThis is not common as it depends on the usage of side-effectful modules and does not apply to the <code>polyfills</code> option.\nThis is caused by a <a href=\"https://github.com/evanw/esbuild/issues/399\">defect</a> in the underlying bundler but will be addressed in a future update.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">建議在可能的情況下儘量避免使用具有非區域性副作用（Polyfill指令碼除外）的模組，而不要考慮使用哪個建構系統，以避免這種特定問題。具有非區域性副作用的模組還可能會對應用的大小和執行時效能產生負面影響。</p><p translation-origin=\"off\">Avoiding the use of modules with non-local side effects (outside of polyfills) is recommended whenever possible regardless of the build system being used and avoids this particular issue. Modules with non-local side effects can have a negative effect on both application size and runtime performance as well.</p>\n\n</div>\n<h3 id=\"hashed-filenames-for-non-injected-global-stylesscripts\" translation-result=\"on\">非注入全域樣式/指令碼的雜湊檔名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#hashed-filenames-for-non-injected-global-stylesscripts\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Hashed filenames for non-injected global styles/scripts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#hashed-filenames-for-non-injected-global-stylesscripts\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你的應用程式當前透過 <code>styles</code> 或 <code>scripts</code> 建構選項對任何全域樣式和指令碼使用 <a href=\"guide/workspace-config#styles-and-scripts-configuration\"><code>inject</code></a> 子選項，則這些樣式/指令碼的輸出檔名將錯誤地包含雜湊。根據輸出檔案的用途，這可能會導致你的應用程式執行時失敗。有關詳細資訊，請參閱相關<a href=\"https://github.com/angular/angular-cli/issues/25098\">問題</a>。</p><p translation-origin=\"off\">If your application currently uses the <a href=\"guide/workspace-config#styles-and-scripts-configuration\"><code>inject</code></a> sub-option for any global styles and scripts via the <code>styles</code> or <code>scripts</code> build options, the output file names for those styles/scripts will incorrectly contain a hash. Depending on the usage of the output files, this may cause runtime failures for your application. See the related <a href=\"https://github.com/angular/angular-cli/issues/25098\">issue</a> for more information.</p>\n\n<h2 id=\"bug-reports\" translation-result=\"on\">錯誤報告<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#bug-reports\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Bug reports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/esbuild#bug-reports\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 <a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a> 上報告問題和功能請求。</p><p translation-origin=\"off\">Report issues and feature requests on <a href=\"https://github.com/angular/angular-cli/issues\">GitHub</a>.</p>\n\n<p translation-result=\"on\">請儘可能提供最小化的重現工程，以幫助團隊解決問題。</p><p translation-origin=\"off\">Please provide a minimal reproduction where possible to aid the team in addressing issues.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /cli/serve\n - /guide/releases#developer-preview\n - api/animations/browser\n - guide/esbuild#bug-reports\n - guide/esbuild#esm-default-imports-vs-namespace-imports\n - guide/esbuild#esm-預設匯入與名稱空間匯入\n - guide/esbuild#executing-a-build\n - guide/esbuild#getting-started-with-the-clis-esbuild-based-build-system\n - guide/esbuild#hashed-filenames-for-non-injected-global-stylesscripts\n - guide/esbuild#known-issues\n - guide/esbuild#order-dependent-side-effectful-imports-in-lazy-modules\n - guide/esbuild#runtime-evaluated-dynamic-import-expressions\n - guide/esbuild#starting-the-development-server\n - guide/esbuild#trying-the-esm-build-system-in-an-angular-cli-application\n - guide/esbuild#unimplemented-options-and-behavior\n - guide/esbuild#updating-the-application-configuration\n - guide/esbuild#vite-as-a-development-server\n - guide/esbuild#vite-作為開發伺服器\n - guide/esbuild#啟動開發伺服器\n - guide/esbuild#在-angular-cli-應用程式中嘗試-esm-建構系統\n - guide/esbuild#已知的問題\n - guide/esbuild#開始使用-cli-的基於-esbuild-的建構系統\n - guide/esbuild#惰性模組中依賴於順序的副作用匯入\n - guide/esbuild#執行建構\n - guide/esbuild#更新應用配置\n - guide/esbuild#未實現的選項和行為\n - guide/esbuild#執行時計算的動態匯入表示式\n - guide/esbuild#錯誤報告\n - guide/esbuild#非注入全域樣式指令碼的雜湊檔名\n - guide/workspace-config#styles-and-scripts-configuration\n - https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running\n - https://esbuild.github.io/\n - https://github.com/angular/angular-cli/issues\n - https://github.com/angular/angular-cli/issues/25098\n - https://github.com/angular/angular-cli/issues/25099\n - https://github.com/angular/angular-cli/issues/25100\n - https://github.com/angular/angular-cli/issues/25101\n - https://github.com/angular/angular-cli/issues/25102\n - https://github.com/evanw/esbuild/issues/399\n - https://github.com/evanw/esbuild/pull/2508\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/esbuild.md?message=docs%3A%20請簡述你的修改...\n - https://npmjs.com/package/moment\n - https://vitejs.dev/\n - https://www.typescriptlang.org/tsconfig#esModuleInterop\n-->"}