{"id":"guide/content-projection","title":"Content projection","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/content-projection.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"content-projection\" translation-result=\"on\">內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#content-projection\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本主題描述如何使用內容投影來建立靈活的可複用元件。</p><p translation-origin=\"off\">This topic describes how to use content projection to create flexible, reusable components.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視或下載本主題中用到的範例程式碼，請參見<live-example></live-example>。</p><p translation-origin=\"off\">To view or download the example code used in this topic, see the <live-example></live-example>.</p>\n\n</div>\n<p translation-result=\"on\">內容投影是一種模式，你可以在其中插入或<em>投影</em>要在另一個元件中使用的內容。比如，你可能有一個 <code>Card</code> 元件，它可以接受另一個元件提供的內容。</p><p translation-origin=\"off\">Content projection is a pattern in which you insert, or <em>project</em>, the content you want to use inside another component.\nFor example, you could have a <code>Card</code> component that accepts content provided by another component.</p>\n\n<p translation-result=\"on\">以下各節介紹了 Angular 中內容投影的常見實現，包括：</p><p translation-origin=\"off\">The following sections describe common implementations of content projection in Angular, including:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">內容投影</nt-wrapper><nt-wrapper translation-origin=\"off\">Content projection</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/content-projection#single-slot\">單槽內容投影</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/content-projection#single-slot\">Single-slot content projection</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用這種型別的內容投影，元件可以從單一來源接受內容。</nt-wrapper><nt-wrapper translation-origin=\"off\">With this type of content projection, a component accepts content from a single source.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/content-projection#multi-slot\">多槽內容投影</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/content-projection#multi-slot\">Multi-slot content projection</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在這種情況下，元件可以從多個來源接受內容。</nt-wrapper><nt-wrapper translation-origin=\"off\">In this scenario, a component accepts content from multiple sources.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/content-projection#conditional\">條件內容投影</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/content-projection#conditional\">Conditional content projection</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用條件內容投影的元件僅在滿足特定條件時才渲染內容。</nt-wrapper><nt-wrapper translation-origin=\"off\">Components that use conditional content projection render content only when specific conditions are met.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"single-slot\"></a></p>\n<h2 id=\"single-slot-content-projection\" translation-result=\"on\">單插槽內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Single-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#single-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">內容投影的最基本形式是<em>單插槽內容投影</em>。單插槽內容投影是指建立一個元件，你可以在其中投影一個元件。</p><p translation-origin=\"off\">The most basic form of content projection is <em>single-slot content projection</em>.\nSingle-slot content projection refers to creating a component into which you can project one component.</p>\n\n<p translation-result=\"on\">要建立使用單插槽內容投影的元件，請執行以下操作：</p><p translation-origin=\"off\">To create a component that uses single-slot content projection:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><a href=\"guide/component-overview#creating-a-component\">建立一個元件</a>。</p><p translation-origin=\"off\"><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在元件範本中，新增 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，讓你希望投影的內容出現在其中。</p><p translation-origin=\"off\">In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element where you want the projected content to appear.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">比如，以下元件使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素來顯示訊息。</p><p translation-origin=\"off\">For example, the following component uses an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element to display a message.</p>\n\n<code-example header=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\" path=\"content-projection/src/app/zippy-basic/zippy-basic.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-basic',\n  template: `\n    &lt;h2&gt;Single-slot content projection&lt;/h2&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyBasicComponent {}\n\n\n</code-example>\n<p translation-result=\"on\">有了 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，該元件的使用者現在可以將自己的訊息投影到該元件中。比如：</p><p translation-origin=\"off\">With the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element in place, users of this component can now project their own message into the component.\nFor example:</p>\n\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"single-slot\">\n&lt;app-zippy-basic&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/app-zippy-basic&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素是一個佔位符，它不會建立真正的 DOM 元素。<code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的那些自訂屬性將被忽略。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element is a placeholder that does not create a real DOM element.\nCustom attributes applied to <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> are ignored.</p>\n\n</div>\n<p><a id=\"multi-slot\"></a></p>\n<h2 id=\"multi-slot-content-projection\" translation-result=\"on\">多插槽內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Multi-slot content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#multi-slot-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個元件可以具有多個插槽。每個插槽可以指定一個 CSS 選擇器，該選擇器會決定將哪些內容放入該插槽。該模式稱為<em>多插槽內容投影</em>。使用此模式，你必須指定希望投影內容出現在的位置。你可以透過使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 的 <code>select</code> 屬性來完成此任務。</p><p translation-origin=\"off\">A component can have multiple slots.\nEach slot can specify a CSS selector that determines which content goes into that slot.\nThis pattern is referred to as <em>multi-slot content projection</em>.\nWith this pattern, you must specify where you want the projected content to appear.\nYou accomplish this task by using the <code>select</code> attribute of <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code>.</p>\n\n<p translation-result=\"on\">要建立使用多插槽內容投影的元件，請執行以下操作：</p><p translation-origin=\"off\">To create a component that uses multi-slot content projection:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><a href=\"guide/component-overview\">建立</a>一個元件。</p><p translation-origin=\"off\"><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在元件範本中，新增 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，讓你希望投影的內容出現在其中。</p><p translation-origin=\"off\">In the template for your component, add an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element where you want the projected content to appear.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將 <code>select</code> 屬性新增到 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素上。Angular 使用的<a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">選擇器</a>支援標籤名、屬性、CSS 類和 <code>:not</code> 偽類別的任意組合。</p><p translation-origin=\"off\">Add a <code>select</code> attribute to the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> elements.\nAngular supports <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">selectors</a> for any combination of tag name, attribute, CSS class, and the <code>:not</code> pseudo-class.</p>\n\n<p translation-result=\"on\">比如，以下元件會使用兩個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p><p translation-origin=\"off\">For example, the following component uses two  <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> elements.</p>\n\n<code-example header=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\" path=\"content-projection/src/app/zippy-multislot/zippy-multislot.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-zippy-multislot',\n  template: `\n    &lt;h2&gt;Multi-slot content projection&lt;/h2&gt;\n\n    Default:\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n\n    Question:\n    &lt;ng-content select=\"[question]\"&gt;&lt;/ng-content&gt;\n  `\n})\nexport class ZippyMultislotComponent {}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">使用 <code>question</code> 屬性的內容將投影到帶有 <code>select=[question]</code> 屬性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素。</p><p translation-origin=\"off\">Content that uses the <code>question</code> attribute is projected into the <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element with the <code>select=[question]</code> attribute.</p>\n\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">不帶 select 屬性的 ng-content</header><header ng-should-translate=\"\" translation-origin=\"off\">ng-content without a select attribute</header>\n\n<p translation-result=\"on\">如果你的元件包含不帶 <code>select</code> 屬性的 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，則該例項將接收所有與其他 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素都不匹配的投影元件。</p><p translation-origin=\"off\">If your component includes an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element without a <code>select</code> attribute, that instance receives all projected components that do not match any of the other <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> elements.</p>\n\n<p translation-result=\"on\">在前面的範例中，只有第二個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素定義了 <code>select</code> 屬性。結果，第一個 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素就會接收投影到元件中的任何其他內容。</p><p translation-origin=\"off\">In the preceding example, only the second <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element defines a <code>select</code> attribute.\nAs a result, the first <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element receives any other content projected into the component.</p>\n\n</div>\n<p><a id=\"conditional\"></a></p>\n<h2 id=\"conditional-content-projection\" translation-result=\"on\">有條件的內容投影<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Conditional content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#conditional-content-projection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你的元件需要<em>有條件地</em>渲染內容或多次渲染內容，則應配置該元件以接受一個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，其中包含要有條件渲染的內容。</p><p translation-origin=\"off\">If your component needs to <em>conditionally</em> render content, or render content multiple times, you should configure that component to accept an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element that contains the content you want to conditionally render.</p>\n\n<p translation-result=\"on\">在這種情況下，不建議使用 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素，因為只要元件的使用者提供了內容，即使該元件從未定義 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素或該 <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> 元素位於 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 陳述式的內部，該內容也總會被初始化。</p><p translation-origin=\"off\">Using an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element in these cases is not recommended, because when the consumer of a component supplies the content, that content is <em>always</em> initialized, even if the component does not define an <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element or if that <code><a href=\"api/core/ng-content\" class=\"code-anchor\">&lt;ng-content&gt;</a></code> element is inside of an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> statement.</p>\n\n<p translation-result=\"on\">使用 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你可以讓元件根據你想要的任何條件顯式渲染內容，並可以進行多次渲染。在顯式渲染 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素之前，Angular 不會初始化該元素的內容。</p><p translation-origin=\"off\">With an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element, you can have your component explicitly render content based on any condition you want, as many times as you want.\nAngular will not initialize the content of an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element until that element is explicitly rendered.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 進行條件內容投影的典型實現。</p><p translation-origin=\"off\">The following steps demonstrate a typical implementation of conditional content projection using <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><a href=\"guide/component-overview#creating-a-component\">建立一個元件</a>。</p><p translation-origin=\"off\"><a href=\"guide/component-overview#creating-a-component\">Create a component</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在接受 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素的元件中，使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素渲染該範本，比如：</p><p translation-origin=\"off\">In the component that accepts an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element, use an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> element to render that template, such as:</p>\n\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ng-container\">\n&lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n\n</code-example>\n<p translation-result=\"on\">本範例使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令來渲染給定的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素，你將在後續步驟中對其進行定義。你可以將 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令應用於任何型別的元素。本範例就將該指令分配給了 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素，因為該元件不需要渲染真實的 DOM 元素。</p><p translation-origin=\"off\">This example uses the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to render a given <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element, which you will define in a later step.\nYou can apply an <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive to any type of element.\nThis example assigns the directive to an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> element because the component does not need to render a real DOM element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素包裝在另一個元素（比如 <code>div</code> 元素）中，然後應用條件邏輯。</p><p translation-origin=\"off\">Wrap the <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> element in another element, such as a <code>div</code> element, and apply your conditional logic.</p>\n\n<code-example header=\"content-projection/src/app/example-zippy.template.html\" path=\"content-projection/src/app/example-zippy.template.html\" region=\"ngif\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"expanded\" [id]=\"contentId\"&gt;\n    &lt;ng-container [<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>]=\"content.templateRef\"&gt;&lt;/ng-container&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在要投影內容的範本中，將投影的內容包裝在 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素中，比如：</p><p translation-origin=\"off\">In the template where you want to project content, wrap the projected content in an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element, such as:</p>\n\n<code-example header=\"content-projection/src/app/app.component.html\" region=\"ng-template\" path=\"content-projection/src/app/app.component.html\">\n&lt;ng-template appExampleZippyContent&gt;\n  It depends on what you do with it.\n&lt;/ng-template&gt;\n\n</code-example>\n<p translation-result=\"on\">這個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素定義了一個元件可以根據其自身邏輯渲染的內容塊。元件可以使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 或 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 裝飾器獲得對此範本內容的參考（即 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）。前面的範例建立了一個自訂指令 <code>appExampleZippyContent</code> 作為 API，以將 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 標記為元件內容。藉助這個 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>，元件可以使用 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> 指令或 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code>createEmbeddedView()</code> 方法來渲染所參考的內容。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element defines a block of content that a component can render based on its own logic.\nA component can get a reference to this template content, or <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, by using either the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> or <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> decorators.\nThe preceding example creates a custom directive, <code>appExampleZippyContent</code>, as an API to mark the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> for the component's content.\nWith the <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, the component can render the referenced content by using either the <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a></code> directive, or with the <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> method <code>createEmbeddedView()</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/attribute-directives#building-an-attribute-directive\">建立一個屬性型指令</a>，它具有與這個範本的自訂屬性相匹配的選擇器。在此指令中，注入 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 例項。</p><p translation-origin=\"off\"><a href=\"guide/attribute-directives#building-an-attribute-directive\">Create an attribute directive</a> with a selector that matches the custom attribute for your template.\nIn this directive, inject a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance.</p>\n\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"zippycontentdirective\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appExampleZippyContent]'\n})\nexport class ZippyContentDirective {\n  constructor(public templateRef: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;unknown&gt;) {}\n}\n\n</code-example>\n<p translation-result=\"on\">在上一步中，你已添加了具有自訂屬性 <code>appExampleZippyContent</code> 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素。這段程式碼提供了當 Angular 遇到該自訂屬性時要使用的邏輯。在這裡，該邏輯指示 Angular 例項化這個範本參考。</p><p translation-origin=\"off\">In the previous step, you added an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element with a custom attribute, <code>appExampleZippyContent</code>.\nThis code provides the logic that Angular will use when it encounters that custom attribute.\nIn this case, that logic instructs Angular to instantiate a template reference.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在你要將內容投影到的元件中，使用 <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 獲取此投影內容的範本。</p><p translation-origin=\"off\">In the component you want to project content into, use <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> to get the template of the projected content.</p>\n\n<code-example header=\"content-projection/src/app/example-zippy.component.ts\" path=\"content-projection/src/app/example-zippy.component.ts\" region=\"contentchild\">\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(ZippyContentDirective) content!: ZippyContentDirective;\n\n</code-example>\n<p translation-result=\"on\">在執行此步驟之前，你的應用具有一個元件，它會在滿足某些條件時例項化此範本。你還建立了一個指令，該指令能提供對該範本的參考。在最後一步中，<code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> 裝飾器指示 Angular 例項化指定元件中的範本。</p><p translation-origin=\"off\">Prior to this step, your application has a component that instantiates a template when certain conditions are met.\nYou've also created a directive that provides a reference to that template.\nIn this last step, the <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a></code> decorator instructs Angular to instantiate the template in the designated component.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果是多插槽內容投影，則可以使用 <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> 獲取投影元素的查詢列表（<code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code>）。</p><p translation-origin=\"off\">In the case of multi-slot content projection, use <code>@<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a></code> to get a <code><a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a></code> of projected elements.</p>\n\n</div>\n</li>\n</ol>\n<p><a id=\"ngprojectas \"></a></p>\n<h2 id=\"projecting-content-in-more-complex-environments\" translation-result=\"on\">在更復雜的環境中投影內容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Projecting content in more complex environments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/content-projection#projecting-content-in-more-complex-environments\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如<a href=\"guide/content-projection#multi-slot\">多插槽內容投影</a>中所述，你通常會使用屬性、元素、CSS 類或這三者的某種組合來標識將內容投影到何處。比如，在以下 HTML 範本中，p 標籤會使用自訂屬性 <code>question</code> 將內容投影到 <code>app-zippy-multislot</code> 元件中。</p><p translation-origin=\"off\">As described in <a href=\"guide/content-projection#multi-slot\">Multi-slot Content Projection</a>, you typically use either an attribute, element, CSS Class, or some combination of all three to identify where to project your content.\nFor example, in the following HTML template, a paragraph tag uses a custom attribute, <code>question</code>, to project content into the <code>app-zippy-multislot</code> component.</p>\n\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"multi-slot\">\n&lt;app-zippy-multislot&gt;\n  &lt;p question&gt;\n    Is content projection cool?\n  &lt;/p&gt;\n  &lt;p&gt;Let's learn about content projection!&lt;/p&gt;\n&lt;/app-zippy-multislot&gt;\n\n</code-example>\n<p translation-result=\"on\">在某些情況下，你可能希望將內容投影為其他元素。比如，你要投影的內容可能是另一個元素的子元素。可以用 <code>ngProjectAs</code> 屬性來完成此操作。</p><p translation-origin=\"off\">In some cases, you might want to project content as a different element.\nFor example, the content you want to project might be a child of another element.\nAccomplish this with the <code>ngProjectAs</code> attribute.</p>\n\n<p translation-result=\"on\">比如，考慮以下 HTML 程式碼段：</p><p translation-origin=\"off\">For instance, consider the following HTML snippet:</p>\n\n<code-example header=\"content-projection/src/app/app.component.html\" path=\"content-projection/src/app/app.component.html\" region=\"ngprojectas\">\n&lt;ng-container ngProjectAs=\"[question]\"&gt;\n  &lt;p&gt;Is content projection cool?&lt;/p&gt;\n&lt;/ng-container&gt;\n\n</code-example>\n<p translation-result=\"on\">本範例使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 屬性來模擬將元件投影到更復雜的結構中。</p><p translation-origin=\"off\">This example uses an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> attribute to simulate projecting a component into a more complex structure.</p>\n\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">注意</header><header ng-should-translate=\"\" translation-origin=\"off\">Reminder</header>\n\n<p translation-result=\"on\"><code>ng-container</code> 元素是一個邏輯結構，可用於對其他 DOM 元素進行分組；但是，<code>ng-container</code> 本身不會在 DOM 樹中渲染。</p><p translation-origin=\"off\">The <code>ng-container</code> element is a logical construct that is used to group other DOM elements; however, the <code>ng-container</code> itself is not rendered in the DOM tree.</p>\n\n</div>\n<p translation-result=\"on\">在這個例子中，我們要投影的內容位於另一個元素內。為了按預期方式投影此內容，此範本使用了 <code>ngProjectAs</code> 屬性。有了 <code>ngProjectAs</code>，就可以用 <code>[question]</code> 選擇器將整個 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素投影到元件中。</p><p translation-origin=\"off\">In this example, the content we want to project resides inside another element.\nTo project this content as intended, the template uses the <code>ngProjectAs</code> attribute.\nWith <code>ngProjectAs</code>, the entire <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> element is projected into a component using the <code>[question]</code> selector.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/QueryList\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ng-container\n - api/core/ng-content\n - api/core/ng-template\n - guide/attribute-directives#building-an-attribute-directive\n - guide/component-overview\n - guide/component-overview#creating-a-component\n - guide/content-projection#conditional\n - guide/content-projection#conditional-content-projection\n - guide/content-projection#content-projection\n - guide/content-projection#multi-slot\n - guide/content-projection#multi-slot-content-projection\n - guide/content-projection#projecting-content-in-more-complex-environments\n - guide/content-projection#single-slot\n - guide/content-projection#single-slot-content-projection\n - guide/content-projection#內容投影\n - guide/content-projection#單插槽內容投影\n - guide/content-projection#在更復雜的環境中投影內容\n - guide/content-projection#多插槽內容投影\n - guide/content-projection#有條件的內容投影\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/content-projection.md?message=docs%3A%20請簡述你的修改...\n-->"}