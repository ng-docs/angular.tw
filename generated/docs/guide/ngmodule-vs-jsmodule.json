{"id":"guide/ngmodule-vs-jsmodule","title":"JavaScript modules vs. NgModules","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"javascript-modules-vs-ngmodules\" translation-result=\"on\">JavaScript 模組 vs. NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">JavaScript modules vs. NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">JavaScript 模組和 NgModule 都可以幫你模組化你的程式碼，但它們卻有著本質性的不同。Angular 應用同時依賴這兩種模組。</p><p translation-origin=\"off\">JavaScript modules and NgModules can help you modularize your code, but they are very different.\nAngular applications rely on both kinds of modules.</p>\n\n<h2 id=\"javascript-modules-files-containing-code\" translation-result=\"on\">JavaScript 模組：包含程式碼的檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">JavaScript modules: Files containing code<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://javascript.info/modules\" title=\"JavaScript.Info - 模組\">JavaScript 模組</a>是一個帶有 JavaScript 程式碼的單獨檔案，它通常包含一個應用中特定用途的類或函式庫。JavaScript 模組讓你可以跨多個檔案進行工作。</p><p translation-origin=\"off\">A <a href=\"https://javascript.info/modules\" title=\"JavaScript.Info - Modules\">JavaScript module</a> is an individual file with JavaScript code, usually containing a class or a library of functions for a specific purpose within your application.\nJavaScript modules let you spread your work across multiple files.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解更多關於 JavaScript 模組的資訊，參閱<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules\">深入 ES6：模組</a>。關於模組規範的更多資訊，請參閱<a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-modules\">ECMAScript 標準第 6 版</a>。</p><p translation-origin=\"off\">To learn more about JavaScript modules, see <a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules\">ES6 In Depth: Modules</a>.\nFor the module specification, see the <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-modules\">6th Edition of the ECMAScript standard</a>.</p>\n\n</div>\n<p translation-result=\"on\">要讓 JavaScript 模組中的程式碼可用於其它模組，請在模組中相關程式碼的末尾使用 <code>export</code> 匯出它，比如：</p><p translation-origin=\"off\">To make the code in a JavaScript module available to other modules, use an <code>export</code> statement at the end of the relevant code in the module, such as the following:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport class AppComponent { … }\n\n</code-example>\n<p translation-result=\"on\">如果你在另一個模組中需要來自本模組的程式碼時，請使用 <code>import</code> 陳述式，如下所示：</p><p translation-origin=\"off\">When you need that module's code in another module, use an <code>import</code> statement as follows:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { AppComponent } from './app.component';\n\n</code-example>\n<p translation-result=\"on\">每個模組都有自己的最上層作用域。換句話說，模組中的最上層變數和函式在其他指令碼或模組中是看不到的。每個模組都為其中的識別符號提供了一個名稱空間，以防止它們與其它模組中的識別符號衝突。要想使用多個模組，你可以透過建立一個全域名稱空間併為它新增子模組來防止出現意外的全域變數。</p><p translation-origin=\"off\">Each module has its own top-level scope.\nIn other words, top-level variables and functions in a module are not seen in other scripts or modules.\nEach module provides a namespace for identifiers to prevent them from clashing with identifiers in other modules.\nWith multiple modules, you can prevent accidental global variables by creating a single global namespace and adding submodules to it.</p>\n\n<p translation-result=\"on\">Angular 框架本身就是作為一組 JavaScript 模組載入的。</p><p translation-origin=\"off\">The Angular framework itself is loaded as a set of JavaScript modules.</p>\n\n<h2 id=\"ngmodules-classes-with-metadata-for-compiling\" translation-result=\"on\">NgModule：帶有供編譯用的元資料的類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">NgModules: Classes with metadata for compiling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#ngmodule\" title=\"NgModule 的定義\">NgModule</a> 是帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器標記的類，它帶有一個描述該應用裡這個特定部分要如何與其他部分配合使用的元資料物件。NgModule 是 Angular 特有的。雖然帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器的類一般也儲存在單獨的檔案中，但它們與 JavaScript 模組的不同，因為它們包含這種元資料。</p><p translation-origin=\"off\">An <a href=\"guide/glossary#ngmodule\" title=\"Definition of NgModule\">NgModule</a> is a class marked by the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator with a metadata object that describes how that particular part of the application fits together with the other parts.\nNgModules are specific to Angular.\nWhile classes with an <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator are by convention kept in their own files, they differ from JavaScript modules because they include this metadata.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料在指導 Angular 編譯過程中發揮了重要作用，它把你編寫的應用程式碼轉換成高效的 JavaScript 程式碼。元資料描述瞭如何編譯元件範本以及如何在執行時<a href=\"guide/glossary#injector\" title=\"注入器的定義\">建立注入器</a>。它標出了 NgModule 的<a href=\"guide/glossary#component\" title=\"元件的定義\">元件</a>、<a href=\"guide/glossary#directive\" title=\"指令的定義\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"管子的定義）\">管道</a>，並且透過 <code>exports</code> 屬性把它們中的一部分標為公開的，以便外部元件可以使用它們。你還可以使用 NgModule 為<a href=\"guide/glossary#service\" title=\"服務的定義\">服務</a><a href=\"guide/glossary#provider\" title=\"提供者的定義\">新增服務提供者</a>，以便這些服務可以用在你應用的其他地方。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata plays an important role in guiding the Angular compilation process that converts the application code you write into highly performant JavaScript code.\nThe metadata describes how to compile a component's template and how to create an <a href=\"guide/glossary#injector\" title=\"Definition of injector\">injector</a> at runtime.\nIt identifies the NgModule's <a href=\"guide/glossary#component\" title=\"Definition of component\">components</a>, <a href=\"guide/glossary#directive\" title=\"Definition of directive\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"Definition of pipe)\">pipes</a>,\nand makes some of them public through the <code>exports</code> property so that external components can use them.\nYou can also use an NgModule to add <a href=\"guide/glossary#provider\" title=\"Definition of provider\">providers</a> for <a href=\"guide/glossary#service\" title=\"Definition of a service\">services</a>, so that the services are available elsewhere in your application.</p>\n\n<p translation-result=\"on\">不要把所有類都作為 JavaScript 模組定義在一個巨型檔案中，而應該在 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 列表中宣告哪些元件、指令和管道屬於這個 NgModule。這些類叫做<a href=\"guide/glossary#declarable\" title=\"可宣告的定義\">可宣告物件</a>。NgModule 只能匯出它自己擁有的可宣告物件類或從其他 NgModule 中匯入的類別。它不會宣告或匯出任何其他型別的類別。對 Angular 編譯過程來說，可宣告物件是唯一值得關注的類別。</p><p translation-origin=\"off\">Rather than defining all member classes in one giant file as a JavaScript module, declare which components, directives, and pipes belong to the NgModule in the <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> list.\nThese classes are called <a href=\"guide/glossary#declarable\" title=\"Definition of a declarable\">declarables</a>.\nAn NgModule can export only the declarable classes it owns or imports from other NgModules.\nIt doesn't declare or export any other kind of class.\nDeclarables are the only classes that matter to the Angular compilation process.</p>\n\n<p translation-result=\"on\">關於模組元資料屬性的完整描述，請參閱<a href=\"guide/ngmodule-api\" title=\"使用 NgModule 元資料\">使用模組元資料</a>。</p><p translation-origin=\"off\">For a complete description of the NgModule metadata properties, see <a href=\"guide/ngmodule-api\" title=\"Using the NgModule metadata\">Using the NgModule metadata</a>.</p>\n\n<h2 id=\"an-example-that-uses-both\" translation-result=\"on\">同時使用兩者的例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#an-example-that-uses-both\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">An example that uses both<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#an-example-that-uses-both\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"cli\">Angular CLI</a>為新應用專案產生的根模組 <code>AppModule</code> 示範瞭如何使用這兩種模組：</p><p translation-origin=\"off\">The root NgModule <code>AppModule</code> generated by the <a href=\"cli\">Angular CLI</a> for a new application project demonstrates how you use both kinds of modules:</p>\n\n<code-example header=\"src/app/app.module.ts (default AppModule)\" path=\"ngmodules/src/app/app.module.1.ts\">\n// imports\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n// @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator with its metadata\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n\n</code-example>\n<p translation-result=\"on\">根模組根據 <code>import</code> 陳述式開頭匯入 JavaScript 模組。然後使用下列陣列 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></p><p translation-origin=\"off\">The root NgModule starts with <code>import</code> statements to import JavaScript modules.\nIt then configures the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> with the following arrays:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>declarations</code>：屬於該 NgModule 的元件、指令和管道。新應用專案的根模組中只有一個叫做 <code>AppComponent</code> 的元件。</p><p translation-origin=\"off\"><code>declarations</code>: The components, directives, and pipes that belong to the NgModule.\nA new application project's root NgModule has only one component, called <code>AppComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>imports</code>：你要用的其他 NgModule，這樣你才可以使用它們的可宣告物件。新產生的根模組會匯入<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule NgModule\"><code>BrowserModule</code></a>，以便使用特定於瀏覽器的服務，比如 <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\" title=\"文件物件模型的定義\">DOM</a> 渲染、無害化處理和定位。</p><p translation-origin=\"off\"><code>imports</code>: Other NgModules you are using, so that you can use their declarables.\nThe newly generated root NgModule imports <a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule NgModule\"><code>BrowserModule</code></a> in order to use browser-specific services such as <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\" title=\"Definition of Document Object Model\">DOM</a> rendering, sanitization, and location.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>providers</code>：一些服務提供者，可供其他 NgModule 中的元件使用。新產生的根模組中沒有提供者。</p><p translation-origin=\"off\"><code>providers</code>: Providers of services that components in other NgModules can use.\nThere are no providers in a newly generated root NgModule.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>bootstrap</code>：由 Angular 建立並插入到宿主頁面 <code>index.html</code> 中的元件，以便引導該應用。這個元件 <code>AppComponent</code> 會同時出現在 <code>declarations</code> 和 <code>bootstrap</code> 陣列中。</p><p translation-origin=\"off\"><code>bootstrap</code>: The component that Angular creates and inserts into the <code>index.html</code> host web page, thereby bootstrapping the application.\nThis component, <code>AppComponent</code>, appears in both the <code>declarations</code> and the <code>bootstrap</code> arrays.</p>\n\n</li>\n</ul>\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">關於 Angular 模組的更多資訊，請參閱<a href=\"guide/ngmodules\" title=\"使用 Angular 模組整理你的應用\">使用模組組織你的應用</a>。</p><p translation-origin=\"off\">For more about NgModules, see <a href=\"guide/ngmodules\" title=\"Organizing your app with NgModules\">Organizing your app with NgModules</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要了解關於根模組的更多資訊，請參閱<a href=\"guide/bootstrapping\" title=\"用 NgModule 根啟動一款應用\">使用根模組啟動應用</a>。</p><p translation-origin=\"off\">To learn more about the root NgModule, see <a href=\"guide/bootstrapping\" title=\"Launching an app with a root NgModule\">Launching an app with a root NgModule</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要了解最常使用的那些 Angular 模組，以及如何將它們匯入你的應用，請參閱<a href=\"guide/frequent-ngmodules\" title=\"經常使用的模組\">常用模組</a>。</p><p translation-origin=\"off\">To learn about frequently used Angular NgModules and how to import them into your app, see <a href=\"guide/frequent-ngmodules\" title=\"Frequently-used modules\">Frequently-used modules</a>.</p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/glossary#component\n - guide/glossary#declarable\n - guide/glossary#directive\n - guide/glossary#injector\n - guide/glossary#ngmodule\n - guide/glossary#pipe\n - guide/glossary#provider\n - guide/glossary#service\n - guide/ngmodule-api\n - guide/ngmodule-vs-jsmodule#an-example-that-uses-both\n - guide/ngmodule-vs-jsmodule#javascript-modules-files-containing-code\n - guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#javascript-模組-vs-ngmodule\n - guide/ngmodule-vs-jsmodule#javascript-模組包含程式碼的檔案\n - guide/ngmodule-vs-jsmodule#next-steps\n - guide/ngmodule-vs-jsmodule#ngmodules-classes-with-metadata-for-compiling\n - guide/ngmodule-vs-jsmodule#ngmodule帶有供編譯用的元資料的類\n - guide/ngmodule-vs-jsmodule#下一步\n - guide/ngmodule-vs-jsmodule#同時使用兩者的例子\n - guide/ngmodules\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20請簡述你的修改...\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules\n - https://javascript.info/modules\n - https://www.ecma-international.org/ecma-262/6.0/#sec-modules\n - https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\n-->"}