{"id":"guide/http-handle-request-errors","title":"HTTP client - Handle request errors","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-handle-request-errors.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"http-client---handle-request-errors\" translation-result=\"on\">HTTP 客戶端 - 處理請求錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#http-client---handle-request-errors\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">HTTP client - Handle request errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#http-client---handle-request-errors\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">如果請求在伺服器上失敗了，那麼 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 就會返回一個<em>錯誤</em>物件而不是一個成功的響應物件。</p><p translation-origin=\"off\">If the request fails on the server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> returns an <em>error</em> object instead of a successful response.</p>\n\n<p translation-result=\"on\">執行伺服器請求的同一個服務中也應該執行錯誤檢查、解釋和解析。</p><p translation-origin=\"off\">The same service that performs your server transactions should also perform error inspection, interpretation, and resolution.</p>\n\n<p translation-result=\"on\">發生錯誤時，你可以獲得關於通知使用者失敗的詳細資訊。在某些情況下，你可能還會自動<a href=\"guide/http-handle-request-errors#retry\">重試請求</a>。</p><p translation-origin=\"off\">When an error occurs, you can obtain details of what failed to inform your user.\nIn some cases, you might also automatically <a href=\"guide/http-handle-request-errors#retry\">retry the request</a>.</p>\n\n<p><a id=\"error-details\"></a></p>\n<h2 id=\"getting-error-details\" translation-result=\"on\">獲取錯誤詳情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#getting-error-details\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Getting error details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#getting-error-details\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當資料存取失敗時，應用會給使用者提供有用的反饋。原始的錯誤物件作為反饋並不是特別有用。除了檢測到錯誤已經發生之外，還需要獲取錯誤詳細資訊並使用這些細節來撰寫使用者友好的響應。</p><p translation-origin=\"off\">An app should give the user useful feedback when data access fails.\nA raw error object is not particularly useful as feedback.\nIn addition to detecting that an error has occurred, you need to get error details and use those details to compose a user-friendly response.</p>\n\n<p translation-result=\"on\">可能會出現兩種型別的錯誤。</p><p translation-origin=\"off\">Two types of errors can occur.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">伺服器端可能會拒絕該請求，並返回狀態碼為 404 或 500 的 HTTP <em>響應</em>物件。這些是錯誤<em>響應</em>。</p><p translation-origin=\"off\">The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500.\nThese are error <em>responses</em>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">客戶端也可能出現問題，比如網路錯誤會讓請求無法成功完成，或者 RxJS 運運算元也會丟擲例外。這些錯誤的 <code>status</code> 為 <code>0</code>，並且其 <code>error</code> 屬性包含一個 <code>ProgressEvent</code> 物件，此物件的 <code>type</code> 屬性可以提供更詳細的資訊。</p><p translation-origin=\"off\">Something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator.\nThese errors have <code>status</code> set to <code>0</code> and the <code>error</code> property contains a <code>ProgressEvent</code> object, whose <code>type</code> might provide further information.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在其 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> 中會捕獲兩種錯誤。可以檢查這個響應是否存在錯誤。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> captures both kinds of errors in its <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code>.\nInspect that response to identify the error's cause.</p>\n\n<p translation-result=\"on\">以下範例在先前定義的 ConfigService 中定義了一個錯誤處理程式。</p><p translation-origin=\"off\">The following example defines an error handler in the previously defined ConfigService.</p>\n\n<code-example header=\"app/config/config.service.ts (handleError)\" path=\"http/src/app/config/config.service.ts\" region=\"handleError\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.status === 0) {\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error);\n  } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong.\n    console.error(\n      `Backend returned code ${error.status}, body was: `, error.error);\n  }\n  // Return an observable with a user-facing error message.\n  return throwError(() =&gt; new Error('Something bad happened; please try again later.'));\n}\n\n</code-example>\n<p translation-result=\"on\">該處理程式會返回一個帶有使用者友好的錯誤資訊的 RxJS <code>ErrorObservable</code>。下列程式碼修改了 <code>getConfig()</code> 方法，它使用一個<a href=\"guide/pipes\" title=\"管道指南\">管道</a>把 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 呼叫返回的所有 Observable 傳送給錯誤處理器。</p><p translation-origin=\"off\">The handler returns an RxJS <code>ErrorObservable</code> with a user-friendly error message.\nThe following code updates the <code>getConfig()</code> method, using a <a href=\"guide/pipes\" title=\"Pipes guide\">pipe</a> to send all observables returned by the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call to the error handler.</p>\n\n<code-example header=\"app/config/config.service.ts (getConfig v.3 with error handler)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<p><a id=\"retry\"></a></p>\n<h2 id=\"retrying-a-failed-request\" translation-result=\"on\">重試失敗的請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Retrying a failed request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有時候，錯誤只是臨時性的，只要重試就可能會自動消失。比如，在移動端場景中可能會遇到網路中斷的情況，只要重試一下就能拿到正確的結果。</p><p translation-origin=\"off\">Sometimes the error is transient and goes away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again can produce a successful result.</p>\n\n<p translation-result=\"on\"><a href=\"guide/rx-library\">RxJS 庫</a>提供了幾個<em>重試</em>運運算元。比如，<code>retry()</code> 運運算元會自動重新訂閱一個失敗的 <code>Observable</code> 幾次。<em>重新訂閱</em> <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法會導致它重新發出 HTTP 請求。</p><p translation-origin=\"off\">The <a href=\"guide/rx-library\">RxJS library</a> offers several <em>retry</em> operators.\nFor example, the <code>retry()</code> operator automatically re-subscribes to a failed <code>Observable</code> a specified number of times.\n<em>Re-subscribing</em> to the result of an <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call has the effect of reissuing the HTTP request.</p>\n\n<p translation-result=\"on\">下面的例子示範瞭如何在把一個失敗的請求傳給錯誤處理程式之前，先透過管道傳給 <code>retry()</code> 運運算元。</p><p translation-origin=\"off\">The following example shows how to pipe a failed request to the <code>retry()</code> operator before passing it to the error handler.</p>\n\n<code-example header=\"app/config/config.service.ts (getConfig with retry)\" path=\"http/src/app/config/config.service.ts\" region=\"getConfig\">\ngetConfig() {\n  return this.http.get&lt;Config&gt;(this.configUrl)\n    .pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError) // then handle the error\n    );\n}\n\n</code-example>\n<h2 id=\"sending-data-to-a-server\" translation-result=\"on\">把資料傳送到伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#sending-data-to-a-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Sending data to a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-handle-request-errors#sending-data-to-a-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">除了從伺服器獲取資料外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 還支援其它一些 HTTP 方法，比如 PUT，POST 和 DELETE，你可以用它們來修改遠端資料。</p><p translation-origin=\"off\">In addition to fetching data from a server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.</p>\n\n<p translation-result=\"on\">本指南中的這個範例應用包括一個簡略版本的《英雄之旅》，它會獲取英雄資料，並允許使用者新增、刪除和修改它們。下面幾節在 <code>HeroesService</code> 範例中展示了資料更新方法的一些例子。</p><p translation-origin=\"off\">The sample app for this guide includes an abridged version of the \"Tour of Heroes\" example that fetches heroes and enables users to add, delete, and update them.\nThe following sections show examples of the data-update methods from the sample's <code>HeroesService</code>.</p>\n\n\n  <div class=\"reviewed\">最後複查時間：2/27/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/http-send-data-to-server\n - guide/understanding-communicating-with-http\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpErrorResponse\n - guide/http-handle-request-errors#getting-error-details\n - guide/http-handle-request-errors#http-client---handle-request-errors\n - guide/http-handle-request-errors#http-客戶端---處理請求錯誤\n - guide/http-handle-request-errors#retry\n - guide/http-handle-request-errors#retrying-a-failed-request\n - guide/http-handle-request-errors#sending-data-to-a-server\n - guide/http-handle-request-errors#把資料傳送到伺服器\n - guide/http-handle-request-errors#獲取錯誤詳情\n - guide/http-handle-request-errors#重試失敗的請求\n - guide/pipes\n - guide/rx-library\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-handle-request-errors.md?message=docs%3A%20請簡述你的修改...\n-->"}