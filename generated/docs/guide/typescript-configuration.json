{"id":"guide/typescript-configuration","title":"TypeScript configuration","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/typescript-configuration.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"typescript-configuration\" translation-result=\"on\">TypeScript 配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">TypeScript configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">TypeScript 是 Angular 應用開發中使用的主語言。它是 JavaScript 的“方言”之一，為型別安全和工具化而做了設計期支援。</p><p translation-origin=\"off\">TypeScript is a primary language for Angular application development.\nIt is a superset of JavaScript with design-time support for type safety and tooling.</p>\n\n<p translation-result=\"on\">瀏覽器不能直接執行 TypeScript。它得先用 <em>tsc</em> 編譯器轉譯（transpile）成 JavaScript，而且編譯器需要進行一些配置。</p><p translation-origin=\"off\">Browsers can't execute TypeScript directly.\nTypescript must be \"transpiled\" into JavaScript using the <em>tsc</em> compiler, which requires some configuration.</p>\n\n<p translation-result=\"on\">本頁面會涵蓋 TypeScript 配置與環境的某些方面，這些對 Angular 開發者是很重要的。具體來說包括下列檔案：</p><p translation-origin=\"off\">This page covers some aspects of TypeScript configuration and the TypeScript environment\nthat are important to Angular developers, including details about the following files:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">TypeScript 編譯器配置。</nt-wrapper><nt-wrapper translation-origin=\"off\">TypeScript compiler configuration.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/typescript-configuration#typings\">typings</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">TypesScript 型別宣告檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">TypesScript declaration files.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"tsconfig\"></a></p>\n<h2 id=\"configuration-files\" translation-result=\"on\">配置檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuration files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#configuration-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個 Angular 工作區中包含多個 TypeScript 配置檔案。在根一級，有兩個主要的 TypeScript 配置檔案：<code>tsconfig.json</code> 檔案和 <code>tsconfig.base.json</code> 檔案。</p><p translation-origin=\"off\">A given Angular workspace contains several TypeScript configuration files.\nAt the root <code>tsconfig.json</code> file specifies the base TypeScript and Angular compiler options that all projects in the workspace inherit.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">請參閱 <a href=\"guide/angular-compiler-options\">Angular 編譯器選項</a>一章，以瞭解可以使用哪些 Angular 特有的選項。</p><p translation-origin=\"off\">See the <a href=\"guide/angular-compiler-options\">Angular compiler options</a> guide for information about what Angular specific options are available.</p>\n\n</div>\n<p translation-result=\"on\">TypeScript 和 Angular 提供了很多選項，可以用來配置型別檢查功能和要產生的輸出。更多資訊，請參閱 TypeScript 文件中的<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 進行配置繼承</a>部分。</p><p translation-origin=\"off\">The TypeScript and Angular have a wide range of options which can be used to configure type-checking features and generated output.\nFor more information, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">Configuration inheritance with extends</a> section of the TypeScript documentation.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解 TypeScript 配置檔案的詳情，請參閱官方提供的 <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手冊</a>。要了解配置繼承的詳情，參閱<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">使用 extends 進行配置繼承</a>部分。</p><p translation-origin=\"off\">For more information TypeScript configuration files, see the official <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript handbook</a>.\nFor details about configuration inheritance, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">Configuration inheritance with extends</a> section.</p>\n\n</div>\n<p translation-result=\"on\">Angular 工作區的初始 <code>tsconfig.json</code> 通常是這樣的。</p><p translation-origin=\"off\">The initial <code>tsconfig.json</code> for an Angular workspace typically looks like the following example.</p>\n\n<code-example header=\"tsconfig.json\" path=\"getting-started/tsconfig.0.json\">\n/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"ES2022\",\n    \"module\": \"ES2022\",\n    \"useDefineForClassFields\": false,\n    \"lib\": [\n      \"ES2022\",\n      \"dom\"\n    ]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n\n\n</code-example>\n<p><a id=\"noImplicitAny\"></a></p>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\" translation-result=\"on\"><code>noImplicitAny</code> 與 <code>suppressImplicitAnyIndexErrors</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>noImplicitAny</code> and <code>suppressImplicitAnyIndexErrors</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">TypeScript 開發者們在 <code>noImplicitAny</code> 標誌應該是 <code>true</code> 還是 <code>false</code> 上存在分歧。這沒有標準答案，你以後還可以修改這個標誌。但是你的選擇會在大專案中產生顯著差異，所以它值得討論一番。</p><p translation-origin=\"off\">TypeScript developers disagree about whether the <code>noImplicitAny</code> flag should be <code>true</code> or <code>false</code>.\nThere is no correct answer and you can change the flag later.\nBut your choice now can make a difference in larger projects, so it merits discussion.</p>\n\n<p translation-result=\"on\">當 <code>noImplicitAny</code> 標誌是 <code>false</code>（預設值）時，如果編譯器無法根據變數的用途推斷出變數的型別，它就會悄悄的把變數型別預設為 <code>any</code>。這就是<em>隱含 <code>any</code></em>的含義。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>false</code> (the default), and if the compiler cannot infer the variable type based on how it's used, the compiler silently defaults the type to <code>any</code>.\nThat's what is meant by <em>implicit <code>any</code></em>.</p>\n\n<p translation-result=\"on\">當 <code>noImplicitAny</code> 標誌是 <code>true</code> 並且 TypeScript 編譯器無法推斷出型別時，它仍然會產生 JavaScript 檔案。但是它也會<strong>報告一個錯誤</strong>。很多飽經滄桑的程式設計師更喜歡這種嚴格的設定，因為型別檢查能在編譯期間捕獲更多意外錯誤。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>true</code> and the TypeScript compiler cannot infer the type, it still generates the JavaScript files, but it also <strong>reports an error</strong>.\nMany seasoned developers prefer this stricter setting because type checking catches more unintentional errors at compile time.</p>\n\n<p translation-result=\"on\">即使 <code>noImplicitAny</code> 標誌被設定成了 <code>true</code>，你也可以把變數的型別設定為 <code>any</code>。</p><p translation-origin=\"off\">You can set a variable's type to <code>any</code> even when the <code>noImplicitAny</code> flag is <code>true</code>.</p>\n\n<p translation-result=\"on\">如果把 <code>noImplicitAny</code> 標誌設定為了 <code>true</code>，你可能會得到<em>隱含索引錯</em>。大多數程式設計師可能覺得<em>這種錯誤</em>是個煩惱而不是助力。你可以使用另一個標誌來禁止它們。</p><p translation-origin=\"off\">When the <code>noImplicitAny</code> flag is <code>true</code>, you may get <em>implicit index errors</em> as well.\nMost developers feel that <em>this particular error</em> is more annoying than helpful.\nYou can suppress them with the following additional flag:</p>\n\n<code-example>\n\n\"suppressImplicitAnyIndexErrors\": true\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解 TypeScript 配置如何影響編譯的更多資訊，請參閱 <a href=\"guide/angular-compiler-options\">Angular 編譯器選項</a>和<a href=\"guide/template-typecheck\">範本型別檢查</a> 兩章。</p><p translation-origin=\"off\">For more information about how the TypeScript configuration affects compilation, see <a href=\"guide/angular-compiler-options\">Angular Compiler Options</a> and <a href=\"guide/template-typecheck\">Template Type Checking</a>.</p>\n\n</div>\n<p><a id=\"typings\"></a></p>\n<h2 id=\"typescript-typings\" translation-result=\"on\">TypeScript 型別定義（typings）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">TypeScript typings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">很多 JavaScript 庫，比如 jQuery、Jasmine 測試庫和 Angular，會透過新的特性和語法來擴充 JavaScript 環境。而 TypeScript 編譯器並不能原生的識別它們。當編譯器不能識別時，它就會丟擲一個錯誤。</p><p translation-origin=\"off\">Many JavaScript libraries, such as jQuery, the Jasmine testing library, and Angular, extend the JavaScript environment with features and syntax that the TypeScript compiler doesn't recognize natively.\nWhen the compiler doesn't recognize something, it reports an error.</p>\n\n<p translation-result=\"on\">可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript 型別定義檔案</a> —— <code>.d.ts</code> 檔案 —— 來告訴編譯器你要載入的函式庫的型別定義。</p><p translation-origin=\"off\">Use <a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript type definition files</a> —<code>d.ts files</code>— to tell the compiler about the libraries you load.</p>\n\n<p translation-result=\"on\">TypeScript 敏感的編輯器藉助這些定義檔案來顯示這些庫中各個特性的型別定義。</p><p translation-origin=\"off\">TypeScript-aware editors leverage these same definition files to display type information about library features.</p>\n\n<p translation-result=\"on\">很多庫在自己的 npm 套件中都包含了它們的型別定義檔案，TypeScript 編譯器和編輯器都能找到它們。Angular 庫也是這樣的。任何 Angular 應用程式的 <code>node_modules/@angular/core/</code> 目錄下，都包含幾個 <code>d.ts</code> 檔案，它們描述了 Angular 的各個部分。</p><p translation-origin=\"off\">Many libraries include definition files in their npm packages where both the TypeScript compiler and editors\ncan find them.\nAngular is one such library.\nThe <code>node_modules/@angular/core/</code> folder of any Angular application contains several <code>d.ts</code> files that describe parts of Angular.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你不需要為那些包含了 <code>d.ts</code> 檔案的函式庫獲取<em>型別定義</em>檔案 —— Angular 的所有套件都是如此。</p><p translation-origin=\"off\">You don't need to do anything to get <em>typings</em> files for library packages that include <code>d.ts</code> files.\nAngular packages include them already.</p>\n\n</div>\n<h3 id=\"lib\"><code>lib</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#lib\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">TypeScript 包含一組預設的宣告檔案。這些檔案包含 JavaScript 執行時和 DOM 中存在的各種通用 JavaScript 結構的環境宣告。</p><p translation-origin=\"off\">TypeScript includes a default set of declaration files.\nThese files contain the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</p>\n\n<p translation-result=\"on\">有關更多資訊，請參閱 TypeScript 指南中的<a href=\"https://www.typescriptlang.org/tsconfig#lib\">lib</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"https://www.typescriptlang.org/tsconfig#lib\">lib</a> in the TypeScript guide.</p>\n\n<h3 id=\"installable-typings-files\" translation-result=\"on\">安裝型別定義檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Installable typings files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">遺憾的是，很多庫 —— jQuery、Jasmine 和 Lodash 等庫 —— 都<em>沒有</em>在它們自己的 npm 套件中包含 <code>d.ts</code> 檔案。幸運的是，它們的作者或社群中的貢獻者已經為這些庫建立了獨立的 <code>d.ts</code> 檔案，並且把它們釋出到了一個眾所周知的位置。</p><p translation-origin=\"off\">Many libraries —jQuery, Jasmine, and Lodash among them— do <em>not</em> include <code>d.ts</code> files in their npm packages.\nFortunately, either their authors or community contributors have created separate <code>d.ts</code> files for these libraries and published them in well-known locations.</p>\n\n<p translation-result=\"on\">你可以透過 <code>npm</code> 來使用 <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> 範圍化套件</a>來安裝這些型別。</p><p translation-origin=\"off\">You can install these typings with <code>npm</code> using the <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> scoped package</a>.</p>\n\n<p translation-result=\"on\"><code>@types/*</code> 中自動包含哪些環境宣告檔案由 <a href=\"https://www.typescriptlang.org/tsconfig#types\">TypeScript 編譯器選項 <code>types</code></a>決定。Angular CLI 會產生一個 <code>tsconfig.app.json</code> 檔案，用於建構應用程式，其中 <code>types</code> 編譯器選項設定為 <code>[]</code> 以禁止自動包含來自 <code>@types/*</code> 的宣告。同時，<code>tsconfig.spec.json</code> 檔案用於測試並設定 <code>\"types\": [\"jasmine\"]</code> 以允許在測試中使用 Jasmine 的環境宣告。</p><p translation-origin=\"off\">Which ambient declaration files in <code>@types/*</code> are automatically included is determined by the <a href=\"https://www.typescriptlang.org/tsconfig#types\"><code>types</code> TypeScript compiler option</a>.\nThe Angular CLI generates a <code>tsconfig.app.json</code> file which is used to build an application, in which the <code>types</code> compiler option is set to <code>[]</code> to disable automatic inclusion of declarations from <code>@types/*</code>.\nSimilarly, the <code>tsconfig.spec.json</code> file is used for testing and sets <code>\"types\": [\"jasmine\"]</code> to allow using Jasmine's ambient declarations in tests.</p>\n\n<p translation-result=\"on\">在安裝了 <code>@types/*</code> 宣告之後，你還要修改 <code>tsconfig.app.json</code> 和 <code>tsconfig.spec.json</code> 檔案，以便把新安裝的宣告檔案新增到它們的 <code>types</code> 列表中。如果這些宣告檔案只是供測試用的，那麼只要修改 <code>tsconfig.spec.json</code> 檔案就可以了。</p><p translation-origin=\"off\">After installing <code>@types/*</code> declarations, you have to update the <code>tsconfig.app.json</code> and <code>tsconfig.spec.json</code> files to add the newly installed declarations to the list of <code>types</code>.\nIf the declarations are only meant for testing, then only the <code>tsconfig.spec.json</code> file should be updated.</p>\n\n<p translation-result=\"on\">比如，要安裝 <code>chai</code> 的型別資訊，你可以執行 <code>npm install @types/chai --save-dev</code>，然後修改 <code>tsconfig.spec.json</code> 來把 <code>\"chai\"</code> 新增到 <code>types</code> 列表中。</p><p translation-origin=\"off\">For instance, to install typings for <code>chai</code> you run <code>npm install @types/chai --save-dev</code> and then update <code>tsconfig.spec.json</code> to add <code>\"chai\"</code> to the list of <code>types</code>.</p>\n\n<p><a id=\"target\"></a></p>\n<h3 id=\"target\"><code>target</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#target\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">預設情況下，編譯目標是 <code>es2022</code>。要控制 ECMA 語法，請使用 <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> 配置檔案。欲知詳情，參見<a href=\"/guide/build#configuring-browser-compatibility\">配置瀏覽器相容性</a>一章。</p><p translation-origin=\"off\">By default, the target is <code>ES2022</code>. To control ECMA syntax use the <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> configuration file.\nFor more information, see the <a href=\"/guide/build#configuring-browser-compatibility\">configuring browser compatibility</a> guide.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：10/24/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/file-structure\n - guide/glossary\n - guide/i18n-common-add-package\n - guide/template-typecheck\n - guide/upgrade\n-->\n<!-- links from this doc:\n - /guide/build#configuring-browser-compatibility\n - guide/angular-compiler-options\n - guide/template-typecheck\n - guide/typescript-configuration#configuration-files\n - guide/typescript-configuration#installable-typings-files\n - guide/typescript-configuration#lib\n - guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\n - guide/typescript-configuration#noimplicitany-與-suppressimplicitanyindexerrors\n - guide/typescript-configuration#target\n - guide/typescript-configuration#tsconfig\n - guide/typescript-configuration#typescript-configuration\n - guide/typescript-configuration#typescript-typings\n - guide/typescript-configuration#typescript-型別定義typings\n - guide/typescript-configuration#typescript-配置\n - guide/typescript-configuration#typings\n - guide/typescript-configuration#安裝型別定義檔案\n - guide/typescript-configuration#配置檔案\n - http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://github.com/browserslist/browserslist\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/typescript-configuration.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\n - https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\n - https://www.typescriptlang.org/tsconfig#lib\n - https://www.typescriptlang.org/tsconfig#types\n-->"}