{"id":"guide/styleguide","title":"Angular coding style guide","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/styleguide.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angular-coding-style-guide\" translation-result=\"on\">風格指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Angular coding style guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-coding-style-guide\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">如果你正在尋找關於 Angular 語法、約定和應用組織結構的官方指南，那你就來對了。本風格指南介紹了提倡的約定，更重要的是，解釋了為什麼。</p><p translation-origin=\"off\">Looking for an opinionated guide to Angular syntax, conventions, and application structure?\nStep right in.\nThis style guide presents preferred conventions and, as importantly, explains why.</p>\n\n<p><a id=\"toc\"></a></p>\n<h2 id=\"style-vocabulary\" translation-result=\"on\">風格指南的用詞<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Style vocabulary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-vocabulary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每個指導原則都會描述好的或者壞的做法，所有指導原則都用同樣的風格描述。</p><p translation-origin=\"off\">Each guideline describes either a good or bad practice, and all have a consistent presentation.</p>\n\n<p translation-result=\"on\">指導原則中使用的詞彙用來表明推薦的程度。</p><p translation-origin=\"off\">The wording of each guideline indicates how strong the recommendation is.</p>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>意味著總是應該遵循的約定。說<em>\"總是\"</em>可能顯得有點絕對，應該<em>\"總是\"</em>遵循的指導原則非常少，不過，只有遇到極不尋常的情況才能打破<em>堅持</em>的原則。</p><p translation-origin=\"off\"><strong>Do</strong> is one that should always be followed.\n<em>Always</em> might be a bit too strong of a word.\nGuidelines that literally should always be followed are extremely rare.\nOn the other hand, you need a really unusual case for breaking a <em>Do</em> guideline.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>表示通常應該遵循的指導原則。如果你能完全理解指導原則背後的含義，並且有很好的理由違反它，那就改吧。但要注意保持一致。</p><p translation-origin=\"off\"><strong>Consider</strong> guidelines should generally be followed.\nIf you fully understand the meaning behind the guideline and have a good reason to deviate, then do so.\nAim to be consistent.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>表示你絕對不應該做的事。需要<em>避免</em>的程式碼範例會有明顯的紅色標題。</p><p translation-origin=\"off\"><strong>Avoid</strong> indicates something you should almost never do.\nCode examples to <em>avoid</em> have an unmistakable red header.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n之所以會給出那些建議的原因。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nGives reasons for following the previous recommendations.</p>\n\n</div>\n<h2 id=\"file-structure-conventions\" translation-result=\"on\">檔案結構約定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">File structure conventions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-structure-conventions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在一些程式碼例子中，有的檔案有一個或多個相似名字的配套檔案。（比如 hero.component.ts 和 hero.component.html）。</p><p translation-origin=\"off\">Some code examples display a file that has one or more similarly named companion files.\nFor example, <code>hero.component.ts</code> and <code>hero.component.html</code>.</p>\n\n<p translation-result=\"on\">本指南將會使用像 <code>hero.component.ts|html|css|spec</code> 的簡寫來表示上面描述的多個檔案，目的是保持本指南的簡潔性，增加描述檔案結構時的可讀性。</p><p translation-origin=\"off\">The guideline uses the shortcut <code>hero.component.ts|html|css|spec</code> to represent those various files.\nUsing this shortcut makes this guide's file structures easier to read and more terse.</p>\n\n<p><a id=\"single-responsibility\"></a></p>\n<h2 id=\"single-responsibility\" translation-result=\"on\">單一職責<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Single responsibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">對所有的元件、服務等等應用<a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><em>單一職責原則(SRP)</em></a>。這樣可以讓應用更乾淨、更易讀、更易維護、更易測試。</p><p translation-origin=\"off\">Apply the <a href=\"https://wikipedia.org/wiki/Single_responsibility_principle\"><em>single responsibility principle (SRP)</em></a> to all components, services, and other symbols.\nThis helps make the application cleaner, easier to read and maintain, and more testable.</p>\n\n<p><a id=\"01-01\"></a></p>\n<h3 id=\"rule-of-one\" translation-result=\"on\">單一規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Rule of One<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#rule-of-one\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-01-01\" translation-result=\"on\">風格 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 01-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>每個檔案只定義一樣東西（比如服務或元件）。</p><p translation-origin=\"off\"><strong>Do</strong> define one thing, such as a service or component, per file.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>把檔案大小限制在 400 行程式碼以內。</p><p translation-origin=\"off\"><strong>Consider</strong> limiting files to 400 lines of code.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n單元件檔案非常容易閱讀、維護，並能防止在版本控制系統裡與團隊衝突。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nOne component per file makes it far easier to read, maintain, and avoid\ncollisions with teams in source control.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n單元件檔案可以防止一些隱蔽的程式缺陷，當把多個元件合寫在同一個檔案中時，可能造成共享變數、建立意外的閉套件，或者與依賴之間產生意外耦合等情況。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nOne component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n單獨的元件通常是該檔案預設的匯出，可以用路由器實現按需載入。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA single component can be the default export for its file which facilitates lazy loading with the router.</p>\n\n</div>\n<p translation-result=\"on\">最關鍵的是，可以讓程式碼更加可複用、更容易閱讀，減少出錯的可能性。</p><p translation-origin=\"off\">The key is to make the code more reusable, easier to read, and less mistake-prone.</p>\n\n<p translation-result=\"on\">下面的<em>負面</em>例子定義了 <code>AppComponent</code>，它來引導應用程式，定義了 <code>Hero</code> 模型物件，並從伺服器載入了英雄 ... 所有都在同一個檔案。<em>不要這麼做</em>。</p><p translation-origin=\"off\">The following <em>negative</em> example defines the <code>AppComponent</code>, bootstraps the app,\ndefines the <code>Hero</code> model object, and loads heroes from the server all in the same file.\n<em>Don't do this</em>.</p>\n\n<code-example format=\"typescript\" path=\"styleguide/src/01-01/app/heroes/hero.component.avoid.ts\" language=\"typescript\" header=\"app/heroes/hero.component.ts\">\n/* avoid */\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\ninterface Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n      &lt;h1&gt;{{title}}&lt;/h1&gt;\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `,\n  styleUrls: ['app/app.component.css']\n})\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n\n  heroes: Hero[] = [];\n\n  ngOnInit() {\n    getHeroes().then(heroes =&gt; (this.heroes = heroes));\n  }\n}\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>],\n  declarations: [AppComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\nconst HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\nfunction getHeroes(): Promise&lt;Hero[]&gt; {\n  return Promise.resolve(HEROES); // TODO: get hero data from the server;\n}\n\n\n</code-example>\n<p translation-result=\"on\">最好將元件及其支撐部件重新分配到獨立的檔案。</p><p translation-origin=\"off\">It is a better practice to redistribute the component and its\nsupporting classes into their own, dedicated files.</p>\n\n<code-tabs>\n    <code-pane header=\"main.ts\" path=\"styleguide/src/01-01/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n    <code-pane header=\"app/app.module.ts\" path=\"styleguide/src/01-01/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n    <code-pane header=\"app/app.component.ts\" path=\"styleguide/src/01-01/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { HeroService } from './heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-app',\n  template: `\n      &lt;toh-heroes&gt;&lt;/toh-heroes&gt;\n    `,\n  styleUrls: ['./app.component.css'],\n  providers: [HeroService]\n})\nexport class AppComponent {}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/01-01/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from './shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n      &lt;pre&gt;{{heroes | json}}&lt;/pre&gt;\n    `\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) {}\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero.model.ts\" path=\"styleguide/src/01-01/app/heroes/shared/hero.model.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/mock-heroes.ts\" path=\"styleguide/src/01-01/app/heroes/shared/mock-heroes.ts\">\nimport { Hero } from './hero.model';\n\nexport const HEROES: Hero[] = [\n  { id: 1, name: 'Bombasto' },\n  { id: 2, name: 'Tornado' },\n  { id: 3, name: 'Magneta' }\n];\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">隨著應用程式的成長，本法則會變得越來越重要。</p><p translation-origin=\"off\">As the application grows, this rule becomes even more important.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"01-02\"></a></p>\n<h3 id=\"small-functions\" translation-result=\"on\">小函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Small functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#small-functions\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-01-02\" translation-result=\"on\">風格 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 01-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-01-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>定義簡單函式</p><p translation-origin=\"off\"><strong>Do</strong> define small functions</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>限制在 75 行之內。</p><p translation-origin=\"off\"><strong>Consider</strong> limiting to no more than 75 lines.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n簡單函式更易於測試，特別是當它們只做一件事，只為一個目的服務時。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSmall functions are easier to test, especially when they do one thing and serve one purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n簡單函式促進程式碼複用。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSmall functions promote reuse.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n簡單函式更易於閱讀。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSmall functions are easier to read.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n簡單函式更易於維護。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSmall functions are easier to maintain.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n小函式可避免易在大函式中產生的隱蔽性錯誤，比如與外界共享變數、建立意外的閉包或與依賴之間產生意外耦合等。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSmall functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"naming\" translation-result=\"on\">命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Naming<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#naming\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">命名約定對可維護性和可讀性非常重要。本指南為檔名和符號名推薦了一套命名約定。</p><p translation-origin=\"off\">Naming conventions are hugely important to maintainability and readability.\nThis guide recommends naming conventions for the file name and the symbol name.</p>\n\n<p><a id=\"02-01\"></a></p>\n<h3 id=\"general-naming-guidelines\" translation-result=\"on\">總體命名原則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">General Naming Guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#general-naming-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-01\" translation-result=\"on\">風格 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>所有符號使用一致的命名規則。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all symbols.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>遵循同一個模式來描述符號的特性和型別。推薦的模式為 <code>feature.type.ts</code>。</p><p translation-origin=\"off\"><strong>Do</strong> follow a pattern that describes the symbol's feature then its type.\nThe recommended pattern is <code>feature.type.ts</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n命名約定提供了一致的方式來查詢內容，讓你一眼就能找到。\n專案的一致性是至關重要的。團隊內的一致性也很重要。整個公司的一致性會提供驚人的效率。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nNaming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n命名約定幫助你更快得找到想找的程式碼，也更容易理解它。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe naming conventions should help find desired code faster and make it easier to understand.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n目錄名和檔名應該清楚的傳遞它們的意圖。\n比如，<code>app/heroes/hero-list.component.ts</code> 包含了一個用來管理英雄列表的元件。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nNames of folders and files should clearly convey their intent. For example, <code>app/heroes/hero-list.component.ts</code> may contain a component that manages a list of heroes.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-02\"></a></p>\n<h3 id=\"separate-file-names-with-dots-and-dashes\" translation-result=\"on\">使用點和橫槓來分隔檔名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Separate file names with dots and dashes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#separate-file-names-with-dots-and-dashes\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-02\" translation-result=\"on\">風格 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong> 在描述性名字中，用橫槓來分隔單詞。</p><p translation-origin=\"off\"><strong>Do</strong> use dashes to separate words in the descriptive name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用點來分隔描述性名字和型別。</p><p translation-origin=\"off\"><strong>Do</strong> use dots to separate the descriptive name from the type.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>遵循先描述元件特性，再描述它的型別的模式，對所有元件使用一致的型別命名規則。推薦的模式為 <code>feature.type.ts</code>。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent type names for all components following a pattern that describes the component's feature then its type.\nA recommended pattern is <code>feature.type.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用慣用的字尾來描述型別，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。必要時可以建立更多型別名，但必須注意，不要建立太多。</p><p translation-origin=\"off\"><strong>Do</strong> use conventional type names including <code>.service</code>, <code>.component</code>, <code>.pipe</code>, <code>.module</code>, and <code>.directive</code>.\nInvent additional type names if you must but take care not to create too many.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n型別名字提供一致的方式來快速的識別檔案中有什麼。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nType names provide a consistent way to quickly identify what is in the file.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n型別名可以讓你輕鬆利用編輯器或者 IDE 的模糊搜尋功能找到特定檔案型別。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nType names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n像 <code>.service</code> 這樣的沒有簡寫過的型別名字，描述清楚，毫不含糊。\n像 <code>.srv</code>, <code>.svc</code>, 和 <code>.serv</code> 這樣的簡寫可能令人困惑。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nUnabbreviated type names such as <code>.service</code> are descriptive and unambiguous.\nAbbreviations such as <code>.srv</code>, <code>.svc</code>, and <code>.serv</code> can be confusing.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n為自動化任務提供模式匹配。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nType names provide pattern matching for any automated tasks.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-03\"></a></p>\n<h3 id=\"symbols-and-file-names\" translation-result=\"on\">符號名與檔名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Symbols and file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#symbols-and-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-03\" translation-result=\"on\">風格 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為所有東西使用一致的命名約定，以它們所代表的東西命名。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all assets named after what they represent.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用大寫駝峰命名法來命名類別。</p><p translation-origin=\"off\"><strong>Do</strong> use upper camel case for class names.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>匹配符號名與它所在的檔名。</p><p translation-origin=\"off\"><strong>Do</strong> match the name of the symbol to the name of the file.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在符號名後面追加約定的型別字尾（比如 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>、<code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>、<code>Module</code>、<code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>、<code>Service</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> append the symbol name with the conventional suffix (such as <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>, <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, <code>Module</code>, <code><a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>, or <code>Service</code>) for a thing of that type.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在檔名後面追加約定的型別字尾（比如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> give the filename the conventional suffix (such as <code>.component.ts</code>, <code>.directive.ts</code>, <code>.module.ts</code>, <code>.pipe.ts</code>, or <code>.service.ts</code>) for a file of that type.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n遵循一致的約定可以快速識別和參考不同型別的資產。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nConsistent conventions make it easy to quickly identify\nand reference assets of different types.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">符號名</nt-wrapper><nt-wrapper translation-origin=\"off\">Symbol name</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File name</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class AppComponent { } </code-example></td>\n<td align=\"left\">app.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroesComponent { } </code-example></td>\n<td align=\"left\">heroes.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroesComponent { } </code-example></td>\n<td align=\"left\">hero.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroListComponent { } </code-example></td>\n<td align=\"left\">hero-list.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … }) \nexport class HeroDetailComponent { } </code-example></td>\n<td align=\"left\">hero-detail.component.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ … }) \nexport class ValidationDirective { } </code-example></td>\n<td align=\"left\">validation.directive.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule </code-example></td>\n<td align=\"left\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\">init-caps.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class UserProfileService { } </code-example></td>\n<td align=\"left\">user-profile.service.ts</td>\n</tr>\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-04\"></a></p>\n<h3 id=\"service-names\" translation-result=\"on\">服務名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Service names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#service-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-04\" translation-result=\"on\">風格 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用一致的規則命名服務，以它們的特性來命名。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all services named after their feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為服務的類別名稱加上 <code>Service</code> 字尾。比如，獲取資料或英雄列表的服務應該命名為 <code>DataService</code> 或 <code>HeroService</code>。</p><p translation-origin=\"off\"><strong>Do</strong> suffix a service class name with <code>Service</code>.\nFor example, something that gets data or heroes should be called a <code>DataService</code> or a <code>HeroService</code>.</p>\n\n<p translation-result=\"on\">有些詞彙顯然就是服務，比如那些以“-er”字尾結尾的。比如把記日誌的服務命名為 <code>Logger</code> 就比 <code>LoggerService</code> 更好些。需要在你的專案中決定這種特例是否可以接受。但無論如何，都要儘量保持一致。</p><p translation-origin=\"off\">A few terms are unambiguously services.\nThey typically indicate agency by ending in \"-er\".\nYou may prefer to name a service that logs messages <code>Logger</code> rather than <code>LoggerService</code>.\nDecide if this exception is agreeable in your project.\nAs always, strive for consistency.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一致的方式來快速識別和參考服務。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides a consistent way to quickly identify and reference services.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n像 <code>Logger</code> 這樣的清楚的服務名不需要字尾。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nClear service names such as <code>Logger</code> do not require a suffix.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n像 <code>Credit</code> 這樣的，服務名是名詞，需要一個字尾。當不能明顯分辨它是服務還是其它東西時，應該新增字尾。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nService names such as <code>Credit</code> are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">符號名</nt-wrapper><nt-wrapper translation-origin=\"off\">Symbol name</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File name</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class HeroDataService { } </code-example></td>\n<td align=\"left\">hero-data.service.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class CreditService { } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">信用.service.ts</nt-wrapper><nt-wrapper translation-origin=\"off\">credit.service.ts</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nexport class Logger { } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">記錄器.service.ts</nt-wrapper><nt-wrapper translation-origin=\"off\">logger.service.ts</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-05\"></a></p>\n<h3 id=\"bootstrapping\" translation-result=\"on\">引導<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-05\" translation-result=\"on\">風格 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-05\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把應用的載入程式和平台相關的邏輯放到名為 <code>main.ts</code> 的檔案裡。</p><p translation-origin=\"off\"><strong>Do</strong> put bootstrapping and platform logic for the application in a file named <code>main.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在引導邏輯中包含錯誤處理程式碼。</p><p translation-origin=\"off\"><strong>Do</strong> include error handling in the bootstrapping logic.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>把應用邏輯放在 <code>main.ts</code> 中，而應放在元件或服務裡。</p><p translation-origin=\"off\"><strong>Avoid</strong> putting application logic in <code>main.ts</code>.\nInstead, consider placing it in a component or service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n應用的啟動邏輯遵循一致的約定。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nFollows a consistent convention for the startup logic of an app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n這是從其它技術平台借鑑的常用約定。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nFollows a familiar convention from other technology platforms.</p>\n\n</div>\n<code-example header=\"main.ts\" path=\"styleguide/src/02-05/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .then(success =&gt; console.log(`Bootstrap success`))\n  .catch(err =&gt; console.error(err));\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-02\"></a></p>\n<h3 id=\"component-selectors\" translation-result=\"on\">元件選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Component selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-selectors\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-02\" translation-result=\"on\">風格 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用<em>中線命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>來命名元件的元素選擇器。</p><p translation-origin=\"off\"><strong>Do</strong> use <em>dashed-case</em> or <em>kebab-case</em> for naming the element selectors of components.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n讓元素名和<a href=\"https://www.w3.org/TR/custom-elements\">自訂元素</a>規範保持一致。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nKeeps the element names consistent with the specification for <a href=\"https://www.w3.org/TR/custom-elements\">Custom Elements</a>.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tohHeroButton',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-02/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-02/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-07\"></a></p>\n<h3 id=\"component-custom-prefix\" translation-result=\"on\">為元件新增自訂字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Component custom prefix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#component-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-07\" translation-result=\"on\">風格 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-07\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用帶連字元的小寫元素選擇器值（比如 <code>admin-users</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> use a hyphenated, lowercase element selector value; for example, <code>admin-users</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為元件選擇器新增自訂字首。比如，<code>toh</code> 字首表示 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes（英雄之旅），而字首 <code>admin</code> 表示管理特性區。</p><p translation-origin=\"off\"><strong>Do</strong> use a custom prefix for a component selector.\nFor example, the prefix <code>toh</code> represents <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes and the prefix <code>admin</code> represents an admin feature area.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用字首來識別特性區或者應用程式本身。</p><p translation-origin=\"off\"><strong>Do</strong> use a prefix that identifies the feature area or the application itself.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n防止與其它應用中的元件和原生 HTML 元素髮生命名衝突。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nPrevents element name collisions with components in other applications and with native HTML elements.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n更容易在其它應用中推廣和共享元件。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nMakes it easier to promote and share the component in other applications.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n元件在 DOM 中更容易被區分出來。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nComponents are easy to identify in the DOM.</p>\n\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// HeroComponent is in the Tour of Heroes feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n// UsersComponent is in an Admin feature\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/02-07/app/heroes/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero'\n})\nexport class HeroComponent {}\n\n</code-example>\n<code-example header=\"app/users/users.component.ts\" path=\"styleguide/src/02-07/app/users/users.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'admin-users'\n})\nexport class UsersComponent {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-06\"></a></p>\n<h3 id=\"directive-selectors\" translation-result=\"on\">指令選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Directive selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-selectors\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-06\" translation-result=\"on\">風格 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-06\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用小駝峰形式命名指令的選擇器。</p><p translation-origin=\"off\"><strong>Do</strong> Use lower camel case for naming the selectors of directives.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n可以讓指令中的屬性名與檢視中繫結的屬性名保持一致。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nKeeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nAngular 的 HTML 解析器是大小寫敏感的，可以識別小駝峰形式。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe Angular HTML parser is case-sensitive and recognizes lower camel case.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-08\"></a></p>\n<h3 id=\"directive-custom-prefix\" translation-result=\"on\">為指令新增自訂字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Directive custom prefix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directive-custom-prefix\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-08\" translation-result=\"on\">風格 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-08\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為指令的選擇器新增自訂字首（比如字首 <code>toh</code> 來自 <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes）。</p><p translation-origin=\"off\"><strong>Do</strong> use a custom prefix for the selector of directives (for example, the prefix <code>toh</code> from <strong>T</strong>our <strong>o</strong>f <strong>H</strong>eroes).</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>用小駝峰形式拼寫非元素選擇器，除非該選擇器用於匹配原生 HTML 屬性。</p><p translation-origin=\"off\"><strong>Do</strong> spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>不要</strong>以 <code>ng</code> 作為指令名稱的字首，因為該字首是為 Angular 保留的，使用它可能會導致難以診斷的錯誤。</p><p translation-origin=\"off\"><strong>Don't</strong> prefix a directive name with <code>ng</code> because that prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n防止名字衝突。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nPrevents name collisions.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n指令更加容易被識別。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nDirectives are easily identified.</p>\n\n</div>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[validate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<code-example header=\"app/shared/validate.directive.ts\" path=\"styleguide/src/02-08/app/shared/validate.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidate]'\n})\nexport class ValidateDirective {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-09\"></a></p>\n<h3 id=\"pipe-names\" translation-result=\"on\">管道名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Pipe names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#pipe-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-09\" translation-result=\"on\">風格 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-09\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為所有管道使用一致的命名約定，用它們的特性來命名。管道類別名稱應該使用 <a href=\"guide/glossary#case-types\">UpperCamelCase</a>（類別名稱的通用約定），而相應的 <code>name</code> 字串應該使用 <em>lowerCamelCase</em>。<code>name</code> 字串中不應該使用中線（“中線格式”或“烤串格式”）。</p><p translation-origin=\"off\"><strong>Do</strong> use consistent names for all pipes, named after their feature.\nThe pipe class name should use <a href=\"guide/glossary#case-types\">UpperCamelCase</a> (the general convention for class names), and the corresponding <code>name</code> string should use <em>lowerCamelCase</em>.\nThe <code>name</code> string cannot use hyphens (\"dash-case\" or \"kebab-case\").</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一致的方式快速識別和參考管道。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides a consistent way to quickly identify and reference pipes.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">符號名</nt-wrapper><nt-wrapper translation-origin=\"off\">Symbol name</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File name</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'ellipsis' }) \nexport class EllipsisPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\">ellipsis.pipe.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' }) \nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> { } </code-example></td>\n<td align=\"left\">init-caps.pipe.ts</td>\n</tr>\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-10\"></a></p>\n<h3 id=\"unit-test-file-names\" translation-result=\"on\">單元測試檔名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Unit test file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#unit-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-10\" translation-result=\"on\">風格 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-10\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>測試規格檔名與被測試元件檔名相同。</p><p translation-origin=\"off\"><strong>Do</strong> name test specification files the same as the component they test.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>測試規格檔名新增 <code>.spec</code> 字尾。</p><p translation-origin=\"off\"><strong>Do</strong> name test specification files with a suffix of <code>.spec</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一致的方式來快速識別測試。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides a consistent way to quickly identify tests.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一個與 <a href=\"http://karma-runner.github.io\">karma</a> 或者其它測試執行器相配的命名模式。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides pattern matching for <a href=\"https://karma-runner.github.io\">karma</a> or other test runners.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">測試型別</nt-wrapper><nt-wrapper translation-origin=\"off\">Test type</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File names</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件</nt-wrapper><nt-wrapper translation-origin=\"off\">Components</nt-wrapper></td>\n<td align=\"left\">heroes.component.spec.ts <br> hero-list.component.spec.ts <br> hero-detail.component.spec.ts</td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">服務</nt-wrapper><nt-wrapper translation-origin=\"off\">Services</nt-wrapper></td>\n<td align=\"left\">logger.service.spec.ts <br> hero.service.spec.ts <br> filter-text.service.spec.ts</td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">管道</nt-wrapper><nt-wrapper translation-origin=\"off\">Pipes</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper>ellipsis.pipe.spec.ts <br> init-caps.pipe.spec.ts</nt-wrapper><nt-wrapper>ellipsis.pipe.spec.ts<br>init-caps.pipe.spec.ts</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-11\"></a></p>\n<h3 id=\"end-to-end-e2e-test-file-names\" translation-result=\"on\"><em>端到端</em>（E2E）測試的檔名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><em>End-to-End</em> (E2E) test file names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#end-to-end-e2e-test-file-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-11\" translation-result=\"on\">風格 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-11\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>端到端測試規格檔案和它們所測試的特性同名，新增 <code>.e2e-spec</code> 字尾。</p><p translation-origin=\"off\"><strong>Do</strong> name end-to-end test specification files after the feature they test with a suffix of <code>.e2e-spec</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一致的方式快速識別端到端測試檔案。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides a consistent way to quickly identify end-to-end tests.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一個與測試執行器和建構自動化匹配的模式。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides pattern matching for test runners and build automation.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">測試型別</nt-wrapper><nt-wrapper translation-origin=\"off\">Test type</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File names</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">端到端測試</nt-wrapper><nt-wrapper translation-origin=\"off\">End-to-End Tests</nt-wrapper></td>\n<td align=\"left\">app.e2e-spec.ts <br> heroes.e2e-spec.ts</td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"02-12\"></a></p>\n<h3 id=\"angular-ngmodule-names\" translation-result=\"on\">Angular <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-命名\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Angular <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> names<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#angular-ngmodule-names\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-02-12\" translation-result=\"on\">風格 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 02-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-02-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為符號名新增 <code>Module</code> 字尾。</p><p translation-origin=\"off\"><strong>Do</strong> append the symbol name with the suffix <code>Module</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為檔名新增 <code>.module.ts</code> 副檔名。</p><p translation-origin=\"off\"><strong>Do</strong> give the file name the <code>.module.ts</code> extension.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>用特性名和所在目錄命名模組。</p><p translation-origin=\"off\"><strong>Do</strong> name the module after the feature and folder it resides in.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n提供一致的方式來快速標識和參考模組。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nProvides a consistent way to quickly identify and reference modules.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n大駝峰命名法是一種命名約定，用來標識可用建構函式例項化的物件。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nUpper camel case is conventional for identifying objects that can be instantiated using a constructor.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n很容易就能看出這個模組是同名特性的根模組。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nEasily identifies the module as the root of the same named feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為 <code>RoutingModule</code> 類別名稱新增 <code>RoutingModule</code> 字尾。</p><p translation-origin=\"off\"><strong>Do</strong> suffix a <code>RoutingModule</code> class name with <code>RoutingModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為 <code>RoutingModule</code> 的檔名新增 <code>-routing.module.ts</code> 字尾。</p><p translation-origin=\"off\"><strong>Do</strong> end the filename of a <code>RoutingModule</code> with <code>-routing.module.ts</code>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n<code>RoutingModule</code> 是一種專門用來配置 Angular 路由器的模組。\n“類別名稱和檔名保持一致”的約定使這些模組易於發現和驗證。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA <code>RoutingModule</code> is a module dedicated exclusively to configuring the Angular router.\nA consistent class and file name convention make these modules easy to spot and verify.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">符號名</nt-wrapper><nt-wrapper translation-origin=\"off\">Symbol name</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔名</nt-wrapper><nt-wrapper translation-origin=\"off\">File name</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppModule { } </code-example></td>\n<td align=\"left\">app.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesModule { } </code-example></td>\n<td align=\"left\">heroes.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesModule { } </code-example></td>\n<td align=\"left\">hero.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class VillainsModule { } </code-example></td>\n<td align=\"left\">villains.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class VillainsModule { } </code-example></td>\n<td align=\"left\">vilins.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class AppRoutingModule { } </code-example></td>\n<td align=\"left\">app-routing.module.ts</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ … }) \nexport class HeroesRoutingModule { } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">英雄路由.module.ts</nt-wrapper><nt-wrapper translation-origin=\"off\">heroes-routing.module.ts</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"application-structure-and-ngmodules\" translation-result=\"on\">應用程式結構與 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Application structure and NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#application-structure-and-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">準備一個近期實施方案和一個長期的願景。從零開始，但要考慮應用程式接下來的路往哪兒走。</p><p translation-origin=\"off\">Have a near-term view of implementation and a long-term vision.\nStart small but keep in mind where the application is heading.</p>\n\n<p translation-result=\"on\">所有應用程式的原始碼都放到名叫 <code>src</code> 的目錄裡。所有特性區都在自己的資料夾中，帶有它們自己的 NgModule。</p><p translation-origin=\"off\">All of the application's code goes in a folder named <code>src</code>.\nAll feature areas are in their own folder, with their own NgModule.</p>\n\n<p translation-result=\"on\">所有內容都遵循每個檔案一個特性的原則。每個元件、服務和管道都在自己的檔案裡。所有第三方程式包儲存到其它目錄裡，而不是 <code>src</code> 目錄。你不會修改它們，所以不希望它們弄亂你的應用程式。使用本指南介紹的檔案命名約定。</p><p translation-origin=\"off\">All content is one asset per file.\nEach component, service, and pipe is in its own file.\nAll third party vendor scripts are stored in another folder and not in the <code>src</code> folder.\nYou didn't write them and you don't want them cluttering <code>src</code>.\nUse the naming conventions for files in this guide.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-01\"></a></p>\n<h3 id=\"lift\"><code>LIFT</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lift\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"style-04-01\" translation-result=\"on\">風格 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>組織應用的結構，力求：快速定位 (<code>L</code>ocate) 程式碼、一眼識別 (<code>I</code>dentify) 程式碼、 儘量保持扁平結構 (<code>F</code>lattest) 和嘗試 (<code>T</code>ry) 遵循 DRY (Do Not Repeat Yourself, 不重複自己) 原則。</p><p translation-origin=\"off\"><strong>Do</strong> structure the application such that you can <strong>L</strong>ocate code quickly, <strong>I</strong>dentify the code at a glance, keep the <strong>F</strong>lattest structure you can, and <strong>T</strong>ry to be DRY.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>四項基本原則定義檔案結構，上面的原則是按重要順序排列的。</p><p translation-origin=\"off\"><strong>Do</strong> define the structure to follow these four basic guidelines, listed in order of importance.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nLIFT 提供了一致的結構，它具有擴充性強、模組化的特性。因為容易快速鎖定程式碼，提高了開發者的效率。\n另外，檢查應用結構是否合理的方法是問問自己：我能快速開啟與此特性有關的所有檔案並開始工作嗎？</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLIFT provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly.\nTo confirm your intuition about a particular structure, ask:\n<em>Can I quickly open and start work in all of the related files for this feature</em>?</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-02\"></a></p>\n<h3 id=\"locate\" translation-result=\"on\">定位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Locate<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#locate\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-02\" translation-result=\"on\">風格 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>直觀、簡單和快速地定位程式碼。</p><p translation-origin=\"off\"><strong>Do</strong> make locating code intuitive and fast.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何？</strong>\n要想高效的工作，就必須能迅速找到檔案，特別是當不知道（或不記得）檔案<em>名</em>時。\n把相關的檔案一起放在一個直觀的位置可以節省時間。\n富有描述性的目錄結構會讓你和後面的維護者眼前一亮。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nTo work efficiently you must be able to find files quickly, especially when you do not know (or do not remember) the file <em>names</em>.\nKeeping related files near each other in an intuitive location saves time.\nA descriptive folder structure makes a world of difference to you and the people who come after you.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-03\"></a></p>\n<h3 id=\"identify\" translation-result=\"on\">識別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Identify<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#identify\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-03\" translation-result=\"on\">風格 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>命名檔案到這個程度：看到名字立刻知道它包含了什麼，代表了什麼。</p><p translation-origin=\"off\"><strong>Do</strong> name the file such that you instantly know what it contains and represents.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>檔名要具有說明性，確保檔案中只包含一個元件。</p><p translation-origin=\"off\"><strong>Do</strong> be descriptive with file names and keep the contents of the file to exactly one component.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>建立包含多個元件、服務或者混合體的檔案。</p><p translation-origin=\"off\"><strong>Avoid</strong> files with multiple components, multiple services, or a mixture.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n花費更少的時間來查詢和琢磨程式碼，就會變得更有效率。\n較長的檔名遠勝於<em>較短卻容易混淆的</em>縮寫名。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nSpend less time hunting and pecking for code, and become more efficient.\nLonger file names are far better than <em>short-but-obscure</em> abbreviated names.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">當你有一組小型、緊密相關的特性時，違反<em>一物一檔案</em>的規則可能會更好，這種情況下單一檔案可能會比多個檔案更容易發現和理解。注意這個例外。</p><p translation-origin=\"off\">It may be advantageous to deviate from the <em>one-thing-per-file</em> rule when you have a set of small, closely-related features that are better discovered and understood in a single file than as multiple files.\nBe wary of this loophole.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-04\"></a></p>\n<h3 id=\"flat\" translation-result=\"on\">扁平<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Flat<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#flat\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-04\" translation-result=\"on\">風格 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>儘可能保持扁平的目錄結構。</p><p translation-origin=\"off\"><strong>Do</strong> keep a flat folder structure as long as possible.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>當同一目錄下達到 7 個或更多個檔案時建立子目錄。</p><p translation-origin=\"off\"><strong>Consider</strong> creating sub-folders when a folder reaches seven or more files.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>配置 IDE，以隱藏無關的檔案，比如產生出來的 <code>.js</code> 檔案和 <code>.js.map</code> 檔案等。</p><p translation-origin=\"off\"><strong>Consider</strong> configuring the IDE to hide distracting, irrelevant files such as generated <code>.js</code> and <code>.js.map</code> files.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n沒人想要在超過七層的目錄中查詢檔案。扁平的結構有利於搜尋。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nNo one wants to search for a file through seven levels of folders.\nA flat structure is easy to scan.</p>\n\n<p translation-result=\"on\">另一方面，<a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">心理學家們相信</a>，當關注的事物超過 9 個時，人類就會開始感到吃力。所以，當一個資料夾中的檔案有 10 個或更多個檔案時，可能就是建立子目錄的時候了。</p><p translation-origin=\"off\">On the other hand, <a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">psychologists believe</a> that humans start to struggle when the number of adjacent interesting things exceeds nine.\nSo when a folder has ten or more files, it may be time to create subfolders.</p>\n\n<p translation-result=\"on\">還是根據你自己的舒適度而定吧。除非建立新資料夾能有顯著的價值，否則儘量使用扁平結構。</p><p translation-origin=\"off\">Base your decision on your comfort level.\nUse a flatter structure until there is an obvious value to creating a new folder.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-05\"></a></p>\n<h3 id=\"t-dry-try-to-be-dry\" translation-result=\"on\"><em>T-DRY</em>（儘量不重複自己）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><em>T-DRY</em> (Try to be <em>DRY</em>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#t-dry-try-to-be-dry\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-05\" translation-result=\"on\">風格 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-05<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-05\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong> DRY（Don't Repeat Yourself，不重複自己）。</p><p translation-origin=\"off\"><strong>Do</strong> be DRY (Don't Repeat Yourself).</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>過度 DRY，以致犧牲了閱讀性。</p><p translation-origin=\"off\"><strong>Avoid</strong> being so DRY that you sacrifice readability.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n雖然 DRY 很重要，但如果要以犧牲 LIFT 的其它原則為代價，那就不值得了。\n這也就是為什麼它被稱為 <em>T-DRY</em>。\n比如，把元件命名為 <code>hero-view.component.html</code> 是多餘的，因為帶有 <code>.html</code> 副檔名的檔案顯然就是一個檢視 (view)。\n但如果它不那麼顯著，或不符合常規，就把它寫出來。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nBeing DRY is important, but not crucial if it sacrifices the other elements of LIFT.\nThat's why it's called <em>T-DRY</em>.\nFor example, it's redundant to name a template <code>hero-view.component.html</code> because with the <code>.html</code> extension, it is obviously a view.\nBut if something is not obvious or departs from a convention, then spell it out.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-06\"></a></p>\n<h3 id=\"overall-structural-guidelines\" translation-result=\"on\">總體結構的指導原則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Overall structural guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#overall-structural-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-06\" translation-result=\"on\">風格 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-06<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-06\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>從零開始，但要考慮應用程式接下來的路往哪兒走。</p><p translation-origin=\"off\"><strong>Do</strong> start small but keep in mind where the application is heading down the road.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>有一個近期實施方案和一個長期的願景。</p><p translation-origin=\"off\"><strong>Do</strong> have a near term view of implementation and a long term vision.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把所有原始碼都放到名為 <code>src</code> 的目錄裡。</p><p translation-origin=\"off\"><strong>Do</strong> put all of the application's code in a folder named <code>src</code>.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>堅持</strong>如果元件具有多個伴生檔案 (<code>.ts</code>、<code>.html</code>、<code>.css</code> 和 <code>.spec</code>)，就為它建立一個資料夾。</p><p translation-origin=\"off\"><strong>Consider</strong> creating a folder for a component when it has multiple accompanying files (<code>.ts</code>, <code>.html</code>, <code>.css</code>, and <code>.spec</code>).</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n在早期階段能夠幫助保持應用的結構小巧且易於維護，這樣當應用增長時就容易進化了。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nHelps keep the application structure small and easy to maintain in the early stages, while being easy to evolve as the application grows.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何?</strong> 元件通常有四個檔案 (<code>*.html</code>、 <code>*.css</code>、 <code>*.ts</code> 和 <code>*.spec.ts</code>)，它們很容易把一個目錄弄亂。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nComponents often have four files (for example, <code>*.html</code>, <code>*.css</code>, <code>*.ts</code>, and <code>*.spec.ts</code>) and can clutter a folder quickly.</p>\n\n</div>\n<p><a id=\"file-tree\"></a></p>\n<p translation-result=\"on\">下面是符合規範的目錄和檔案結構</p><p translation-origin=\"off\">Here is a compliant folder and file structure:</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n    &lt;project root&gt;\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          core\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            exception.service.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            user-profile.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          heroes\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            hero\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            hero-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-list.component.ts|html|css|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              hero-button.component.ts|html|css|spec.ts\n            </div>\n            <div class=\"file\">\n              hero.model.ts\n            </div>\n            <div class=\"file\">\n              hero.service.ts|spec.ts\n            </div>\n          </div>\n          <div class=\"file\">\n            heroes.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            heroes.module.ts\n          </div>\n          <div class=\"file\">\n            heroes-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          shared\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            shared.module.ts\n          </div>\n          <div class=\"file\">\n            init-caps.pipe.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.component.ts|spec.ts\n          </div>\n          <div class=\"file\">\n            filter-text.service.ts|spec.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          villains\n        </div>\n        <div class=\"children\">\n          <div class=\"file\">\n            villain\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villain-list\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            shared\n          </div>\n          <div class=\"children\">\n            <div class=\"file\">\n              …\n            </div>\n          </div>\n          <div class=\"file\">\n            villains.component.ts|html|css|spec.ts\n          </div>\n          <div class=\"file\">\n            villains.module.ts\n          </div>\n          <div class=\"file\">\n            villains-routing.module.ts\n          </div>\n        </div>\n        <div class=\"file\">\n          app.component.ts|html|css|spec.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        …\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules/…\n    </div>\n    <div class=\"file\">\n      …\n    </div>\n  </div>\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">把元件放在專用目錄中的方式廣受歡迎，對於小型應用，還可以保持元件扁平化（而不是放在專用目錄中）。這樣會把四個檔案放在現有目錄中，也會減少目錄的巢狀(Nesting)。無論你如何選擇，請保持一致。</p><p translation-origin=\"off\">While components in dedicated folders are widely preferred, another option for small applications is to keep components flat (not in a dedicated folder).\nThis adds up to four files to the existing folder, but also reduces the folder nesting.\nWhatever you choose, be consistent.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-07\"></a></p>\n<h3 id=\"folders-by-feature-structure\" translation-result=\"on\">按特性組織的目錄結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><em>Folders-by-feature</em> structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#folders-by-feature-structure\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-07\" translation-result=\"on\">風格 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-07<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-07\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>根據特性區命名目錄。</p><p translation-origin=\"off\"><strong>Do</strong> create folders named for the feature area they represent.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n開發人員可以快速定位程式碼，掃一眼就能知道每個檔案代表什麼，目錄儘可能保持扁平，既沒有重複也沒有多餘的名字。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA developer can locate the code and identify what each file represents\nat a glance. The structure is as flat as it can be and there are no repetitive or redundant names.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nLIFT 原則中包含了所有這些。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe LIFT guidelines are all covered.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n遵循 LIFT 原則精心組織內容，避免應用變得雜亂無章。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nHelps reduce the application from becoming cluttered through organizing the\ncontent and keeping them aligned with the LIFT guidelines.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當有很多檔案時（比如 10 個以上），在專用目錄型結構中定位它們會比在扁平結構中更容易。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen there are a lot of files, for example 10+,\nlocating them is easier with a consistent folder structure\nand more difficult in a flat structure.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為每個特性區建立一個 NgModule。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule for each feature area.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nNgModule 使延遲載入可路由的特性變得更容易。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nNgModules make it easy to lazy load routable features.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nNgModule 隔離、測試和複用特性更容易。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nNgModules make it easier to isolate, test, and reuse features.</p>\n\n</div>\n<div>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/styleguide#file-tree\">目錄和檔案結構的範例</a>。</p><p translation-origin=\"off\">For more information, refer to <a href=\"guide/styleguide#file-tree\">this folder and file structure example</a>.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-08\"></a></p>\n<h3 id=\"app-root-module\" translation-result=\"on\">應用的<em>根模組</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">App <em>root module</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#app-root-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-08\" translation-result=\"on\">風格 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-08<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-08\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在應用的根目錄建立一個 NgModule（比如 <code>/src/app</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule in the application's root folder, for example, in <code>/src/app</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n每個應用都至少需要一個根 NgModule。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nEvery application requires at least one root NgModule.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>把根模組命名為 <code>app.module.ts</code>。</p><p translation-origin=\"off\"><strong>Consider</strong> naming the root module <code>app.module.ts</code>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n能讓定位和識別根模組變得更容易。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nMakes it easier to locate and identify the root module.</p>\n\n</div>\n<code-example format=\"typescript\" path=\"styleguide/src/04-08/app/app.module.ts\" language=\"typescript\" region=\"example\" header=\"app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  exports: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-09\"></a></p>\n<h3 id=\"feature-modules\" translation-result=\"on\">特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#feature-modules\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-09\" translation-result=\"on\">風格 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-09<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-09\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>為應用中每個明顯的特性建立一個 NgModule。</p><p translation-origin=\"off\"><strong>Do</strong> create an NgModule for all distinct features in an application; for example, a <code>Heroes</code> feature.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把特性模組放在與特性區同名的目錄中（比如 <code>app/heroes</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> place the feature module in the same named folder as the feature area; for example, in <code>app/heroes</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>特性模組的檔名應該能反映出特性區的名字和目錄（比如 <code>app/heroes/heroes.module.ts</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> name the feature module file reflecting the name of the feature area and folder; for example, <code>app/heroes/heroes.module.ts</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>特性模組的符號名應該能反映出特性區、目錄和檔名（比如在 <code>app/heroes/heroes.module.ts</code> 中定義 <code>HeroesModule</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> name the feature module symbol reflecting the name of the feature area, folder, and file; for example, <code>app/heroes/heroes.module.ts</code> defines <code>HeroesModule</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n特性模組可以對其它模組暴露或隱藏自己的實現。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module can expose or hide its implementation from other modules.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n特性模組標記出組成該特性分割槽的相關元件集合。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module identifies distinct sets of related components that comprise the feature area.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n方便路由到特性模組 —— 無論是用主動載入還是延遲載入的方式。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module can easily be routed to both eagerly and lazily.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n特性模組在特定的功能和其它應用特性之間定義了清晰的邊界。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module defines clear boundaries between specific functionality and other application features.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n特性模組幫助澄清開發職責，以便於把這些職責指派給不同的專案組。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module helps clarify and make it easier to assign development responsibilities to different teams.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n特性模組易於隔離，以便測試。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA feature module can easily be isolated for testing.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-10\"></a></p>\n<h3 id=\"shared-feature-module\" translation-result=\"on\">共享特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Shared feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#shared-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-10\" translation-result=\"on\">風格 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-10<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-10\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在 <code>shared</code> 目錄中建立名叫 <code>SharedModule</code> 的特性模組（比如在 <code>app/shared/shared.module.ts</code> 中定義 <code>SharedModule</code>）。</p><p translation-origin=\"off\"><strong>Do</strong> create a feature module named <code>SharedModule</code> in a <code>shared</code> folder; for example, <code>app/shared/shared.module.ts</code> defines <code>SharedModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在共享模組中宣告那些可能被特性模組參考的可複用元件、指令和管道。</p><p translation-origin=\"off\"><strong>Do</strong> declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>把可能在整個應用中到處參考的模組命名為 SharedModule。</p><p translation-origin=\"off\"><strong>Consider</strong> using the name SharedModule when the contents of a shared\nmodule are referenced across the entire application.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>考慮</strong> <em>不要</em>在共享模組中提供服務。服務通常是單例的，應該在整個應用或一個特定的特性模組中只有一份。不過也有例外，比如，在下面的範例程式碼中，注意 <code>SharedModule</code> 提供了 <code>FilterTextService</code>。這裡可以這麼做，因為該服務是無狀態的，也就是說，該服務的消費者不會受到這些新例項的影響。</p><p translation-origin=\"off\"><strong>Consider</strong> <em>not</em> providing services in shared modules.\nServices are usually singletons that are provided once for the entire application or in a particular feature module.\nThere are exceptions, however.\nFor example, in the sample code that follows, notice that the <code>SharedModule</code> provides <code>FilterTextService</code>.\nThis is acceptable here because the service is stateless;that is, the consumers of the service aren't impacted by new instances.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在 <code>SharedModule</code> 中匯入所有模組都需要的資產（比如 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 和 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>）。</p><p translation-origin=\"off\"><strong>Do</strong> import all modules required by the assets in the <code>SharedModule</code>; for example, <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n<code>SharedModule</code> 中包含的元件、指令和管道可能需要來自其它公共模組的特性（比如來自 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中的 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令）。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\n<code>SharedModule</code> will contain components, directives, and pipes\nthat may need features from another common module; for example,\n<code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> in <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在 <code>SharedModule</code> 中宣告所有元件、指令和管道。</p><p translation-origin=\"off\"><strong>Do</strong> declare all components, directives, and pipes in the <code>SharedModule</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>從 <code>SharedModule</code> 中匯出其它特性模組所需的全部符號。</p><p translation-origin=\"off\"><strong>Do</strong> export all symbols from the <code>SharedModule</code> that other feature modules need to use.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n<code>SharedModule</code> 的存在，能讓常用的元件、指令和管道在很多其它模組的元件範本中都自動可用。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\n<code>SharedModule</code> exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.</p>\n\n</div>\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>在 <code>SharedModule</code> 中指定應用級的單例服務提供者。如果是刻意要得到多個服務單例也行，不過還是要小心。</p><p translation-origin=\"off\"><strong>Avoid</strong> specifying app-wide singleton providers in a <code>SharedModule</code>.\nIntentional singletons are OK.\nTake care.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n延遲載入的特性模組如果匯入了這個共享模組，會建立一份自己的服務副本，這可能會導致意料之外的後果。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n對於單例服務，你不希望每個模組都有自己的例項。\n而如果 <code>SharedModule</code> 提供了一個服務，那就有可能發生這種情況。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nYou don't want each module to have its own separate instance of singleton services.\nYet there is a real danger of that happening if the <code>SharedModule</code> provides a service.</p>\n\n</div>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        shared\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          shared.module.ts\n        </div>\n        <div class=\"file\">\n          init-caps.pipe.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.component.ts|spec.ts\n        </div>\n        <div class=\"file\">\n          filter-text.service.ts|spec.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        app.component.ts|html|css|spec.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n      <div class=\"file\">\n        app-routing.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n    <div class=\"file\">\n      index.html\n    </div>\n  </div>\n  <div class=\"file\">\n    …\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"app/shared/shared.module.ts\" path=\"styleguide/src/04-10/app/shared/shared.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { FilterTextComponent } from './filter-text/filter-text.component';\nimport { FilterTextService } from './filter-text/filter-text.service';\nimport { InitCapsPipe } from './init-caps.pipe';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n  declarations: [\n    FilterTextComponent,\n    InitCapsPipe\n  ],\n  providers: [FilterTextService],\n  exports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    FilterTextComponent,\n    InitCapsPipe\n  ]\n})\nexport class SharedModule { }\n\n\n</code-pane>\n    <code-pane header=\"app/shared/init-caps.pipe.ts\" path=\"styleguide/src/04-10/app/shared/init-caps.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'initCaps' })\nexport class InitCapsPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform = (value: string) =&gt; value;\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.component.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-filter-text',\n  template: '&lt;input type=\"text\" id=\"filterText\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"filter\" (keyup)=\"filterChanged($event)\" /&gt;'\n})\nexport class FilterTextComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() changed: <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;;\n\n  filter = '';\n\n  constructor() {\n    this.changed = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n  }\n\n  clear() {\n    this.filter = '';\n  }\n\n  filterChanged(event: any) {\n    event.preventDefault();\n    console.log(`Filter Changed: ${this.filter}`);\n    this.changed.emit(this.filter);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/shared/filter-text/filter-text.service.ts\" path=\"styleguide/src/04-10/app/shared/filter-text/filter-text.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array&lt;string&gt;, originalList: Array&lt;any&gt;) {\n    let filteredList: any[];\n    if (data &amp;&amp; props &amp;&amp; originalList) {\n      data = data.toLowerCase();\n      const filtered = originalList.filter(item =&gt; {\n        let match = false;\n        for (const prop of props) {\n          if (item[prop].toString().toLowerCase().indexOf(data) &gt; -1) {\n            match = true;\n            break;\n          }\n        }\n        return match;\n      });\n      filteredList = filtered;\n    } else {\n      filteredList = originalList;\n    }\n    return filteredList;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/04-10/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { FilterTextService } from '../shared/filter-text/filter-text.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html'\n})\nexport class HeroesComponent {\n\n  heroes = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n\n  filteredHeroes = this.heroes;\n\n  constructor(private filterService: FilterTextService) { }\n\n  filterChanged(searchText: string) {\n    this.filteredHeroes = this.filterService.filter(searchText, ['id', 'name'], this.heroes);\n  }\n}\n\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/04-10/app/heroes/heroes.component.html\">\n&lt;div&gt;This is heroes component&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of filteredHeroes\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;toh-filter-text (changed)=\"filterChanged($event)\"&gt;&lt;/toh-filter-text&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-11\"></a></p>\n<h3 id=\"lazy-loaded-folders\" translation-result=\"on\">延遲載入資料夾<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Lazy Loaded folders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-11\" translation-result=\"on\">風格 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-11<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-11\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">某些邊界清晰的應用特性或工作流可以做成<em>延遲載入</em>或<em>按需載入</em>的，而不用總是隨著應用啟動。</p><p translation-origin=\"off\">A distinct application feature or workflow may be <em>lazy loaded</em> or <em>loaded on demand</em> rather than when the application starts.</p>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把延遲載入特性下的內容放進<em>延遲載入目錄</em>中。典型的<em>延遲載入目錄</em>包含<em>路由元件</em>及其子元件以及與它們有關的那些資產和模組。</p><p translation-origin=\"off\"><strong>Do</strong> put the contents of lazy loaded features in a <em>lazy loaded folder</em>.\nA typical <em>lazy loaded folder</em> contains a <em>routing component</em>, its child components, and their related assets and modules.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n這種目錄讓標識和隔離這些特性內容變得更輕鬆。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe folder makes it easy to identify and isolate the feature content.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"04-12\"></a></p>\n<h3 id=\"never-directly-import-lazy-loaded-folders\" translation-result=\"on\">永遠不要直接匯入延遲載入的目錄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Never directly import lazy loaded folders<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#never-directly-import-lazy-loaded-folders\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-12\" translation-result=\"on\">樣式 04-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>讓兄弟模組和父模組直接匯入<em>延遲載入特性</em>中的模組。</p><p translation-origin=\"off\"><strong>Avoid</strong> allowing modules in sibling and parent folders to directly import a module in a <em>lazy loaded feature</em>.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n直接匯入並使用此模組會立即載入它，而原本的設計意圖是按需載入它。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nDirectly importing and using a module will load it immediately when the intention is to load it on demand.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h3 id=\"do-not-add-filtering-and-sorting-logic-to-pipes\" translation-result=\"on\">不要往管道中新增過濾和排序邏輯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Do not add filtering and sorting logic to pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-04-13\" translation-result=\"on\">風格 04-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-13\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 04-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-04-13\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>往自訂管道中新增過濾或排序邏輯。</p><p translation-origin=\"off\"><strong>Avoid</strong> adding filtering or sorting logic into custom pipes.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在把模型繫結到範本中時，把過濾和排序邏輯在元件或服務中進行預先計算。</p><p translation-origin=\"off\"><strong>Do</strong> pre-compute the filtering and sorting logic in components or services before binding the model in templates.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n過濾，尤其是排序，是非常昂貴的操作。因為 Angular 每秒可能呼叫很多次管道方法，所以對大型列表進行排序和過濾操作會嚴重降低使用者體驗。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nFiltering and especially sorting are expensive operations. As Angular can call pipe methods many times per second, sorting and filtering operations can degrade the user experience severely for even moderately-sized lists.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"components\" translation-result=\"on\">元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p><a id=\"05-03\"></a></p>\n<h3 id=\"components-as-elements\" translation-result=\"on\">把元件當做元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Components as elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#components-as-elements\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-03\" translation-result=\"on\">風格 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>考慮</strong>給元件一個<em>元素</em>選擇器，而不是<em>屬性</em>或<em>類</em>選擇器。</p><p translation-origin=\"off\"><strong>Consider</strong> giving components an <em>element</em> selector, as opposed to <em>attribute</em> or <em>class</em> selectors.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n元件有很多包含 HTML 以及可選 Angular 範本語法的範本。\n它們顯示內容。開發人員會把元件像原生 HTML 元素和 WebComponents 一樣放進頁面中。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nComponents have templates containing HTML and optional Angular template syntax.\nThey display content.\nDevelopers place components on the page as they would native HTML elements and web components.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n檢視元件範本的 HTML 時，更容易識別一個符號是元件還是指令。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nIt is easier to recognize that a symbol is a component by looking at the template's html.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">少數情況下，你要為元件使用屬性選擇器，比如你要加強某個內建元素時。比如，<a href=\"https://material.angular.cn/components/button/overview\">Material Design 元件庫</a>就會對 <code>&lt;button mat-button&gt;</code> 使用這項技術。不過，你不應該在自訂元件上使用這項技術。</p><p translation-origin=\"off\">There are a few cases where you give a component an attribute, such as when you want to augment a built-in element.\nFor example, <a href=\"https://material.angular.io/components/button/overview\">Material Design</a> uses this technique with <code>&lt;button mat-button&gt;</code>.\nHowever, you wouldn't use this technique on a custom element.</p>\n\n</div>\n<code-example header=\"app/heroes/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;div tohHeroButton&gt;&lt;/div&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-03/app/app.component.html\">\n&lt;toh-hero-button&gt;&lt;/toh-hero-button&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-04\"></a></p>\n<h3 id=\"extract-templates-and-styles-to-their-own-files\" translation-result=\"on\">把範本和樣式提取到它們自己的檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Extract templates and styles to their own files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#extract-templates-and-styles-to-their-own-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-04\" translation-result=\"on\">風格 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>當超過 3 行時，把範本和樣式提取到一個單獨的檔案。</p><p translation-origin=\"off\"><strong>Do</strong> extract templates and styles into a separate file, when more than 3 lines.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把範本檔案命名為 <code>[component-name].component.html</code>，其中，[component-name] 是元件名。</p><p translation-origin=\"off\"><strong>Do</strong> name the template file <code>[component-name].component.html</code>, where [component-name] is the component name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把樣式檔案命名為 <code>[component-name].component.css</code>，其中，[component-name] 是元件名。</p><p translation-origin=\"off\"><strong>Do</strong> name the style file <code>[component-name].component.css</code>, where [component-name] is the component name.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>指定<em>相對於模組的</em> URL，給它加上 <code>./</code> 字首。</p><p translation-origin=\"off\"><strong>Do</strong> specify <em>component-relative</em> URLs, prefixed with <code>./</code>.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n巨大的、內聯的範本和樣式表會遮蓋元件的意圖和實現方式，削弱可讀性和可維護性。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLarge, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n在多數編輯器中，編寫內聯的範本和樣式表時都無法使用語法提示和程式碼片段功能。\nAngular 的 TypeScript 語言服務（即將到來）可以幫助那些編輯器在編寫 HTML 範本時克服這一缺陷，但對 CSS 樣式沒有幫助。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nIn most editors, syntax hints and code snippets aren't available when developing inline templates and styles.\nThe Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates\nin those editors that support it; it won't help with CSS styles.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當你移動元件檔案時，相對於元件的 URL 不需要修改，因為這些檔案始終會在一起。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nA <em>component relative</em> URL requires no change when you move the component files, as long as the files stay together.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n<code>./</code> 字首是相對 URL 的標準語法，不必依賴 Angular 的特殊處理，如果沒有字首則不行。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe <code>./</code> prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.</p>\n\n</div>\n<code-example header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;My Heroes&lt;/h2&gt;\n      &lt;ul class=\"heroes\"&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>\" (click)=\"selectedHero=hero\"&gt;\n          &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n        &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/heroes.component.ts\" path=\"styleguide/src/05-04/app/heroes/heroes.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls:  ['./heroes.component.css']\n})\nexport class HeroesComponent {\n  heroes: Observable&lt;Hero[]&gt;;\n  selectedHero!: Hero;\n\n  constructor(private heroService: HeroService) {\n    this.heroes = this.heroService.getHeroes();\n  }\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.html\" path=\"styleguide/src/05-04/app/heroes/heroes.component.html\">\n&lt;div&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>\"&gt;\n      &lt;button type=\"button\" (click)=\"selectedHero=hero\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n        &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n      &lt;/button&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n    &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} is my hero&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"app/heroes/heroes.component.css\" path=\"styleguide/src/05-04/app/heroes/heroes.component.css\">\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-12\"></a></p>\n<h3 id=\"decorate-input-and-output-properties\" translation-result=\"on\">使用 <code>input</code> 和 <code>output</code> 屬性裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Decorate <code>input</code> and <code>output</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#decorate-input-and-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-12\" translation-result=\"on\">風格 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-12<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-12\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong> 使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，而非 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>inputs</code> 和 <code>outputs</code> 屬性:</p><p translation-origin=\"off\"><strong>Do</strong> use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> class decorators instead of the <code>inputs</code> and <code>outputs</code> properties of the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata:</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>堅持</strong>把 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 放到所裝飾的屬性的同一行。</p><p translation-origin=\"off\"><strong>Consider</strong> placing <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> or <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same line as the property it decorates.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n易於在類裡面識別哪些屬性是輸入屬性或輸出屬性。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nIt is easier and more readable to identify which properties in a class are inputs or outputs.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n如果需要重新命名與 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 或者 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 關聯的屬性或事件名，你可以在一個位置修改。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nIf you ever need to rename the property or event name associated with\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> or <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, you can modify it in a single place.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n依附到指令的元資料宣告會比較簡短，更易於閱讀。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe metadata declaration attached to the directive is shorter and thus more readable.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n把裝飾器放到同一行可以精簡程式碼，同時更易於識別輸入或輸出屬性。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nPlacing the decorator on the same line <em>usually</em> makes for shorter code and still easily identifies the property as an input or output.\nPut it on the line above when doing so is clearly more readable.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;&lt;/button&gt;`,\n  inputs: [\n    'label'\n  ],\n  outputs: [\n    'heroChange'\n  ]\n})\nexport class HeroButtonComponent {\n  heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  label: string;\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-12/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-13\"></a></p>\n<h3 id=\"avoid-aliasing-inputs-and-outputs\" translation-result=\"on\">避免為 <code>inputs</code> 和 <code>outputs</code> 指定別名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Avoid aliasing <code>inputs</code> and <code>outputs</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#avoid-aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-13\" translation-result=\"on\">風格 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-13<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-13\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule avoid\">\n<p translation-result=\"on\"><strong>避免</strong>除非有重要目的，否則不要為 <code>input</code> 和 <code>output</code> 指定別名。</p><p translation-origin=\"off\"><strong>Avoid</strong> <code>input</code> and <code>output</code> aliases except when it serves an important purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n同一個屬性有兩個名字（一個對內一個對外）很容易導致混淆。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nTwo names for the same property (one private, one public) is inherently confusing.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n如果指令名也同時用作<em>輸入</em>屬性，而且指令名無法準確描述這個屬性的用途時，應該使用別名。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nYou should use an alias when the directive name is also an <code>input</code> property,\nand the directive name doesn't describe the property.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid pointless aliasing */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // Pointless aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('heroChangeEvent') heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('labelAttribute') label: string;\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero-button labelAttribute=\"OK\" (changeEvent)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\" &gt;{{label}}&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  // No aliases\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() heroChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;any&gt;();\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() label = '';\n}\n\n</code-pane>\n    <code-pane header=\"app/heroes/shared/hero-button/hero-highlight.directive.ts\" path=\"styleguide/src/05-13/app/heroes/shared/hero-highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[heroHighlight]' })\nexport class HeroHighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  // Aliased because `color` is a better property name than `heroHighlight`\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('heroHighlight') color = '';\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {}\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.color || 'yellow';\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-13/app/app.component.html\">\n&lt;toh-hero-button label=\"OK\" (change)=\"doSomething()\"&gt;\n&lt;/toh-hero-button&gt;\n\n&lt;!-- `heroHighlight` is both the directive name and the data-bound aliased property name --&gt;\n&lt;h3 heroHighlight=\"skyblue\"&gt;The Great Bombasto&lt;/h3&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-14\"></a></p>\n<h3 id=\"member-sequence\" translation-result=\"on\">成員順序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Member sequence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#member-sequence\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-14\" translation-result=\"on\">風格 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-14<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-14\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把屬性成員放在前面，方法成員放在後面。</p><p translation-origin=\"off\"><strong>Do</strong> place properties up top followed by methods.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>先放公共成員，再放私有成員，並按照字母順序排列。</p><p translation-origin=\"off\"><strong>Do</strong> place private members after public members, alphabetized.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n把類別的成員按照統一的順序排列，易於閱讀，能立即識別出元件的哪個成員服務於何種目的。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nPlacing members in a consistent sequence makes it easy to read and\nhelps instantly identify which members of the component serve which purpose.</p>\n\n</div>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  message: string;\n  title: string;\n  private toastElement: any;\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<code-example header=\"app/shared/toast/toast.component.ts\" path=\"styleguide/src/05-14/app/shared/toast/toast.component.ts\" region=\"example\">\nexport class ToastComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  // public properties\n  message = '';\n  title = '';\n\n  // private fields\n  private defaults = {\n    title: '',\n    message: 'May the Force be with you'\n  };\n  private toastElement: any;\n\n  // public methods\n  activate(message = this.defaults.message, title = this.defaults.title) {\n    this.title = title;\n    this.message = message;\n    this.show();\n  }\n\n  ngOnInit() {\n    this.toastElement = document.getElementById('toh-toast');\n  }\n\n  // private methods\n  private hide() {\n    this.toastElement.style.opacity = 0;\n    setTimeout(() =&gt; this.toastElement.style.zIndex = 0, 400);\n  }\n\n  private show() {\n    console.log(this.message);\n    this.toastElement.style.opacity = 1;\n    this.toastElement.style.zIndex = 9999;\n    setTimeout(() =&gt; this.hide(), 2500);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-15\"></a></p>\n<h3 id=\"delegate-complex-component-logic-to-services\" translation-result=\"on\">把邏輯放到服務裡<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Delegate complex component logic to services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#delegate-complex-component-logic-to-services\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-15\" translation-result=\"on\">風格 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-15<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-15\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在元件中只包含與檢視相關的邏輯。所有其它邏輯都應該放到服務中。</p><p translation-origin=\"off\"><strong>Do</strong> limit logic in a component to only that required for the view.\nAll other logic should be delegated to services.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把可複用的邏輯放到服務中，保持元件簡單，聚焦於它們預期目的。</p><p translation-origin=\"off\"><strong>Do</strong> move reusable logic to services and keep components simple and focused on their intended purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當邏輯被放置到服務裡，並以函式的形式暴露時，可以被多個元件重複使用。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLogic may be reused by multiple components when placed within a service and exposed as a function.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n在單元測試時，服務裡的邏輯更容易被隔離。當元件中呼叫邏輯時，也很容易被模擬。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLogic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n從元件移除依賴並隱藏實現細節。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nRemoves dependencies and hides implementation details from the component.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n保持元件苗條、精簡和聚焦。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nKeeps the component slim, trim, and focused.</p>\n\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.avoid.ts\">\n/* avoid */\n\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { Hero } from '../shared/hero.model';\n\nconst heroesUrl = 'http://angular.io';\n\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n  getHeroes() {\n    this.heroes = [];\n    this.http.get(heroesUrl).pipe(\n      catchError(this.catchBadResponse),\n      finalize(() =&gt; this.hideSpinner())\n    ).subscribe((heroes: Hero[]) =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  private catchBadResponse(err: any, source: Observable&lt;any&gt;) {\n    // log and handle the exception\n    return new Observable();\n  }\n\n  private hideSpinner() {\n    // hide the spinner\n  }\n}\n\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-15/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero, HeroService } from '../shared';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `...`\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  constructor(private heroService: HeroService) {}\n  getHeroes() {\n    this.heroes = [];\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-16\"></a></p>\n<h3 id=\"dont-prefix-output-properties\" translation-result=\"on\">不要給 <code>output</code> 屬性加字首<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Don't prefix <code>output</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#dont-prefix-output-properties\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-16\" translation-result=\"on\">風格 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-16<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-16\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>命名事件時，不要帶字首 <code>on</code>。</p><p translation-origin=\"off\"><strong>Do</strong> name events without the prefix <code>on</code>.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把事件處理器方法命名為 <code>on</code> 字首之後緊跟著事件名。</p><p translation-origin=\"off\"><strong>Do</strong> name event handler methods with the prefix <code>on</code> followed by the event name.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n與內建事件命名一致，比如按鈕點選。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThis is consistent with built-in events such as button clicks.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nAngular 允許<a href=\"guide/binding-syntax\">另一種備選語法</a> <code>on-*</code>。如果事件的名字本身帶有字首 <code>on</code>，那麼繫結的表示式可能是 <code>on-onEvent</code>。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nAngular allows for an <a href=\"guide/binding-syntax\">alternative syntax</a> <code>on-*</code>. If the event itself was prefixed with <code>on</code> this would result in an <code>on-onEvent</code> binding expression.</p>\n\n</div>\n<code-example header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() onSavedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.avoid.html\">\n&lt;!-- avoid --&gt;\n\n&lt;toh-hero (onSavedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-example>\n<code-tabs>\n    <code-pane header=\"app/heroes/hero.component.ts\" path=\"styleguide/src/05-16/app/heroes/hero.component.ts\" region=\"example\">\nexport class HeroComponent {\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() savedTheDay = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;boolean&gt;();\n}\n\n</code-pane>\n    <code-pane header=\"app/app.component.html\" path=\"styleguide/src/05-16/app/app.component.html\">\n&lt;toh-hero (savedTheDay)=\"onSavedTheDay($event)\"&gt;&lt;/toh-hero&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"05-17\"></a></p>\n<h3 id=\"put-presentation-logic-in-the-component-class\" translation-result=\"on\">把表現層邏輯放到元件類裡<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Put presentation logic in the component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#put-presentation-logic-in-the-component-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-17\" translation-result=\"on\">風格 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-17<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-17\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把表現層邏輯放進元件類中，而不要放在範本裡。</p><p translation-origin=\"off\"><strong>Do</strong> put presentation logic in the component class, and not in the template.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n邏輯應該只出現在一個地方（元件類裡）而不應分散在兩個地方。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLogic will be contained in one place (the component class) instead of being spread in two places.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n將元件的表現層邏輯放到元件類而非範本裡，可以增強測試性、維護性和重複使用性。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nKeeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.</p>\n\n</div>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{totalPowers / heroes.length}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers: number;\n}\n\n</code-example>\n<code-example header=\"app/heroes/hero-list/hero-list.component.ts\" path=\"styleguide/src/05-17/app/heroes/hero-list/hero-list.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-list',\n  template: `\n    &lt;section&gt;\n      Our list of heroes:\n      &lt;toh-hero *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" [hero]=\"hero\"&gt;\n      &lt;/toh-hero&gt;\n      Total powers: {{totalPowers}}&lt;br&gt;\n      Average power: {{avgPower}}\n    &lt;/section&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n  totalPowers = 0;\n\n  get avgPower() {\n    return this.totalPowers / this.heroes.length;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h3 id=\"initialize-inputs\" translation-result=\"on\">初始化輸入屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#initialize-inputs\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Initialize inputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#initialize-inputs\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-05-18\" translation-result=\"on\">風格 05-18<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-18\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 05-18<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-05-18\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">TypeScript 的編譯器選項 <code>--strictPropertyInitialization</code>，會確保某個類在建構函式中初始化其屬性。當啟用時，如果該類沒有對任何未顯式標為可選值的屬性提供初始值，TypeScript 編譯器就會報錯。</p><p translation-origin=\"off\">TypeScript's <code>--strictPropertyInitialization</code> compiler option ensures that a class initializes its properties during construction.\nWhen enabled, this option causes the TypeScript compiler to report an error if the class does not set a value to any property that is not explicitly marked as optional.</p>\n\n<p translation-result=\"on\">按照設計，Angular 把所有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 都視為可選值。只要有可能，你就應該透過提供預設值來滿足 <code>--strictPropertyInitialization</code> 的要求。</p><p translation-origin=\"off\">By design, Angular treats all <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> properties as optional.\nWhen possible, you should satisfy <code>--strictPropertyInitialization</code> by providing a default value.</p>\n\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id = 'default_id';\n}\n\n</code-example>\n<p translation-result=\"on\">如果該屬性很難構造出預設值，請使用 <code>?</code> 來把該屬性顯式標記為可選的。</p><p translation-origin=\"off\">If the property is hard to construct a default value for, use <code>?</code> to explicitly mark the property as optional.</p>\n\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.optional.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id?: string;\n\n  process() {\n    if (this.id) {\n      // ...\n    }\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">你可能希望某個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 欄位是必填的，也就是說此元件的所有使用者都必須傳入該屬性。這種情況下，請使用預設值。僅僅使用 <code>!</code> 來抑制 TypeScript 報錯是不夠的，應該避免它，因為這樣做會阻止型別檢查器來確保必須提供此輸入值。</p><p translation-origin=\"off\">You may want to have a required <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> field, meaning all your component users are required to pass that attribute.\nIn such cases, use a default value.\nJust suppressing the TypeScript error with <code>!</code> is insufficient and should be avoided because it will prevent the type checker ensure the input value is provided.</p>\n\n<code-example header=\"app/heroes/hero/hero.component.ts\" path=\"styleguide/src/05-18/app/heroes/hero/hero.component.avoid.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero',\n  template: `...`\n})\nexport class HeroComponent {\n  // The exclamation mark suppresses errors that a property is\n  // not initialized.\n  // Ignoring this enforcement can prevent the type checker\n  // from finding potential issues.\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id!: string;\n}\n\n</code-example>\n<h2 id=\"directives\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p><a id=\"06-01\"></a></p>\n<h3 id=\"use-directives-to-enhance-an-element\" translation-result=\"on\">使用指令來增強已有元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use directives to enhance an element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-directives-to-enhance-an-element\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-06-01\" translation-result=\"on\">風格 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 06-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>當你需要有表現層邏輯，但沒有範本時，使用屬性型指令。</p><p translation-origin=\"off\"><strong>Do</strong> use attribute directives when you have presentation logic without a template.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n屬性型指令沒有範本。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nAttribute directives don't have an associated template.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n一個元素可以使用多個屬性型指令。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nAn element may have more than one attribute directive applied.</p>\n\n</div>\n<code-example header=\"app/shared/highlight.directive.ts\" path=\"styleguide/src/06-01/app/shared/highlight.directive.ts\" region=\"example\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohHighlight]'\n})\nexport class HighlightDirective {\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseover') onMouseEnter() {\n    // do highlight work\n  }\n}\n\n</code-example>\n<code-example header=\"app/app.component.html\" path=\"styleguide/src/06-01/app/app.component.html\">\n&lt;div tohHighlight&gt;Bombasta&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"06-03\"></a></p>\n<h3 id=\"hostlistenerhostbinding-decorators-versus-host-metadata\" translation-result=\"on\"><code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code><a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 裝飾器 vs. 元件元資料 <code>host</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistener-和-hostbinding-裝飾器-vs-元件元資料-host\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>/<code><a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> decorators versus <code>host</code> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-06-03\" translation-result=\"on\">風格 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 06-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-06-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>優先使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 和 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code>，而不是 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 和 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>host</code> 屬性。</p><p translation-origin=\"off\"><strong>Consider</strong> preferring the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> and <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> to the <code>host</code> property of the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>讓你的選擇保持一致。</p><p translation-origin=\"off\"><strong>Do</strong> be consistent in your choice.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n對於關聯到 <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> 的屬性或關聯到 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> 的方法，要修改時，只需在指令類中的一個地方修改。\n如果使用元資料屬性 <code>host</code>，你就得在元件類中修改屬性宣告的同時修改相關的元資料。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe property associated with <code>@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a></code> or the method associated with <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>\ncan be modified only in a single place—in the directive's class.\nIf you use the <code>host</code> metadata property, you must modify both the property/method declaration in the\ndirective's class and the metadata in the decorator associated with the directive.</p>\n\n</div>\n<code-example header=\"app/shared/validator.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator]'\n})\nexport class ValidatorDirective {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('attr.role') role = 'button';\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">與不推薦的方式（<code>host</code> 元資料）比較一下。</p><p translation-origin=\"off\">Compare with the less preferred <code>host</code> metadata alternative.</p>\n\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n<code>host</code> 元資料只是一個便於記憶的名字而已，並不需要額外的 ES 匯入。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe <code>host</code> metadata is only one term to remember and doesn't require extra ES imports.</p>\n\n</div>\n<code-example header=\"app/shared/validator2.directive.ts\" path=\"styleguide/src/06-03/app/shared/validator2.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[tohValidator2]',\n  host: {\n    '[attr.role]': 'role',\n    '(mouseenter)': 'onMouseEnter()'\n  }\n})\nexport class Validator2Directive {\n  role = 'button';\n  onMouseEnter() {\n    // do work\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"services\" translation-result=\"on\">服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p><a id=\"07-01\"></a></p>\n<h3 id=\"services-are-singletons\" translation-result=\"on\">服務總是單例的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Services are singletons<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#services-are-singletons\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-01\" translation-result=\"on\">風格 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 07-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在同一個注入器內，把服務當做單例使用。用它們來共享資料和功能。</p><p translation-origin=\"off\"><strong>Do</strong> use services as singletons within the same injector.\nUse them for sharing data and functionality.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n服務是在特性範圍或應用內共享方法的理想載體。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nServices are ideal for sharing methods across a feature area or an app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n服務是共享狀態性記憶體資料的理想載體。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nServices are ideal for sharing stateful in-memory data.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero.service.ts\" path=\"styleguide/src/07-01/app/heroes/shared/hero.service.ts\" region=\"example\">\nexport class HeroService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  getHeroes() {\n    return this.http.get&lt;Hero[]&gt;('api/heroes');\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"07-02\"></a></p>\n<h3 id=\"single-responsibility-1\" translation-result=\"on\">單一職責<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Single responsibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#single-responsibility-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-02\" translation-result=\"on\">風格 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 07-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>建立封裝在上下文中的單一職責的服務。</p><p translation-origin=\"off\"><strong>Do</strong> create services with a single responsibility that is encapsulated by its context.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>當服務成長到超出單一用途時，建立一個新服務。</p><p translation-origin=\"off\"><strong>Do</strong> create a new service once the service begins to exceed that singular purpose.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當服務有多個職責時，它很難被測試。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen a service has multiple responsibilities, it becomes difficult to test.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當某個服務有多個職責時，每個注入它的元件或服務都會承擔這些職責的全部開銷。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"07-03\"></a></p>\n<h3 id=\"providing-a-service\" translation-result=\"on\">提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Providing a service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#providing-a-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-03\" translation-result=\"on\">風格 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 07-03<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-03\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>在服務的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器上指定透過應用的根注入器提供服務。</p><p translation-origin=\"off\"><strong>Do</strong> provide a service with the application root injector in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator of the service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nAngular 注入器是層次化的。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe Angular injector is hierarchical.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當你在根注入器上提供該服務時，該服務例項在每個需要該服務的類中是共享的。當服務要共享方法或狀態時，這是最理想的選擇。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service. This is ideal when a service is sharing methods or state.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當你在服務的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 中註冊服務時，<a href=\"cli\">Angular CLI</a> 生產環境建構時使用的最佳化工具可以進行搖樹最佳化，從而移除那些你的應用中從未用過的服務。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen you register a service in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator of the service, optimization tools such as those used by the <a href=\"cli\">Angular CLI's</a> production builds can perform tree shaking and remove services that aren't used by your app.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當不同的兩個元件需要一個服務的不同的例項時，上面的方法這就不理想了。在這種情況下，對於需要嶄新和單獨服務例項的元件，最好在元件級提供服務。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThis is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.</p>\n\n</div>\n<code-example header=\"src/app/treeshaking/service.ts\" path=\"dependency-injection/src/app/tree-shaking/service.ts\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class Service {\n}\n\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"07-04\"></a></p>\n<h3 id=\"use-the-injectable-class-decorator\" translation-result=\"on\">使用 @Injectable() 類裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use the @Injectable() class decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#use-the-injectable-class-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-07-04\" translation-result=\"on\">風格 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 07-04<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-07-04\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>當使用型別作為令牌來注入服務的依賴時，使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 類裝飾器，而非 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> 引數裝飾器。</p><p translation-origin=\"off\"><strong>Do</strong> use the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> class decorator instead of the <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> parameter decorator when using types as tokens for the dependencies of a service.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\nAngular 的 DI 機制會根據服務的建構函式引數的宣告型別來解析服務的所有依賴。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe Angular Dependency Injection (DI) mechanism resolves a service's own\ndependencies based on the declared types of that service's constructor parameters.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n當服務只接受型別令牌相關的依賴時，比起在每個建構函式引數上使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code>，<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 的語法簡潔多了。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nWhen a service accepts only dependencies associated with type tokens, the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> syntax is much less verbose compared to using <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>()</code> on each individual constructor parameter.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.avoid.ts\" region=\"example\">\n/* avoid */\n\nexport class HeroArena {\n  constructor(\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(HeroService) private heroService: HeroService,\n      @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-arena.service.ts\" path=\"styleguide/src/07-04/app/heroes/shared/hero-arena.service.ts\" region=\"example\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroArena {\n  constructor(\n    private heroService: HeroService,\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) {}\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"data-services\" translation-result=\"on\">資料服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Data Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#data-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p><a id=\"08-01\"></a></p>\n<h3 id=\"talk-to-the-server-through-a-service\" translation-result=\"on\">透過服務與 Web 伺服器通訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Talk to the server through a service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#talk-to-the-server-through-a-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-08-01\" translation-result=\"on\">風格 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 08-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-08-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>把資料操作和與資料互動的邏輯重構到服務裡。</p><p translation-origin=\"off\"><strong>Do</strong> refactor logic for making data operations and interacting with data to a service.</p>\n\n</div>\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>讓資料服務來負責 XHR 呼叫、本地儲存、記憶體儲存或者其它資料操作。</p><p translation-origin=\"off\"><strong>Do</strong> make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n元件的職責是為檢視展示或收集資訊。它不應該關心如何獲取資料，它只需要知道向誰請求資料。把如何獲取資料的邏輯移動到資料服務裡，簡化了元件，讓其聚焦於檢視。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.</p>\n\n</div>\n<div class=\"s-why\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n在測試使用資料服務的元件時，可以讓資料呼叫更容易被測試（模擬或者真實）。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThis makes it easier to test (mock or real) the data calls when testing a component that uses a data service.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n資料管理的詳情，比如頭資訊、方法、快取、錯誤處理和重試邏輯，不是元件和其它的資料消費者應該關心的事情。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nThe details of data management, such as headers, HTTP methods,\ncaching, error handling, and retry logic, are irrelevant to components\nand other data consumers.</p>\n\n<p translation-result=\"on\">資料服務應該封裝這些細節。這樣，在服務內部修改細節，就不會影響到它的消費者。並且更容易透過實現一個模擬服務來對消費者進行測試。</p><p translation-origin=\"off\">A data service encapsulates these details.\nIt's easier to evolve these details inside the service without affecting its consumers.\nAnd it's easier to test the consumers with mock service implementations.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"lifecycle-hooks\" translation-result=\"on\">生命週期鉤子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Lifecycle hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用生命週期鉤子來介入到 Angular 暴露的重要事件裡。</p><p translation-origin=\"off\">Use Lifecycle hooks to tap into important events exposed by Angular.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"09-01\"></a></p>\n<h3 id=\"implement-lifecycle-hook-interfaces\" translation-result=\"on\">實現生命週期鉤子介面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Implement lifecycle hook interfaces<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#implement-lifecycle-hook-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-09-01\" translation-result=\"on\">風格 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style 09-01<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-09-01\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>實現生命週期鉤子介面。</p><p translation-origin=\"off\"><strong>Do</strong> implement the lifecycle hook interfaces.</p>\n\n</div>\n<div class=\"s-why-last\">\n<p translation-result=\"on\"><strong>為何</strong>？<br>\n如果使用強型別的方法簽名，編譯器和編輯器可以幫你揪出拼寫錯誤。</p><p translation-origin=\"off\"><strong>Why</strong>? <br>\nLifecycle interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.</p>\n\n</div>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent {\n  onInit() { // misspelled\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<code-example header=\"app/heroes/shared/hero-button/hero-button.component.ts\" path=\"styleguide/src/09-01/app/heroes/shared/hero-button/hero-button.component.ts\" region=\"example\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'toh-hero-button',\n  template: `&lt;button type=\"button\"&gt;OK&lt;/button&gt;`\n})\nexport class HeroButtonComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<h2 id=\"appendix\" translation-result=\"on\">附錄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Appendix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#appendix\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有用的 Angular 工具和小提示。</p><p translation-origin=\"off\">Useful tools and tips for Angular.</p>\n\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<p><a id=\"A-02\"></a></p>\n<h3 id=\"file-templates-and-snippets\" translation-result=\"on\">文件範本和程式碼片段<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">File templates and snippets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#file-templates-and-snippets\"><i class=\"material-icons\">link</i></a></h3>\n\n<h4 id=\"style-a-02\" translation-result=\"on\">風格 A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Style A-02<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/styleguide#style-a-02\"><i class=\"material-icons\">link</i></a></h4>\n\n<div class=\"s-rule do\">\n<p translation-result=\"on\"><strong>堅持</strong>使用檔案範本或程式碼片段來幫助實現一致的風格和模式。下面是為一些網路開發編輯器和 IDE 準備的範本和/或程式碼片段。</p><p translation-origin=\"off\"><strong>Do</strong> use file templates or snippets to help follow consistent styles and patterns.\nHere are templates and/or snippets for some of the web development editors and IDEs.</p>\n\n</div>\n<div class=\"s-rule consider\">\n<p translation-result=\"on\"><strong>考慮</strong>使用 <a href=\"https://code.visualstudio.com\">Visual Studio Code</a>的<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">程式碼片段</a> 來實施本風格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">snippets</a> for <a href=\"https://code.visualstudio.com\">Visual Studio Code</a> that follow these styles and guidelines.</p>\n\n<a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\">\n<img alt=\"Use Extension\" src=\"generated/images/guide/styleguide/use-extension.gif\" width=\"700\" height=\"429\">\n</a>\n<p translation-result=\"on\"><strong>考慮</strong>使用 <a href=\"https://atom.io\">Atom</a> 的<a href=\"https://atom.io/packages/angular-2-typescript-snippets\">程式碼片斷</a>來實施本風格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://atom.io/packages/angular-2-typescript-snippets\">snippets</a> for <a href=\"https://atom.io\">Atom</a> that follow these styles and guidelines.</p>\n\n<p translation-result=\"on\"><strong>考慮</strong>使用 <a href=\"http://www.sublimetext.com\">Sublime Text</a>的<a href=\"https://github.com/orizens/sublime-angular2-snippets\">程式碼片斷</a> 來實施本風格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://github.com/orizens/sublime-angular2-snippets\">snippets</a> for <a href=\"https://www.sublimetext.com\">Sublime Text</a> that follow these styles and guidelines.</p>\n\n<p translation-result=\"on\"><strong>考慮</strong>使用 <a href=\"http://www.vim.org\">Vim</a> 的<a href=\"https://github.com/mhartington/vim-angular2-snippets\">程式碼片斷</a>來實施本風格指南。</p><p translation-origin=\"off\"><strong>Consider</strong> using <a href=\"https://github.com/mhartington/vim-angular2-snippets\">snippets</a> for <a href=\"https://www.vim.org\">Vim</a> that follow these styles and guidelines.</p>\n\n</div>\n<p translation-result=\"on\"><a href=\"guide/styleguide#toc\">回到頂部</a></p><p translation-origin=\"off\"><a href=\"guide/styleguide#toc\">Back to top</a></p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Pipe\n - errors/NG0300\n - guide/doc-editing\n - guide/docs-style-guide\n - guide/glossary\n - guide/pipes\n - guide/pipes-custom-data-trans\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterModule\n - cli\n - guide/binding-syntax\n - guide/glossary#case-types\n - guide/styleguide#angular-coding-style-guide\n - guide/styleguide#angular-ngmodule-names\n - guide/styleguide#angular-ngmodule-命名\n - guide/styleguide#app-root-module\n - guide/styleguide#appendix\n - guide/styleguide#application-structure-and-ngmodules\n - guide/styleguide#avoid-aliasing-inputs-and-outputs\n - guide/styleguide#bootstrapping\n - guide/styleguide#component-custom-prefix\n - guide/styleguide#component-selectors\n - guide/styleguide#components\n - guide/styleguide#components-as-elements\n - guide/styleguide#data-services\n - guide/styleguide#decorate-input-and-output-properties\n - guide/styleguide#delegate-complex-component-logic-to-services\n - guide/styleguide#directive-custom-prefix\n - guide/styleguide#directive-selectors\n - guide/styleguide#directives\n - guide/styleguide#do-not-add-filtering-and-sorting-logic-to-pipes\n - guide/styleguide#dont-prefix-output-properties\n - guide/styleguide#end-to-end-e2e-test-file-names\n - guide/styleguide#extract-templates-and-styles-to-their-own-files\n - guide/styleguide#feature-modules\n - guide/styleguide#file-structure-conventions\n - guide/styleguide#file-templates-and-snippets\n - guide/styleguide#file-tree\n - guide/styleguide#flat\n - guide/styleguide#folders-by-feature-structure\n - guide/styleguide#general-naming-guidelines\n - guide/styleguide#hostlistener-和-hostbinding-裝飾器-vs-元件元資料-host\n - guide/styleguide#hostlistenerhostbinding-decorators-versus-host-metadata\n - guide/styleguide#identify\n - guide/styleguide#implement-lifecycle-hook-interfaces\n - guide/styleguide#initialize-inputs\n - guide/styleguide#lazy-loaded-folders\n - guide/styleguide#lifecycle-hooks\n - guide/styleguide#lift\n - guide/styleguide#locate\n - guide/styleguide#member-sequence\n - guide/styleguide#naming\n - guide/styleguide#never-directly-import-lazy-loaded-folders\n - guide/styleguide#overall-structural-guidelines\n - guide/styleguide#pipe-names\n - guide/styleguide#providing-a-service\n - guide/styleguide#put-presentation-logic-in-the-component-class\n - guide/styleguide#rule-of-one\n - guide/styleguide#separate-file-names-with-dots-and-dashes\n - guide/styleguide#service-names\n - guide/styleguide#services\n - guide/styleguide#services-are-singletons\n - guide/styleguide#shared-feature-module\n - guide/styleguide#single-responsibility\n - guide/styleguide#single-responsibility-1\n - guide/styleguide#small-functions\n - guide/styleguide#style-01-01\n - guide/styleguide#style-01-02\n - guide/styleguide#style-02-01\n - guide/styleguide#style-02-02\n - guide/styleguide#style-02-03\n - guide/styleguide#style-02-04\n - guide/styleguide#style-02-05\n - guide/styleguide#style-02-06\n - guide/styleguide#style-02-07\n - guide/styleguide#style-02-08\n - guide/styleguide#style-02-09\n - guide/styleguide#style-02-10\n - guide/styleguide#style-02-11\n - guide/styleguide#style-02-12\n - guide/styleguide#style-04-01\n - guide/styleguide#style-04-02\n - guide/styleguide#style-04-03\n - guide/styleguide#style-04-04\n - guide/styleguide#style-04-05\n - guide/styleguide#style-04-06\n - guide/styleguide#style-04-07\n - guide/styleguide#style-04-08\n - guide/styleguide#style-04-09\n - guide/styleguide#style-04-10\n - guide/styleguide#style-04-11\n - guide/styleguide#style-04-12\n - guide/styleguide#style-04-13\n - guide/styleguide#style-05-02\n - guide/styleguide#style-05-03\n - guide/styleguide#style-05-04\n - guide/styleguide#style-05-12\n - guide/styleguide#style-05-13\n - guide/styleguide#style-05-14\n - guide/styleguide#style-05-15\n - guide/styleguide#style-05-16\n - guide/styleguide#style-05-17\n - guide/styleguide#style-05-18\n - guide/styleguide#style-06-01\n - guide/styleguide#style-06-03\n - guide/styleguide#style-07-01\n - guide/styleguide#style-07-02\n - guide/styleguide#style-07-03\n - guide/styleguide#style-07-04\n - guide/styleguide#style-08-01\n - guide/styleguide#style-09-01\n - guide/styleguide#style-a-02\n - guide/styleguide#style-vocabulary\n - guide/styleguide#symbols-and-file-names\n - guide/styleguide#t-dry-try-to-be-dry\n - guide/styleguide#t-dry儘量不重複自己\n - guide/styleguide#talk-to-the-server-through-a-service\n - guide/styleguide#toc\n - guide/styleguide#unit-test-file-names\n - guide/styleguide#use-directives-to-enhance-an-element\n - guide/styleguide#use-the-injectable-class-decorator\n - guide/styleguide#不要往管道中新增過濾和排序邏輯\n - guide/styleguide#不要給-output-屬性加字首\n - guide/styleguide#為指令新增自訂字首\n - guide/styleguide#為元件新增自訂字首\n - guide/styleguide#使用-injectable-類裝飾器\n - guide/styleguide#使用-input-和-output-屬性裝飾器\n - guide/styleguide#使用指令來增強已有元素\n - guide/styleguide#使用點和橫槓來分隔檔名\n - guide/styleguide#共享特性模組\n - guide/styleguide#初始化輸入屬性\n - guide/styleguide#單一職責\n - guide/styleguide#單一職責-1\n - guide/styleguide#單一規則\n - guide/styleguide#單元測試檔名\n - guide/styleguide#命名\n - guide/styleguide#定位\n - guide/styleguide#實現生命週期鉤子介面\n - guide/styleguide#小函式\n - guide/styleguide#應用的根模組\n - guide/styleguide#應用程式結構與-ngmodule\n - guide/styleguide#引導\n - guide/styleguide#總體命名原則\n - guide/styleguide#總體結構的指導原則\n - guide/styleguide#延遲載入資料夾\n - guide/styleguide#成員順序\n - guide/styleguide#扁平\n - guide/styleguide#把範本和樣式提取到它們自己的檔案\n - guide/styleguide#把元件當做元素\n - guide/styleguide#把表現層邏輯放到元件類裡\n - guide/styleguide#把邏輯放到服務裡\n - guide/styleguide#指令\n - guide/styleguide#指令選擇器\n - guide/styleguide#按特性組織的目錄結構\n - guide/styleguide#提供服務\n - guide/styleguide#資料服務\n - guide/styleguide#檔案結構約定\n - guide/styleguide#文件範本和程式碼片段\n - guide/styleguide#服務\n - guide/styleguide#服務名\n - guide/styleguide#服務總是單例的\n - guide/styleguide#樣式-04-14\n - guide/styleguide#永遠不要直接匯入延遲載入的目錄\n - guide/styleguide#特性模組\n - guide/styleguide#生命週期鉤子\n - guide/styleguide#端到端e2e測試的檔名\n - guide/styleguide#符號名與檔名\n - guide/styleguide#管道名\n - guide/styleguide#元件\n - guide/styleguide#元件選擇器\n - guide/styleguide#識別\n - guide/styleguide#透過服務與-web-伺服器通訊\n - guide/styleguide#避免為-inputs-和-outputs-指定別名\n - guide/styleguide#附錄\n - guide/styleguide#風格-01-01\n - guide/styleguide#風格-01-02\n - guide/styleguide#風格-02-01\n - guide/styleguide#風格-02-02\n - guide/styleguide#風格-02-03\n - guide/styleguide#風格-02-04\n - guide/styleguide#風格-02-05\n - guide/styleguide#風格-02-06\n - guide/styleguide#風格-02-07\n - guide/styleguide#風格-02-08\n - guide/styleguide#風格-02-09\n - guide/styleguide#風格-02-10\n - guide/styleguide#風格-02-11\n - guide/styleguide#風格-02-12\n - guide/styleguide#風格-04-01\n - guide/styleguide#風格-04-02\n - guide/styleguide#風格-04-03\n - guide/styleguide#風格-04-04\n - guide/styleguide#風格-04-05\n - guide/styleguide#風格-04-06\n - guide/styleguide#風格-04-07\n - guide/styleguide#風格-04-08\n - guide/styleguide#風格-04-09\n - guide/styleguide#風格-04-10\n - guide/styleguide#風格-04-11\n - guide/styleguide#風格-04-13\n - guide/styleguide#風格-05-02\n - guide/styleguide#風格-05-03\n - guide/styleguide#風格-05-04\n - guide/styleguide#風格-05-12\n - guide/styleguide#風格-05-13\n - guide/styleguide#風格-05-14\n - guide/styleguide#風格-05-15\n - guide/styleguide#風格-05-16\n - guide/styleguide#風格-05-17\n - guide/styleguide#風格-05-18\n - guide/styleguide#風格-06-01\n - guide/styleguide#風格-06-03\n - guide/styleguide#風格-07-01\n - guide/styleguide#風格-07-02\n - guide/styleguide#風格-07-03\n - guide/styleguide#風格-07-04\n - guide/styleguide#風格-08-01\n - guide/styleguide#風格-09-01\n - guide/styleguide#風格-a-02\n - guide/styleguide#風格指南\n - guide/styleguide#風格指南的用詞\n - http://karma-runner.github.io\n - http://www.sublimetext.com\n - http://www.vim.org\n - https://atom.io\n - https://atom.io/packages/angular-2-typescript-snippets\n - https://code.visualstudio.com\n - https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\n - https://github.com/mhartington/vim-angular2-snippets\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/styleguide.md?message=docs%3A%20請簡述你的修改...\n - https://github.com/orizens/sublime-angular2-snippets\n - https://karma-runner.github.io\n - https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2\n - https://material.angular.cn/components/button/overview\n - https://material.angular.io/components/button/overview\n - https://wikipedia.org/wiki/Single_responsibility_principle\n - https://www.sublimetext.com\n - https://www.vim.org\n - https://www.w3.org/TR/custom-elements\n-->"}