{"id":"guide/libraries","title":"Overview of Angular libraries","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/libraries.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"overview-of-angular-libraries\" translation-result=\"on\">Angular 庫開發概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#overview-of-angular-libraries\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Overview of Angular libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#overview-of-angular-libraries\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">許多應用都需要解決一些同樣的常見問題，比如提供統一的使用者介面、渲染資料，以及允許資料輸入。開發人員可以為特定的領域建立一些通用解決方案，以便在不同的應用中重複使用。像這樣的解決方案就可以建構成 Angular <em>庫</em>，這些庫可以作為 <em>npm 套件</em>進行釋出和共享。</p><p translation-origin=\"off\">Many applications need to solve the same general problems, such as presenting a unified user interface, presenting data, and allowing data entry.\nDevelopers can create general solutions for particular domains that can be adapted for re-use in different applications.\nSuch a solution can be built as Angular <em>libraries</em> and these libraries can be published and shared as <em>npm packages</em>.</p>\n\n<p translation-result=\"on\">Angular 函式庫是一個 Angular <a href=\"guide/glossary#project\">專案</a>，它與應用的不同之處在於它本身是不能執行的。必須在某個應用中匯入庫並使用它。</p><p translation-origin=\"off\">An Angular library is an Angular <a href=\"guide/glossary#project\">project</a> that differs from an application in that it cannot run on its own.\nA library must be imported and used in an application.</p>\n\n<p translation-result=\"on\">這些庫擴充了 Angular 的基本功能。比如，要嚮應用新增<a href=\"guide/reactive-forms\">響應式表單</a>，請使用 <code>ng add @angular/forms</code> 新增該庫的 npm 套件，再從應用程式碼中，從 <code>@angular/forms</code> 庫中匯入 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。同樣，把 <a href=\"guide/service-worker-intro\">Service Worker</a> 庫新增到 Angular 應用中是將應用轉換為<a href=\"https://developers.google.com/web/progressive-web-apps\">漸進式 Web 應用程式</a>（PWA）的步驟之一。<a href=\"https://material.angular.cn\">Angular Material</a> 是一個大型通用庫的典範，它提供了一些複雜、可複用，兼具高度適應性的 UI 元件。</p><p translation-origin=\"off\">Libraries extend Angular's base features.\nFor example, to add <a href=\"guide/reactive-forms\">reactive forms</a> to an application, add the library package using <code>ng add @angular/forms</code>, then import the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> from the <code>@angular/forms</code> library in your application code.\nSimilarly, adding the <a href=\"guide/service-worker-intro\">service worker</a> library to an Angular application is one of the steps for turning an application into a <a href=\"https://developers.google.com/web/progressive-web-apps\">Progressive Web App</a> (PWA).\n<a href=\"https://material.angular.io\">Angular Material</a> is an example of a large, general-purpose library that provides sophisticated, reusable, and adaptable UI components.</p>\n\n<p translation-result=\"on\">任何一位應用開發者都可以使用這樣或那樣的函式庫，它們都已經由 Angular 團隊或第三方釋出為 npm 套件。參閱<a href=\"guide/using-libraries\">使用已釋出的函式庫</a>。</p><p translation-origin=\"off\">Any application developer can use these and other libraries that have been published as npm packages by the Angular team or by third parties.\nSee <a href=\"guide/using-libraries\">Using Published Libraries</a>.</p>\n\n<h2 id=\"creating-libraries\" translation-result=\"on\">建立庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#creating-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Creating libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/libraries#creating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果已經開發出了適合複用的功能，你就可以建立自己的函式庫。這些庫可以在你的工作區中本地使用，也可以把它們釋出成 <a href=\"guide/npm-packages\">npm 套件</a>，共享給其它專案或其它 Angular 開發者。這些套件可以釋出到 npm 伺服器、一個私有的 npm 企業版伺服器，或一個支援 npm 套件的私有套件管理系統。參閱<a href=\"guide/creating-libraries\">建立庫</a>。</p><p translation-origin=\"off\">If you have developed features that are suitable for reuse, you can create your own libraries.\nThese libraries can be used locally in your workspace, or you can publish them as <a href=\"guide/npm-packages\">npm packages</a> to share with other projects or other Angular developers.\nThese packages can be published to the npm registry, a private npm Enterprise registry, or a private package management system that supports npm packages.\nSee <a href=\"guide/creating-libraries\">Creating Libraries</a>.</p>\n\n<p translation-result=\"on\">是否把一些功能打包成函式庫是一種架構決策。做出比較以決定一個功能應該做成元件還是服務，或決定一個元件的範圍該有多大。</p><p translation-origin=\"off\">Deciding to package features as a library is an architectural decision. It is comparable to deciding whether a feature is a component or a service, or deciding on the scope of a component.</p>\n\n<p translation-result=\"on\">把功能打包成庫會強迫庫中的工件與應用的業務邏輯分離。這有助於避免各種不良實踐或架構失誤，這些失誤會導致將來很難解耦和複用程式碼。</p><p translation-origin=\"off\">Packaging features as a library forces the artifacts in the library to be decoupled from the application's business logic.\nThis can help to avoid various bad practices or architecture mistakes that can make it difficult to decouple and reuse code in the future.</p>\n\n<p translation-result=\"on\">把程式碼放到一個單獨的函式庫中比簡單地把所有內容都放在一個應用中要複雜得多。它需要更多的時間投入，並且需要管理、維護和更新這個庫。不過，當把該庫用在多個應用中時，這種複雜性就會得到回報。</p><p translation-origin=\"off\">Putting code into a separate library is more complex than simply putting everything in one application.\nIt requires more of an investment in time and thought for managing, maintaining, and updating the library.\nThis complexity can pay off when the library is being used in multiple applications.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n這裡所說的函式庫是為了供 Angular 應用使用的。\n如果想把 Angular 的功能新增到非 Angular 應用中，可以使用 <a href=\"guide/elements\">Angular 自訂元素</a>。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nLibraries are intended to be used by Angular applications.\nTo add Angular features to non-Angular web applications, use <a href=\"guide/elements\">Angular custom elements</a>.</p>\n\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n-->\n<!-- links from this doc:\n - api/forms/ReactiveFormsModule\n - guide/creating-libraries\n - guide/elements\n - guide/glossary#project\n - guide/libraries#angular-庫開發概述\n - guide/libraries#creating-libraries\n - guide/libraries#overview-of-angular-libraries\n - guide/libraries#建立庫\n - guide/npm-packages\n - guide/reactive-forms\n - guide/service-worker-intro\n - guide/using-libraries\n - https://developers.google.com/web/progressive-web-apps\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/libraries.md?message=docs%3A%20請簡述你的修改...\n - https://material.angular.cn\n - https://material.angular.io\n-->"}