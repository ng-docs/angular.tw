{"id":"guide/dependency-injection","title":"Understanding dependency injection","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dependency-injection.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"understanding-dependency-injection\" translation-result=\"on\">瞭解依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#understanding-dependency-injection\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Understanding dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#understanding-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">依賴注入（DI）是 Angular 中的基本概念之一。DI 被裝配進 Angular 框架，並允許帶有 Angular 裝飾器的類（例如元件、指令、管道和可注入物件）配置它們所需的依賴項。</p><p translation-origin=\"off\">Dependency injection, or DI, is one of the fundamental concepts in Angular. DI is wired into the Angular framework and allows classes with Angular decorators, such as Components, Directives, Pipes, and Injectables, to configure dependencies that they need. </p>\n\n<p translation-result=\"on\">DI 系統中存在兩個主要角色：依賴使用者和依賴提供者。</p><p translation-origin=\"off\">Two main roles exist in the DI system: dependency consumer and dependency provider. </p>\n\n<p translation-result=\"on\">Angular 使用一種稱為 <a href=\"guide/glossary#injector\">Injector</a> 的抽象來促進依賴消費者和依賴提供者之間的互動。當有人請求依賴項時，注入器會檢查其登錄檔以檢視那裡是否已有可用的例項。如果沒有，就會建立一個新例項並將其儲存在登錄檔中。Angular 會在應用的引導過程中建立一個應用範圍的注入器（也稱為“根”注入器），並會根據需要建立任何其它注入器。在大多數情況下，你都不需要手動建立注入器，但應該知道有這樣一個連線提供者和消費者的層次。</p><p translation-origin=\"off\">Angular facilitates the interaction between dependency consumers and dependency providers using an abstraction called <a href=\"guide/glossary#injector\">Injector</a>. When a dependency is requested, the injector checks its registry to see if there is an instance already available there. If not, a new instance is created and stored in the registry. Angular creates an application-wide injector (also known as \"root\" injector) during the application bootstrap process, as well as any other injectors as needed. In most cases you don't need to manually create injectors, but you should know that there is a layer that connects providers and consumers.</p>\n\n<p translation-result=\"on\">本主題介紹了某個類如何作為依賴項的基本場景。Angular 還允許你使用函式、物件、基本型別（例如字串或 Boolean）或任何其他型別作為依賴項。有關更多資訊，請參閱<a href=\"guide/dependency-injection-providers\">依賴提供者</a>。</p><p translation-origin=\"off\">This topic covers basic scenarios of how a class can act as a dependency. Angular also allows you to use functions, objects, primitive types such as string or Boolean, or any other types as dependencies. For more information, see <a href=\"guide/dependency-injection-providers\">Dependency providers</a>.</p>\n\n<h2 id=\"providing-dependency\" translation-result=\"on\">提供依賴項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#providing-dependency\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Providing dependency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#providing-dependency\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">假設有一個名為 HeroService 的類需要用作元件中的依賴項。</p><p translation-origin=\"off\">Imagine there is a class called HeroService that needs to act as a dependency in a component.</p>\n\n<p translation-result=\"on\">第一步是新增 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器以表明此類可以被注入。</p><p translation-origin=\"off\">The first step is to add the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator to show that the class can be injected.</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nclass HeroService {}\n</code-example>\n<p translation-result=\"on\">下一步是提供它，以便讓其在 DI 中可用。可以在多種地方提供依賴項：</p><p translation-origin=\"off\">The next step is to make it available in the DI by providing it.  A dependency can be provided in multiple places:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在元件級別，使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>providers</code> 欄位。在這種情況下，<code>HeroService</code> 將可用於此元件的所有例項以及它的範本中使用的其他元件和指令。例如：</p><p translation-origin=\"off\">At the Component level, using the <code>providers</code> field of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator. In this case the <code>HeroService</code> becomes available to all instances of this component and other components and directives used in the template. For example:</p>\n\n</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-list',\n  template: '...',\n  providers: [HeroService]\n})\nclass HeroListComponent {}\n</code-example>\n<p translation-result=\"on\">當你在元件級別註冊提供者時，該元件的每個新例項都會獲得一個新的服務例項。</p><p translation-origin=\"off\">When you register a provider at the component level, you get a new instance of the service with each new instance of that component.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在 NgModule 級別，要使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器的 <code>providers</code> 欄位。在這種情況下，<code>HeroService</code> 可用於此 NgModule 或與本模組位於同一個 ModuleInjector 的其它模組中宣告的所有元件、指令和管道。當你向特定的 NgModule 註冊提供者時，同一個服務例項可用於該 NgModule 中的所有元件、指令和管道。要理解所有邊緣情況，參見<a href=\"guide/hierarchical-dependency-injection\">多級注入器</a>。例如：</p><p translation-origin=\"off\">At the NgModule level, using the <code>providers</code> field of the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator. In this scenario, the <code>HeroService</code> is available to all components, directives, and pipes declared in this NgModule or other NgModule which is within the same ModuleInjector applicable for this NgModule. When you register a provider with a specific NgModule, the same instance of a service is available to all applicable components, directives and pipes.\nTo understand all edge-cases, see <a href=\"guide/hierarchical-dependency-injection\">Hierarchical injectors</a>. For example:</p>\n\n</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [HeroListComponent]\n  providers: [HeroService]\n})\nclass HeroListModule {}\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\">在應用程式根級別，允許將其注入應用程式中的其他類別。這可以透過將 <code>providedIn: 'root'</code> 欄位新增到 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器來實現：</p><p translation-origin=\"off\">At the application root level, which allows injecting it into other classes in the application. This can be done by adding the <code>providedIn: 'root'</code> field to the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator:</p>\n\n</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nclass HeroService {}\n</code-example>\n<p translation-result=\"on\">當你在根級別提供服務時，Angular 會建立一個 <code>HeroService</code> 的共享例項，並將其注入到任何需要它的類中。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊提供者還允許 Angular 透過從已編譯的應用程式中刪除沒用到的服務來最佳化應用程式，這個過程稱為搖樹最佳化（tree-shaking）。</p><p translation-origin=\"off\">When you provide the service at the root level, Angular creates a single, shared instance of the <code>HeroService</code> and injects it into any class that asks for it. Registering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> metadata also allows Angular to optimize an app by removing the service from the compiled application if it isn't used, a process known as tree-shaking.</p>\n\n<h2 id=\"injecting-a-dependency\" translation-result=\"on\">注入依賴項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-a-dependency\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Injecting a dependency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-a-dependency\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">注入依賴項的最常見方法是在類別的建構函式中宣告它。當 Angular 建立元件、指令或管道類別的新例項時，它會透過檢視建構函式的引數型別來確定該類需要哪些服務或其他依賴項。例如，如果 <code>HeroListComponent</code> 要用 <code>HeroService</code>，則建構函式可以如下所示：</p><p translation-origin=\"off\">The most common way to inject a dependency is to declare it in a class constructor. When Angular creates a new instance of a component, directive, or pipe class, it determines which services or other dependencies that class needs by looking at the constructor parameter types. For example, if the <code>HeroListComponent</code> needs the <code>HeroService</code>, the constructor can look like this:</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass HeroListComponent {\n  constructor(private service: HeroService) {}\n}\n</code-example>\n<p translation-result=\"on\">當 Angular 發現一個元件依賴於一項服務時，它會首先檢查注入器中是否已有該服務的任何現有例項。如果所請求的服務例項尚不存在，注入器就會使用註冊的提供者建立一個，並在將服務返回給 Angular 之前將其新增到注入器中。</p><p translation-origin=\"off\">When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector creates one using the registered provider, and adds it to the injector before returning the service to Angular.</p>\n\n<p translation-result=\"on\">當所有請求的服務都已解析並返回時，Angular 就可以用這些服務例項為引數，呼叫該元件的建構函式。</p><p translation-origin=\"off\">When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/architecture/injector-injects.png\" alt=\"Service\" class=\"left\" width=\"479\" height=\"218\">\n</div>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/creating-injectable-service\">建立和注入服務</a></p><p translation-origin=\"off\"><a href=\"guide/creating-injectable-service\">Creating and injecting services</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-in-action\">依賴注入實戰</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-in-action\">Dependency Injection in Action</a></p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：5/16/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/Inject\n - api/core/Injectable\n - api/core/Optional\n - api/core/Provider\n - api/core/StaticClassProvider\n - api/core/TypeProvider\n - api/core/ValueProvider\n - errors/NG0201\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/attribute-directives\n - guide/dependency-injection-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/glossary\n - guide/http\n - guide/http-intercept-requests-and-responses\n - guide/ngmodule-api\n - guide/providers\n - guide/testing-services\n - guide/understanding-angular-overview\n - guide/upgrade\n - guide/what-is-angular\n - tutorial/tour-of-heroes/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - guide/creating-injectable-service\n - guide/dependency-injection#injecting-a-dependency\n - guide/dependency-injection#providing-dependency\n - guide/dependency-injection#understanding-dependency-injection\n - guide/dependency-injection#whats-next\n - guide/dependency-injection#下一步呢\n - guide/dependency-injection#瞭解依賴注入\n - guide/dependency-injection#提供依賴項\n - guide/dependency-injection#注入依賴項\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/glossary#injector\n - guide/hierarchical-dependency-injection\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dependency-injection.md?message=docs%3A%20請簡述你的修改...\n-->"}