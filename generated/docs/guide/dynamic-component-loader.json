{"id":"guide/dynamic-component-loader","title":"Dynamic component loader","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"dynamic-component-loader\" translation-result=\"on\">動態元件載入器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Dynamic component loader<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"alert is-warning\">\n<p>譯註：本頁講的是一個用於顯示廣告的範例，而部分廣告攔截器外掛，比如 Chrome 的 AdGuard，可能會破壞其工作邏輯，因此，請在本頁關閉那些外掛。</p>\n</div>\n<p translation-result=\"on\">元件的範本不會永遠是固定的。應用可能會需要在執行期間載入一些新的元件。這本烹飪書為你展示如何動態新增元件。</p><p translation-origin=\"off\">Component templates are not always fixed.\nAn application might need to load new components at runtime.\nThis cookbook shows you how to add components dynamically.</p>\n\n<p translation-result=\"on\">到<live-example name=\"dynamic-component-loader\"></live-example>檢視本烹飪書的原始碼。</p><p translation-origin=\"off\">See the <live-example name=\"dynamic-component-loader\"></live-example> of the code in this cookbook.</p>\n\n<p><a id=\"dynamic-loading\"></a></p>\n<h2 id=\"dynamic-component-loading\" translation-result=\"on\">動態元件載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Dynamic component loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的例子展示瞭如何建構動態廣告條。</p><p translation-origin=\"off\">The following example shows how to build a dynamic ad banner.</p>\n\n<p translation-result=\"on\">英雄管理局正在計劃一個廣告活動，要在廣告條中顯示一系列不同的廣告。幾個不同的小組可能會頻繁加入新的廣告元件。再用只支援靜態元件結構的範本顯然是不現實的。</p><p translation-origin=\"off\">The hero agency is planning an ad campaign with several different ads cycling through the banner.\nNew ad components are added frequently by several different teams.\nThis makes it impractical to use a template with a static component structure.</p>\n\n<p translation-result=\"on\">你需要一種新的元件載入方式，它不需要在廣告條元件的範本中參考固定的元件。</p><p translation-origin=\"off\">Instead, you need a way to load a new component without a fixed reference to the component in the ad banner's template.</p>\n\n<p translation-result=\"on\">Angular 自帶的 API 就能支援動態載入元件。</p><p translation-origin=\"off\">Angular comes with its own API for loading components dynamically.</p>\n\n<p><a id=\"directive\"></a></p>\n<h2 id=\"the-anchor-directive\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-anchor-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The anchor directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-anchor-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在新增元件之前，先要定義一個錨點來告訴 Angular 要把元件插入到什麼地方。</p><p translation-origin=\"off\">Before adding components, you have to define an anchor point to tell Angular where to insert components.</p>\n\n<p translation-result=\"on\">廣告條使用一個名叫 <code>AdDirective</code> 的輔助指令來在範本中標記出有效的插入點。</p><p translation-origin=\"off\">The ad banner uses a helper directive called <code>AdDirective</code> to mark valid insertion points in the template.</p>\n\n<code-example header=\"src/app/ad.directive.ts\" path=\"dynamic-component-loader/src/app/ad.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[adHost]',\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n}\n\n\n\n</code-example>\n<p translation-result=\"on\"><code>AdDirective</code> 注入了 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 來獲取對容器檢視的存取權，這個容器就是那些動態加入的元件的宿主。</p><p translation-origin=\"off\"><code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> to gain access to the view container of the element that will host the dynamically added component.</p>\n\n<p translation-result=\"on\">在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 裝飾器中，要注意選擇器的名稱：<code>ad-host</code>，它就是你將應用到元素上的指令。下一節會展示該如何做。</p><p translation-origin=\"off\">In the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator, notice the selector name, <code>adHost</code>; that's what you use to apply the directive to the element.\nThe next section shows you how.</p>\n\n<p><a id=\"loading-components\"></a></p>\n<h2 id=\"loading-components\" translation-result=\"on\">載入元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#loading-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Loading components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#loading-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">廣告條的大部分實現程式碼都在 <code>ad-banner.component.ts</code> 中。為了讓這個例子簡單點，HTML 被直接放在了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的 <code>template</code> 屬性中。</p><p translation-origin=\"off\">Most of the ad banner implementation is in <code>ad-banner.component.ts</code>.\nTo keep things simple in this example, the HTML is in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator's <code>template</code> property as a template string.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素就是剛才製作的指令將應用到的地方。要應用 <code>AdDirective</code>，回憶一下來自 <code>ad.directive.ts</code> 的選擇器 <code>ad-host</code>。把它應用到 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>（不用帶方括號）。這下，Angular 就知道該把元件動態載入到哪裡了。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element is where you apply the directive you just made.\nTo apply the <code>AdDirective</code>, recall the selector from <code>ad.directive.ts</code>, <code>[adHost]</code>.\nApply that to <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> without the square brackets.\nNow Angular knows where to dynamically load components.</p>\n\n<code-example header=\"src/app/ad-banner.component.ts (template)\" path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"ad-host\">\ntemplate: `\n  &lt;div class=\"ad-banner-example\"&gt;\n    &lt;h3&gt;Advertisements&lt;/h3&gt;\n    &lt;ng-template adHost&gt;&lt;/ng-template&gt;\n  &lt;/div&gt;\n`\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 元素是動態載入元件的最佳選擇，因為它不會渲染任何額外的輸出。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> element is a good choice for dynamic components because it doesn't render any additional output.</p>\n\n<p><a id=\"resolving-components\"></a></p>\n<h2 id=\"resolving-components\" translation-result=\"on\">解析元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#resolving-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Resolving components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#resolving-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">深入看看 <code>ad-banner.component.ts</code> 中的方法。</p><p translation-origin=\"off\">Take a closer look at the methods in <code>ad-banner.component.ts</code>.</p>\n\n<p translation-result=\"on\"><code>AdBannerComponent</code> 接收一個 <code>AdItem</code> 物件的陣列作為輸入，它最終來自 <code>AdService</code>。<code>AdItem</code> 物件指定要載入的元件類，以及繫結到該元件上的任意資料。<code>AdService</code> 可以返回廣告活動中的那些廣告。</p><p translation-origin=\"off\"><code>AdBannerComponent</code> takes an array of <code>AdItem</code> objects as input, which ultimately comes from <code>AdService</code>.\n<code>AdItem</code> objects specify the type of component to load and any data to bind to the component.<code>AdService</code> returns the actual ads making up the ad campaign.</p>\n\n<p translation-result=\"on\">給 <code>AdBannerComponent</code> 傳入一個元件陣列可以在範本中放入一個廣告的動態列表，而不用寫死在範本中。</p><p translation-origin=\"off\">Passing an array of components to <code>AdBannerComponent</code> allows for a dynamic list of ads without static elements in the template.</p>\n\n<p translation-result=\"on\">透過 <code>getAds()</code> 方法，<code>AdBannerComponent</code> 可以迴圈遍歷 <code>AdItems</code> 的陣列，並且每三秒呼叫一次 <code>loadComponent()</code> 來載入新元件。</p><p translation-origin=\"off\">With its <code>getAds()</code> method, <code>AdBannerComponent</code> cycles through the array of <code>AdItems</code> and loads a new component every 3 seconds by calling <code>loadComponent()</code>.</p>\n\n<code-example header=\"src/app/ad-banner.component.ts (excerpt)\" path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"class\">\nexport class AdBannerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() ads: AdItem[] = [];\n\n  currentAdIndex = -1;\n\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(AdDirective, {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) adHost!: AdDirective;\n\n  private clearTimer: VoidFunction | undefined;\n\n  ngOnInit(): void {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    this.clearTimer?.();\n  }\n\n  loadComponent() {\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    const adItem = this.ads[this.currentAdIndex];\n\n    const viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent&lt;AdComponent&gt;(adItem.component);\n    componentRef.instance.data = adItem.data;\n  }\n\n  getAds() {\n    const interval = setInterval(() =&gt; {\n      this.loadComponent();\n    }, 3000);\n    this.clearTimer = () =&gt; clearInterval(interval);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">這裡的 <code>loadComponent()</code> 方法很重要。來一步步看看。首先，它選取了一個廣告。</p><p translation-origin=\"off\">The <code>loadComponent()</code> method is doing a lot of the heavy lifting here.\nTake it step by step.\nFirst, it picks an ad.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong><code>loadComponent()</code> 如何選擇廣告</strong></p><p translation-origin=\"off\"><strong>How <code>loadComponent()</code> chooses an ad</strong></p>\n\n<p translation-result=\"on\"><code>loadComponent()</code> 方法使用某種演算法選擇了一個廣告。</p><p translation-origin=\"off\">The <code>loadComponent()</code> method chooses an ad using some math.</p>\n\n<p translation-result=\"on\">（譯註：迴圈選取演算法）首先，它把 <code>currentAdIndex</code> 遞增一，然後用它除以 <code>AdItem</code> 陣列長度的<em>餘數</em>作為新的 <code>currentAdIndex</code> 的值，最後用這個值來從陣列中選取一個 <code>adItem</code>。</p><p translation-origin=\"off\">First, it sets the <code>currentAdIndex</code> by taking whatever it currently is plus one, dividing that by the length of the <code>AdItem</code> array, and using the <em>remainder</em> as the new <code>currentAdIndex</code> value.\nThen, it uses that value to select an <code>adItem</code> from the array.</p>\n\n</div>\n<p translation-result=\"on\">接下來，你要把 <code>viewContainerRef</code> 指向這個元件的現有例項。但你怎麼才能找到這個例項呢？ 很簡單，因為它指向了 <code>adHost</code>，而這個 <code>adHost</code> 就是你以前設定過的指令，用來告訴 Angular 該把動態元件插入到什麼位置。</p><p translation-origin=\"off\">Next, you're targeting the <code>viewContainerRef</code> that exists on this specific instance of the component.\nHow do you know it's this specific instance?\nBecause it's referring to <code>adHost</code>, and <code>adHost</code> is the directive you set up earlier to tell Angular where to insert dynamic components.</p>\n\n<p translation-result=\"on\">回憶一下，<code>AdDirective</code> 曾在它的建構函式中注入了一個 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>。因此這個指令可以存取到這個你打算用作動態元件宿主的元素。</p><p translation-origin=\"off\">As you may recall, <code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> into its constructor.\nThis is how the directive accesses the element that you want to use to host the dynamic component.</p>\n\n<p translation-result=\"on\">要把這個元件新增到範本中，你可以呼叫 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> 的 <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>()</code>。</p><p translation-origin=\"off\">To add the component to the template, you call <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>()</code> on <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>()</code> 方法返回一個參考，指向這個剛剛載入的元件。使用這個參考就可以與該元件進行互動，比如設定它的屬性或呼叫它的方法。</p><p translation-origin=\"off\">The <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a>()</code> method returns a reference to the loaded component.\nUse that reference to interact with the component by assigning to its properties or calling its methods.</p>\n\n<p><a id=\"common-interface\"></a></p>\n<h2 id=\"the-adcomponent-interface\" translation-result=\"on\"><code>AdComponent</code> 介面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-adcomponent-interface\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The <code>AdComponent</code> interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-adcomponent-interface\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在廣告條中，所有元件都實現了一個公共介面 <code>AdComponent</code>，它定義了一個標準化的 API，來把資料傳給元件。</p><p translation-origin=\"off\">In the ad banner, all components implement a common <code>AdComponent</code> interface to standardize the API for passing data to the components.</p>\n\n<p translation-result=\"on\">下面就是兩個範例元件及其 <code>AdComponent</code> 介面：</p><p translation-origin=\"off\">Here are two sample components and the <code>AdComponent</code> interface for reference:</p>\n\n<code-tabs>\n    <code-pane header=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { AdComponent } from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;div class=\"job-ad\"&gt;\n      &lt;h4&gt;{{data.headline}}&lt;/h4&gt;\n      {{data.body}}\n    &lt;/div&gt;\n  `\n})\nexport class HeroJobAdComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n}\n\n\n\n</code-pane>\n    <code-pane header=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { AdComponent } from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;div class=\"hero-profile\"&gt;\n      &lt;h3&gt;Featured Hero Profile&lt;/h3&gt;\n      &lt;h4&gt;{{data.name}}&lt;/h4&gt;\n\n      &lt;p&gt;{{data.bio}}&lt;/p&gt;\n\n      &lt;strong&gt;Hire this hero today!&lt;/strong&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroProfileComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n}\n\n\n\n\n</code-pane>\n    <code-pane header=\"ad.component.ts\" path=\"dynamic-component-loader/src/app/ad.component.ts\">\nexport interface AdComponent {\n  data: any;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"final-ad-baner\"></a></p>\n<h2 id=\"final-ad-banner\" translation-result=\"on\">最終的廣告欄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Final ad banner<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">最終的廣告欄是這樣的：</p><p translation-origin=\"off\">The final ad banner looks like this:</p>\n\n<div class=\"lightbox\">\n<img alt=\"Ads\" src=\"generated/images/guide/dynamic-component-loader/ads-example.gif\" width=\"480\" height=\"222\">\n</div>\n<p translation-result=\"on\">參閱<live-example name=\"dynamic-component-loader\"></live-example>.</p><p translation-origin=\"off\">See the <live-example name=\"dynamic-component-loader\"></live-example>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/ComponentFactory\n - guide/elements\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Directive\n - api/core/Input\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/core/createComponent\n - api/core/ng-template\n - api/upgrade/static\n - guide/dynamic-component-loader#adcomponent-介面\n - guide/dynamic-component-loader#dynamic-component-loader\n - guide/dynamic-component-loader#dynamic-component-loading\n - guide/dynamic-component-loader#final-ad-banner\n - guide/dynamic-component-loader#loading-components\n - guide/dynamic-component-loader#resolving-components\n - guide/dynamic-component-loader#the-adcomponent-interface\n - guide/dynamic-component-loader#the-anchor-directive\n - guide/dynamic-component-loader#載入元件\n - guide/dynamic-component-loader#動態元件載入\n - guide/dynamic-component-loader#動態元件載入器\n - guide/dynamic-component-loader#指令\n - guide/dynamic-component-loader#最終的廣告欄\n - guide/dynamic-component-loader#解析元件\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20請簡述你的修改...\n-->"}