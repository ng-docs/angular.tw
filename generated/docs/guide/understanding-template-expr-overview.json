{"id":"guide/understanding-template-expr-overview","title":"Understanding template expressions","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/understanding-template-expr-overview.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"understanding-template-expressions\" translation-result=\"on\">瞭解範本表示式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#understanding-template-expressions\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Understanding template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#understanding-template-expressions\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本主題探討了 Angular 文字插值的某些方面。</p><p translation-origin=\"off\">This topic explores some aspects of Angular text interpolation.</p>\n\n<h2 id=\"syntax\" translation-result=\"on\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本表示式和 JavaScript 很相似。許多 JavaScript 表示式都是合法的範本表示式，但以下情況除外。</p><p translation-origin=\"off\">Template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with the following exceptions.</p>\n\n<p translation-result=\"on\">你不能使用那些具有或可能引發副作用的 JavaScript 表示式，包括：</p><p translation-origin=\"off\">You can't use JavaScript expressions that have or promote side effects, including:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">賦值（<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>）</p><p translation-origin=\"off\">Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">運算子，比如 <code>new</code>、<code>typeof</code> 或 <code>instanceof</code> 等。</p><p translation-origin=\"off\">Operators such as <code>new</code>, <code>typeof</code>, or <code>instanceof</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">連結表示式<code>;</code>或<code>，</code></p><p translation-origin=\"off\">Chaining expressions with <code>;</code> or <code>,</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">自增和自減運算子：<code>++</code> 和 <code>--</code></p><p translation-origin=\"off\">The increment and decrement operators <code>++</code> and <code>--</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">一些 ES2015+ 版本的運算子</p><p translation-origin=\"off\">Some of the ES2015+ operators</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">和 JavaScript 語法的其它顯著差異包括：</p><p translation-origin=\"off\">Other notable differences from JavaScript syntax include:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">不支援位運算，比如 <code>|</code> 和 <code>&amp;</code></p><p translation-origin=\"off\">No support for the bitwise operators such as <code>|</code> and <code>&amp;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">新的<a href=\"guide/template-expression-operators\">範本表示式運算子</a>，比如 <code>|</code>，<code>?.</code> 和 <code>!</code></p><p translation-origin=\"off\">New <a href=\"guide/template-expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></p>\n\n</li>\n</ul>\n<h2 id=\"expression-context\" translation-result=\"on\">表示式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">插值表示式具有上下文 —— 表示式所屬應用中的特定部分。通常，此上下文就是元件例項。</p><p translation-origin=\"off\">Interpolated expressions have a context—a particular part of the application to which the expression belongs.\nTypically, this context is the component instance.</p>\n\n<p translation-result=\"on\">在下面的程式碼片段中，表示式 <code>recommended</code> 和 <code>itemImageUrl2</code> 表示式所參考的都是 <code>AppComponent</code> 中的屬性。</p><p translation-origin=\"off\">In the following snippet, the expression <code>recommended</code> and the expression <code>itemImageUrl2</code> refer to properties of the <code>AppComponent</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&lt;h4&gt;{{recommended}}&lt;/h4&gt;\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> alt=\"item 2\" [src]=\"itemImageUrl2\"&gt;\n\n</code-example>\n<p translation-result=\"on\">表示式還可以參考<em>範本上下文</em>的屬性，例如<a href=\"guide/structural-directives#shorthand\">範本輸入變數</a>或<a href=\"guide/template-reference-variables\">範本參考變數</a>。</p><p translation-origin=\"off\">An expression can also refer to properties of the <em>template's</em> context such as a <a href=\"guide/structural-directives#shorthand\">template input variable</a> or a <a href=\"guide/template-reference-variables\">template reference variable</a>.</p>\n\n<p translation-result=\"on\">下面的例子就使用了範本輸入變數 <code>customer</code>。</p><p translation-origin=\"off\">The following example uses a template input variable of <code>customer</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{customer.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">接下來的例子使用了範本參考變數 <code>#customerInput</code>。</p><p translation-origin=\"off\">This next example features a template reference variable, <code>#customerInput</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&lt;label&gt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &lt;input #customerInput&gt;{{customerInput.value}}\n&lt;/label&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">範本表示式不能參考全域名稱空間中的任何東西，比如 <code>window</code> 或 <code>document</code>。它們也不能呼叫 <code>console.log</code> 或 <code>Math.max</code>。它們只能參考表示式上下文中的成員。</p><p translation-origin=\"off\">Template expressions cannot refer to anything in the global namespace, except <code>undefined</code>.\nThey can't refer to <code>window</code> or <code>document</code>.\nAdditionally, they can't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing members of the expression context.</p>\n\n</div>\n<h3 id=\"preventing-name-collisions\" translation-result=\"on\">防止命名衝突<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Preventing name collisions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">表示式求值的上下文是範本變數、指令的上下文物件（如果有的話）以及元件成員的並集。如果所參考的名稱在多個名稱空間都有，則 Angular 將應用以下邏輯來確定上下文：</p><p translation-origin=\"off\">The context against which an expression evaluates is the union of the template variables, the directive's context object—if it has one—and the component's members.\nIf you reference a name that belongs to more than one of these namespaces, Angular applies the following logic to determine the context:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">範本變數的名稱。</p><p translation-origin=\"off\">The template variable name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">指令上下文中的名稱。</p><p translation-origin=\"off\">A name in the directive's context.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">元件成員的名稱。</p><p translation-origin=\"off\">The component's member names.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">為避免變數遮蓋另一個上下文中的變數，請保持變數名稱唯一。在以下範例中，<code>AppComponent</code> 範本在問候 <code>customer</code> Padma。</p><p translation-origin=\"off\">To avoid variables shadowing variables in another context, keep variable names unique.\nIn the following example, the <code>AppComponent</code> template greets the <code>customer</code>, Padma.</p>\n\n<p translation-result=\"on\">然後，一個 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出了 <code>customers</code> 陣列中的每個 <code>customer</code>。</p><p translation-origin=\"off\">An <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> then lists each <code>customer</code> in the <code>customers</code> array.</p>\n\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &lt;div&gt;\n      &lt;!-- Hello, Padma --&gt;\n      &lt;h1&gt;Hello, {{customer}}&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;!-- Ebony and Chiho in a list--&gt;\n        &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\"&gt;{{ customer.value }}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `\n})\nclass AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的 <code>customer</code> 處於一個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 的上下文中，所以它指向的是 <code>customers</code> 陣列中的 <code>customer</code>，在這裡是 Ebony 和 Chiho。此列表中不包含 Padma，因為那個 <code>customer</code> 位於 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 以外的另一個上下文中。反之，<code>&lt;h1&gt;</code> 中的 <code>customer</code> 不包括 Ebony 或 Chiho，因為該 <code>customer</code> 的上下文是元件類，而這個類中 <code>customer</code> 的值是 Padma。</p><p translation-origin=\"off\">The <code>customer</code> within the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is in the context of an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> and so refers to the <code>customer</code> in the <code>customers</code> array, in this case Ebony and Chiho.\nThis list does not feature Padma because <code>customer</code> outside of the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is in a different context.\nConversely, <code>customer</code> in the <code>&lt;h1&gt;</code> doesn't include Ebony or Chiho because the context for this <code>customer</code> is the class and the class value for <code>customer</code> is Padma.</p>\n\n<h2 id=\"expression-best-practices\" translation-result=\"on\">表示式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Expression best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用範本表示式時，請遵循以下最佳實踐：</p><p translation-origin=\"off\">When using template expressions, follow these best practices:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong>使用短表示式</strong></p><p translation-origin=\"off\"><strong>Use short expressions</strong></p>\n\n<p translation-result=\"on\">儘可能使用屬性名稱或方法呼叫。將應用和業務邏輯保留在元件中，這裡更便於開發和測試。</p><p translation-origin=\"off\">Use property names or method calls whenever possible.\nKeep application and business logic in the component, where it is accessible to develop and test.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>快速執行</strong></p><p translation-origin=\"off\"><strong>Quick execution</strong></p>\n\n<p translation-result=\"on\">Angular 會在每個<a href=\"guide/glossary#change-detection\">變更檢測</a>週期之後執行範本表示式。許多非同步活動都會觸發變更檢測週期，比如解析 Promise、HTTP 結果、計時器事件、按鍵和滑鼠移動。</p><p translation-origin=\"off\">Angular executes template expressions after every <a href=\"guide/glossary#change-detection\">change detection</a> cycle.\nMany asynchronous activities trigger change detection cycles, such as promise resolutions, HTTP results, timer events, key presses, and mouse moves.</p>\n\n<p translation-result=\"on\">表示式應儘快完成，以保持使用者體驗的效能，尤其是在速度較慢的裝置上。當計算值需要更多資源時，請考慮快取值。</p><p translation-origin=\"off\">Expressions should finish quickly to keep the user experience as efficient as possible, especially on slower devices.\nConsider caching values when their computation requires greater resources.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>沒有可見的副作用</strong></p><p translation-origin=\"off\"><strong>No visible side effects</strong></p>\n\n<p translation-result=\"on\">根據 Angular 的<a href=\"guide/glossary#unidirectional-data-flow\">單向資料流模型</a>，除了目標屬性的值之外，範本表示式不應更改任何應用狀態。讀取元件值不應更改其他顯示值。該檢視應在整個渲染過程中保持穩定。</p><p translation-origin=\"off\">According to Angular's <a href=\"guide/glossary#unidirectional-data-flow\">unidirectional data flow model</a>, a template expression should not change any application state other than the value of the target property.\nReading a component value should not change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n\n<div class=\"callout is-important\">\n<header ng-should-translate=\"\" translation-result=\"on\">冪等表示式減少副作用</header><header ng-should-translate=\"\" translation-origin=\"off\">Idempotent expressions reduce side effects</header>\n\n<p translation-result=\"on\"><a href=\"https://en.wikipedia.org/wiki/Idempotence\">冪等</a>的表示式是最理想的，因為它沒有副作用，並且可以提高 Angular 的變更檢測效能。用 Angular 術語來說，冪等表示式總會返回<em>完全相同的東西</em>，除非其依賴值之一發生了變化。</p><p translation-origin=\"off\">An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns <em>exactly the same thing</em> until one of its dependent values changes.</p>\n\n<p translation-result=\"on\">在單獨的一次事件迴圈中，被依賴的值不應該改變。如果冪等的表示式返回一個字串或數字，如果連續呼叫它兩次，會返回相同的字串或數字。如果冪等的表示式返回一個物件（包括 <code>Date</code> 或 <code>Array</code>），如果連續呼叫它兩次，會返回同一個物件的<em>參考</em>。</p><p translation-origin=\"off\">Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number if you call it twice consecutively.\nIf the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> if you call it twice consecutively.</p>\n\n</div>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">對於 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，這種行為有一個例外。<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 具有 <code>trackBy</code> 功能，在迭代物件時它可以正確處理物件值的變化。詳情參見 <a href=\"guide/built-in-directives#ngfor-with-trackby\">帶 <code>trackBy</code> 的 *ngFor</a>。</p><p translation-origin=\"off\">There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\n<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with changing values in objects when iterating over them.\nSee <a href=\"guide/built-in-directives#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n\n</div>\n</li>\n</ul>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/understanding-template-expr-overview#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">屬性繫結</p><p translation-origin=\"off\">Property bindings</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：3/31/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgOptimizedImage\n - api/core/Component\n - api/core/Type\n - api/core/ng-template\n - guide/built-in-directives#ngfor-with-trackby\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - guide/understanding-template-expr-overview#expression-best-practices\n - guide/understanding-template-expr-overview#expression-context\n - guide/understanding-template-expr-overview#preventing-name-collisions\n - guide/understanding-template-expr-overview#syntax\n - guide/understanding-template-expr-overview#understanding-template-expressions\n - guide/understanding-template-expr-overview#whats-next\n - guide/understanding-template-expr-overview#下一步呢\n - guide/understanding-template-expr-overview#瞭解範本表示式\n - guide/understanding-template-expr-overview#表示式上下文\n - guide/understanding-template-expr-overview#表示式最佳實踐\n - guide/understanding-template-expr-overview#語法\n - guide/understanding-template-expr-overview#防止命名衝突\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/understanding-template-expr-overview.md?message=docs%3A%20請簡述你的修改...\n-->"}