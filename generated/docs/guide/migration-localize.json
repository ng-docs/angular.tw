{"id":"guide/migration-localize","title":"$localize Global Import Migration","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-localize.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"localize-global-import-migration\" translation-result=\"on\"><code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 全域匯入的遷移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#localize-全域匯入的遷移\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\"><code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> Global Import Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#localize-global-import-migration\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"what-does-this-schematic-do\" translation-result=\"on\">這個原理圖做了什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What does this schematic do?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你正在使用 i18n，這個原理圖會為 <code>@angular/localize</code> 新增一個匯入 <code>polyfills.ts</code> 的陳述式，就像這樣：</p><p translation-origin=\"off\">If you're using i18n, this schematic adds an import statement for <code>@angular/localize</code> to <code>polyfills.ts</code> that will look something like this:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n/******************************************************************\n * Load `$localize` - used if i18n tags appear in Angular templates.\n */\nimport '@angular/localize/init';\n\n</code-example>\n<p translation-result=\"on\">它還會在應用的 <code>package.json</code> 中列出 <code>@angular/localize</code> 作為依賴，以確保找到匯入。</p><p translation-origin=\"off\">It also lists <code>@angular/localize</code> as a dependency in your app's <code>package.json</code> to ensure the import is found.</p>\n\n<code-example format=\"json\" language=\"json\">\n\n\"devDependencies\": {\n  …\n  \"@angular/localize\": \"…\",\n  …\n}\n\n</code-example>\n<p translation-result=\"on\"><code>@angular/localize</code> 是一個新的套件，它在 Ivy 應用中支援資訊的 i18n。該包需要一個全域的 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 符號才能存在。該符號是透過匯入 <code>@angular/localize/init</code> 模組來載入的，該模組的副作用是將其附加到全域作用域。</p><p translation-origin=\"off\"><code>@angular/localize</code> is a new package that supports i18n of messages in Ivy applications.\nThis package requires a global <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> symbol to exist.\nThe symbol is loaded by importing the <code>@angular/localize/init</code> module, which has the side effect of attaching it to the global scope.</p>\n\n<h2 id=\"why-is-this-migration-necessary\" translation-result=\"on\">為何這次遷移必不可少？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Why is this migration necessary?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 第 9 版之前，Angular 的國際化（i18n）系統會把已翻譯的訊息內聯到編譯輸出中，作為範本編譯的一部分。這種方法要求為每個目標本地環境執行一次範本編譯器，這通常會導致生產建構時間變慢。</p><p translation-origin=\"off\">Prior to Angular version 9, Angular's internationalization (i18n) system inlined translated messages into the compiled output as part of this template compilation.\nThis approach required running the template compiler once per target locale, often leading to slow production build times.</p>\n\n<p translation-result=\"on\">在新的 i18n 系統中，Angular 編譯器使用全域 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 處理函式在已編譯的程式碼中標記 i18n 訊息。然後這些翻譯的內聯工作會作為每種本地環境的後編譯步驟。由於不需要為每個本地環境重複建構應用，所以這會讓這個過程更快。</p><p translation-origin=\"off\">In the new i18n system, the Angular compiler tags i18n messages in the compiled code with a global <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> handler.\nThe inlining of translations then occurs as a post-compilation step for each locale.\nBecause the application does not need to be built again for each locale, this makes the process much faster.</p>\n\n<p translation-result=\"on\">編譯後的內聯步驟是可選的 - 比如在開發過程中，或者執行期內聯時。因此，這個 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 在執行時必須在全域範圍內可用。為了讓全域範圍內的 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 可用，每個應用程式現在都必須匯入 <code>@angular/localize/init</code> 模組。這就是把 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 的一個最小實現附加到全域範圍帶來的副作用。</p><p translation-origin=\"off\">The post-compilation inlining step is optional —for example during development or if the translations will be inlined at runtime.\nTherefore this global <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> must be available on the global scope at runtime.\nTo make <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> available on the global scope, each application must now import the <code>@angular/localize/init</code> module.\nThis has the side effect of attaching a minimal implementation of <code>&amp;dollar;localize</code> to the global scope.</p>\n\n<p translation-result=\"on\">如果缺少這個匯入，你會看到如下錯誤資訊：</p><p translation-origin=\"off\">If this import is missing, you will see an error message like this:</p>\n\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nError: It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your polyfills.ts file)\n\n</code-example>\n<p translation-result=\"on\">如果你的應用使用的是 Angular 的 i18n API，此原理圖會自動為你新增 <code>@angular/localize/init</code> 的匯入。</p><p translation-origin=\"off\">This schematic automatically adds the <code>@angular/localize/init</code> import for you if your app uses Angular's i18n APIs.</p>\n\n<h2 id=\"why-is-my-tslint-failing\" translation-result=\"on\">為什麼我的 tslint 失敗了？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#why-is-my-tslint-failing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Why is my tslint failing?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#why-is-my-tslint-failing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>@angular/localize/init</code> 的匯入可能會導致 <code>no-import-side-effect</code> 的 tslint 錯誤，因為它會新增全域上下文（也就是副作用）。要修復此錯誤，請在 <code>tslint.config</code> 新增如下 <code>tslint.config</code>：</p><p translation-origin=\"off\">The import of <code>@angular/localize/init</code> may cause a tslint error for <code>no-import-side-effect</code> because it adds to the global context (that is, a side effect).\nTo fix this error, add the following to your <code>tslint.config</code>:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n\"no-import-side-effect\": [\n  true,\n  {\n    \"ignore-module\": \"(core-js/.*|zone\\\\.js/.*|@angular/localize/init)$\"\n  }\n]\n\n</code-example>\n<h2 id=\"do-i-need-to-change-how-i-write-i18n-in-my-angular-templates\" translation-result=\"on\">我是否需要改變在 Angular 範本中編寫 i18n 的方式？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#do-i-need-to-change-how-i-write-i18n-in-my-angular-templates\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Do I need to change how I write i18n in my Angular templates?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-localize#do-i-need-to-change-how-i-write-i18n-in-my-angular-templates\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">i18n 的範本語法沒有改變，所以你仍要像以前一樣使用 <code>i18n</code> 屬性。</p><p translation-origin=\"off\">The template syntax for i18n has not changed, so you will still want to use the <code>i18n</code> attribute as you did before.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/localize/init/$localize\n - guide/migration-localize#do-i-need-to-change-how-i-write-i18n-in-my-angular-templates\n - guide/migration-localize#localize-global-import-migration\n - guide/migration-localize#localize-全域匯入的遷移\n - guide/migration-localize#what-does-this-schematic-do\n - guide/migration-localize#why-is-my-tslint-failing\n - guide/migration-localize#why-is-this-migration-necessary\n - guide/migration-localize#為什麼我的-tslint-失敗了\n - guide/migration-localize#為何這次遷移必不可少\n - guide/migration-localize#我是否需要改變在-angular-範本中編寫-i18n-的方式\n - guide/migration-localize#這個原理圖做了什麼\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-localize.md?message=docs%3A%20請簡述你的修改...\n-->"}