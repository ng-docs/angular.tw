{"id":"guide/feature-modules","title":"Feature modules","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/feature-modules.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"feature-modules\" translation-result=\"on\">特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">特性模組是用來對程式碼進行組織的模組。</p><p translation-origin=\"off\">Feature modules are NgModules for the purpose of organizing code.</p>\n\n<p translation-result=\"on\">要想檢視本頁提到的這個帶有特性模組的範例應用，參閱 <live-example></live-example>。</p><p translation-origin=\"off\">For the final sample application with a feature module that this page describes, see the <live-example></live-example>.</p>\n\n<hr>\n<p translation-result=\"on\">隨著應用的增長，你可能需要組織與特定應用有關的程式碼。\n這將幫你把特性劃出清晰的邊界。使用特性模組，你可以把與特定的功能或特性有關的程式碼從其它程式碼中分離出來。\n為應用勾勒出清晰的邊界，有助於開發人員之間、小組之間的協作，有助於分離各個指令，並幫助管理根模組的大小。</p><p translation-origin=\"off\">As your application grows, you can organize code relevant for a specific feature.\nThis helps apply clear boundaries for features.\nWith feature modules, you can keep code related to a specific functionality or feature separate from other code.\nDelineating areas of your application helps with collaboration between developers and teams, separating directives, and managing the size of the root module.</p>\n\n<h2 id=\"feature-modules-vs-root-modules\" translation-result=\"on\">特性模組 vs. 根模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules-vs-root-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Feature modules vs. root modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#feature-modules-vs-root-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">與核心的 Angular API 的概念相反，特性模組是最佳的組織方式。特性模組提供了聚焦於特定應用需求的一組功能，比如使用者工作流、路由或表單。\n雖然你也可以用根模組做完所有事情，不過特性模組可以幫助你把應用劃分成一些聚焦的功能區。特性模組透過它提供的服務以及共享出的元件、指令和管道來與根模組和其它模組合作。</p><p translation-origin=\"off\">A feature module is an organizational best practice, as opposed to a concept of the core Angular API.\nA feature module delivers a cohesive set of functionality focused on a specific application need such as a user workflow, routing, or forms.\nWhile you can do everything within the root module, feature modules help you partition the application into focused areas.\nA feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it shares.</p>\n\n<h2 id=\"how-to-make-a-feature-module\" translation-result=\"on\">如何製作特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#how-to-make-a-feature-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">How to make a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#how-to-make-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你已經有了 <a href=\"cli\">Angular CLI</a> 產生的應用，可以在專案的根目錄下輸入下面的命令來建立特性模組。把這裡的 <code>CustomerDashboard</code> 替換成你的模組名。你可以從名字中省略掉“Module”字尾，因為 CLI 會自動追加上它：</p><p translation-origin=\"off\">Assuming you already have an application that you created with the <a href=\"cli\">Angular CLI</a>, create a feature module using the CLI by entering the following command in the root project directory.\nReplace <code>CustomerDashboard</code> with the name of your module.\nYou can omit the \"Module\" suffix from the name because the CLI appends it:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module CustomerDashboard\n\n</code-example>\n<p translation-result=\"on\">這會讓 CLI 建立一個名叫 <code>customer-dashboard</code> 的資料夾，其中有一個名叫 <code>customer-dashboard.module.ts</code>，內容如下：</p><p translation-origin=\"off\">This causes the CLI to create a folder called <code>customer-dashboard</code> with a file inside called <code>customer-dashboard.module.ts</code> with the following contents:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class CustomerDashboardModule { }\n\n</code-example>\n<p translation-result=\"on\">無論根模組還是特性模組，其 NgModule 結構都是一樣的。在 CLI 產生的特性模組中，在檔案頂部有兩個 JavaScript 的匯入陳述式：第一個匯入了 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>，它像根模組中一樣讓你能使用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器；第二個匯入了 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，它提供了很多像 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 這樣的常用指令。\n特性模組匯入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而不是 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，後者只應該在根模組中匯入一次。\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 只包含常用指令的資訊，比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，它們在大多數範本中都要用到，而 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 為瀏覽器所做的應用配置只會使用一次。</p><p translation-origin=\"off\">The structure of an NgModule is the same whether it is a root module or a feature module.\nIn the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>, which, like the root module, lets you use the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator; the second imports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>, which contributes many common directives such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nFeature modules import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> instead of <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>, which is only imported once in the root module.\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> only contains information for common directives such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> which are needed in most templates, whereas <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> configures the Angular application for the browser which needs to be done only once.</p>\n\n<p translation-result=\"on\"><code>declarations</code> 陣列讓你能新增專屬於這個模組的可宣告物件（元件、指令和管道）。\n要新增元件，就在命令列中輸入如下命令，這裡的 <code>customer-dashboard</code> 是一個目錄，CLI 會把特性模組產生在這裡，而 <code>CustomerDashboard</code> 就是該元件的名字：</p><p translation-origin=\"off\">The <code>declarations</code> array is available for you to add declarables, which are components, directives, and pipes that belong exclusively to this particular module.\nTo add a component, enter the following command at the command line where <code>customer-dashboard</code> is the directory where the CLI generated the feature module and <code>CustomerDashboard</code> is the name of the component:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component customer-dashboard/CustomerDashboard\n\n</code-example>\n<p translation-result=\"on\">這會在 <code>customer-dashboard</code> 中為新元件產生一個目錄，並使用 <code>CustomerDashboardComponent</code> 的資訊修改這個特性模組：</p><p translation-origin=\"off\">This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the <code>CustomerDashboardComponent</code> info:</p>\n\n<code-example header=\"src/app/customer-dashboard/customer-dashboard.module.ts\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"customer-dashboard-component\">\n// import the new component\nimport { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: [\n    CustomerDashboardComponent\n  ],\n})\n\n\n</code-example>\n<p translation-result=\"on\"><code>CustomerDashboardComponent</code> 出現在了頂部的 JavaScript 匯入列表裡，並且被新增到了 <code>declarations</code> 陣列中，它會讓 Angular 把新元件和這個特性模組聯絡起來。</p><p translation-origin=\"off\">The <code>CustomerDashboardComponent</code> is now in the JavaScript import list at the top and added to the <code>declarations</code> array, which lets Angular know to associate this new component with this feature module.</p>\n\n<h2 id=\"importing-a-feature-module\" translation-result=\"on\">匯入特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#importing-a-feature-module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Importing a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#importing-a-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想把這個特性模組包含進應用中，你還得讓根模組 <code>app.module.ts</code> 知道它。注意，在 <code>customer-dashboard.module.ts</code> 檔案底部 <code>CustomerDashboardModule</code> 的匯出部分。這樣就把它暴露出來，以便其它模組可以拿到它。要想把它匯入到 <code>AppModule</code> 中，就把它加入 <code>app.module.ts</code> 的匯入表中，並將其加入 <code>imports</code> 陣列：</p><p translation-origin=\"off\">To incorporate the feature module into your app, you have to let the root module, <code>app.module.ts</code>, know about it.\nNotice the <code>CustomerDashboardModule</code> export at the bottom of <code>customer-dashboard.module.ts</code>.\nThis exposes it so that other modules can get to it.\nTo import it into the <code>AppModule</code>, add it to the imports in <code>app.module.ts</code> and to the <code>imports</code> array:</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"feature-modules/src/app/app.module.ts\" region=\"app-module\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n// import the feature module here so you can add it to the imports array below\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    CustomerDashboardModule // add the feature module here\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<p translation-result=\"on\">現在 <code>AppModule</code> 知道這個特性模組了。如果你往該特性模組中加入過任何服務提供者，<code>AppModule</code> 也同樣會知道它，其它模組中也一樣。不過，NgModule 並不會暴露出它們的元件。</p><p translation-origin=\"off\">Now the <code>AppModule</code> knows about the feature module.\nIf you were to add any service providers to the feature module, <code>AppModule</code> would know about those too, as would any other feature modules.\nHowever, NgModules don't expose their components by default.</p>\n\n<h2 id=\"rendering-a-feature-modules-component-template\" translation-result=\"on\">渲染特性模組的元件範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#rendering-a-feature-modules-component-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Rendering a feature module's component template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#rendering-a-feature-modules-component-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當 CLI 為這個特性模組產生 <code>CustomerDashboardComponent</code> 時，還包含一個範本 <code>customer-dashboard.component.html</code>，它帶有如下頁面指令碼：</p><p translation-origin=\"off\">When the CLI generated the <code>CustomerDashboardComponent</code> for the feature module, it included a template, <code>customer-dashboard.component.html</code>, with the following markup:</p>\n\n<code-example header=\"src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" region=\"feature-template\">\n&lt;p&gt;\n  customer-dashboard works!\n&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">要想在 <code>AppComponent</code> 中檢視這些 HTML，你首先要在 <code>CustomerDashboardModule</code> 中匯出 <code>CustomerDashboardComponent</code>。\n在 <code>customer-dashboard.module.ts</code> 中，<code>declarations</code> 陣列的緊下方，加入一個包含 <code>CustomerDashboardModule</code> 的 <code>exports</code> 陣列：</p><p translation-origin=\"off\">To see this HTML in the <code>AppComponent</code>, you first have to export the <code>CustomerDashboardComponent</code> in the <code>CustomerDashboardModule</code>.\nIn <code>customer-dashboard.module.ts</code>, just beneath the <code>declarations</code> array, add an <code>exports</code> array containing <code>CustomerDashboardComponent</code>:</p>\n\n<code-example header=\"src/app/customer-dashboard/customer-dashboard.module.ts\" path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"component-exports\">\nexports: [\n  CustomerDashboardComponent\n]\n\n</code-example>\n<p translation-result=\"on\">然後，在 <code>AppComponent</code> 的 <code>app.component.html</code> 中，加入標籤 <code>&lt;app-customer-dashboard&gt;</code>：</p><p translation-origin=\"off\">Next, in the <code>AppComponent</code>, <code>app.component.html</code>, add the tag <code>&lt;app-customer-dashboard&gt;</code>:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"feature-modules/src/app/app.component.html\" region=\"app-component-template\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;!-- add the selector from the CustomerDashboardComponent --&gt;\n&lt;app-customer-dashboard&gt;&lt;/app-customer-dashboard&gt;\n\n</code-example>\n<p translation-result=\"on\">現在，除了預設渲染出的標題外，還渲染出了 <code>CustomerDashboardComponent</code> 的範本：</p><p translation-origin=\"off\">Now, in addition to the title that renders by default, the <code>CustomerDashboardComponent</code> template renders too:</p>\n\n<div class=\"lightbox\">\n<img alt=\"feature module component\" src=\"generated/images/guide/feature-modules/feature-module.png\" width=\"594\" height=\"408\">\n</div>\n<h2 id=\"more-on-ngmodules\" translation-result=\"on\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器延遲載入模組</a></p><p translation-origin=\"off\"><a href=\"guide/lazy-loading-ngmodules\">Lazy Loading Modules with the Angular Router</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/providers\">服務提供者</a></p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/module-types\">特性模組的型別</a></p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/testing-components-scenarios\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/feature-modules#feature-modules\n - guide/feature-modules#feature-modules-vs-root-modules\n - guide/feature-modules#how-to-make-a-feature-module\n - guide/feature-modules#importing-a-feature-module\n - guide/feature-modules#more-on-ngmodules\n - guide/feature-modules#rendering-a-feature-modules-component-template\n - guide/feature-modules#關於-ngmodule-的更多知識\n - guide/feature-modules#如何製作特性模組\n - guide/feature-modules#匯入特性模組\n - guide/feature-modules#渲染特性模組的元件範本\n - guide/feature-modules#特性模組\n - guide/feature-modules#特性模組-vs-根模組\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/providers\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/feature-modules.md?message=docs%3A%20請簡述你的修改...\n-->"}