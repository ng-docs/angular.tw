{"id":"guide/what-is-angular","title":"What is Angular?","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/what-is-angular.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"what-is-angular\" translation-result=\"on\">什麼是 Angular？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#what-is-angular\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">What is Angular?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#what-is-angular\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本主題會幫你瞭解 Angular：什麼是 Angular？它有哪些優勢？當建構應用時它能為你提供什麼幫助？</p><p translation-origin=\"off\">This topic can help you understand Angular: what Angular is, what advantages it provides, and what you might expect as you start to build your applications.</p>\n\n<p translation-result=\"on\">Angular 是一個基於 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 建構的開發平台。它包括：</p><p translation-origin=\"off\">Angular is a development platform, built on <a href=\"https://www.typescriptlang.org\">TypeScript</a>.\nAs a platform, Angular includes:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一個基於元件的框架，用於建構可伸縮的 Web 應用</p><p translation-origin=\"off\">A component-based framework for building scalable web applications</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一組完美整合的函式庫，涵蓋各種功能，包括路由、表單管理、客戶端-伺服器通訊等</p><p translation-origin=\"off\">A collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一套開發工具，可幫助你開發、建構、測試和更新程式碼</p><p translation-origin=\"off\">A suite of developer tools to help you develop, build, test, and update your code</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">藉助 Angular，無論單人專案還是企業級應用，你都能獲得平台帶來的優勢。Angular 的設計目標之一就是讓更新更容易，因此你可以用最小的成本升級到最新的 Angular 版本。最重要的是，Angular 的生態系統由包括 170 萬名開發人員、庫作者和內容創作者在內的多元團隊構成。</p><p translation-origin=\"off\">With Angular, you're taking advantage of a platform that can scale from single-developer projects to enterprise-level applications.\nAngular is designed to make updating as straightforward as possible, so take advantage of the latest developments with minimal effort.\nBest of all, the Angular ecosystem consists of a diverse group of over 1.7 million developers, library authors, and content creators.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要試用包含本指南中程式碼片段的可工作範例，請看<live-example name=\"what-is-angular\"></live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"what-is-angular\"></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<p><a id=\"essentials\"></a></p>\n<h2 id=\"angular-applications-the-essentials\" translation-result=\"on\">Angular 應用：知識要點<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#angular-applications-the-essentials\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Angular applications: The essentials<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#angular-applications-the-essentials\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節會解釋 Angular 背後的核心思想。瞭解這些思想可以幫助你更有效地設計和建構應用。</p><p translation-origin=\"off\">This section explains the core ideas behind Angular.\nUnderstanding these ideas can help you design and build your applications more effectively.</p>\n\n<p><a id=\"components\"></a></p>\n<h3 id=\"components\" translation-result=\"on\">元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#components\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#components\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">元件是構成應用的磚塊。元件包括三個部分：帶有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器的 TypeScript 類、HTML 範本和樣式檔案。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器會指定如下 Angular 專屬資訊：</p><p translation-origin=\"off\">Components are the building blocks that compose an application.\nA component includes a TypeScript class with a <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator, an HTML template, and styles.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator specifies the following Angular-specific information:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一個 CSS 選擇器，用於定義如何在範本中使用元件。範本中與此選擇器匹配的 HTML 元素將成為該元件的例項。</p><p translation-origin=\"off\">A CSS selector that defines how the component is used in a template.\nHTML elements in your template that match this selector become instances of the component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個 HTML 範本，用於指示 Angular 如何渲染此元件</p><p translation-origin=\"off\">An HTML template that instructs Angular how to render the component</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一組可選的 CSS 樣式，用於定義範本中 HTML 元素的外觀</p><p translation-origin=\"off\">An optional set of CSS styles that define the appearance of the template's HTML elements</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面是一個最小化的 Angular 元件。</p><p translation-origin=\"off\">The following is a minimal Angular component.</p>\n\n<code-example format=\"typescript\" language=\"typescript\" path=\"what-is-angular/src/app/hello-world/hello-world.component.ts\">\n\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hello-world',\n  template: `\n    &lt;h2&gt;Hello World&lt;/h2&gt;\n    &lt;p&gt;This is my first component!&lt;/p&gt;\n  `\n})\nexport class HelloWorldComponent {\n  // The code in this class drives the component's behavior.\n}\n\n\n</code-example>\n<p translation-result=\"on\">要使用此元件，請在範本中編寫以下內容：</p><p translation-origin=\"off\">To use this component, you write the following in a template:</p>\n\n<code-example format=\"html\" language=\"html\" path=\"what-is-angular/src/app/app.component.html\" region=\"hello-world-selector\">\n&lt;hello-world&gt;&lt;/hello-world&gt;\n\n</code-example>\n<p translation-result=\"on\">當 Angular 渲染此元件時，產生的 DOM 如下所示：</p><p translation-origin=\"off\">When Angular renders this component, the resulting DOM looks like this:</p>\n\n<code-example format=\"html\" language=\"html\" path=\"what-is-angular/src/app/hello-world-example.html\">\n&lt;hello-world&gt;\n    &lt;h2&gt;Hello World&lt;/h2&gt;\n    &lt;p&gt;This is my first component!&lt;/p&gt;\n&lt;/hello-world&gt;\n\n</code-example>\n<p translation-result=\"on\">Angular 的元件模型提供了強大的封裝能力和直觀的應用結構。元件還能讓你的應用更容易進行單元測試，並可以提高程式碼的整體可讀性。</p><p translation-origin=\"off\">Angular's component model offers strong encapsulation and an intuitive application structure.\nComponents also make your application painless to unit test and can improve the general readability of your code.</p>\n\n<p translation-result=\"on\">有關可以用元件做什麼的更多資訊，請參見<a href=\"guide/component-overview\">“元件”</a>部分。</p><p translation-origin=\"off\">For more information on what to do with components, see the <a href=\"guide/component-overview\">Components</a> section.</p>\n\n<p><a id=\"templates\"></a></p>\n<h3 id=\"templates\" translation-result=\"on\">範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#templates\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#templates\"><i class=\"material-icons\">link</i></a></h3>\n\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p translation-result=\"on\">每個元件都有一個 HTML 範本，用於宣告該元件的渲染方式。你可以內聯它或用檔案路徑定義此範本。</p><p translation-origin=\"off\">Every component has an HTML template that declares how that component renders.\nYou define this template either inline or by file path.</p>\n\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<p translation-result=\"on\">Angular 添加了一些語法元素以擴充 HTML，讓你可以從元件中插入動態值。當元件的狀態更改時，Angular 會自動更新已渲染的 DOM。此功能的應用之一是插入動態文字，如下例子所示。</p><p translation-origin=\"off\">Angular adds syntax elements that extend HTML so you can insert dynamic values from your component.\nAngular automatically updates the rendered DOM when your component's state changes.\nOne application of this feature is inserting dynamic text, as shown in the following example.</p>\n\n<code-example format=\"html\" language=\"html\" path=\"what-is-angular/src/app/hello-world-interpolation/hello-world-interpolation.component.html\" region=\"say-hello\">\n&lt;p&gt;{{ message }}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">這裡 message 的值來自元件類：</p><p translation-origin=\"off\">The value for message comes from the component class:</p>\n\n<code-example format=\"typescript\" language=\"typescript\" path=\"what-is-angular/src/app/hello-world-interpolation/hello-world-interpolation.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a> ({\n  selector: 'hello-world-interpolation',\n  templateUrl: './hello-world-interpolation.component.html'\n})\nexport class HelloWorldInterpolationComponent {\n    message = 'Hello, World!';\n}\n\n\n</code-example>\n<p translation-result=\"on\">當應用載入元件及其範本時，使用者將看到以下內容：</p><p translation-origin=\"off\">When the application loads the component and its template, the user sees the following:</p>\n\n<code-example format=\"shell\" language=\"html\">\n\n&lt;p&gt;Hello, World!&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">注意這裡所用的雙花括號 —— 它們指示 Angular 對其中的內容進行插值。</p><p translation-origin=\"off\">Notice the use of double curly braces—they instruct Angular to interpolate the contents within them.</p>\n\n<p translation-result=\"on\">Angular 還支援屬性繫結，以幫助你設定 HTML 元素的 Property 和 Attribute 的值，並將這些值傳給應用的展示邏輯。</p><p translation-origin=\"off\">Angular also supports property bindings, to help you set values for properties and attributes of HTML elements and pass values to your application's presentation logic.</p>\n\n<code-example format=\"html\" language=\"html\" path=\"what-is-angular/src/app/hello-world-bindings/hello-world-bindings.component.html\" region=\"bindings\">\n&lt;p\n  [id]=\"sayHelloId\"\n  [style.color]=\"fontColor\"&gt;\n  You can set my color in the component!\n&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">注意這裡所用的方括號 —— 該語法表明你正在將 Property 或 Attribute 繫結到元件類中的值。</p><p translation-origin=\"off\">Notice the use of the square brackets—that syntax indicates that you're binding the property or attribute to a value in the component class.</p>\n\n<p translation-result=\"on\">可以宣告事件監聽器來監聽並響應使用者的操作，比如按鍵、滑鼠移動、單擊和觸控等。你可以透過在圓括號中指定事件名稱來宣告一個事件監聽器：</p><p translation-origin=\"off\">Declare event listeners to listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.\nYou declare an event listener by specifying the event name in parentheses:</p>\n\n<code-example format=\"html\" language=\"html\" path=\"what-is-angular/src/app/hello-world-bindings/hello-world-bindings.component.html\" region=\"event-binding\">\n&lt;button\n  type=\"button\"\n  [disabled]=\"canClick\"\n  (click)=\"sayMessage()\"&gt;\n  Trigger alert message\n&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">前面的例子中呼叫了一個方法，該方法是在元件類中定義的：</p><p translation-origin=\"off\">The preceding example calls a method, which is defined in the component class:</p>\n\n<code-example format=\"typescript\" language=\"typescript\" path=\"what-is-angular/src/app/hello-world-bindings/hello-world-bindings.component.ts\" region=\"method\">\nsayMessage() {\n  alert(this.message);\n}\n\n</code-example>\n<p translation-result=\"on\">以下是在 Angular 範本中插值和繫結的例子：</p><p translation-origin=\"off\">The following is a combined example of Interpolation, Property Binding, and Event Binding within an Angular template:</p>\n\n<code-tabs linenums=\"true\">\n    <code-pane header=\"hello-world-bindings.component.ts\" path=\"what-is-angular/src/app/hello-world-bindings/hello-world-bindings.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a> ({\n  selector: 'hello-world-bindings',\n  templateUrl: './hello-world-bindings.component.html'\n})\nexport class HelloWorldBindingsComponent {\n  fontColor = 'blue';\n  sayHelloId = 1;\n  canClick = false;\n  message = 'Hello, World';\n\n  sayMessage() {\n    alert(this.message);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hello-world-bindings.component.html\" path=\"what-is-angular/src/app/hello-world-bindings/hello-world-bindings.component.html\">\n&lt;button\n  type=\"button\"\n  [disabled]=\"canClick\"\n  (click)=\"sayMessage()\"&gt;\n  Trigger alert message\n&lt;/button&gt;\n\n&lt;p\n  [id]=\"sayHelloId\"\n  [style.color]=\"fontColor\"&gt;\n  You can set my color in the component!\n&lt;/p&gt;\n\n&lt;p&gt;My color is {{ fontColor }}&lt;/p&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">可以用<a href=\"guide/built-in-directives\">指令</a>來為範本新增額外功能。Angular 中最常用的指令是 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。你可以使用指令執行各種任務，比如動態修改 DOM 結構。你還可以用自訂指令來創建出色的使用者體驗。</p><p translation-origin=\"off\">Add features to your templates by using <a href=\"guide/built-in-directives\">directives</a>.\nThe most popular directives in Angular are <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nUse directives to perform a variety of tasks, such as dynamically modifying the DOM structure.\nAnd create your own custom directives to create great user experiences.</p>\n\n<p translation-result=\"on\">以下程式碼是 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令的例子。</p><p translation-origin=\"off\">The following code is an example of the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive.</p>\n\n<code-tabs linenums=\"true\">\n  <code-pane header=\"hello-world-ngif.component.ts\" path=\"what-is-angular/src/app/hello-world-ngif/hello-world-ngif.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hello-world-ngif',\n  templateUrl: './hello-world-ngif.component.html'\n})\nexport class HelloWorldNgIfComponent {\n  message = \"I'm read only!\";\n  canEdit = false;\n\n  onEditClick() {\n    this.canEdit = !this.canEdit;\n    if (this.canEdit) {\n      this.message = 'You can edit me!';\n    } else {\n      this.message = \"I'm read only!\";\n    }\n  }\n}\n\n\n\n</code-pane>\n  <code-pane header=\"hello-world-ngif.component.html\" path=\"what-is-angular/src/app/hello-world-ngif/hello-world-ngif.component.html\">\n&lt;h2&gt;Hello World: <a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>!&lt;/h2&gt;\n\n&lt;button type=\"button\" (click)=\"onEditClick()\"&gt;Make text editable!&lt;/button&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"canEdit; else noEdit\"&gt;\n    &lt;p&gt;You can edit the following paragraph.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;ng-template #noEdit&gt;\n    &lt;p&gt;The following paragraph is read only. Try clicking the button!&lt;/p&gt;\n&lt;/ng-template&gt;\n\n&lt;p [contentEditable]=\"canEdit\"&gt;{{ message }}&lt;/p&gt;\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">Angular 的宣告式範本使讓可以將應用的邏輯和外觀完全分開。範本基於標準 HTML，因此易於建構、維護和更新。</p><p translation-origin=\"off\">Angular's declarative templates let you cleanly separate your application's logic from its presentation.\nTemplates are based on standard HTML, for ease in building, maintaining, and updating.</p>\n\n<p translation-result=\"on\">關於範本用法和用途的更多資訊，請參見<a href=\"guide/template-syntax\">“範本”</a>部分。</p><p translation-origin=\"off\">For more information on templates, see the <a href=\"guide/template-syntax\">Templates</a> section.</p>\n\n<p><a id=\"di\"></a></p>\n<h3 id=\"dependency-injection\" translation-result=\"on\">依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#dependency-injection\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#dependency-injection\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">依賴注入讓你可以宣告 TypeScript 類別的依賴項，而無需操心如何例項化它們，Angular 會為你處理這些瑣事。這種設計模式能讓你寫出更加可測試、也更靈活的程式碼。儘管瞭解依賴注入對於開始用 Angular 並不是至關重要的事，但我們還是強烈建議你將其作為最佳實踐，並且 Angular 自身的方方面面都在一定程度上利用了它。</p><p translation-origin=\"off\">Dependency injection lets you declare the dependencies of your TypeScript classes without taking care of their instantiation.\nInstead, Angular handles the instantiation for you.\nThis design pattern lets you write more testable and flexible code.\nUnderstanding dependency injection is not critical to start using Angular, but it is strongly recommended as a best practice. Many aspects of Angular take advantage of it to some degree.</p>\n\n<p translation-result=\"on\">為了說明依賴注入的工作原理，請考慮以下例子。第一個檔案 <code>logger.service.ts</code> 中定義了一個 <code>Logger</code> 類別。它包含一個 <code>writeCount</code> 函式，該函式將一個數字記錄到控制檯。</p><p translation-origin=\"off\">To illustrate how dependency injection works, consider the following example.\nThe first file, <code>logger.service.ts</code>, defines a <code>Logger</code> class.\nThis class contains a <code>writeCount</code> function that logs a number to the console.</p>\n\n<code-example format=\"typescript\" language=\"typescript\" path=\"what-is-angular/src/app/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({providedIn: 'root'})\nexport class Logger {\n  writeCount(count: number) {\n    console.warn(count);\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">接下來，<code>hello-world-di.component.ts</code> 檔案中定義了一個 Angular 元件。該元件包含一個按鈕，它會使用此 Logger 類別的 <code>writeCount</code> 函式。要存取此功能，可透過向建構函式中新增 <code>private logger: Logger</code> 來把 <code>Logger</code> 服務注入到 <code>HelloWorldDI</code> 類中。</p><p translation-origin=\"off\">Next, the <code>hello-world-di.component.ts</code> file defines an Angular component.\nThis component contains a button that uses the <code>writeCount</code> function of the Logger class.\nTo access that function, the <code>Logger</code> service is injected into the <code>HelloWorldDI</code> class by adding <code>private logger: Logger</code> to the constructor.</p>\n\n<code-example format=\"typescript\" language=\"typescript\" path=\"what-is-angular/src/app/hello-world-di/hello-world-di.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Logger } from '../logger.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hello-world-di',\n  templateUrl: './hello-world-di.component.html'\n})\nexport class HelloWorldDependencyInjectionComponent  {\n  count = 0;\n\n  constructor(private logger: Logger) { }\n\n  onLogMe() {\n    this.logger.writeCount(this.count);\n    this.count++;\n  }\n}\n\n\n\n</code-example>\n<p translation-result=\"on\">有關依賴注入和 Angular 的更多資訊，請參見 Angular 中的<a href=\"guide/dependency-injection\">依賴注入</a>部分。</p><p translation-origin=\"off\">For more information about dependency injection and Angular, see the <a href=\"guide/dependency-injection\">Dependency injection in Angular</a> section.</p>\n\n<p><a id=\"cli\"></a></p>\n<h2 id=\"angular-cli\">Angular CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#angular-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">Angular CLI 是開發 Angular 應用程式的最快、直接和推薦的方式。Angular CLI 使某些任務無故障。例如：</p><p translation-result=\"on\">Angular CLI 是開發 Angular 應用的最快、最簡單和推薦的方式。Angular CLI 能簡化許多工。這裡有些例子：</p><p translation-origin=\"off\">The Angular CLI is the fastest, straightforward, and recommended way to develop Angular applications.\nThe Angular CLI makes some tasks trouble-free.\nFor example:</p>\n\n<!-- vale Angular.Google_WordListSuggestions = NO -->\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">命令</nt-wrapper><nt-wrapper translation-origin=\"off\">Command</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"cli/build\">ng build</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 Angular 應用編譯到一個輸出目錄中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Compiles an Angular application into an output directory.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"cli/serve\">ng serve</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建構你的應用並啟動開發伺服器，當有檔案變化時就重新建構。</nt-wrapper><nt-wrapper translation-origin=\"off\">Builds and serves your application, rebuilding on file changes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"cli/generate\">ng generate</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">基於原理圖（schematic）產生或修改某些檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">Generates or modifies files based on a schematic.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"cli/test\">ng test</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在指定的專案上執行單元測試。</nt-wrapper><nt-wrapper translation-origin=\"off\">Runs unit tests on a given project.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"cli/e2e\">ng e2e</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建構一個 Angular 應用並啟動開發伺服器，然後執行端到端測試。</nt-wrapper><nt-wrapper translation-origin=\"off\">Builds and serves an Angular application, then runs end-to-end tests.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- vale Angular.Google_WordListSuggestions = YES -->\n<p translation-result=\"on\">Angular CLI 是一種用於建構應用程式的有價值的工具。</p><p translation-origin=\"off\">The Angular CLI is a valuable tool for building out your applications.</p>\n\n<p translation-result=\"on\">有關 Angular CLI 的更多資訊，請參閱 <a href=\"cli\">“Angular CLI 參考手冊”</a>部分。</p><p translation-origin=\"off\">For more information about the Angular CLI, see the <a href=\"cli\">Angular CLI Reference</a> section.</p>\n\n<p><a id=\"1p-libraries\"></a></p>\n<h2 id=\"first-party-libraries\" translation-result=\"on\">自帶庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#first-party-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">First-party libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#first-party-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/what-is-angular#essentials\">“Angular 應用：基本知識”</a>部分提供了建構 Angular 應用時要用到的幾個關鍵架構元素的簡要描述。但是，當你的應用不斷成長並且想要新增其他功能（比如站點導航或使用者輸入）時，Angular 的許多優勢才會真正顯現出來。屆時，你可以透過 Angular 平台，來引入 Angular 所提供的眾多自帶庫之一。</p><p translation-origin=\"off\">The section, <a href=\"guide/what-is-angular#essentials\">Angular applications: the essentials</a>, provides a brief overview of a couple of the key architectural elements that are used when building Angular applications.\nThe many benefits of Angular really become clear when your application grows and you want to add functions such as site navigation or user input.\nUse the Angular platform to incorporate one of the many first-party libraries that Angular provides.</p>\n\n<p translation-result=\"on\">你可以使用的一些函式庫包括：</p><p translation-origin=\"off\">Some of the libraries available to you include:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">庫</nt-wrapper><nt-wrapper translation-origin=\"off\">Library</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/router\">Angular 路由器</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/router\">Angular Router</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">進階的客戶側導航功能與基於 Angular 元件的路由機制。支援延遲載入、巢狀(Nesting)路由、自訂路徑匹配規則等。</nt-wrapper><nt-wrapper translation-origin=\"off\">Advanced client-side navigation and routing based on Angular components. Supports lazy-loading, nested routes, custom path matching, and more.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/forms-overview\">Angular 表單</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/forms-overview\">Angular Forms</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">統一的表單填報與驗證體系。</nt-wrapper><nt-wrapper translation-origin=\"off\">Uniform system for form participation and validation.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/http\">Angular HttpClient</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">健壯的 HTTP 客戶端庫，它可以支援更進階的客戶端-伺服器通訊。</nt-wrapper><nt-wrapper translation-origin=\"off\">Robust HTTP client that can power more advanced client-server communication.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/animations\">Angular Animations</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">豐富的動畫體系，用於驅動基於應用狀態的動畫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Rich system for driving animations based on application state.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/service-worker-intro\">Angular PWA</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一些用於建構漸進式 Web 應用（PWA）的工具，包括 Service Worker 和 Web 應用清單（Manifest）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Tools for building Progressive Web Applications (PWAs) including a service worker and Web app manifest.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/schematics\">Angular 原理圖</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/schematics\">Angular Schematics</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一些搭建腳手架、重構和升級的自動化工具。用於簡化大規模應用的開發。</nt-wrapper><nt-wrapper translation-origin=\"off\">Automated scaffolding, refactoring, and update tools that simplify development at large scale.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- vale Angular.Google_Acronyms = YES -->\n<p translation-result=\"on\">這些庫在擴充應用能力的同時，還能讓你將更多精力放在那些令你的應用與眾不同的功能上。你可以新增這些庫，並相信它們能與 Angular 框架無縫整合並同步更新。</p><p translation-origin=\"off\">These libraries expand your application's capabilities while also letting you focus more on the features that make your application unique.\nAdd these libraries knowing that they're designed to integrate flawlessly into and update simultaneously with the Angular framework.</p>\n\n<p translation-result=\"on\">只有當它們可以幫你嚮應用中新增功能或解決特定的問題時，你才需要這些庫。</p><p translation-origin=\"off\">These libraries are only required when they can help you add features to your applications or solve a particular problem.</p>\n\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/what-is-angular#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本主題旨在幫你瞭解 Angular：什麼是 Angular？它有哪些優勢？當建構應用時它能為你提供什麼幫助？</p><p translation-origin=\"off\">This topic gives you a brief overview of what Angular is, the advantages it provides, and what to expect as you start to build your applications.</p>\n\n<p translation-result=\"on\">要實際使用 Angular，請參閱我們的<a href=\"start\">入門</a>課程。本課程使用 <a href=\"https://stackblitz.com\">stackblitz.com</a>，因此你可以瀏覽 Angular 的可工作範例，而不必先做任何安裝工作。</p><p translation-origin=\"off\">To see Angular in action, see the <a href=\"start\">Getting Started</a> tutorial.\nThis tutorial uses <a href=\"https://stackblitz.com\">stackblitz.com</a>, for you to explore a working example of Angular without any installation requirements.</p>\n\n<p translation-result=\"on\">建議閱讀以下部分來進一步探索 Angular 的特性：</p><p translation-origin=\"off\">The following sections are recommended to explore Angular's capabilities further:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/understanding-angular-overview\">瞭解 Angular</a></p><p translation-origin=\"off\"><a href=\"guide/understanding-angular-overview\">Understanding Angular</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/developer-guide-overview\">Angular 開發人員指南</a></p><p translation-origin=\"off\"><a href=\"guide/developer-guide-overview\">Angular Developer Guide</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - docs\n - guide/developer-guide-overview\n - guide/localizing-angular\n - guide/understanding-angular-overview\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/Injectable\n - cli\n - cli/build\n - cli/e2e\n - cli/generate\n - cli/serve\n - cli/test\n - guide/animations\n - guide/built-in-directives\n - guide/component-overview\n - guide/dependency-injection\n - guide/developer-guide-overview\n - guide/forms-overview\n - guide/http\n - guide/router\n - guide/schematics\n - guide/service-worker-intro\n - guide/template-syntax\n - guide/understanding-angular-overview\n - guide/what-is-angular#angular-applications-the-essentials\n - guide/what-is-angular#angular-cli\n - guide/what-is-angular#angular-應用知識要點\n - guide/what-is-angular#components\n - guide/what-is-angular#dependency-injection\n - guide/what-is-angular#essentials\n - guide/what-is-angular#first-party-libraries\n - guide/what-is-angular#next-steps\n - guide/what-is-angular#templates\n - guide/what-is-angular#what-is-angular\n - guide/what-is-angular#下一步\n - guide/what-is-angular#什麼是-angular\n - guide/what-is-angular#依賴注入\n - guide/what-is-angular#範本\n - guide/what-is-angular#元件\n - guide/what-is-angular#自帶庫\n - start\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/what-is-angular.md?message=docs%3A%20請簡述你的修改...\n - https://stackblitz.com\n - https://www.typescriptlang.org\n-->"}