{"id":"guide/inputs-outputs","title":"Sharing data between child and parent directives and components","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/inputs-outputs.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"sharing-data-between-child-and-parent-directives-and-components\" translation-result=\"on\">在父子指令及元件之間共享資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Sharing data between child and parent directives and components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 中的一個常見模式就是在父元件和一個或多個子元件之間共享資料。可以用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 來實現這個模式。</p><p translation-origin=\"off\">A common pattern in Angular is sharing data between a parent component and one or more child components.\nImplement this pattern with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本章包含程式碼片段的可工作例項參閱<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<p translation-result=\"on\">考慮以下層次結構：</p><p translation-origin=\"off\">Consider the following hierarchy:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;parent-component&gt;\n  &lt;child-component&gt;&lt;/child-component&gt;\n&lt;/parent-component&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>&lt;parent-component&gt;</code> 充當了 <code>&lt;child-component&gt;</code> 的上下文。</p><p translation-origin=\"off\">The <code>&lt;parent-component&gt;</code> serves as the context for the <code>&lt;child-component&gt;</code>.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 為子元件提供了一種與其父元件通訊的方法。<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 允許父元件更新子元件中的資料。相反，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 允許子元件向父元件傳送資料。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> give a child component a way to communicate with its parent component.\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> lets a parent component update data in the child component.\nConversely, <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> lets the child send data to a parent component.</p>\n\n<p><a id=\"input\"></a></p>\n<h2 id=\"sending-data-to-a-child-component\" translation-result=\"on\">把資料傳送到子元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Sending data to a child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-child-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">子元件或指令中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器表示該屬性可以從其父元件中獲取值。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive signifies that the property can receive its value from its parent component.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Input data flow diagram of data flowing from parent to child\" src=\"generated/images/guide/inputs-outputs/input.svg\" width=\"671\" height=\"346\">\n</div>\n<p translation-result=\"on\">要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，就必須對父元件和子元件進行配置。</p><p translation-origin=\"off\">To use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you must configure the parent and child.</p>\n\n<h3 id=\"configuring-the-child-component\" translation-result=\"on\">配置子元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器，首先要匯入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，然後用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾該屬性，如下例所示。</p><p translation-origin=\"off\">To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, as in the following example.</p>\n\n<code-example header=\"src/app/item-detail/item-detail.component.ts\" path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // First, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item = ''; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p translation-result=\"on\">在這個例子中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 會修飾屬性 <code class=\"no-auto-link\">item</code>，它的型別為 <code>string</code>，但 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性可以是任意類別型，比如 <code>number</code>、<code>string</code>、<code>boolean</code> 或 <code>object</code>。<code>item</code> 的值來自父元件。</p><p translation-origin=\"off\">In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has a type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as <code>number</code>, <code>string</code>, <code>boolean</code>, or <code>object</code>.\nThe value for <code>item</code> comes from the parent component.</p>\n\n<p translation-result=\"on\">接下來，在子元件範本中新增以下內容：</p><p translation-origin=\"off\">Next, in the child component template, add the following:</p>\n\n<code-example header=\"src/app/item-detail/item-detail.component.html\" path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\">\n&lt;p&gt;\n  Today's item: {{item}}\n&lt;/p&gt;\n\n</code-example>\n<h3 id=\"configuring-the-parent-component\" translation-result=\"on\">配置父元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下一步是在父元件的範本中繫結該屬性。在這個例子中，父元件範本是 <code>app.component.html</code>。</p><p translation-origin=\"off\">The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用子元件的 selector（<code>&lt;app-item-detail&gt;</code>）作為父元件範本中的指令。</p><p translation-origin=\"off\">Use the child's selector, here <code>&lt;app-item-detail&gt;</code>, as a directive within the parent component template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用<a href=\"guide/property-binding\">屬性繫結</a>把子元件的 <code>item</code> 屬性繫結到父元件的 <code>currentItem</code> 屬性上。</p><p translation-origin=\"off\">Use <a href=\"guide/property-binding\">property binding</a> to bind the <code>item</code> property in the child to the <code>currentItem</code> property of the parent.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\">\n&lt;app-item-detail [item]=\"currentItem\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在父元件類中，為 <code>currentItem</code> 指定一個值：</p><p translation-origin=\"off\">In the parent component class, designate a value for <code>currentItem</code>:</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">透過 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>，Angular 把 <code>currentItem</code> 的值傳給子元件，以便 <code>item</code> 渲染為 <code>Television</code>。</p><p translation-origin=\"off\">With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code>item</code> renders as <code>Television</code>.</p>\n\n<p translation-result=\"on\">下圖展示了這種結構：</p><p translation-origin=\"off\">The following diagram shows this structure:</p>\n\n<div class=\"lightbox\">\n<img alt=\"Property binding diagram of the target, item, in square brackets set to the source, currentItem, on the right of an equal sign\" src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" width=\"502\" height=\"304\">\n</div>\n<p translation-result=\"on\">方括號 <code>[]</code> 中的目標就是子元件中用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾的那個屬性。繫結源（等號的右邊部分）則是父元件傳給內嵌元件的資料。</p><p translation-origin=\"off\">The target in the square brackets, <code>[]</code>, is the property you decorate with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.\nThe binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</p>\n\n<h3 id=\"watching-for-input-changes\" translation-result=\"on\">監視 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#監視-input-的變更\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Watching for <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> changes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#watching-for-input-changes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要想監視 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性的變化，可以用 Angular 的<a href=\"guide/lifecycle-hooks\">生命週期鉤子</a><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>。更多詳情和範例，請參閱<a href=\"guide/lifecycle-hooks\">生命週期鉤子</a> 一章的 <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a>部分。</p><p translation-origin=\"off\">To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use <code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a>.\nSee the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n\n<p><a id=\"output\"></a></p>\n<h2 id=\"sending-data-to-a-parent-component\" translation-result=\"on\">把資料傳送到父元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Sending data to a parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#sending-data-to-a-parent-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">子元件或指令中的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 裝飾器允許資料從子元件傳給父元件。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in a child component or directive lets data flow from the child to the parent.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Output diagram of the data flow going from child to parent\" src=\"generated/images/guide/inputs-outputs/output.svg\" width=\"666\" height=\"340\">\n</div>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 在子元件中標記了一個屬性，作為資料從子元件傳遞到父元件的途徑。</p><p translation-origin=\"off\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway through which data can travel from the child to the parent.</p>\n\n<p translation-result=\"on\">子元件使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 屬性來引發事件，以通知父元件這一變化。為了引發事件，<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 必須是 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 型別，它是 <code>@angular/core</code> 中用來發出自定義事件的類別。</p><p translation-origin=\"off\">The child component uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property to raise an event to notify the parent of the change.\nTo raise an event, an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> must have the type of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which is a class in <code>@angular/core</code> that you use to emit custom events.</p>\n\n<p translation-result=\"on\">下面的例子給出瞭如何在元件中設定 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，來把資料從 HTML 的 <code>&lt;input&gt;</code> 推送到父元件的陣列中。</p><p translation-origin=\"off\">The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child component that pushes data from an HTML <code>&lt;input&gt;</code> to an array in the parent component.</p>\n\n<p translation-result=\"on\">要使用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，就必須配置父元件和子元件。</p><p translation-origin=\"off\">To use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, you must configure the parent and child.</p>\n\n<h3 id=\"configuring-the-child-component-1\" translation-result=\"on\">配置子元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the child component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-child-component-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下面的例子中有一個 <code>&lt;input&gt;</code>，使用者可以輸入一個值，然後點選一個引發事件 <code>&lt;button&gt;</code> 然後，<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 資料中繼到父元件。</p><p translation-origin=\"off\">The following example features an <code>&lt;input&gt;</code> where a user can enter a value and click a <code>&lt;button&gt;</code> that raises an event.\nThe <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在子元件類中匯入 <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> 和 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code></p><p translation-origin=\"off\">Import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> in the child component class:</p>\n\n<code-example format=\"javascript\" language=\"javascript\">\n\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在元件類中，用 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 裝飾一個屬性。下面的例子中 <code>newItemEvent</code> 這個 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的型別為 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>，這意味著它是一個事件。</p><p translation-origin=\"off\">In the component class, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>.\nThe following example <code>newItemEvent</code> <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> has a type of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n\n<code-example header=\"src/app/item-output/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n\n\n</code-example>\n<p translation-result=\"on\">上述宣告中的差異點如下：</p><p translation-origin=\"off\">The different parts of the preceding declaration are as follows:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">裝飾器部件</nt-wrapper><nt-wrapper translation-origin=\"off\">Declaration parts</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個裝飾器函式，它把該屬性標記為資料從子元件進入父元件的一種途徑。</nt-wrapper><nt-wrapper translation-origin=\"off\">A decorator function marking the property as a way for data to go from the child to the parent.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>newItemEvent</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的名字。</nt-wrapper><nt-wrapper translation-origin=\"off\">The name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的型別。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要求 Angular 建立一個新的事件發射器，它發出的資料是 <code>string</code> 型別的。</nt-wrapper><nt-wrapper translation-origin=\"off\">Tells Angular to create a new event emitter and that the data it emits is of type string.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">關於 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 的詳細資訊，請參閱 <a href=\"api/core/EventEmitter\">EventEmitter API 文件</a>。</p><p translation-origin=\"off\">For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在同一個元件類中建立一個 <code>addNewItem()</code> 方法：</p><p translation-origin=\"off\">Create an <code>addNewItem()</code> method in the same component class:</p>\n\n<code-example header=\"src/app/item-output/item-output.component.ts\" path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&lt;string&gt;();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addNewItem()</code> 函式使用 <code>newItemEvent</code> 這個 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 來引發一個事件，該事件帶有使用者輸入到 <code>&lt;input&gt;</code> 中的值。</p><p translation-origin=\"off\">The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>, to raise an event with the value the user types into the <code>&lt;input&gt;</code>.</p>\n\n</li>\n</ol>\n<h3 id=\"configuring-the-childs-template\" translation-result=\"on\">配置子元件的範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-childs-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-childs-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">子元件的範本有兩個控制項。第一個是帶有<a href=\"guide/template-reference-variables\">範本參考變數</a> <code>#newItem</code> 的 <code>&lt;input&gt;</code>，使用者可在其中輸入條目名稱。<code>#newItem</code> 變數的 <code>value</code> 屬性儲存了使用者輸入到 <code>&lt;input&gt;</code> 中的值。</p><p translation-origin=\"off\">The child's template has two controls.\nThe first is an HTML <code>&lt;input&gt;</code> with a <a href=\"guide/template-reference-variables\">template reference variable</a>, <code>#newItem</code>, where the user types in an item name.\nThe <code>value</code> property of the <code>#newItem</code> variable stores what the user types into the <code>&lt;input&gt;</code>.</p>\n\n<code-example header=\"src/app/item-output/item-output.component.html\" path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\">\n&lt;label for=\"item-input\"&gt;Add an item:&lt;/label&gt;\n&lt;input type=\"text\" id=\"item-input\" #newItem&gt;\n&lt;button type=\"button\" (click)=\"addNewItem(newItem.value)\"&gt;Add to parent's list&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">第二個元素是帶有 <code>click</code> <a href=\"guide/event-binding\">事件繫結</a> 的 <code>&lt;button&gt;</code> 元素。</p><p translation-origin=\"off\">The second element is a <code>&lt;button&gt;</code> with a <code>click</code> <a href=\"guide/event-binding\">event binding</a>.</p>\n\n<p translation-result=\"on\"><code>(click)</code> 事件繫結到了子元件類中 <code>addNewItem()</code> 方法。<code>addNewItem()</code> 方法接受一個 <code>#newItem.value</code> 屬性的值作為引數。</p><p translation-origin=\"off\">The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class.\nThe <code>addNewItem()</code> method takes as its argument the value of the <code>#newItem.value</code> property.</p>\n\n<h3 id=\"configuring-the-parent-component-1\" translation-result=\"on\">配置父元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the parent component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parent-component-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此範例中的 <code>AppComponent</code> 有一個 <code>items</code> 列表，以及一個向陣列中新增更多條目的方法。</p><p translation-origin=\"off\">The <code>AppComponent</code> in this example features a list of <code>items</code> in an array and a method for adding more items to the array.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addItem()</code> 方法接受一個字串形式的引數，然後把該字串新增到 <code>items</code> 陣列中。</p><p translation-origin=\"off\">The <code>addItem()</code> method takes an argument in the form of a string and then adds that string to the <code>items</code> array.</p>\n\n<h3 id=\"configuring-the-parents-template\" translation-result=\"on\">配置父元件的範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parents-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#configuring-the-parents-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">在父範本中，把父元件的方法繫結到子元件的事件上。</p><p translation-origin=\"off\">In the parent's template, bind the parent's method to the child's event.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把子元件選擇器（<code>&lt;app-item-output&gt;</code>）放在父元件的範本 <code>app.component.html</code> 中。</p><p translation-origin=\"off\">Put the child selector, here <code>&lt;app-item-output&gt;</code>, within the parent component's template, <code>app.component.html</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\">\n&lt;app-item-output (newItemEvent)=\"addItem($event)\"&gt;&lt;/app-item-output&gt;\n\n</code-example>\n<p translation-result=\"on\">事件繫結 <code>(newItemEvent)='addItem($event)'</code> 會把子元件中的 <code>newItemEvent</code> 事件連線到父元件的 <code>addItem()</code> 方法。</p><p translation-origin=\"off\">The event binding, <code>(newItemEvent)='addItem($event)'</code>, connects the event in the child, <code>newItemEvent</code>, to the method in the parent, <code>addItem()</code>.</p>\n\n<p translation-result=\"on\"><code>$event</code> 中包含使用者在子元件範本上的 <code>&lt;input&gt;</code> 中鍵入的資料。</p><p translation-origin=\"off\">The <code>$event</code> contains the data that the user types into the <code>&lt;input&gt;</code> in the child template UI.</p>\n\n<p translation-result=\"on\">要了解 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的工作方式，你可以把以下內容新增到父元件的範本中：</p><p translation-origin=\"off\">To see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 會迭代 <code>items</code> 陣列中的條目。當你在子元件的 <code>&lt;input&gt;</code> 中輸入一個值並單擊該按鈕時，子元件就會發出該事件，而父元件的 <code>addItem()</code> 方法會把這個值追加到其 <code>items</code> 陣列中，並且列表中會渲染出這個新條目。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array.\nWhen you enter a value in the child's <code>&lt;input&gt;</code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and new item renders in the list.</p>\n\n</li>\n</ol>\n<h2 id=\"using-input-and-output-together\" translation-result=\"on\">同時使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#同時使用-input-和-output\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Using <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#using-input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以在同一個子元件上使用 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>，範例如下：</p><p translation-origin=\"off\">Use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as follows:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"inputs-outputs/src/app/app.component.html\" region=\"together\">\n&lt;app-input-output\n  [item]=\"currentItem\"\n  (deleteRequest)=\"crossOffItem($event)\"&gt;\n&lt;/app-input-output&gt;\n\n</code-example>\n<p translation-result=\"on\">目標 <code>item</code> 是子元件類中的一個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性，它會從父元件的 <code>currentItem</code> 屬性中獲取它的值。當你單擊“刪除”時，子元件就會引發一個事件 <code>deleteRequest</code>，它會作為父元件中 <code>crossOffItem()</code> 方法的引數。</p><p translation-origin=\"off\">The target, <code>item</code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>.\nWhen you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n\n<p translation-result=\"on\">下圖展示了子元件 <code>&lt;app-input-output&gt;</code> 中 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 的各個部分。</p><p translation-origin=\"off\">The following diagram shows the different parts of the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the <code>&lt;app-input-output&gt;</code> child component.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Diagram of an input target and an output target each bound to a source.\" src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" width=\"800\" height=\"333\">\n</div>\n<p translation-result=\"on\">這裡的子選擇器是 <code>&lt;app-input-output&gt;</code>，它所帶的 <code>item</code> 和 <code>deleteRequest</code> 是子元件類中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 屬性。而 <code>currentItem</code> 屬性和 <code>crossOffItem()</code> 方法都位於父元件類中。</p><p translation-origin=\"off\">The child selector is <code>&lt;app-input-output&gt;</code> with <code>item</code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties in the child component class.\nThe property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n\n<p translation-result=\"on\">要想用“盒子裡的香蕉” <code>[()]</code> 語法來組合屬性和事件繫結，參閱<a href=\"guide/two-way-binding\">雙向繫結</a>。</p><p translation-origin=\"off\">To combine property and event bindings using the banana-in-a-box syntax, <code>[()]</code>, see <a href=\"guide/two-way-binding\">Two-way Binding</a>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives\n - guide/component-interaction\n - guide/example-apps-list\n - guide/glossary\n - guide/observables-in-angular\n - guide/template-overview\n - guide/template-syntax\n - guide/two-way-binding\n - tutorial/first-app/first-app-lesson-05\n - tutorial/tour-of-heroes/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnChanges\n - api/core/Output\n - guide/event-binding\n - guide/inputs-outputs#configuring-the-child-component\n - guide/inputs-outputs#configuring-the-child-component-1\n - guide/inputs-outputs#configuring-the-childs-template\n - guide/inputs-outputs#configuring-the-parent-component\n - guide/inputs-outputs#configuring-the-parent-component-1\n - guide/inputs-outputs#configuring-the-parents-template\n - guide/inputs-outputs#sending-data-to-a-child-component\n - guide/inputs-outputs#sending-data-to-a-parent-component\n - guide/inputs-outputs#sharing-data-between-child-and-parent-directives-and-components\n - guide/inputs-outputs#using-input-and-output-together\n - guide/inputs-outputs#watching-for-input-changes\n - guide/inputs-outputs#同時使用-input-和-output\n - guide/inputs-outputs#在父子指令及元件之間共享資料\n - guide/inputs-outputs#把資料傳送到子元件\n - guide/inputs-outputs#把資料傳送到父元件\n - guide/inputs-outputs#監視-input-的變更\n - guide/inputs-outputs#配置子元件\n - guide/inputs-outputs#配置子元件-1\n - guide/inputs-outputs#配置子元件的範本\n - guide/inputs-outputs#配置父元件\n - guide/inputs-outputs#配置父元件-1\n - guide/inputs-outputs#配置父元件的範本\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/property-binding\n - guide/template-reference-variables\n - guide/two-way-binding\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/inputs-outputs.md?message=docs%3A%20請簡述你的修改...\n-->"}