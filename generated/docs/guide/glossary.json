{"id":"guide/glossary","title":"Glossary","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/glossary.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"glossary\" translation-result=\"on\">Angular 詞彙表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Glossary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 有自己的詞彙表。\n雖然大多數 Angular 短語都是日常用語或計算機術語，但是在 Angular 體系中，它們有特別的含義。</p><p translation-origin=\"off\">Angular has its own vocabulary.\nMost Angular terms are common English words or computing terms that have a specific meaning within the Angular system.</p>\n\n<p translation-result=\"on\">本詞彙表列出了常用術語和少量具有反常或意外含義的不常用術語。</p><p translation-origin=\"off\">This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</p>\n\n<p><a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"A - Glossary | Angular\">A</a>\n<a href=\"guide/glossary#binding\" title=\"B - Glossary | Angular\">B</a>\n<a href=\"guide/glossary#case-types\" title=\"C - Glossary | Angular\">C</a>\n<a href=\"guide/glossary#data-binding\" title=\"D - Glossary | Angular\">D</a>\n<a href=\"guide/glossary#eager-loading\" title=\"E - Glossary | Angular\">E</a>\n<a href=\"guide/glossary#form-control\" title=\"F - Glossary | Angular\">F</a>\n<a href=\"guide/glossary#immutability\" title=\"G - Glossary | Angular\">G</a>\n<a href=\"guide/glossary#immutability\" title=\"H - Glossary | Angular\">H</a>\n<a href=\"guide/glossary#immutability\" title=\"I - Glossary | Angular\">I</a>\n<a href=\"guide/glossary#javascript\" title=\"J - Glossary | Angular\">J</a>\n<a href=\"guide/glossary#lazy-loading\" title=\"K - Glossary | Angular\">K</a>\n<a href=\"guide/glossary#lazy-loading\" title=\"L - Glossary | Angular\">L</a>\n<a href=\"guide/glossary#module\" title=\"M - Glossary | Angular\">M</a>\n<a href=\"guide/glossary#ngmodule\" title=\"N - Glossary | Angular\">N</a>\n<a href=\"guide/glossary#observable\" title=\"O - Glossary | Angular\">O</a>\n<a href=\"guide/glossary#pipe\" title=\"P - Glossary | Angular\">P</a>\n<a href=\"guide/glossary#reactive-forms\" title=\"Q - Glossary | Angular\">Q</a>\n<a href=\"guide/glossary#reactive-forms\" title=\"R - Glossary | Angular\">R</a>\n<a href=\"guide/glossary#schematic\" title=\"S - Glossary | Angular\">S</a>\n<a href=\"guide/glossary#target\" title=\"T - Glossary | Angular\">T</a>\n<a href=\"guide/glossary#unidirectional-data-flow\" title=\"U - Glossary | Angular\">U</a>\n<a href=\"guide/glossary#view\" title=\"V - Glossary | Angular\">V</a>\n<a href=\"guide/glossary#web-component\" title=\"W - Glossary | Angular\">W</a>\n<a href=\"guide/glossary#zone\" title=\"X - Glossary | Angular\">X</a>\n<a href=\"guide/glossary#zone\" title=\"Y - Glossary | Angular\">Y</a>\n<a href=\"guide/glossary#zone\" title=\"Z - Glossary | Angular\">Z</a></p>\n<!-- vale Angular.Google_Headings = NO -->\n<p><a id=\"aot\"></a></p>\n<h2 id=\"ahead-of-time-aot-compilation\" translation-result=\"on\">預先 （ahead-of-time, AOT） 編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">ahead-of-time (AOT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 的預先（AOT）編譯器可以在建構階段把 Angular 的 HTML 程式碼和 TypeScript 程式碼轉換成高效的 JavaScript 程式碼。建構階段發生在瀏覽器下載並執行所產生的程式碼之前。（譯者注：故名“預先”）\n對於產品環境，這是最好的編譯模式，相對於<a href=\"guide/glossary#just-in-time-jit-compilation\" title=\"just-in-time (JIT) compilation - Glossary | Angular\">即時 （JIT） 編譯</a>.而言，它能減小載入時間，並提高效能。</p><p translation-origin=\"off\">The Angular ahead-of-time (AOT) compiler converts Angular HTML and TypeScript code into efficient JavaScript code during the build phase. The build phase occurs before the browser downloads and runs the rendered code.\nThis is the best compilation mode for production environments, with decreased load time and increased performance compared to <a href=\"guide/glossary#just-in-time-jit-compilation\" title=\"just-in-time (JIT) compilation - Glossary | Angular\">just-in-time (JIT) compilation</a>.</p>\n\n<p translation-result=\"on\">使用命令列工具 <code>ngc</code> 來編譯你的應用之後，就可以直接啟動一個模組工廠，這意味著你不必再在 JavaScript 打包檔案中包含 Angular 編譯器。</p><p translation-origin=\"off\">By compiling your application using the <code>ngc</code> command-line tool, you can bootstrap directly to a module factory, so you do not need to include the Angular compiler in your JavaScript bundle.</p>\n\n<h2 id=\"angular-element\" translation-result=\"on\">Angular 元素（element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Angular element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">被包裝成<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">自訂元素</a>的 Angular <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">元件</a>。</p><p translation-origin=\"off\">An Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> packaged as a <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n\n<p translation-result=\"on\">在 <a href=\"guide/elements\" title=\"Angular elements overview | Angular\">Angular 元素概覽</a>中瞭解更多資訊。</p><p translation-origin=\"off\">Learn more in <a href=\"guide/elements\" title=\"Angular elements overview | Angular\">Angular Elements Overview</a>.</p>\n\n<h2 id=\"angular-package-format-apf\" translation-result=\"on\">Angular 包格式 （APF）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-package-format-apf\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Angular package format (APF)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-package-format-apf\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">所有第一方 Angular 套件和大多數第三方 Angular 庫都在使用的 npm 包佈局的 Angular 專有規範。</p><p translation-origin=\"off\">An Angular specific specification for layout of npm packages that is used by all first-party Angular packages, and most third-party Angular libraries.</p>\n\n<p translation-result=\"on\">在 <a href=\"guide/angular-package-format\" title=\"Angular Package Format | Angular\">Angular 包格式規範</a>中瞭解更多資訊。</p><p translation-origin=\"off\">Learn more in the <a href=\"guide/angular-package-format\" title=\"Angular Package Format | Angular\">Angular Package Format specification</a>.</p>\n\n<h2 id=\"annotation\" translation-result=\"on\">註解（Annotation）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">annotation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">為類提供元資料的結構。欲知詳情，參閱<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>。</p><p translation-origin=\"off\">A structure that provides metadata for a class.\nTo learn more, see <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.</p>\n\n<h2 id=\"app-shell\" translation-result=\"on\">應用外殼（app-shell）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#app-shell\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">app-shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#app-shell\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">應用外殼是一種在建構期間透過路由為應用渲染出部分內容的方式。\n這樣就能為使用者快速渲染出一個有意義的首屏頁面，因為瀏覽器可以在初始化指令碼之前渲染出靜態的 HTML 和 CSS。\n欲知詳情，參閱<a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\" title=\"The App Shell Model | Web Fundamentals | Google Developers\">應用外殼模型</a>。</p><p translation-origin=\"off\">App shell is a way to render a portion of your application using a route at build time.\nThis gives users a meaningful first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript.\nTo learn more, see <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\" title=\"The App Shell Model | Web Fundamentals | Google Developers\">The App Shell Model</a>.</p>\n\n<p translation-result=\"on\">你可以使用 Angular CLI 來<a href=\"cli/generate#app-shell\" title=\"app-shell - ng generate | CLI | Angular\">產生</a>一個應用外殼。\n它可以在瀏覽器下載完整版應用之前，先快速啟動一個靜態渲染頁面（所有頁面的公共骨架）來增強使用者體驗，等程式碼載入完畢後再自動切換到完整版。\n這個靜態渲染的頁面是所有頁面的公共骨架。\n欲知詳情，參見 <a href=\"guide/service-worker-intro\" title=\"Angular service worker introduction | Angular\">Service Worker 與 PWA</a>。</p><p translation-origin=\"off\">You can use the Angular CLI to <a href=\"cli/generate#app-shell\" title=\"app-shell - ng generate | CLI | Angular\">generate</a> an app shell.\nThis can improve the user experience by quickly launching a static rendered page while the browser downloads the full client version and switches to it automatically after the code loads.\nA static rendered page is a skeleton common to all pages.\nTo learn more, see <a href=\"guide/service-worker-intro\" title=\"Angular service worker introduction | Angular\">Service Worker and PWA</a>.</p>\n\n<h2 id=\"architect\" translation-result=\"on\">建築師（Architect）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#architect\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Architect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#architect\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">CLI 用來根據所提供的配置執行復雜任務（比如編譯和執行測試）的工具。\n建築師是一個外殼，它用來對一個指定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標配置</a>來執行一個<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構器（builder）</a> （定義在一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中）。\n<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構器</a>在 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中定義。</p><p translation-origin=\"off\">The tool that the Angular CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration.\nArchitect is a shell that runs a <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a> with a given <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a>.\nThe <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a> is defined in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n\n<p translation-result=\"on\">在<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作區配置檔案</a>中，\"architect\" 區可以為建築師的各個建構器提供配置項。</p><p translation-origin=\"off\">In the <a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">workspace configuration file</a>, an \"architect\" section provides configuration options for Architect builders.</p>\n\n<p translation-result=\"on\">比如，內建的 linting 建構器定義在 <code>@angular-devkit/build_angular:tslint</code> 套件中，它使用 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 工具來執行 linting 操作，其配置是在 <code>tslint.json</code> 檔案中指定的。</p><p translation-origin=\"off\">For example, a built-in builder for linting is defined in the package <code>@angular-devkit/build_angular:tslint</code>, which uses the <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> tool to perform linting, with a configuration specified in a <code>tslint.json</code> file.</p>\n\n<p translation-result=\"on\">使用 <a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 命令 <code>ng run</code></a>可以透過指定與某個建構器相關聯的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標配置</a>來呼叫此建構器。\n整合器（Integrator）可以新增一些建構器來啟用某些工具和工作流，以便透過 Angular CLI 來執行它。比如，自訂建構器可以把 CLI 命令（如 <code>ng build</code> 或 <code>ng test</code>）的內建實現替換為第三方工具。</p><p translation-origin=\"off\">Use the <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular CLI command to invoke a builder by specifying a <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a> associated with that builder.\nIntegrators can add builders to enable tools and workflows to run through the Angular CLI.\nFor example, a custom builder can replace the third-party tools used by the built-in implementations for Angular CLI commands, such as <code>ng build</code> or <code>ng test</code>.</p>\n\n<h2 id=\"attribute-directive\" translation-result=\"on\">屬性型指令（attribute directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令（directive）</a>的一種。可以監聽或修改其它 HTML 元素、特性 （attribute）、屬性 （property）、元件的行為。通常用作 HTML 屬性，就像它的名字所暗示的那樣。</p><p translation-origin=\"off\">A category of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that can listen to and modify the behavior of other HTML elements, attributes, properties, and components.\nThey are usually represented as HTML attributes, hence the name.</p>\n\n<p translation-result=\"on\">要了解更多，參閱<a href=\"guide/attribute-directives\" title=\"Attribute directives | Angular\"><em>屬性型指令</em></a>。</p><p translation-origin=\"off\">Learn more in <a href=\"guide/attribute-directives\" title=\"Attribute directives | Angular\">Attribute Directives</a>.</p>\n\n<h2 id=\"binding\" translation-result=\"on\">繫結 （binding）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">廣義上是指把變數或屬性設定為某個資料值的一種實踐。\n在 Angular 中，一般是指<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結</a>，它會根據資料物件屬性的值來設定 DOM 物件的屬性。</p><p translation-origin=\"off\">Generally, the practice of setting a variable or property to a data value.\nWithin Angular, typically refers to <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>, which coordinates DOM object properties with data object properties.</p>\n\n<p translation-result=\"on\">有時也會指在“<a href=\"guide/glossary#token\" title=\"token - Glossary | Angular\">令牌（Token）</a>”和依賴<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者（Provider）</a>\n之間的<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a> 繫結。</p><p translation-origin=\"off\">Sometimes refers to a <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency-injection</a> binding between a <a href=\"guide/glossary#token\" title=\"token - Glossary | Angular\">token</a> and a dependency <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.</p>\n\n<h2 id=\"bootstrap\" translation-result=\"on\">引導（bootstrap）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">bootstrap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種用來初始化和啟動應用或系統的途徑。</p><p translation-origin=\"off\">A way to initialize and launch an application or system.</p>\n\n<p translation-result=\"on\">在 Angular 中，應用的根模組（<code>AppModule</code>）有一個 <code>bootstrap</code> 屬性，用於指出該應用的的最上層<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>。\n在引導期間，Angular 會建立這些元件，並插入到宿主頁面 <code>index.html</code> 中。\n你可以在同一個 <code>index.html</code> 中引導多個應用，每個應用都有一些自己的元件。</p><p translation-origin=\"off\">In Angular, the <code>AppModule</code> root NgModule of an application has a <code>bootstrap</code> property that identifies the top-level <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a> of the application.\nDuring the bootstrap process, Angular creates and inserts these components into the <code>index.html</code> host web page.\nYou can bootstrap multiple applications in the same <code>index.html</code>.\nEach application contains its own components.</p>\n\n<p translation-result=\"on\">要了解更多，參閱<a href=\"guide/bootstrapping\" title=\"Launching your app with a root module | Angular\">引導啟動</a>一章。</p><p translation-origin=\"off\">Learn more in <a href=\"guide/bootstrapping\" title=\"Launching your app with a root module | Angular\">Bootstrapping</a>.</p>\n\n<h2 id=\"builder\" translation-result=\"on\">建構器（Builder）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#builder\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">builder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#builder\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個函式，它使用 <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> API 來執行復雜的過程，比如建構或測試。\n建構器的程式碼定義在一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a>中。</p><p translation-origin=\"off\">A function that uses the <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> API to perform a complex process such as <code>build</code> or <code>test</code>.\nThe builder code is defined in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n\n<p translation-result=\"on\">比如，<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\" title=\"packages/angular_devkit/build_angular/src/builders/browser | angular/angular-cli | GitHub\">BrowserBuilder</a> 針對某個瀏覽器目標執行 <a href=\"https://webpack.js.org\" title=\"webpack | JS.ORG\">webpack</a> 建構，而 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\" title=\"packages/angular_devkit/build_angular/src/builders/karma | angular/angular-cli | GitHub\">KarmaBuilder</a> 則啟動 Karma 伺服器，並且針對單元測試執行 webpack 建構。</p><p translation-origin=\"off\">For example, <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\" title=\"packages/angular_devkit/build_angular/src/builders/browser | angular/angular-cli | GitHub\">BrowserBuilder</a> runs a <a href=\"https://webpack.js.org\" title=\"webpack | JS.ORG\">webpack</a> build for a browser target and <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\" title=\"packages/angular_devkit/build_angular/src/builders/karma | angular/angular-cli | GitHub\">KarmaBuilder</a> starts the Karma server and runs a webpack build for unit tests.</p>\n\n<p translation-result=\"on\"><a href=\"cli/run\" title=\"ng run | CLI | Angular\">CLI 命令 <code>ng run</code></a> 使用一個特定的<a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">目標配置</a>來呼叫建構器。\n<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區配置</a>檔案 <code>angular.json</code> 中包含這些內建建構器的預設配置。</p><p translation-origin=\"off\">The <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular CLI command invokes a builder with a specific <a href=\"guide/glossary#target\" title=\"target - Glossary | Angular\">target configuration</a>.\nThe <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">workspace configuration</a> file, <code>angular.json</code>, contains default configurations for built-in builders.</p>\n\n<p><a id=\"camelcase\"></a></p>\n<p><a id=\"case-conventions\"></a>\n<a id=\"dash-case\"></a></p>\n<h2 id=\"case-types\" translation-result=\"on\">大小寫型別（case types）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">case types<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 使用大小寫約定來區分多種名字，詳見<a href=\"guide/styleguide#02-01\" title=\"Style 02-01 - Angular coding style guide | Angular\">風格指南中的 \"命名\" 一節</a>。下面是這些大小寫型別的彙總表：</p><p translation-origin=\"off\">Angular uses capitalization conventions to distinguish the names of various types, as described in the <a href=\"guide/styleguide#02-01\" title=\"Style 02-01 - Angular coding style guide | Angular\">naming guidelines section</a> of the Style Guide.\nHere is a summary of the case types:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">例子</nt-wrapper><nt-wrapper translation-origin=\"off\">example</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">小駝峰形式（camelCase）</nt-wrapper><nt-wrapper translation-origin=\"off\">camelCase</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">符號、屬性、方法、管道名稱、非元件指令選擇器、常量。<br>標準或小駝峰形式在每個單詞的第一個字母上使用小寫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Symbols, properties, methods, pipe names, non-component directive selectors, constants. <br> Standard or lower camel case uses lowercase on the first letter of the item.</nt-wrapper></td>\n<td align=\"left\"><code>selectedHero</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">大駝峰形式<br>Pascal 形式</nt-wrapper><nt-wrapper translation-origin=\"off\">UpperCamelCase <br> PascalCase</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">類別名稱，包括定義元件、介面、NgModules、指令和管道的類別。<br>大駝峰形式在每個單詞的第一個字母上使用大寫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Class names, including classes that define components, interfaces, NgModules, directives, and pipes. <br> Upper camel case uses uppercase on the first letter of the item.</nt-wrapper></td>\n<td align=\"left\"><code>HeroComponent</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">中線形式（dash-case）<br>烤串形式（kebab-case）</nt-wrapper><nt-wrapper translation-origin=\"off\">dash-case <br> kebab-case</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">檔名中的描述部分，元件的選擇器。</nt-wrapper><nt-wrapper translation-origin=\"off\">Descriptive part of file names, component selectors.</nt-wrapper></td>\n<td align=\"left\"><code>app-hero-list</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">下劃線形式（underscore_case）<br>蛇形形式（snake_case）</nt-wrapper><nt-wrapper translation-origin=\"off\">underscore_case <br> snake_case</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">通常不在 Angular 中使用。<br>蛇形形式使用下劃線連線各個單詞。</nt-wrapper><nt-wrapper translation-origin=\"off\">Not typically used in Angular. <br> Snake case uses words connected with underscores.</nt-wrapper></td>\n<td align=\"left\"><code>convert_link_mode</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">大寫下劃線形式（UPPER_UNDERSCORE_CASE）<br>大寫蛇形形式（UPPER_SNAKE_CASE）<br> 尖叫蛇形形式（SCREAMING_SNAKE_CASE）</nt-wrapper><nt-wrapper translation-origin=\"off\">UPPER_UNDERSCORE_CASE <br> UPPER_SNAKE_CASE <br> SCREAMING_SNAKE_CASE</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">傳統的常量寫法（可以接受，但更推薦用小駝峰形式（camelCase））<br>大蛇形形式使用下劃線分隔的全大寫單詞。</nt-wrapper><nt-wrapper translation-origin=\"off\">Traditional for constants. <br> This case is acceptable, but camelCase is preferred. <br> Upper snake case uses words in all capital letters connected with underscores.</nt-wrapper></td>\n<td align=\"left\"><code>FIX_ME</code></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"change-detection\" translation-result=\"on\">變更檢測（change detection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#change-detection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#change-detection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 框架會透過此機制將應用程式 UI 的狀態與資料的狀態同步。變更檢測器在執行時會檢查資料模型的當前狀態，並在下一輪迭代時將其和先前儲存的狀態進行比較。</p><p translation-origin=\"off\">The mechanism by which the Angular framework synchronizes the state of the UI of an application with the state of the data.\nThe change detector checks the current state of the data model whenever it runs, and maintains it as the previous state to compare on the next iteration.</p>\n\n<p translation-result=\"on\">當應用邏輯更改元件資料時，繫結到檢視中 DOM 屬性上的值也要隨之更改。變更檢測器負責更新檢視以反映當前的資料模型。類似地，使用者也可以與 UI 進行互動，從而引發要更改資料模型狀態的事件。這些事件可以觸發變更檢測。</p><p translation-origin=\"off\">As the application logic updates component data, values that are bound to DOM properties in the view can change.\nThe change detector is responsible for updating the view to reflect the current data model.\nSimilarly, the user can interact with the UI, causing events that change the state of the data model.\nThese events can trigger change detection.</p>\n\n<p translation-result=\"on\">使用預設的變更檢測策略，變更檢測器將遍歷每個檢視模型上的<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">檢視層次結構</a>，以檢查範本中的每個<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結屬性</a>。在第一階段，它將所依賴的資料的當前狀態與先前狀態進行比較，並收集更改。在第二階段，它將更新頁面上的 DOM 以反映出所有新的資料值。</p><p translation-origin=\"off\">Using the default change-detection strategy, the change detector goes through the <a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">view hierarchy</a> on each VM turn to check every <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data-bound property</a> in the template.\nIn the first phase, it compares the current state of the dependent data with the previous state, and collects changes.\nIn the second phase, it updates the page DOM to reflect any new data values.</p>\n\n<p translation-result=\"on\">如果設定了 <code>OnPush</code> 變更檢測策略，則變更檢測器僅在<a href=\"api/core/ChangeDetectorRef\" title=\"ChangeDetectorRef | @angular/core - API | Angular\">顯式呼叫</a>它或由 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 參考的變化或觸發事件處理程式時執行。這通常可以提高效能。欲知詳情，參閱<a href=\"https://web.dev/faster-angular-change-detection\" title=\"Optimize Angular's change detection | web.dev\">最佳化 Angular 的變更檢測</a>。</p><p translation-origin=\"off\">If you set the <code>OnPush</code> change-detection strategy, the change detector runs only when <a href=\"api/core/ChangeDetectorRef\" title=\"ChangeDetectorRef | @angular/core - API | Angular\">explicitly invoked</a>, or when it is triggered by an <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> reference change or event handler.\nThis typically improves performance.\nTo learn more, see <a href=\"https://web.dev/faster-angular-change-detection\" title=\"Optimize Angular's change detection | web.dev\">Optimize the change detection in Angular</a>.</p>\n\n<p><a id=\"decorator\"></a></p>\n<h2 id=\"class-decorator\" translation-result=\"on\">類裝飾器（class decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">class decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>會出現在類定義的緊前方，用來宣告該類具有指定的型別，並且提供適合該型別的元資料。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</p>\n\n<p translation-result=\"on\">可以用下列裝飾器來宣告 Angular 的類別。</p><p translation-origin=\"off\">The following decorators can declare Angular class types.</p>\n\n<ul>\n<li>\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code></p>\n</li>\n<li>\n<p><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code></p>\n</li>\n<li>\n<p><code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>()</code></p>\n</li>\n<li>\n<p><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></p>\n</li>\n<li>\n<p><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code></p>\n</li>\n</ul>\n<h2 id=\"class-field-decorator\" translation-result=\"on\">類欄位裝飾器（class field decorator）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">class field decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">出現在類定義中屬性緊前方的<a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>陳述式用來宣告該欄位的型別。比如 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 和 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> statement immediately before a field in a class definition that declares the type of that field.\nSome examples are <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>.</p>\n\n<h2 id=\"collection\" translation-result=\"on\">集合（collection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#collection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#collection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中，是指收錄在同一個 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 套件</a> 中的<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">一組原理圖（schematics）</a>。</p><p translation-origin=\"off\">In Angular, a set of related <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> collected in an <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package</a>.</p>\n\n<p><a id=\"cli\"></a></p>\n<h2 id=\"command-line-interface-cli\" translation-result=\"on\">命令列介面（CLI）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">command-line interface (CLI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI</a> 是一個命令列工具，用於管理 Angular 的開發週期。它用於為<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a>或<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>建立初始的腳手架，並且執行<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">產生器（schematics）</a>來為初始產生的版本新增或修改各類程式碼。\nCLI 支援開發週期中的所有階段，比如建構、測試、打套件和部署。</p><p translation-origin=\"off\">The <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI</a> is a command-line tool for managing the Angular development cycle.\nUse it to create the initial filesystem scaffolding for a <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a> or <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>, and to run <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> that add and modify code for initial generic versions of various elements.\nThe Angular CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">要開始使用 CLI 來建立新專案，參閱<a href=\"guide/setup-local\" title=\"Setting up the local environment and workspace | Angular\">建立本地開發環境</a>。</p><p translation-origin=\"off\">To begin using the Angular CLI for a new project, see <a href=\"guide/setup-local\" title=\"Setting up the local environment and workspace | Angular\">Local Environment Setup</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要了解 CLI 的全部功能，參閱 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">CLI 命令參考手冊</a>。</p><p translation-origin=\"off\">To learn more about the full capabilities of the Angular CLI, see the <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI command reference</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">參閱<a href=\"guide/glossary#schematics-cli\" title=\"Schematics CLI - Glossary | Angular\">Schematics CLI</a>。</p><p translation-origin=\"off\">See also <a href=\"guide/glossary#schematics-cli\" title=\"Schematics CLI - Glossary | Angular\">Schematics CLI</a>.</p>\n\n<h2 id=\"component\" translation-result=\"on\">元件 （component）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個帶有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>的類，和它的伴生<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">範本</a>關聯在一起。元件類及其範本共同定義了一個<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>。\n元件是<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>的一種特例。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器擴充了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器，增加了一些與範本有關的特性。</p><p translation-origin=\"off\">A class with the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that associates it with a companion <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a>.\nTogether, the component class and template define a <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a>.\nA component is a special type of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator extends the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator with template-oriented features.</p>\n\n<p translation-result=\"on\">Angular 的元件類負責暴露資料，並透過<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結機制</a>來處理絕大多數檢視的顯示和使用者互動邏輯。</p><p translation-origin=\"off\">An Angular component class is responsible for exposing data and handling most of the display and user-interaction logic of the view through <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>.</p>\n\n<p translation-result=\"on\">要了解更多關於元件類、範本和檢視的知識，參閱 <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a> 一章。</p><p translation-origin=\"off\">Read more about component classes, templates, and views in <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Introduction to Angular concepts</a>.</p>\n\n<h2 id=\"configuration\" translation-result=\"on\">配置（configuration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">參閱<a href=\"guide/glossary#workspace-configuration\" title=\"workspace configuration - Glossary | Angular\">工作區配置</a></p><p translation-origin=\"off\">See <a href=\"guide/glossary#workspace-configuration\" title=\"workspace configuration - Glossary | Angular\">workspace configuration</a></p>\n\n<h2 id=\"content-projection\" translation-result=\"on\">內容投影（content projection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#content-projection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">content projection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#content-projection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種從元件外把 DOM 內容插入到當前元件檢視的特定位置上的方式。</p><p translation-origin=\"off\">A way to insert DOM content from outside a component into the view of the component in a designated spot.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/lifecycle-hooks#responding-to-projected-content-changes\" title=\"Responding to projected content changes - Lifecycle Hooks | Angular\">內容變化的應對方式</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/lifecycle-hooks#responding-to-projected-content-changes\" title=\"Responding to projected content changes - Lifecycle Hooks | Angular\">Responding to changes in content</a>.</p>\n\n<h2 id=\"custom-element\" translation-result=\"on\">自訂元素（Custom element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">custom element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種 Web 平台的特性，目前已經被絕大多數瀏覽器支援，在其它瀏覽器中也可以透過Polyfill指令碼獲得支援（參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>）。</p><p translation-origin=\"off\">A web platform feature, currently supported by most browsers and available in other browsers through polyfills.\nSee <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser support</a>.</p>\n\n<p translation-result=\"on\">這種自訂元素特性透過允許你定義標籤（其內容是由 JavaScript 程式碼來建立和控制的）來擴充 HTML。當自訂元素被新增到 <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\" title=\"CustomElementRegistry | MDN\">CustomElementRegistry</a> 之後就會被瀏覽器識別。\n自訂元素也叫 <em>Web Component</em>。</p><p translation-origin=\"off\">The custom element feature extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code.\nA custom element is recognized by a browser when it is added to the <a href=\"https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\" title=\"CustomElementRegistry | MDN\">CustomElementRegistry</a>.\nA custom element is also referenced as a <em>web component</em>.</p>\n\n<p translation-result=\"on\">你可以使用 API 來轉換 Angular 元件，以便它能夠註冊進瀏覽器中，並且可以用在你往 DOM 中新增的任意 HTML 中。\n自訂元素標籤可以把元件的檢視（包括變更檢測和資料繫結功能）插入到不受 Angular 控制的內容中。\n參見 <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">Angular 元素</a>。\n另見<a href=\"guide/glossary#dynamic-component-loading\" title=\"dynamic component loading - Glossary | Angular\">動態元件載入</a>。</p><p translation-origin=\"off\">You can use the API to transform an Angular component so that it can be registered with the browser and used in any HTML that you add directly to the DOM within an Angular application.\nThe custom element tag inserts the view of the component, with change-detection and data-binding functionality, into content that would otherwise be displayed without Angular processing.\nSee <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">Angular element</a>.\nSee also <a href=\"guide/glossary#dynamic-component-loading\" title=\"dynamic component loading - Glossary | Angular\">dynamic component loading</a>.</p>\n\n<h2 id=\"data-binding\" translation-result=\"on\">資料繫結（data binding）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">這個過程可以讓應用程式將資料展示給使用者，並對使用者的操作（點選、觸屏、按鍵）做出回應。</p><p translation-origin=\"off\">A process that allows applications to display data values to a user and respond to user actions.\nUser actions include clicks, touches, keystrokes, and so on.</p>\n\n<p translation-result=\"on\">在資料繫結機制下，你只要宣告一下 HTML 部件和資料源之間的關係，把細節交給框架去處理。而以前的手動操作過程是：將資料推送到 HTML 頁面中、新增事件監聽器、從螢幕獲取變化後的資料，並更新應用中的值。</p><p translation-origin=\"off\">In data binding, you declare the relationship between an HTML widget and a data source and let the framework handle the details.\nData binding is an alternative to manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values.</p>\n\n<p translation-result=\"on\">更多的繫結形式，見<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">範本語法</a>：</p><p translation-origin=\"off\">Read about the following forms of binding of the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">Template Syntax</a> in Angular:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a></p><p translation-origin=\"off\"><a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/property-binding\" title=\"Property binding | Angular\">property 繫結</a></p><p translation-origin=\"off\"><a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件繫結</a></p><p translation-origin=\"off\"><a href=\"guide/event-binding\" title=\"Event binding | Angular\">Event binding</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/attribute-binding\" title=\"Attribute binding | Angular\">attribute 繫結</a></p><p translation-origin=\"off\"><a href=\"guide/attribute-binding\" title=\"Attribute binding | Angular\">Attribute binding</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">CSS 類繫結與樣式繫結</a></p><p translation-origin=\"off\"><a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">Class and style binding</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">基於 ngModel 的雙向資料繫結</a></p><p translation-origin=\"off\"><a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">Two-way data binding with ngModel</a></p>\n\n</li>\n</ul>\n<h2 id=\"declarable\" translation-result=\"on\">可宣告物件（declarable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">declarable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以新增到 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的 <code>declarations</code> 列表中的類別。你可以宣告<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">管道</a>，除非它們的裝飾器中的 <code>standalone</code> 標誌設定為 <code>true</code>，這會讓它們成為獨立的。注意：獨立元件/指令/管道都<strong>不是</strong>可宣告物件。有關獨立類別的更多資訊，請參閱<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">後面的內容</a>。</p><p translation-origin=\"off\">A class that you can add to the <code>declarations</code> list of an <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.\nYou can declare <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a>, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">pipes</a>, unless they have the <code>standalone</code> flag in their decorators set to <code>true</code>, which makes them standalone. Note: standalone components/directives/pipes are <strong>not</strong> declarables. More info about standalone classes can be found <a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">below</a>.</p>\n\n<p translation-result=\"on\"><em>不要</em>宣告：</p><p translation-origin=\"off\">Do not declare the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">已經宣告為<a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">獨立（standalone）</a>的類別。</p><p translation-origin=\"off\">A class already declared as <a href=\"guide/glossary#standalone\" title=\"standalone - Glossary | Angular\">standalone</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">已經在其它 NgModule 中宣告過的類別。</p><p translation-origin=\"off\">A class that is already declared in another NgModule.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">從其它套件中匯入的指令陣列。比如，不要再次宣告來自 <code>@angular/forms</code> 中的 <code>FORMS_DIRECTIVES</code>。</p><p translation-origin=\"off\">An array of directives imported from another package.\nFor example, do not declare <code>FORMS_DIRECTIVES</code> from <code>@angular/forms</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">NgModule 類別。</p><p translation-origin=\"off\">NgModule classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">服務類別。</p><p translation-origin=\"off\">Service classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">非 Angular 的類和物件，比如：字串、數字、函式、實體模型、配置、業務邏輯和輔助類別。</p><p translation-origin=\"off\">Non-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">請注意，可宣告物件也可以宣告為獨立的，並且只需在其他獨立元件或現有的 NgModules 中匯入即可，要了解更多資訊，請參閱<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">獨立元件指南</a>。</p><p translation-origin=\"off\">Note that declarables can also be declared as standalone and simply be imported inside other standalone components or existing NgModules, to learn more, see the <a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">Standalone components guide</a>.</p>\n\n<h2 id=\"decorator--decoration\" translation-result=\"on\">裝飾器（decorator | decoration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">decorator | decoration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個函式，用來修飾緊隨其後的類或屬性定義。\n裝飾器（也叫註解）是一種處於階段 3（stage 3）的試驗性 <a href=\"https://github.com/tc39/proposal-decorators\" title=\"tc39/proposal-decorators | GitHub\">JavaScript 語言特性</a>。</p><p translation-origin=\"off\">A function that modifies a class or property definition.\nDecorators are an experimental (stage 3) <a href=\"https://github.com/tc39/proposal-decorators\" title=\"tc39/proposal-decorators | GitHub\">JavaScript language feature</a>.\nA decorator is also referenced as an <em>annotation</em>.\nTypeScript adds support for decorators.</p>\n\n<p translation-result=\"on\">Angular 定義了一些裝飾器，用來為類或屬性附加元資料，來讓自己知道那些類或屬性的含義，以及該如何處理它們。</p><p translation-origin=\"off\">Angular defines decorators that attach metadata to classes or properties so that it knows what those classes or properties mean and how they should work.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱 <a href=\"guide/glossary#class-decorator\" title=\"class decorator - Glossary | Angular\">類裝飾器</a>、<a href=\"guide/glossary#class-field-decorator\" title=\"class field decorator - Glossary | Angular\">類屬性裝飾器</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/glossary#class-decorator\" title=\"class decorator - Glossary | Angular\">class decorator</a>.\nSee also <a href=\"guide/glossary#class-field-decorator\" title=\"class field decorator - Glossary | Angular\">class field decorator</a>.</p>\n\n<h2 id=\"dependency-injection-di\" translation-result=\"on\">依賴注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">依賴注入既是設計模式，同時又是一種機制：當應用程式的一些部件（即一些依賴）需要另一些部件時，利用依賴注入來建立被請求的部件，並將它們注入到需要它們的部件中。</p><p translation-origin=\"off\">A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</p>\n\n<p translation-result=\"on\">在 Angular 中，依賴通常是服務，但是也可以是值，比如字串或函式。應用的<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>（它是在啟動期間自動建立的）會使用該服務或值的配置好的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>來按需例項化這些依賴。各個不同的提供者可以為同一個服務提供不同的實現。</p><p translation-origin=\"off\">In Angular, dependencies are typically services, but they also can be values, such as strings or functions.\nAn <a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">injector</a> for an application (created automatically during bootstrap) instantiates dependencies when needed, using a configured <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a> of the service or value.\nLearn more in <a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">Dependency Injection in Angular</a>.</p>\n\n<h2 id=\"di-token\" translation-result=\"on\">DI 令牌（token）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">DI token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種用來查閱的令牌，它關聯到一個依賴<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>，用於<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>系統中。</p><p translation-origin=\"off\">A lookup token associated with a dependency <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>, for use with the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> system.</p>\n\n<h2 id=\"directive\" translation-result=\"on\">指令（directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個可以修改 DOM 結構或修改 DOM 和元件資料模型中某些屬性的類別。\n指令類別的定義緊跟在 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>之後，以提供元資料。</p><p translation-origin=\"off\">A class that can modify the structure of the DOM or modify attributes in the DOM and component data model.\nA directive class definition is immediately preceded by a <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a> that supplies metadata.</p>\n\n<p translation-result=\"on\">指令類幾乎總與 HTML 元素或屬性 （attribute） 相關。\n通常會把這些 HTML 元素或者屬性 （attribute） 當做指令本身。\n當 Angular 在 HTML <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">範本中</a>發現某個指令時，會建立與之相匹配的指令類別的例項，並且把這部分 DOM 的控制權交給它。</p><p translation-origin=\"off\">A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself.\nWhen Angular finds a directive in an HTML <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a>, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</p>\n\n<p translation-result=\"on\">Angular 有三類指令：</p><p translation-origin=\"off\">Angular has three categories of directive:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>使用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 為某個類關聯一個範本。\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 是對 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 的擴充。</p><p translation-origin=\"off\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">Components</a> use <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> to associate a template with a class.\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> is an extension of <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#attribute-directive\" title=\"attribute directive - Glossary | Angular\">屬性型指令</a>修改頁面元素的行為和外觀。</p><p translation-origin=\"off\"><a href=\"guide/glossary#attribute-directive\" title=\"attribute directive - Glossary | Angular\">Attribute directives</a> modify behavior and appearance of page elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#structural-directive\" title=\"structural directive - Glossary | Angular\">結構型指令</a>修改 DOM 的結構。</p><p translation-origin=\"off\"><a href=\"guide/glossary#structural-directive\" title=\"structural directive - Glossary | Angular\">Structural directives</a> modify the structure of the DOM.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">Angular 提供了一些以 <code>ng</code> 為字首的內建指令。你也可以建立新的指令來實現自己的功能。\n你可以為自訂指令關聯一個<em>選擇器</em>，以擴充<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">範本語法</a>，從而讓你能在應用中使用它。\n<em>選擇器</em>是一個 HTML 標籤，比如 <code>&lt;my-directive&gt;</code>。</p><p translation-origin=\"off\">Angular supplies a number of built-in directives that begin with the <code>ng</code> prefix.\nYou can also create new directives to implement your own functionality.\nYou associate a <em>selector</em> with a custom directive; this extends the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">template syntax</a> that you can use in your applications.\nA <em>selector</em> is an HTML tag, such as <code>&lt;my-directive&gt;</code>.</p>\n\n<p translation-result=\"on\"><strong>UpperCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>）用於參考指令類別。在描述屬性和指令行為時，使用 <strong>UpperCamelCase</strong>。</p><p translation-origin=\"off\"><strong>UpperCamelCase</strong>, such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>, refers to a directive class.\nYou can use <strong>UpperCamelCase</strong> when describing properties and directive behavior.</p>\n\n<p translation-result=\"on\"><strong>lowerCamelCase</strong>（比如 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>）用於參考指令的屬性名。在描述如何將指令應用於 HTML 範本中的元素時，使用 <strong>lowerCamelCase</strong>。</p><p translation-origin=\"off\"><strong>lowerCamelCase</strong>, such as <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> refers to the attribute name of a directive.\nYou can use <strong>lowerCamelCase</strong> when describing how to apply the directive to an element in the HTML template.</p>\n\n<h2 id=\"domain-specific-language-dsl\" translation-result=\"on\">領域特定語言（DSL）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">domain-specific language (DSL)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種特殊用途的函式庫或 API。欲知詳情，參閱<a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" title=\"Domain-specific language | Wikipedia\">領域特定語言</a>詞條。\nAngular 使用領域特定語言擴充了 TypeScript，用於與 Angular 應用相關的許多領域。這些 DSL 都定義在 NgModule 中，比如 <a href=\"guide/animations\" title=\"Introduction to Angular animations | Angular\">動畫</a>、<a href=\"guide/forms\" title=\"Building a template-driven form | Angular\">表單</a>和<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導航</a></p><p translation-origin=\"off\">A special-purpose library or API.\nTo learn more, see <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" title=\"Domain-specific language | Wikipedia\">Domain-specific language</a>.\nAngular extends TypeScript with domain-specific languages for a number of domains relevant to Angular applications, defined in NgModules such as <a href=\"guide/animations\" title=\"Introduction to Angular animations | Angular\">animations</a>, <a href=\"guide/forms\" title=\"Building a template-driven form | Angular\">forms</a>, and <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">routing and navigation</a>.</p>\n\n<h2 id=\"dynamic-component-loading\" translation-result=\"on\">動態元件載入（dynamic component loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">dynamic component loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種在執行期間把元件新增到 DOM 中的技術，它需要你從編譯期間排除該元件，然後，當你把它新增到 DOM 中時，再把它接入 Angular 的變更檢測與事件處理框架。</p><p translation-origin=\"off\">A technique for adding a component to the DOM at run time.\nRequires that you exclude the component from compilation and then connect it to the change-detection and event-handling framework of Angular when you add it to the DOM.</p>\n\n<p translation-result=\"on\">參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自訂元素</a>，它提供了一種更簡單的方式來達到相同的效果。</p><p translation-origin=\"off\">See also <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>, which provides an easier path with the same result.</p>\n\n<h2 id=\"eager-loading\" translation-result=\"on\">急性載入（Eager Loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">eager loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在啟動時載入的 NgModule 和元件稱為急性載入，與之相對的是那些在執行期間才載入的方式稱為延遲載入。\n參閱<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">延遲載入</a>。</p><p translation-origin=\"off\">NgModules or components that are loaded on launch are referenced as eager-loaded, to distinguish them from those that are loaded at run time that are referenced as lazy-loaded.\nSee also <a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">lazy loading</a>.</p>\n\n<h2 id=\"ecmascript\">ECMAScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\"><a href=\"https://en.wikipedia.org/wiki/ECMAScript\" title=\"ECMAScript | Wikipedia\">官方 JavaScript 語言規範</a>。</p><p translation-origin=\"off\">The <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" title=\"ECMAScript | Wikipedia\">official JavaScript language specification</a>.</p>\n\n<p translation-result=\"on\">並不是所有瀏覽器都支援最新的 ECMAScript 標準，不過你可以使用<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">轉譯器</a>（比如<a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>）來用最新特性寫程式碼，然後它會被轉譯成可以在瀏覽器的其它版本上執行的程式碼。\n<a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">轉譯器</a>的例子之一就是 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>\n要了解更多，參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>頁。</p><p translation-origin=\"off\">Not all browsers support the latest ECMAScript standard, but you can use a <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">transpiler</a> to write code using the latest features, which will then be transpiled to code that runs on versions that are supported by browsers.\nAn example of a <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">transpiler</a> is <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>.\nTo learn more, see <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser Support</a>.</p>\n\n<h2 id=\"element\" translation-result=\"on\">元素（element）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 定義了 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 類來包裝與渲染有關的原生 UI 元素。這讓你可以在大多數情況下使用 Angular 的範本和資料繫結機制來存取 DOM 元素，而不必再參考原生元素。</p><p translation-origin=\"off\">Angular defines an <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> class to wrap render-specific native UI elements.\nIn most cases, this allows you to use Angular templates and data binding to access DOM elements without reference to the native element.</p>\n\n<p translation-result=\"on\">本文件中一般會使用<em>元素（Element）</em>，以區別於 <em>DOM 元素</em>。這裡的<em>元素</em>指的是 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 類別的例項。如果需要，<em>DOM 元素</em>是可以直接存取的。</p><p translation-origin=\"off\">The documentation generally refers to <em>elements</em> as distinct from <em>DOM elements</em>.\n<em>Elements</em> are instances of a <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> class.\n<em>DOM elements</em> are able to be accessed directly, if necessary.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自訂元素</a>。</p><p translation-origin=\"off\">To learn more, see also <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n\n<h2 id=\"entry-point\" translation-result=\"on\">入口點（entry point）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">entry point<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模組</a>的目的是供 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 套件</a>的使用者進行匯入。入口點模組通常會重新匯出來自其它內部模組的一些符號。每個套件可以包含多個入口點。比如 <code>@angular/core</code> 就有兩個入口點模組，它們可以使用名字 <code>@angular/core</code> 和 <code>@angular/core/testing</code> 進行匯入。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript module</a> that is intended to be imported by a user of an <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm package</a>.\nAn entry-point module typically re-exports symbols from other internal modules.\nA package can contain multiple entry points.\nFor example, the <code>@angular/core</code> package has two entry-point modules, which can be imported using the module names <code>@angular/core</code> and <code>@angular/core/testing</code>.</p>\n\n<h2 id=\"form-control\" translation-result=\"on\">表單控制項（form control）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-control\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">form control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-control\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項，它是 Angular 表單的基本構成要素。它會和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 一起，追蹤表單輸入元素的值、有效性和狀態。</p><p translation-origin=\"off\">An instance of <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>, which is a fundamental building block for Angular forms.\nTogether with <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>, tracks the value, validation, and status of a form input element.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p><p translation-origin=\"off\">Read more forms in the <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to forms in Angular</a>.</p>\n\n<h2 id=\"form-model\" translation-result=\"on\">表單模型（form model）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-model\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">form model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-model\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">是指在指定的時間點，表單輸入元素的值和驗證狀態的\"事實之源\"。當使用<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">響應式表單</a>時，表單模型會在元件類中顯式建立。當使用<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">範本驅動表單</a>時，表單模型是由一些指令隱含建立的。</p><p translation-origin=\"off\">The \"source of truth\" for the value and validation status of a form input element at a given point in time.\nWhen using <a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">reactive forms</a>, the form model is created explicitly in the component class.\nWhen using <a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">template-driven forms</a>, the form model is implicitly created by directives.</p>\n\n<p translation-result=\"on\">要深入瞭解響應式表單和範本驅動表單，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p><p translation-origin=\"off\">Learn more about reactive and template-driven forms in the <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to forms in Angular</a>.</p>\n\n<h2 id=\"form-validation\" translation-result=\"on\">表單驗證（form validation）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-validation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">form validation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#form-validation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種檢查，當表單值發生變化時執行，並根據預定義的約束來彙報指定的這些值是否正確並完全。響應式表單使用<a href=\"guide/form-validation#adding-custom-validators-to-reactive-forms\" title=\"Adding custom validators to reactive forms - Validating form input | Angular\">驗證器函式</a>，而範本驅動表單則使用<a href=\"guide/form-validation#adding-custom-validators-to-template-driven-forms\" title=\"Adding custom validators to template-driven forms - Validating form input | Angular\">驗證器指令</a>。</p><p translation-origin=\"off\">A check that runs when form values change and reports whether the given values are correct and complete, according to the defined constraints.\nReactive forms apply <a href=\"guide/form-validation#adding-custom-validators-to-reactive-forms\" title=\"Adding custom validators to reactive forms - Validating form input | Angular\">validator functions</a>.\nTemplate-driven forms use <a href=\"guide/form-validation#adding-custom-validators-to-template-driven-forms\" title=\"Adding custom validators to template-driven forms - Validating form input | Angular\">validator directives</a>.</p>\n\n<p translation-result=\"on\">要了解更多，參閱<a href=\"guide/form-validation\" title=\"Validating form input | Angular\">表單驗證器</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/form-validation\" title=\"Validating form input | Angular\">Form Validation</a>.</p>\n\n<h2 id=\"immutability\" translation-result=\"on\">不可變性（immutability）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#immutability\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">immutability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#immutability\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">是否能夠在建立之後修改值的狀態。<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">響應式表單</a>會執行不可變性的更改，每次更改資料模型都會產生一個新的資料模型，而不是修改現有的資料模型。\n<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">範本驅動表單</a>則會執行可變的更改，它透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">雙向資料繫結</a>來就地修改現有的資料模型。</p><p translation-origin=\"off\">The inability to alter the state of a value after its creation.\n<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">Reactive forms</a> perform immutable changes in that each change to the data model produces a new data model rather than modifying the existing one.\n<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">Template-driven forms</a> perform mutable changes with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">two-way data binding</a> to modify the existing data model in place.</p>\n\n<h2 id=\"injectable\" translation-result=\"on\">可注入物件（injectable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">injectable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 中的類或其它概念使用<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>機制來提供依賴。\n可供注入的<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服務</a>類必須使用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>標出來。其它條目，比如常量值，也可用於注入。</p><p translation-origin=\"off\">An Angular class or other definition that provides a dependency using the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> mechanism.\nAn injectable <a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">service</a> class must be marked by the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.\nOther items, such as constant values, can also be injectable.</p>\n\n<h2 id=\"injector\" translation-result=\"on\">注入器 （injector）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入系統</a>中可以在快取中根據名字查詢依賴，也可以透過配置過的<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>來建立依賴。\n啟動過程中會自動為每個模組建立一個注入器，並被元件樹繼承。</p><p translation-origin=\"off\">An object in the Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency-injection</a> system that can find a named dependency in its cache or create a dependency using a configured <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.\nInjectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">注入器會提供依賴的一個單例，並把這個單例物件注入到多個元件中。</p><p translation-origin=\"off\">An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">模組和元件級別的注入器樹可以為它們擁有的元件及其子元件提供同一個依賴的不同例項。</p><p translation-origin=\"off\">A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以為同一個依賴使用不同的提供者來配置這些注入器，這些提供者可以為同一個依賴提供不同的實現。</p><p translation-origin=\"off\">You can configure injectors with different providers that can provide different implementations of the same dependency.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">要了解關於多級注入器的更多知識，參閱<a href=\"guide/hierarchical-dependency-injection\" title=\"Hierarchical injectors | Angular\">多級依賴注入</a>一章。</p><p translation-origin=\"off\">Learn more about the injector hierarchy in <a href=\"guide/hierarchical-dependency-injection\" title=\"Hierarchical injectors | Angular\">Hierarchical Dependency Injectors</a>.</p>\n\n<h2 id=\"input\" translation-result=\"on\">輸入屬性 （input）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當定義<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>時，指令屬性上的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器讓該屬性可以作為<a href=\"guide/property-binding\" title=\"Property binding | Angular\">屬性繫結</a>的<em>目標</em>使用。\n資料值會從等號右側的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">範本表示式</a>所指定的資料源流入元件的輸入屬性。</p><p translation-origin=\"off\">When defining a <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator on a directive property makes that property available as a <em>target</em> of a <a href=\"guide/property-binding\" title=\"Property binding | Angular\">property binding</a>.\nData values flow into an input property from the data source identified in the <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> to the right of the equal sign.</p>\n\n<p translation-result=\"on\">要了解更多，參閱 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 裝飾器函式</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> and <code>@Output()</code> decorator functions</a>.</p>\n\n<h2 id=\"interpolation\" translation-result=\"on\">插值（interpolation）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">屬性資料繫結 （property data binding)</a> 的一種形式，位於雙花括號中的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">範本表示式 （template expression）</a>會被渲染成文字。\n在被賦值給元素屬性或者顯示在元素標籤中之前，這些文字可能會先與周邊的文字合併，參閱下面的例子。</p><p translation-origin=\"off\">A form of property <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a> in which a <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> between double-curly braces renders as text.\nThat text can be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example.</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;label&gt;My current hero is {{hero.name}}&lt;/label&gt;\n\n</code-example>\n<p translation-result=\"on\">在<a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a>指南中閱讀更多內容。</p><p translation-origin=\"off\">Read more in the <a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a> guide.</p>\n\n<h2 id=\"ivy\">Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ivy\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">Ivy 是 Angular 當前<a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\" title=\"A plan for version 8.0 and Ivy | Angular Blog\">編譯和渲染管道</a>的歷史代號。它現在是唯一受支援的引擎，所以，一切都在使用 Ivy。</p><p translation-origin=\"off\">Ivy is the historical code name for the current <a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\" title=\"A plan for version 8.0 and Ivy | Angular Blog\">compilation and rendering pipeline</a> in Angular.\nIt is now the only supported engine, so everything uses Ivy.</p>\n\n<h2 id=\"javascript\">JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#javascript\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">欲知詳情，參閱 <a href=\"guide/glossary#ecmascript\" title=\"ECMAScript - Glossary | Angular\">ECMAScript</a>。\n欲知詳情，另見 <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/glossary#ecmascript\" title=\"ECMAScript - Glossary | Angular\">ECMAScript</a>.\nTo learn more, see also <a href=\"guide/glossary#typescript\" title=\"TypeScript - Glossary | Angular\">TypeScript</a>.</p>\n\n<p><a id=\"jit\"></a></p>\n<h2 id=\"just-in-time-jit-compilation\" translation-result=\"on\">即時 （just-in-time, JIT） 編譯<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">just-in-time (JIT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在啟動期間，Angular 的即時編譯器（JIT）會在執行期間把你的 Angular HTML 和 TypeScript 程式碼轉換成高效的 JavaScript 程式碼。</p><p translation-origin=\"off\">The Angular just-in-time (JIT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code at run time, as part of bootstrapping.</p>\n\n<p translation-result=\"on\">當你執行 Angular 的 CLI 命令 <code>ng build</code> 和 <code>ng serve</code> 時，JIT 編譯是預設選項，而且是開發期間的最佳實踐。但是強烈建議你不要在生產環境下使用 JIT 模式，因為它會導致巨大的應用負擔，從而拖累啟動時的效能。</p><p translation-origin=\"off\">JIT compilation is the default (as opposed to AOT compilation) when you run the <code>ng build</code> and <code>ng serve</code> Angular CLI commands, and is a good choice during development.\nJIT mode is strongly discouraged for production use because it results in large application payloads that hinder the bootstrap performance.</p>\n\n<p translation-result=\"on\">與<a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"ahead-of-time (AOT) compilation - Glossary | Angular\">預先 （AOT） 編譯相比</a>。</p><p translation-origin=\"off\">Compare to <a href=\"guide/glossary#ahead-of-time-aot-compilation\" title=\"ahead-of-time (AOT) compilation - Glossary | Angular\">ahead-of-time (AOT) compilation</a>.</p>\n\n<h2 id=\"lazy-loading\" translation-result=\"on\">延遲載入（lazy loading）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">延遲載入過程會把應用拆分成多個包並且按需載入它們，從而提高應用載入速度。\n比如，一些依賴可以根據需要進行延遲載入，與之相對的是那些 <a href=\"guide/glossary#eager-loading\" title=\"eager loading - Glossary | Angular\">急性載入</a> 的模組，它們是根模組所要用的，因此會在啟動期間載入。</p><p translation-origin=\"off\">A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand.\nFor example, dependencies can be lazy loaded as needed.\nThe example differs from <a href=\"guide/glossary#eager-loading\" title=\"eager loading - Glossary | Angular\">eager-loaded</a> modules that are required by the root module and are loaded on launch.</p>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>只有當父檢視啟用時才需要載入子檢視。同樣，你還可以建構一些自訂元素，它們也可以在需要時才載入進 Angular 應用。</p><p translation-origin=\"off\">The <a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">router</a> makes use of lazy loading to load child views only when the parent view is activated.\nSimilarly, you can build custom elements that can be loaded into an Angular application when needed.</p>\n\n<h2 id=\"library\" translation-result=\"on\">庫（library）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>。用來讓其它 Angular 應用包含它，以提供各種功能。庫不是一個完整的 Angular 應用，不能獨立執行。</p><p translation-origin=\"off\">In Angular, a <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a> that provides functionality that can be included in other Angular applications.\nA library is not a complete Angular application and cannot run independently.</p>\n\n<p translation-result=\"on\">要想為非 Angular 應用新增可複用的 Angular 功能，你可以使用 Angular 的<a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">自訂元素</a>。</p><p translation-origin=\"off\">To add re-usable Angular functionality to non-Angular web applications, use Angular <a href=\"guide/glossary#angular-element\" title=\"Angular element - Glossary | Angular\">custom elements</a>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">庫的開發者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 在現有的 <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 中 <code>generate</code> 新庫的腳手架，還能把庫釋出為 <code>npm</code> 套件。</p><p translation-origin=\"off\">Library developers can use the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> to <code>generate</code> scaffolding for a new library in an existing <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>, and can publish a library as an <code>npm</code> package.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">應用開發者可以使用 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 來把一個已釋出的函式庫 <code>add</code> 進這個應用所在的<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a>。</p><p translation-origin=\"off\">Application developers can use the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> to <code>add</code> a published library for use with an application in the same <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">參閱 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理圖（schematic）</a>。</p><p translation-origin=\"off\">See also <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematic</a>.</p>\n\n<h2 id=\"lifecycle-hook\" translation-result=\"on\">生命週期鉤子（lifecycle hook）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">lifecycle hook<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種介面，它允許你監聽<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>的生命週期，比如建立、更新和銷燬等。</p><p translation-origin=\"off\">An interface that allows you to tap into the lifecycle of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a> and <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a> as they are created, updated, and destroyed.</p>\n\n<p translation-result=\"on\">每個介面只有一個鉤子方法，方法名是介面名加字首 <code>ng</code>。比如，<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> 介面的鉤子方法名為 <code>ngOnInit</code>。</p><p translation-origin=\"off\">Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>.\nFor example, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface has a hook method named <code>ngOnInit</code>.</p>\n\n<p translation-result=\"on\">Angular 會按以下順序呼叫鉤子方法：</p><p translation-origin=\"off\">Angular runs these hook methods in the following order:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">鉤子方法</nt-wrapper><nt-wrapper translation-origin=\"off\">hook method</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳細資訊</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><code>ngOnChanges</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當<a href=\"guide/glossary#input\" title=\"input - Glossary | Angular\">輸入</a>或<a href=\"guide/glossary#output\" title=\"output - Glossary | Angular\">輸出</a>繫結值更改時。</nt-wrapper><nt-wrapper translation-origin=\"off\">When an <a href=\"guide/glossary#input\" title=\"input - Glossary | Angular\">input</a> or <a href=\"guide/glossary#output\" title=\"output - Glossary | Angular\">output</a> binding value changes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><code>ngOnInit</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在第一個 <code>ngOnChanges</code> 之後。</nt-wrapper><nt-wrapper translation-origin=\"off\">After the first <code>ngOnChanges</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><code>ngDoCheck</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">開發人員的自訂變更檢測。</nt-wrapper><nt-wrapper translation-origin=\"off\">Developer's custom change detection.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><code>ngAfterContentInit</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件內容初始化後。</nt-wrapper><nt-wrapper translation-origin=\"off\">After component content initialized.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><code>ngAfterContentChecked</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在每次檢查元件內容之後。</nt-wrapper><nt-wrapper translation-origin=\"off\">After every check of component content.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><code>ngAfterViewInit</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在元件的檢視被初始化之後。</nt-wrapper><nt-wrapper translation-origin=\"off\">After the views of a component are initialized.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><code>ngAfterViewChecked</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在每次檢查元件檢視之後。</nt-wrapper><nt-wrapper translation-origin=\"off\">After every check of the views of a component.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><code>ngOnDestroy</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">就在指令被銷燬之前。</nt-wrapper><nt-wrapper translation-origin=\"off\">Just before the directive is destroyed.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命週期鉤子</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">Lifecycle Hooks</a>.</p>\n\n<h2 id=\"module\" translation-result=\"on\">模組（module）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通常，模組會收集一組專注於單一目的的程式碼塊。Angular 既使用 JavaScript 的標準模組，也定義了 Angular 自己的模組，也就是 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p><p translation-origin=\"off\">In general, a module collects a block of code dedicated to a single purpose.\nAngular uses standard JavaScript modules and also defines an Angular module, <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n<p translation-result=\"on\">在 JavaScript （ECMAScript） 中，每個檔案都是一個模組，該檔案中定義的所有物件都屬於這個模組。這些物件可以匯出為公共物件，而這些公共物件可以被其它模組匯入後使用。</p><p translation-origin=\"off\">In JavaScript, or ECMAScript, each file is a module and all objects defined in the file belong to that module.\nObjects can be exported, making them public, and public objects can be imported for use by other modules.</p>\n\n<p translation-result=\"on\">Angular 就是用一組 JavaScript 模組的形式釋出的。這些模組的集合也稱為庫。每個 Angular 庫都帶有 <code>@angular</code> 字首。\n使用 <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">NPM 包管理器</a>安裝它們，並且使用 JavaScript 的 <code>import</code> 宣告陳述式從中匯入各個部件。</p><p translation-origin=\"off\">Angular ships as a collection of JavaScript modules.\nA collection of JavaScript modules are also referenced as a library.\nEach Angular library name begins with the <code>@angular</code> prefix.\nInstall Angular libraries with the <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm package manager</a> and import parts of them with JavaScript <code>import</code> declarations.</p>\n\n<p translation-result=\"on\">與 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 的對比。</p><p translation-origin=\"off\">Compare to <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.</p>\n\n<h2 id=\"ngmodule\" translation-result=\"on\">Ng 模組（NgModule）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>的類定義，它會宣告並提供一組專注於特定功能的程式碼塊，比如業務領域、工作流或一組緊密相關的能力集等。</p><p translation-origin=\"off\">A class definition preceded by the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</p>\n\n<p translation-result=\"on\">像 <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript 模組</a>一樣，NgModule 能匯出那些可供其它 NgModule 使用的功能，也可以從其它 NgModule 中匯入其公開的功能。\nNgModule 類別的元資料中包括一些供應用使用的元件、指令和管道，以及匯入、匯出列表。參閱<a href=\"guide/glossary#declarable\" title=\"declarable - Glossary | Angular\">可宣告物件</a>。</p><p translation-origin=\"off\">Like a <a href=\"guide/glossary#module\" title=\"module - Glossary | Angular\">JavaScript module</a>, an NgModule can export functionality for use by other NgModules and import public functionality from other NgModules.\nThe metadata for an NgModule class collects components, directives, and pipes that the application uses along with the list of imports and exports.\nSee also <a href=\"guide/glossary#declarable\" title=\"declarable - Glossary | Angular\">declarable</a>.</p>\n\n<p translation-result=\"on\">NgModule 通常會根據它匯出的內容決定其檔名，比如，Angular 的 <a href=\"api/common/DatePipe\" title=\"DatePipe | @angular/common - API | Angular\">DatePipe</a> 類就屬於 <code>date_pipe.ts</code> 檔案中一個名叫 <code>date_pipe</code> 的特性模組。\n你可以從 Angular 的<a href=\"guide/glossary#scoped-package\" title=\"scoped package - Glossary | Angular\">範圍化套件</a>中匯入它們，比如 <code>@angular/core</code>。</p><p translation-origin=\"off\">NgModules are typically named after the file in which the exported thing is defined.\nFor example, the Angular <a href=\"api/common/DatePipe\" title=\"DatePipe | @angular/common - API | Angular\">DatePipe</a> class belongs to a feature module named <code>date_pipe</code> in the file <code>date_pipe.ts</code>.\nYou import them from an Angular <a href=\"guide/glossary#scoped-package\" title=\"scoped package - Glossary | Angular\">scoped package</a> such as <code>@angular/core</code>.</p>\n\n<p translation-result=\"on\">每個 Angular 應用都有一個根模組。通常，這個類會命名為 <code>AppModule</code>，並且位於一個名叫 <code>app.module.ts</code> 的檔案中。</p><p translation-origin=\"off\">Every Angular application has a root module.\nBy convention, the class is named <code>AppModule</code> and resides in a file named <code>app.module.ts</code>.</p>\n\n<p translation-result=\"on\">要了解更多，參閱 <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>.</p>\n\n<h2 id=\"npm-package\" translation-result=\"on\">npm 套件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">npm package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm 包管理器</a>用於分發與載入 Angular 的模組和庫。</p><p translation-origin=\"off\">The <a href=\"https://docs.npmjs.com/about-npm\" title=\"About npm | npm\">npm package manager</a> is used to distribute and load Angular modules and libraries.</p>\n\n<p translation-result=\"on\">你還可以瞭解 Angular 如何使用 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">Npm 套件</a> 的更多知識。</p><p translation-origin=\"off\">Learn more about how Angular uses <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">Npm Packages</a>.</p>\n\n<h2 id=\"ngc\">ngc<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngc\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\"><code>ngc</code> 是一個 TypeScript 到 JavaScript 的轉譯器，它會處理 Angular 的註解、元資料、範本，並產生 JavaScript 程式碼。其最新的實現在內部被稱為 <code>ngtsc</code>，因為它是一個對 TypeScript 編譯器 <code>tsc</code> 的最小化包裝，為其加入了 Angular 程式碼的轉換過程。</p><p translation-origin=\"off\"><code>ngc</code> is a Typescript-to-Javascript transpiler that processes Angular decorators, metadata, and templates, and emits JavaScript code.\nThe most recent implementation is internally referred to as <code>ngtsc</code> because it is a minimalistic wrapper around the TypeScript compiler <code>tsc</code> that adds a transform for processing Angular code.</p>\n\n<h2 id=\"observable\" translation-result=\"on\">可觀察物件（Observable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個多值產生器，這些值會被推送給<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">訂閱者</a>。\nAngular 中到處都會用到非同步事件處理。你要透過呼叫可觀察物件的 <code>subscribe()</code> 方法來訂閱它，從而讓這個可觀察物件得以執行，你還要給該方法傳入一些回呼(Callback)函式來接收 \"有新值\"、\"錯誤\" 或 \"完成\" 等通知。</p><p translation-origin=\"off\">A producer of multiple values, which it pushes to <a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">subscribers</a>.\nUsed for asynchronous event handling throughout Angular.\nYou execute an observable by subscribing to it with its <code>subscribe()</code> method, passing callbacks for notifications of new values, errors, or completion.</p>\n\n<p translation-result=\"on\">可觀察物件可以透過下列方式把一個或多個值傳給訂閱者。</p><p translation-origin=\"off\">Observables can deliver in one the following ways a single value or multiple values of any type to subscribers.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">作為函式同步地將值傳遞給請求者</p><p translation-origin=\"off\">Synchronously as a function delivers a value to the requester</p>\n\n</li>\n<li>\n<p translation-result=\"on\">預定後非同步傳遞</p><p translation-origin=\"off\">Scheduled</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">訂閱者會在生成了新值時收到包含這個新值的通知，以及正常結束或錯誤結束時的通知。</p><p translation-origin=\"off\">A subscriber receives notification of new values as they are produced and notification of either normal completion or error completion.</p>\n\n<p translation-result=\"on\">Angular 使用一個名叫<a href=\"https://rxjs.dev\" title=\"RxJS\">響應式擴充 （RxJS）</a>的第三方包來實現這些功能。\n要了解更多，參閱<a href=\"guide/observables\" title=\"Using observables to pass values | Angular\">可觀察物件</a>。</p><p translation-origin=\"off\">Angular uses a third-party library named <a href=\"https://rxjs.dev\" title=\"RxJS\">Reactive Extensions (RxJS)</a>.\nTo learn more, see <a href=\"guide/observables\" title=\"Using observables to pass values | Angular\">Observables</a>.</p>\n\n<h2 id=\"observer\" translation-result=\"on\">觀察者（observer）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">傳給<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可觀察物件</a> 的 <code>subscribe()</code> 方法的一個物件，其中定義了<a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">訂閱者</a>的一組回呼(Callback)函式。</p><p translation-origin=\"off\">An object passed to the <code>subscribe()</code> method for an <a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">observable</a>.\nThe object defines the callbacks for the <a href=\"guide/glossary#subscriber\" title=\"subscriber - Glossary | Angular\">subscriber</a>.</p>\n\n<h2 id=\"output\" translation-result=\"on\">輸出屬性（output）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當定義<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>時，指令屬性上的 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 裝飾器會讓該屬性可用作<a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件繫結</a>的<em>目標</em>。\n事件從該屬性流<em>出</em>到等號右側指定的<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">範本表示式</a>中。</p><p translation-origin=\"off\">When defining a <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a>, the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>{}</code> decorator on a directive property makes that property available as a <em>target</em> of <a href=\"guide/event-binding\" title=\"Event binding | Angular\">event binding</a>.\nEvents stream <em>out</em> of this property to the receiver identified in the <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expression</a> to the right of the equal sign.</p>\n\n<p translation-result=\"on\">要了解更多，參閱 <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> 和 <code>@Output()</code> 裝飾器函式</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/inputs-outputs\" title=\"Sharing data between child and parent directives and components | Angular\"><code>@Input()</code> and <code>@Output()</code> decorator functions</a>.</p>\n\n<h2 id=\"pipe\" translation-result=\"on\">管道（pipe）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個帶有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> 裝飾器的類，它定義了一個函式，用來把輸入值轉換成輸出值，以顯示在<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>中。\nAngular 定義了很多管道，並且你還可可以自訂新的管道。</p><p translation-origin=\"off\">A class which is preceded by the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> decorator and which defines a function that transforms input values to output values for display in a <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a>.\nAngular defines various pipes, and you can define new pipes.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">管道</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>.</p>\n\n<h2 id=\"platform\" translation-result=\"on\">平台（platform）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#platform\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">platform<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#platform\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 術語中，平台是供 Angular 應用程式在其中執行的上下文。Angular 應用程式最常見的平台是 Web 瀏覽器，但它也可以是移動裝置的作業系統或 Web 伺服器。</p><p translation-origin=\"off\">In Angular terminology, a platform is the context in which an Angular application runs.\nThe most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server.</p>\n\n<p translation-result=\"on\"><code>@angular/platform-*</code> 軟體套件提供了對各種 Angular 執行時平台的支援。這些軟體包透過提供用於收集使用者輸入和渲染指定平台 UI 的實現，以允許使用 <code>@angular/core</code> 和 <code>@angular/common</code> 的應用程式在不同的環境中執行。隔離平台相關的功能使開發人員可以獨立於平台使用框架的其餘部分。</p><p translation-origin=\"off\">Support for the various Angular run-time platforms is provided by the <code>@angular/platform-*</code> packages.\nThese packages allow applications that make use of <code>@angular/core</code> and <code>@angular/common</code> to execute in different environments by providing implementation for gathering user input and rendering UIs for the given platform.\nIsolating platform-specific functionality allows the developer to make platform-independent use of the rest of the framework.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在 Web 瀏覽器中執行時，<a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule | @angular/platform-browser - API | Angular\"><code>BrowserModule</code></a> 是從 <code>platform-browser</code> 軟體套件中匯入的，並支援簡化安全性和事件處理的服務，並允許應用程式存取瀏覽器專有的功能，比如解釋鍵盤輸入和控制文件要顯示的標題。瀏覽器中執行的所有應用程式都使用同一個平台服務。</p><p translation-origin=\"off\">When running in a web browser, <a href=\"api/platform-browser/BrowserModule\" title=\"BrowserModule | @angular/platform-browser - API | Angular\"><code>BrowserModule</code></a> is imported from the <code>platform-browser</code> package, and supports services that simplify security and event processing, and allows applications to access browser-specific features, such as interpreting keyboard input and controlling the title of the document being displayed.\nAll applications running in the browser use the same platform service.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用<a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">伺服器端渲染</a>（SSR）時，<a href=\"api/platform-server\" title=\"@angular/platform-server | API | Angular\"><code>platform-server</code></a> 包將提供 <code>DOM</code>、<code>XMLHttpRequest</code> 和其它不依賴瀏覽器的其它底層功能的 Web 伺服器端實現。</p><p translation-origin=\"off\">When <a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">server-side rendering (SSR)</a> is used, the <a href=\"api/platform-server\" title=\"@angular/platform-server | API | Angular\"><code>platform-server</code></a> package provides web server implementations of the <code>DOM</code>, <code>XMLHttpRequest</code>, and other low-level features that do not rely on a browser.</p>\n\n</li>\n</ul>\n<h2 id=\"polyfill\" translation-result=\"on\">Polyfill指令碼（polyfill）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">polyfill<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">NPM 套件</a>，它負責彌補瀏覽器 JavaScript 實現與最新標準之間的 \"縫隙\"。參閱<a href=\"guide/browser-support\" title=\"Browser support | Angular\">瀏覽器支援</a>頁，以瞭解要在特定平台支援特定功能時所需的Polyfill指令碼。</p><p translation-origin=\"off\">An <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm package</a> that plugs gaps in the JavaScript implementation of a browser.\nSee <a href=\"guide/browser-support\" title=\"Browser support | Angular\">Browser Support</a> for polyfills that support particular functionality for particular platforms.</p>\n\n<h2 id=\"project\" translation-result=\"on\">專案（project）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular CLI 中，CLI 命令可能會建立或修改獨立應用或<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">庫</a>。</p><p translation-origin=\"off\">In the Angular CLI, a standalone application or <a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">library</a> that can be created or modified by an Angular CLI command.</p>\n\n<p translation-result=\"on\">由 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> 建立的專案中包含一組原始檔、資源和配置檔案，當你用 CLI 開發或測試此應用時就會用到它們。此外，還可以用 <code>ng generate application</code> 或 <code>ng generate library</code> 命令建立專案。</p><p translation-origin=\"off\">A project, as generated by the <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a>, contains the set of source files, resources, and configuration files that you need to develop and test the application using the Angular CLI.\nProjects can also be created with the <code>ng generate application</code> and <code>ng generate library</code> commands.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">專案檔案結構</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">Project File Structure</a>.</p>\n\n<p translation-result=\"on\"><a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 檔案可以配置某個<a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 中的所有專案。</p><p translation-origin=\"off\">The <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> file configures all projects in a <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a>.</p>\n\n<h2 id=\"provider\" translation-result=\"on\">提供者（provider）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">provider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個實現了 <a href=\"api/core/Provider\" title=\"Provider | @angular/core - API | Angular\"><code>Provider</code></a> 介面的物件。一個提供者物件定義瞭如何獲取與 <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌（token）</a> 相關聯的可注入依賴。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">注入器</a>會使用這個提供者來建立它所依賴的那些類別的例項。</p><p translation-origin=\"off\">An object that implements one of the <a href=\"api/core/Provider\" title=\"Provider | @angular/core - API | Angular\"><code>Provider</code></a> interfaces.\nA provider object defines how to obtain an injectable dependency associated with a <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a>.\nAn <a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">injector</a> uses the provider to create a new instance of a dependency for a class that requires it.</p>\n\n<p translation-result=\"on\">Angular 會為每個注入器註冊一些 Angular 自己的服務。你也可以註冊應用自己所需的服務提供者。</p><p translation-origin=\"off\">Angular registers its own providers with every injector, for services that Angular defines.\nYou can register your own providers for services that your application needs.</p>\n\n<p translation-result=\"on\">參閱<a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">服務</a>。\n參閱<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>。</p><p translation-origin=\"off\">See also <a href=\"guide/glossary#service\" title=\"service - Glossary | Angular\">service</a>.\nSee also <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a>.</p>\n\n<p translation-result=\"on\">在<a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">依賴注入</a>中瞭解更多資訊。</p><p translation-origin=\"off\">Learn more in <a href=\"guide/dependency-injection\" title=\"Dependency injection in Angular | Angular\">Dependency Injection</a>.</p>\n\n<h2 id=\"reactive-forms\" translation-result=\"on\">響應式表單（reactive forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">透過元件中程式碼建構 Angular 表單的一個框架。\n另一種技術是<a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">範本驅動表單</a></p><p translation-origin=\"off\">A framework for building Angular forms through code in a component.\nThe alternative is a <a href=\"guide/glossary#template-driven-forms\" title=\"template-driven forms - Glossary | Angular\">template-driven form</a>.</p>\n\n<p translation-result=\"on\">建構響應式表單時：</p><p translation-origin=\"off\">When using reactive forms:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">\"事實之源\"（表單模型）定義在元件類中。</p><p translation-origin=\"off\">The \"source of truth\", the form model, is defined in the component class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">表單驗證在元件程式碼而不是驗證器指令中定義。</p><p translation-origin=\"off\">Validation is set up through validation functions rather than validation directives.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在元件類中，透過建立 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項或使用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 顯性地建立每個控制項。</p><p translation-origin=\"off\">Each control is explicitly created in the component class by creating a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance manually or with <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">範本中的 <code>input</code> 元素<strong>不</strong>使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>。</p><p translation-origin=\"off\">The template input elements do <em>not</em> use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">相關聯的 Angular 指令全部以 <code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a></code> 開頭，比如 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>()</code>、<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> 和 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a>()</code>。</p><p translation-origin=\"off\">The associated Angular directives are prefixed with <code>form</code>, such as <code>formControl</code>, <code>formGroup</code>, and <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">另一種方式是範本驅動表單。範本驅動表單的簡介和這兩種方式的比較，參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p><p translation-origin=\"off\">The alternative is a template-driven form.\nFor an introduction and comparison of both forms approaches, see <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to Angular Forms</a>.</p>\n\n<h2 id=\"resolver\" translation-result=\"on\">解析器（resolver）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#resolver\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">resolver<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#resolver\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個實現了 <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>Resolve</code></a> 介面的類，你可以在導航到所請求的路由之前，先用它來產生或獲取資料。\n你還可以在 <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>Resolve</code></a> 介面的位置使用一個與 <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>resolve()</code> 方法</a>具有相同簽名的方法。一些解析器會在一棵路由樹的所有<a href=\"guide/glossary#route-guard\" title=\"route guard - Glossary | Angular\">路由守衛</a>都執行併成功之後執行。</p><p translation-origin=\"off\">A class that implements the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>Resolve</code></a> interface that you use to produce or retrieve data that is needed before navigation to a requested route can be completed.\nYou may use a function with the same signature as the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>resolve()</code></a> method in place of the <a href=\"api/router/Resolve\" title=\"Resolve | @angular/router - API | Angular\"><code>Resolve</code></a> interface.\nResolvers run after all <a href=\"guide/glossary#route-guard\" title=\"route guard - Glossary | Angular\">route guards</a> for a route tree have been executed and have succeeded.</p>\n\n<p translation-result=\"on\">參見使用<a href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\" title=\"Resolve: pre-fetching component data - Router tutorial: tour of heroes | Angular\">解析守衛</a>獲取動態資料一章中的例子。</p><p translation-origin=\"off\">See an example of using a <a href=\"guide/router-tutorial-toh#resolve-pre-fetching-component-data\" title=\"Resolve: pre-fetching component data - Router tutorial: tour of heroes | Angular\">resolve guard</a> to retrieve dynamic data.</p>\n\n<h2 id=\"route-guard\" translation-result=\"on\">路由守衛（route guard）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#route-guard\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">route guard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#route-guard\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種在帶路由的應用中對導航到所要求的路由進行控制的方式。這些守衛會決定一個路由是否可以啟用或停止啟用，以及延遲載入模組是否可以被載入。</p><p translation-origin=\"off\">A method that controls navigation to a requested route in a routing application.\nGuards determine whether a route can be activated or deactivated, and whether a lazy-loaded module can be loaded.</p>\n\n<p translation-result=\"on\">欲知詳情，參見<a href=\"guide/router#preventing-unauthorized-access\" title=\"Preventing unauthorized access - Common Routing Tasks | Angular\">路由與導航</a>一章。</p><p translation-origin=\"off\">Learn more in the <a href=\"guide/router#preventing-unauthorized-access\" title=\"Preventing unauthorized access - Common Routing Tasks | Angular\">Routing and Navigation</a> guide.</p>\n\n<h2 id=\"router\" translation-result=\"on\">路由器（router）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種工具，用來配置和實現 Angular 應用中各個狀態和<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>之間的導航。</p><p translation-origin=\"off\">A tool that configures and implements navigation among states and <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">views</a> within an Angular application.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模組是一個 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>，它提供在應用檢視間導航時需要的服務提供者和指令。<a href=\"guide/glossary#routing-component\" title=\"routing component - Glossary | Angular\">路由元件</a>是一種元件，它匯入了 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 模組，並且其範本中包含 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 元素，路由器產生的檢視就會被顯示在那裡。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module is an <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> that provides the necessary service providers and directives for navigating through application views.\nA <a href=\"guide/glossary#routing-component\" title=\"routing component - Glossary | Angular\">routing component</a> is one that imports the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module and whose template contains a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> element where it can display views produced by the router.</p>\n\n<p translation-result=\"on\">路由器定義了在單頁面中的各個檢視之間導航的方式，而不是在頁面之間。它會解釋類似 URL 的連結，以決定該建立或銷燬哪些檢視，以及要載入或解除安裝哪些元件。它讓你可以在 Angular 應用中獲得<a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">延遲載入</a>的好處。</p><p translation-origin=\"off\">The router defines navigation among views on a single page, as opposed to navigation among pages.\nIt interprets URL-like links to determine which views to create or destroy, and which components to load or unload.\nIt allows you to take advantage of <a href=\"guide/glossary#lazy-loading\" title=\"lazy loading - Glossary | Angular\">lazy loading</a> in your Angular applications.</p>\n\n<p translation-result=\"on\">要了解更多，參閱<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導航</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing and Navigation</a>.</p>\n\n<h2 id=\"router-outlet\" translation-result=\"on\">路由出口（router outlet）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">router outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>，它在路由元件的範本中扮演佔位符的角色，Angular 會根據當前的路由狀態動態填充它。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that acts as a placeholder in the template of a routing component.\nAngular dynamically renders the template based on the current router state.</p>\n\n<h2 id=\"routing-component\" translation-result=\"on\">路由元件（routing component）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個範本中帶有 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 指令的 Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>，用於根據路由器的導航顯示相應的檢視。</p><p translation-origin=\"off\">An Angular <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> with a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> directive in its template that displays views based on router navigations.</p>\n\n<p translation-result=\"on\">要了解更多，參閱<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由與導航</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing and Navigation</a>.</p>\n\n<h2 id=\"rule\" translation-result=\"on\">規則（rule）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#rule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#rule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在<a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">原理圖</a> 中，是指一個在<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">檔案樹</a>上執行的函式，用於以指定方式建立、刪除或修改檔案，並返回一個新的 <code>Tree</code> 物件。</p><p translation-origin=\"off\">In <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a>, a function that operates on a <a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">file tree</a> to create, delete, or modify files in a specific manner.</p>\n\n<h2 id=\"schematic\" translation-result=\"on\">原理圖（schematic）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">腳手架庫會定義如何藉助建立、修改、重構或移動檔案和程式碼等操作來產生或轉換某個專案。每個原理圖定義了<a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">一些規則</a>，以操作一個被稱為<a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">檔案樹</a>的虛擬檔案系統。</p><p translation-origin=\"off\">A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code.\nA schematic defines <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">rules</a> that operate on a virtual file system referenced as a <a href=\"guide/glossary#tree\" title=\"tree - Glossary | Angular\">tree</a>.</p>\n\n<p translation-result=\"on\">Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 使用原理圖來產生和修改 <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">Angular 專案</a>及其部件。</p><p translation-origin=\"off\">The <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> uses schematics to generate and modify <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">Angular projects</a> and parts of projects.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">Angular 提供了一組用於 CLI 的原理圖。參閱 <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI 命令參考手冊</a>。當 <a href=\"cli/add\" title=\"ng add | CLI | Angular\"><code>ng add</code></a> 命令向專案中新增某個庫時，就會執行原理圖。<a href=\"cli/generate\" title=\"ng generate | CLI | Angular\"><code>ng generate</code></a> 命令則會執行原理圖，來建立應用、庫和 Angular 程式碼塊。</p><p translation-origin=\"off\">Angular provides a set of schematics for use with the Angular CLI.\nSee the <a href=\"cli\" title=\"CLI Overview and Command Reference | Angular\">Angular CLI command reference</a>.\nThe <a href=\"cli/add\" title=\"ng add | CLI | Angular\"><code>ng add</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command runs schematics as part of adding a library to your project.\nThe <a href=\"cli/generate\" title=\"ng generate | CLI | Angular\"><code>ng generate</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command runs schematics to create applications, libraries, and Angular code constructs.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">公共<a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">庫</a>的開發者可以建立原理圖，來讓 Angular CLI 新增或升級他們自己的釋出的函式庫，還可以產生此庫中定義的工件。請把這些原理圖新增到要用來發布和共享本庫的 npm 套件中。</p><p translation-origin=\"off\"><a href=\"guide/glossary#library\" title=\"library - Glossary | Angular\">Library</a> developers can create schematics that enable the Angular CLI to add and update their published libraries, and to generate artifacts the library defines.\nAdd these schematics to the npm package that you use to publish and share your library.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/schematics\" title=\"Generating code using schematics | Angular\">原理圖</a>。\n欲知詳情，參閱<a href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\" title=\"Integrating with the CLI using code-generation schematics - Creating libraries | Angular\">將庫與 CLI 整合</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/schematics\" title=\"Generating code using schematics | Angular\">Schematics</a>.\nTo learn more, see also <a href=\"guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\" title=\"Integrating with the CLI using code-generation schematics - Creating libraries | Angular\">Integrating Libraries with the CLI</a>.</p>\n\n<h2 id=\"schematics-cli\" translation-result=\"on\">原理圖 CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematics-cli\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Schematics CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Schematics 自帶了一個命令列工具。使用 Node 6.9 或更高版本，可以全域安裝這個 Schematics CLI。</p><p translation-origin=\"off\">Schematics come with their own command-line tool.\nUse Node 6.9 or above to install the Schematics CLI globally.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install -g @angular-devkit/schematics-cli\n\n</code-example>\n<p translation-result=\"on\">這會安裝可執行檔案 <code>schematics</code>，你可以用它來建立新工程、往現有工程中新增新的 schematic，或擴充某個現有的 schematic。</p><p translation-origin=\"off\">This installs the <code>schematics</code> executable, which you can use to create a new schematics <a href=\"guide/glossary#collection\" title=\"collection - Glossary | Angular\">collection</a> with an initial named schematic.\nThe collection directory is a workspace for schematics.\nYou can also use the <code>schematics</code> command to add a new schematic to an existing collection, or extend an existing schematic.</p>\n\n<h2 id=\"scoped-package\" translation-result=\"on\">範圍化包 （scoped package）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">scoped package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種把相關的 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 套件</a>分組到一起的方式。\nAngular 的 NgModule 都是在一些以 <code>@angular</code> 為範圍名的<em>範圍化套件</em>中釋出的。比如 <code>@angular/core</code>、<code>@angular/common</code>、<code>@angular/forms</code> 和 <code>@angular/router</code>。</p><p translation-origin=\"off\">A way to group related <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm packages</a>.\nNgModules are delivered within scoped packages whose names begin with the Angular <em>scope name</em> <code>@angular</code>.\nFor example, <code>@angular/core</code>, <code>@angular/common</code>, <code>@angular/forms</code>, and <code>@angular/router</code>.</p>\n\n<p translation-result=\"on\">和匯入普通包相同的方式匯入範圍化套件。</p><p translation-origin=\"off\">Import a scoped package in the same way that you import a normal package.</p>\n\n<code-example path=\"architecture/src/app/app.component.ts\" header=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<h2 id=\"server-side-rendering\" translation-result=\"on\">伺服器端渲染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">server-side rendering<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#server-side-rendering\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一項在伺服器端產生靜態應用頁面的技術，它可以在對來自瀏覽器的請求進行響應時產生這些頁面或用它們提供服務。它還可以預先把這些頁面產生為 HTML 檔案，以便稍後用它們來提供服務。</p><p translation-origin=\"off\">A technique that generates static application pages on the server, and can generate and serve those pages in response to requests from browsers.\nIt can also pre-generate pages as HTML files that you serve later.</p>\n\n<p translation-result=\"on\">該技術可以增強手機和低功耗裝置的效能，而且會在應用載入透過快速展示一個靜態首屏來提升使用者體驗。這個靜態版本還能讓你的應用對網路蜘蛛更加友好。</p><p translation-origin=\"off\">This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side application is loading.\nThe static version can also make your application more visible to web crawlers.</p>\n\n<p translation-result=\"on\">你可以透過 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 執行 <a href=\"guide/glossary#universal\" title=\"Universal - Glossary | Angular\">Angular Universal</a> 工具，藉助 <code>@nguniversal/express-engine</code> <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematic</a> 原理圖來更輕鬆的讓應用支援伺服器端渲染。</p><p translation-origin=\"off\">You can easily prepare an application for server-side rendering by using the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> to run the <a href=\"guide/glossary#universal\" title=\"Universal - Glossary | Angular\">Angular Universal</a> tool, using the <code>@nguniversal/express-engine</code> <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematic</a>.</p>\n\n<h2 id=\"service\" translation-result=\"on\">服務（service）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中，服務就是一個帶有 <a href=\"guide/glossary#injectable\" title=\"injectable - Glossary | Angular\"><code>@Injectable</code></a> 裝飾器的類，它封裝了可以在應用程式中複用的非 UI 邏輯和程式碼。\nAngular 把元件和服務分開，是為了增進模組化程度和可複用性。</p><p translation-origin=\"off\">In Angular, a class with the <a href=\"guide/glossary#injectable\" title=\"injectable - Glossary | Angular\"><code>@Injectable()</code></a> decorator that encapsulates non-UI logic and code that can be reused across an application.\nAngular distinguishes components from services to increase modularity and reusability.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料讓服務類能用於<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>機制中。可注入的類是用<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">提供者</a>進行例項化的。\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">各個注入器</a>會維護一個提供者的列表，並根據元件或其它服務的需要，用它們來提供服務的例項。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata allows the service class to be used with the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> mechanism.\nThe injectable class is instantiated by a <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">provider</a>.\n<a href=\"guide/glossary#injector\" title=\"injector - Glossary | Angular\">Injectors</a> maintain lists of providers and use them to provide service instances when they are required by components or other services.</p>\n\n<p translation-result=\"on\">欲知詳情，請參閱<a href=\"guide/architecture-services\" title=\"Introduction to services and dependency injection | Angular\">服務和依賴注入介紹</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/architecture-services\" title=\"Introduction to services and dependency injection | Angular\">Introduction to Services and Dependency Injection</a>.</p>\n\n<h2 id=\"standalone\" translation-result=\"on\">獨立<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#standalone\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#standalone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件</a>、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">管道</a>的一種配置，用以表明可以直接匯入此類，而無需在任何 <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a> 中宣告它。</p><p translation-origin=\"off\">A configuration of <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">components</a>, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"pipe - Glossary | Angular\">pipes</a> to indicate that this class can be imported directly without declaring it in any <a href=\"guide/glossary#ngmodule\" title=\"NgModule - Glossary | Angular\">NgModule</a>.</p>\n\n<p translation-result=\"on\">獨立元件、指令和管道與非獨立元件、指令和管道的區別在於：</p><p translation-origin=\"off\">Standalone components, directives, and pipes differ from non-standalone ones by:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">將裝飾器的 <code>standalone</code> 欄位設定為 <code>true</code>。</p><p translation-origin=\"off\">having the <code>standalone</code> field of their decorator set to <code>true</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">允許直接匯入它們，而無需透過 NgModules。</p><p translation-origin=\"off\">allowing their direct importing without the need to pass through NgModules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">直接在它們的裝飾器中指定它們的依賴項。</p><p translation-origin=\"off\">specifying their dependencies directly in their decorator.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">欲知詳情，請參閱<a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">獨立元件指南</a>。</p><p translation-origin=\"off\">To learn more, see the <a href=\"guide/standalone-components\" title=\"Getting started with standalone components | Angular\">Standalone components guide</a>.</p>\n\n<h2 id=\"structural-directive\" translation-result=\"on\">結構型指令（structural directive）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">structural directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>型別，它能透過修改 DOM 來修整或重塑 HTML 的佈局。\n這裡所說的修改 DOM 包括新增、刪除或操縱元素及其相關子元素。</p><p translation-origin=\"off\">A category of <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directive</a> that is responsible for shaping HTML layout by modifying the DOM.\nModification of the DOM includes, adding, removing, or manipulating elements and the associated children.</p>\n\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/structural-directives\" title=\"Structural directives | Angular\">結構型指令</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/structural-directives\" title=\"Structural directives | Angular\">Structural Directives</a>.</p>\n\n<h2 id=\"subscriber\" translation-result=\"on\">訂閱者（Subscriber）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">subscriber<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個函式，用於定義如何獲取或產生要釋出的值或訊息。\n當有消費者呼叫<a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">可觀察物件</a>的 <code>subscribe()</code> 方法時，該函式就會執行。</p><p translation-origin=\"off\">A function that defines how to obtain or generate values or messages to be published.\nThis function is executed when a consumer runs the <code>subscribe()</code> method of an <a href=\"guide/glossary#observable\" title=\"observable - Glossary | Angular\">observable</a>.</p>\n\n<p translation-result=\"on\">訂閱一個可觀察物件就會觸發該物件的執行、為該物件關聯一些回呼(Callback)函式，並建立一個 <code>Subscription</code>（訂閱記錄）物件來讓你能取消訂閱。</p><p translation-origin=\"off\">The act of subscribing to an observable triggers its execution, associates callbacks with it, and creates a <code>Subscription</code> object that lets you unsubscribe.</p>\n\n<p translation-result=\"on\"><code>subscribe()</code> 方法接收一個名叫<a href=\"guide/glossary#observer\" title=\"observer - Glossary | Angular\">觀察者（observer）</a>的 JavaScript 物件，其中最多可以包含三個回呼(Callback)，分別對應可觀察物件可以發出的幾種通知型別：</p><p translation-origin=\"off\">The <code>subscribe()</code> method takes an <a href=\"guide/glossary#observer\" title=\"observer - Glossary | Angular\">observer</a> JavaScript object with up to three callbacks, one for each type of notification that an observable can deliver.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>next</code>（下一個）通知會發送一個值，比如數字、字串、物件。</p><p translation-origin=\"off\">The <code>next</code> notification sends a value such as a number, a string, or an object.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>error</code>（錯誤）通知會發送 JavaScript 錯誤或例外。</p><p translation-origin=\"off\">The <code>error</code> notification sends a JavaScript Error or exception.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>complete</code>（完成）通知不會發送值，但是當呼叫結束時會呼叫這個處理器。非同步的值可能會在呼叫了完成之後繼續傳送過來。</p><p translation-origin=\"off\">The <code>complete</code> notification does not send a value, but the handler is run when the method completes.\nScheduled values can continue to be returned after the method completes.</p>\n\n</li>\n</ul>\n<h2 id=\"target\" translation-result=\"on\">目標（target）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#target\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">target<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#target\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>的一個可建構或可執行的子集，它是<a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">工作區配置檔案</a>中的一個子物件，它會被<a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">建築師（Architect）</a>的<a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">建構器（Builder）</a>執行。</p><p translation-origin=\"off\">A buildable or runnable subset of a <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>, configured as an object in the <a href=\"guide/workspace-config#project-tool-configuration-options\" title=\"Project tool configuration options - Angular workspace configuration | Angular\">workspace configuration file</a>, and executed by an <a href=\"guide/glossary#architect\" title=\"Architect - Glossary | Angular\">Architect</a> <a href=\"guide/glossary#builder\" title=\"builder - Glossary | Angular\">builder</a>.</p>\n\n<p translation-result=\"on\">在 <code>angular.json</code> 檔案中，每個專案都有一個 <code>architect</code> 分割槽，其中包含一些用於配置建構器的目標。其中一些目標對應於 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI 命令</a>，比如 <code>build</code>、<code>serve</code>、<code>test</code> 和 <code>lint</code>。</p><p translation-origin=\"off\">In the <code>angular.json</code> file, each project has an \"architect\" section that contains targets which configure builders.\nSome of these targets correspond to Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command, such as <code>build</code>, <code>serve</code>, <code>test</code>, and <code>lint</code>.</p>\n\n<p translation-result=\"on\">比如，<code>ng build</code> 命令用來編譯專案時所呼叫的建構器會使用一個特定的建構工具，並且具有一份預設配置，此配置中的值可以透過命令列引數進行覆蓋。目標 <code>build</code> 還為 \"開發環境\" 建構定義了另一個配置，可以透過在 <code>build</code> 命令上新增 <code>--configuration development</code> 標誌來呼叫它。</p><p translation-origin=\"off\">For example, the Architect builder invoked by the <code>ng build</code> command to compile a project uses a particular build tool, and has a default configuration with values that you can override on the command line.\nThe <code>build</code> target also defines an alternate configuration for a \"development\" build, which you can invoke with the <code>--configuration development</code> flag on the <code>build</code> command.</p>\n\n<p translation-result=\"on\">建築師工具提供了一組建構器。<a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 命令</a>為初始應用專案提供了一組目標。<a href=\"cli/generate#application\" title=\"application - ng generate | CLI | Angular\"><code>ng generate application</code></a> 和 <a href=\"cli/generate#library\" title=\"library - ng generate | CLI | Angular\"><code>ng generate library</code></a> 命令則為每個新<a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>提供了一組目標。這些目標的選項和配置都可以進行自訂，以便適應你專案的需求。比如，你可能會想為專案的 \"build\" 目標新增一個 \"staging\" 或 \"testing\" 配置。</p><p translation-origin=\"off\">The Architect tool provides a set of builders.\nThe <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command provides a set of targets for the initial application project.\nThe <a href=\"cli/generate#application\" title=\"application - ng generate | CLI | Angular\"><code>ng generate application</code></a> and <a href=\"cli/generate#library\" title=\"library - ng generate | CLI | Angular\"><code>ng generate library</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> commands provide a set of targets for each new <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">project</a>.\nThese targets, their options and configurations, can be customized to meet the needs of your project.\nFor example, you may want to add a \"staging\" or \"testing\" configuration to the \"build\" target of a project.</p>\n\n<p translation-result=\"on\">你還可以定義一個自訂建構器，並且往專案配置中新增一個目標，來使用你的自訂建構器。然後你就可以透過 <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> 這個 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 命令來執行此目標。</p><p translation-origin=\"off\">You can also define a custom builder, and add a target to the project configuration that uses your custom builder.\nYou can then run the target using the <a href=\"cli/run\" title=\"ng run | CLI | Angular\"><code>ng run</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command.</p>\n\n<h2 id=\"template\" translation-result=\"on\">範本（template）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">用來定義要如何渲染元件<a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">檢視</a>的程式碼。</p><p translation-origin=\"off\">Code that defines how to render the <a href=\"guide/glossary#view\" title=\"view - Glossary | Angular\">view</a> of a component.</p>\n\n<p translation-result=\"on\">範本會把純 HTML 和 Angular 的<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結</a>語法、<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令</a>和<a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">範本表示式</a>組合起來。Angular 的元素會插入或計算那些值，以便在頁面顯示出來之前修改 HTML 元素。\n在<a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">範本語法</a>指南中瞭解有關 Angular 範本語言的更多資訊。</p><p translation-origin=\"off\">A template combines straight HTML with Angular <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data-binding</a> syntax, <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>, and <a href=\"guide/glossary#template-expression\" title=\"template expression - Glossary | Angular\">template expressions</a> (logical constructs).\nThe Angular elements insert or calculate values that modify the HTML elements before the page is displayed.\nLearn more about Angular template language in the <a href=\"guide/template-syntax\" title=\"Template syntax | Angular\">Template Syntax</a> guide.</p>\n\n<p translation-result=\"on\">範本透過 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">裝飾器</a>與<a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件類</a>類關聯起來。範本程式碼可以作為 <code>template</code> 屬性的值用內聯的方式提供，也可以透過 <code>templateUrl</code> 屬性連結到一個獨立的 HTML 檔案。</p><p translation-origin=\"off\">A template is associated with a <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component class</a> through the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator--decoration\" title=\"decorator | decoration - Glossary | Angular\">decorator</a>.\nThe template code can be provided inline, as the value of the <code>template</code> property, or in a separate HTML file linked through the <code>templateUrl</code> property.</p>\n\n<p translation-result=\"on\">用 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 物件表示的其它範本用來定義一些備用檢視或<em>內嵌</em>檢視，它們可以來自多個不同的元件。</p><p translation-origin=\"off\">Additional templates, represented by <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> objects, can define alternative or <em>embedded</em> views, which can be referenced from multiple components.</p>\n\n<h2 id=\"template-driven-forms\" translation-result=\"on\">範本驅動表單（template-driven forms）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種在檢視中使用 HTML 表單和輸入類元素建構 Angular 表單的格式。\n它的替代方案是<a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">響應式表單</a>框架。</p><p translation-origin=\"off\">A format for building Angular forms using HTML forms and input elements in the view.\nThe alternative format uses the <a href=\"guide/glossary#reactive-forms\" title=\"reactive forms - Glossary | Angular\">reactive forms</a> framework.</p>\n\n<p translation-result=\"on\">當建構範本驅動表單時：</p><p translation-origin=\"off\">When using template-driven forms:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">範本是“事實之源”。使用屬性 （attribute） 在單個輸入元素上定義驗證規則。</p><p translation-origin=\"off\">The \"source of truth\" is the template.\nThe validation is defined using attributes on the individual input elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 進行<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">雙向繫結</a>，保持元件模型和使用者輸入之間的同步。</p><p translation-origin=\"off\"><a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">Two-way binding</a> with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> keeps the component model synchronized with the user's entry into the input elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在幕後，Angular 為每個帶有 <code>name</code> 屬性和雙向繫結的輸入元素建立了一個新的控制項。</p><p translation-origin=\"off\">Behind the scenes, Angular creates a new control for each input element, provided you have set up a <code>name</code> attribute and two-way binding for each input.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">相關的 Angular 指令都帶有 <code>ng</code> 字首，比如 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>、<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 和 <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>。</p><p translation-origin=\"off\">The associated Angular directives are prefixed with <code>ng</code> such as <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>, <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, and <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">另一種方式是響應式表單。響應式表單的簡介和兩種方式的比較參閱 <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Angular 表單簡介</a>。</p><p translation-origin=\"off\">The alternative is a reactive form.\nFor an introduction and comparison of both forms approaches, see <a href=\"guide/forms-overview\" title=\"Introduction to forms in Angular | Angular\">Introduction to Angular Forms</a>.</p>\n\n<h2 id=\"template-expression\" translation-result=\"on\">範本表示式（template expression）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">template expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種類似 TypeScript 的語法，Angular 用它對<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結 （data binding）</a>進行求值。</p><p translation-origin=\"off\">A TypeScript-like syntax that Angular evaluates within a <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data binding</a>.</p>\n\n<!--todo: have Alex review this -->\n<!-- Read about how to write template expressions in the [template expressions][AioGuideInterpolationTemplateExpressions] section of the [Interpolation][AioGuideInterpolation] guide. -->\n<h2 id=\"template-reference-variable\" translation-result=\"on\">範本參考變數（template reference variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-reference-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">template reference variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-reference-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本中定義的一個變數，它可以參考與某元素相關的例項，比如指令例項、元件例項、範本（<code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>）或 DOM 元素。在範本中的某個元素上聲明瞭範本參考變數之後，你可以從同一個範本中的其它位置存取這些值。下面的例子定義了一個名叫 <code>#phone</code> 的範本參考變數。</p><p translation-origin=\"off\">A variable defined in a template that references an instance associated with an element, such as a directive instance, component instance, template as in <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>, or DOM element.\nAfter declaring a template reference variable on an element in a template, you can access values from that variable elsewhere within the same template.\nThe following example defines a template reference variable named <code>#phone</code>.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=\"phone number\" /&gt;\n\n</code-example>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/template-reference-variables\" title=\"Template variables | Angular\">範本參考變數</a>。</p><p translation-origin=\"off\">To learn more, see <a href=\"guide/template-reference-variables\" title=\"Template variables | Angular\">Template reference variable</a>.</p>\n\n<h2 id=\"template-input-variable\" translation-result=\"on\">範本輸入變數（template input variable）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-input-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本輸入變數是一種你可以在範本的單個例項中參考的變數。你可以使用 <code>let</code> 關鍵字來宣告範本輸入變數，就像 <code>let customer</code> 一樣。</p><p translation-origin=\"off\">A template input variable is a variable you can reference within a single instance of the template.\nYou declare a template input variable using the <code>let</code> keyword as in <code>let customer</code>.</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let customer of customers;\"&gt;\n    &lt;td&gt;{{customer.customerNo}}&lt;/td&gt;\n    &lt;td&gt;{{customer.name}}&lt;/td&gt;\n    &lt;td&gt;{{customer.address}}&lt;/td&gt;\n    &lt;td&gt;{{customer.city}}&lt;/td&gt;\n    &lt;td&gt;{{customer.state}}&lt;/td&gt;\n    &lt;button (click)=\"selectedCustomer=customer\"&gt;Select&lt;/button&gt;\n&lt;/tr&gt;\n\n</code-example>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/template-reference-variables#template-input-variable\" title=\"Template input variable - Template variables | Angular\">範本輸入變數</a>。</p><p translation-origin=\"off\">Read and learn more about <a href=\"guide/template-reference-variables#template-input-variable\" title=\"Template input variable - Template variables | Angular\">template input variables</a>.</p>\n\n<h2 id=\"token\" translation-result=\"on\">令牌（token）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">用於高效查表的不透明識別符號（譯註：不透明是指你不必瞭解其細節）。在 Angular 中，<a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI 令牌</a>用於在<a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">依賴注入</a>系統中查詢<a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">服務提供者</a>。</p><p translation-origin=\"off\">An opaque identifier used for efficient table lookup.\nIn Angular, a <a href=\"guide/glossary#di-token\" title=\"DI token - Glossary | Angular\">DI token</a> is used to find <a href=\"guide/glossary#provider\" title=\"provider - Glossary | Angular\">providers</a> of dependencies in the <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection (DI) - Glossary | Angular\">dependency injection</a> system.</p>\n\n<h2 id=\"transpile\" translation-result=\"on\">轉譯（transpile）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">transpile<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種翻譯過程，它會把一個版本的 JavaScript 轉換成另一個版本，比如把下一版的 ES2015 轉換成老版本的 ES5。</p><p translation-origin=\"off\">The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</p>\n\n<h2 id=\"tree\" translation-result=\"on\">目錄樹（tree）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#tree\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">tree<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#tree\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a> 中，一個用 <code>Tree</code> 類表示的虛擬檔案系統。\nSchematic <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">規則</a>以一個 <code>tree</code> 物件作為輸入，對它們進行操作，並且返回一個新的 <code>tree</code> 物件。</p><p translation-origin=\"off\">In <a href=\"guide/glossary#schematic\" title=\"schematic - Glossary | Angular\">schematics</a>, a virtual file system represented by the <code>Tree</code> class.\nSchematic <a href=\"guide/glossary#rule\" title=\"rule - Glossary | Angular\">rules</a> take a tree object as input, operate on them, and return a new tree object.</p>\n\n<h2 id=\"typescript\">TypeScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">TypeScript 是一種基於 JavaScript 的程式設計語言，以其可選型別系統著稱。TypeScript 提供了編譯時型別檢查和強大的工具支援。這裡所說的型別檢查和工具支援包括程式碼補齊、重構、內聯文件和智慧搜尋等。許多程式碼編輯器和 IDE 都原生支援 TypeScript 或透過外掛提供支援。</p><p translation-origin=\"off\">A programming language based on JavaScript that is notable for its optional typing system.\nTypeScript provides compile-time type checking and strong tooling support\nThe type checking and tooling support include code completion, refactoring, inline documentation, and intelligent search.\nMany code editors and IDEs support TypeScript either natively or with plug-ins.</p>\n\n<p translation-result=\"on\">TypeScript 是 Angular 的首選語言。要了解更多，參閱 <a href=\"https://www.typescriptlang.org\" title=\"TypeScript\">typescriptlang.org</a>。</p><p translation-origin=\"off\">TypeScript is the preferred language for Angular development.\nTo learn more about TypeScript, see <a href=\"https://www.typescriptlang.org\" title=\"TypeScript\">typescriptlang.org</a>.</p>\n\n<h2 id=\"typescript-configuration-file\" translation-result=\"on\">TypeScript 配置檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript-configuration-file\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">TypeScript configuration file<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript-configuration-file\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個檔案，用來指定編譯 TypeScript 專案時的根檔案和編譯器選項。欲知詳情，參閱 <a href=\"guide/typescript-configuration\" title=\"TypeScript configuration | Angular\">TypeScript 配置</a>。</p><p translation-origin=\"off\">A file specifies the root files and the compiler options required to compile a TypeScript project.\nTo learn more, see <a href=\"guide/typescript-configuration\" title=\"TypeScript configuration | Angular\">TypeScript configuration</a>.</p>\n\n<h2 id=\"unidirectional-data-flow\" translation-result=\"on\">單向資料流<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#unidirectional-data-flow\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">unidirectional data flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#unidirectional-data-flow\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一種資料流模型，它總是在一個方向（從父到子）上檢查元件樹是否有變化，以防止在變更檢測圖中出現迴圈。</p><p translation-origin=\"off\">A data flow model where the component tree is always checked for changes in one direction from parent to child, which prevents cycles in the change detection graph.</p>\n\n<p translation-result=\"on\">在實踐中，這意味著 Angular 中的資料會在變更檢測過程中向下流動。父元件可以很容易地改變子元件中的值，因為父元件是先檢查的。但是，如果子元件在變更檢測期間（反轉預期的資料流）嘗試更改其父元件中的值，則可能會導致錯誤，因為父元件已經渲染過了。在開發模式下，如果你的應用嘗試這樣做，Angular 會丟擲 <code>ExpressionChangedAfterItHasBeenCheckedError</code> 錯誤，而不是沉默地渲染新值。</p><p translation-origin=\"off\">In practice, this means that data in Angular flows downward during change detection.\nA parent component can easily change values in its child components because the parent is checked first.\nA failure could occur, however, if a child component tries to change a value in its parent during change detection (inverting the expected data flow), because the parent component has already been rendered.\nIn development mode, Angular throws the <code>ExpressionChangedAfterItHasBeenCheckedError</code> error if your application attempts to do this, rather than silently failing to render the new value.</p>\n\n<p translation-result=\"on\">為了避免這個錯誤，進行此類更改的<a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">生命週期鉤子</a>方法中就要觸發一次新的變更檢測。這次新的變更檢測與之前那次的方向一樣，但可以成功獲得新值。</p><p translation-origin=\"off\">To avoid this error, a <a href=\"guide/lifecycle-hooks\" title=\"Lifecycle Hooks | Angular\">lifecycle hook</a> method that seeks to make such a change should trigger a new change detection run.\nThe new run follows the same direction as before, but succeeds in picking up the new value.</p>\n\n<h2 id=\"universal\" translation-result=\"on\">通用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#universal\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Universal<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#universal\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">用來幫 Angular 應用實現<a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">伺服器端渲染</a>的工具。\n當與應用整合在一起時，Universal 可以在伺服器端產生靜態頁面並用它們來響應來自瀏覽器的請求。\n當瀏覽器正準備執行完整版應用的時候，這個初始的靜態頁可以用作一個可快速載入的佔位符。\n欲知詳情，參閱 <a href=\"guide/universal\" title=\"Server-side rendering (SSR) with Angular Universal | Angular\">Angular Universal: 伺服器端渲染</a>。</p><p translation-origin=\"off\">A tool for implementing <a href=\"guide/glossary#server-side-rendering\" title=\"server-side rendering - Glossary | Angular\">server-side rendering</a> of an Angular application.\nWhen integrated with an app, Universal generates and serves static pages on the server in response to requests from browsers.\nThe initial static page serves as a fast-loading placeholder while the full application is being prepared for normal execution in the browser.\nTo learn more, see <a href=\"guide/universal\" title=\"Server-side rendering (SSR) with Angular Universal | Angular\">Angular Universal: server-side rendering</a>.</p>\n\n<h2 id=\"view\" translation-result=\"on\">檢視（view）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">檢視是可顯示元素的最小分組單位，它們會被同時建立和銷燬。\nAngular 在一個或多個<a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">指令 （directive）</a> 的控制下渲染檢視。</p><p translation-origin=\"off\">The smallest grouping of display elements that can be created and destroyed together.\nAngular renders a view under the control of one or more <a href=\"guide/glossary#directive\" title=\"directive - Glossary | Angular\">directives</a>.</p>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">元件（component）</a> 類及其關聯的<a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">範本 （template）</a>定義了一個檢視。\n具體實現上，檢視由一個與該元件相關的 <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> 例項表示。\n直屬於某個元件的檢視叫做<em>宿主檢視</em>。\n通常會把檢視組織成一些<a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">檢視樹（view hierarchies）</a>。</p><p translation-origin=\"off\">A <a href=\"guide/glossary#component\" title=\"component - Glossary | Angular\">component</a> class and its associated <a href=\"guide/glossary#template\" title=\"template - Glossary | Angular\">template</a> define a view.\nA view is specifically represented by a <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> instance associated with a component.\nA view that belongs immediately to a component is referenced as a <em>host view</em>.\nViews are typically collected into <a href=\"guide/glossary#view-hierarchy\" title=\"view hierarchy - Glossary | Angular\">view hierarchies</a>.</p>\n\n<p translation-result=\"on\">檢視中各個元素的屬性可以動態修改以響應使用者的操作，而這些元素的結構（數量或順序）則不能。你可以透過在它們的檢視容器中插入、移動或移除內嵌檢視來修改這些元素的結構。</p><p translation-origin=\"off\">Properties of elements in a view can change dynamically, in response to user actions; the structure (number and order) of elements in a view cannot.\nYou can change the structure of elements by inserting, moving, or removing nested views within their view containers.</p>\n\n<p translation-result=\"on\">當用戶在應用中導航時（比如使用<a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">路由器</a>），檢視樹可以動態載入或解除安裝。</p><p translation-origin=\"off\">View hierarchies can be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a <a href=\"guide/glossary#router\" title=\"router - Glossary | Angular\">router</a>.</p>\n\n<p><a id=\"ve\"></a></p>\n<h2 id=\"view-engine\" translation-result=\"on\">檢視引擎（View Engine）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-engine\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">View Engine<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-engine\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 曾經用過的編譯和渲染管道。它已被 <a href=\"guide/glossary#ivy\" title=\"Ivy - Glossary | Angular\">Ivy</a> 取代，不再使用了。View Engine 在版本 9 中已棄用，並在版本 13 中刪除。</p><p translation-origin=\"off\">A previous compilation and rendering pipeline used by Angular.\nIt has since been replaced by <a href=\"guide/glossary#ivy\" title=\"Ivy - Glossary | Angular\">Ivy</a> and is no longer in use.\nView Engine was deprecated in version 9 and removed in version 13.</p>\n\n<p><a id=\"view-tree\"></a></p>\n<h2 id=\"view-hierarchy\" translation-result=\"on\">檢視樹（View hierarchy）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">view hierarchy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一棵相關檢視的樹，它們可以作為一個整體行動。其根檢視就是元件的<em>宿主檢視</em>。宿主檢視可以是<em>內嵌檢視</em>樹的根，它被收集到了宿主元件上的一個<em>檢視容器（<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>）</em>中。檢視樹是 Angular <a href=\"guide/glossary#change-detection\" title=\" change detection - Glossary | Angular\">變更檢測</a>的關鍵部件之一。</p><p translation-origin=\"off\">A tree of related views that can be acted on as a unit.\nThe root view is referenced as the <em>host view</em> of a component.\nA host view is the root of a tree of <em>embedded views</em>, collected in a <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code> view container attached to an anchor element in the hosting component.\nThe view hierarchy is a key part of Angular <a href=\"guide/glossary#change-detection\" title=\" change detection - Glossary | Angular\">change detection</a>.</p>\n\n<p translation-result=\"on\">檢視樹和元件樹並不是一一對應的。那些嵌入到指定檢視樹上下文中的檢視也可能是其它元件的宿主檢視。那些元件可能和宿主元件位於同一個 NgModule 中，也可能屬於其它 NgModule。</p><p translation-origin=\"off\">The view hierarchy does not imply a component hierarchy.\nViews that are embedded in the context of a particular hierarchy can be host views of other components.\nThose components can be in the same NgModule as the hosting component, or belong to other NgModules.</p>\n\n<h2 id=\"web-component\" translation-result=\"on\">Web 元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">web component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">參閱<a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">自訂元素</a></p><p translation-origin=\"off\">See <a href=\"guide/glossary#custom-element\" title=\"custom element - Glossary | Angular\">custom element</a>.</p>\n\n<h2 id=\"workspace\" translation-result=\"on\">工作區（workspace）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一組基於 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 的 Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">專案</a>（也就是說應用或庫），它們通常共同位於一個單一的原始碼儲存庫（比如 <a href=\"https://git-scm.com\" title=\"Git\">git</a>）中。</p><p translation-origin=\"off\">A collection of Angular <a href=\"guide/glossary#project\" title=\"project - Glossary | Angular\">projects</a> (that is, applications and libraries) powered by the Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> that are typically co-located in a single source-control repository (such as <a href=\"https://git-scm.com\" title=\"Git\">git</a>).</p>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> 的 <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code> 命令</a>會在檔案系統中建立一個目錄（也就是工作區的根目錄）。\n在工作區根目錄下，還會建立此工作區的<a href=\"guide/glossary#configuration\" title=\"configuration - Glossary | Angular\">配置檔案</a>（<code>angular.json</code>），並且還會預設初始化一個同名的應用專案。</p><p translation-origin=\"off\">The <a href=\"cli/new\" title=\"ng new | CLI | Angular\"><code>ng new</code></a> Angular <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">CLI</a> command creates a file system directory (the \"workspace root\").\nIn the workspace root, it also creates the workspace <a href=\"guide/glossary#configuration\" title=\"configuration - Glossary | Angular\">configuration file</a> (<code>angular.json</code>) and, by default, an initial application project with the same name.</p>\n\n<p translation-result=\"on\">而用來建立或操作應用和庫的命令（比如 <code>add</code> 和 <code>generate</code>）必須在工作區目錄下才能執行。\n欲知詳情，參閱<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區配置</a>。</p><p translation-origin=\"off\">Commands that create or operate on applications and libraries (such as <code>add</code> and <code>generate</code>) must be executed from within a workspace directory.\nTo learn more, see <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">Workspace Configuration</a>.</p>\n\n<h2 id=\"workspace-configuration\" translation-result=\"on\">工作區配置（workspace configuration）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace-configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">workspace configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace-configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個名叫 <code>angular.json</code> 的檔案，它位於 Angular <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">工作區</a> 的根目錄下，併為 <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a> 提供的或整合的各個建構/開發工具提供工作區級和專案專屬的預設配置項。\n欲知詳情，參閱<a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">工作區配置</a>。</p><p translation-origin=\"off\">A file named <code>angular.json</code> at the root level of an Angular <a href=\"guide/glossary#workspace\" title=\"workspace - Glossary | Angular\">workspace</a> provides workspace-wide and project-specific configuration defaults for build and development tools that are provided by or integrated with the <a href=\"guide/glossary#command-line-interface-cli\" title=\"command-line interface (CLI) - Glossary | Angular\">Angular CLI</a>.\nTo learn more, see <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\">Workspace Configuration</a>.</p>\n\n<p translation-result=\"on\">還有一些專案專屬的配置檔案是給某些工具使用的。比如 <code>package.json</code> 是給 <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm 包管理器</a>使用的，<code>tsconfig.json</code> 是給 <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">TypeScript 轉譯器</a>使用的，而 <code>tslint.json</code> 是給 <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a> 使用的。\n欲知詳情，參閱<a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">工作區和專案檔案結構</a>。</p><p translation-origin=\"off\">Additional project-specific configuration files are used by tools, such as <code>package.json</code> for the <a href=\"guide/glossary#npm-package\" title=\"npm package - Glossary | Angular\">npm package manager</a>, <code>tsconfig.json</code> for <a href=\"guide/glossary#transpile\" title=\"transpile - Glossary | Angular\">TypeScript transpilation</a>, and <code>tslint.json</code> for <a href=\"https://palantir.github.io/tslint\" title=\"TSLint | Palantir | GitHub\">TSLint</a>.\nTo learn more, see <a href=\"guide/file-structure\" title=\"Workspace and project file structure | Angular\">Workspace and Project File Structure</a>.</p>\n\n<h2 id=\"zone\" translation-result=\"on\">區域 （zone）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">zone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一組非同步任務的執行上下文。它對於除錯、效能分析和測試那些包含了非同步操作（如事件處理、 Promise 、遠端伺服器呼叫等）的應用是非常有用的。</p><p translation-origin=\"off\">An execution context for a set of asynchronous tasks.\nUseful for debugging, profiling, and testing applications that include asynchronous operations such as event processing, promises, and runs to remote servers.</p>\n\n<p translation-result=\"on\">Angular 應用會執行在一個 Zone 區域中，在這裡，它可以對非同步事件做出反應，可以透過檢查資料變更、利用<a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">資料繫結 （data bindings）</a> 來更新資訊顯示。</p><p translation-origin=\"off\">An Angular application runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving <a href=\"guide/glossary#data-binding\" title=\"data binding - Glossary | Angular\">data bindings</a>.</p>\n\n<p translation-result=\"on\">Zone 的使用方可以在非同步操作完成之前或之後採取行動。</p><p translation-origin=\"off\">A zone client can take action before and after an async operation completes.</p>\n\n<p translation-result=\"on\">在此<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\" title=\"Brian Ford - Zones - NG-Conf 2014 | YouTube\">Brian Ford 影片</a>中瞭解有關區域的更多資訊。</p><p translation-origin=\"off\">Learn more about zones in this <a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\" title=\"Brian Ford - Zones - NG-Conf 2014 | YouTube\">Brian Ford video</a>.</p>\n\n<!-- vale Angular.Google_Headings = YES -->\n<!-- links -->\n<!-- [AioGuideInterpolationTemplateExpressions]: guide/interpolation#template-expressions \"Template expressions - Text interpolation | Angular\" -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/16/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core\n - api/core/ANIMATION_MODULE_TYPE\n - api/core/APP_BOOTSTRAP_LISTENER\n - api/core/APP_ID\n - api/core/APP_INITIALIZER\n - api/core/Component\n - api/core/ComponentRef\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/Inject\n - api/core/Injector\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/PACKAGE_ROOT_URL\n - api/core/Pipe\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/platform-browser\n - api/platform-browser-dynamic\n - api/platform-browser/REMOVE_STYLES_ON_COMPONENT_DESTROY\n - api/platform-browser/animations\n - api/platform-browser/animations/ANIMATION_MODULE_TYPE\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - api/platform-server\n - api/router\n - api/router/provideRoutes\n - api/service-worker/SwUpdate\n - cli\n - guide/animate-state-style\n - guide/animations\n - guide/aot-compiler\n - guide/architecture\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/binding-overview\n - guide/bootstrapping\n - guide/build\n - guide/cli-builder\n - guide/creating-libraries\n - guide/dependency-injection\n - guide/dependency-injection-navtree\n - guide/event-binding\n - guide/file-structure\n - guide/forms\n - guide/http\n - guide/http-request-data-from-server\n - guide/http-server-communication\n - guide/http-setup-server-communication\n - guide/i18n-common-format-data-locale\n - guide/i18n-common-merge\n - guide/i18n-common-overview\n - guide/i18n-common-prepare\n - guide/i18n-optional-overview\n - guide/interpolation\n - guide/libraries\n - guide/lifecycle-hooks\n - guide/migration-injectable\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/npm-packages\n - guide/pipes\n - guide/pipes-custom-data-trans\n - guide/pipes-overview\n - guide/property-binding\n - guide/reactive-forms\n - guide/roadmap\n - guide/routing-overview\n - guide/schematics\n - guide/service-worker-communications\n - guide/setup-local\n - guide/styleguide\n - guide/template-statements\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/upgrade-setup\n - guide/workspace-config\n - presskit\n - start/start-data\n - tutorial\n - tutorial/tour-of-heroes\n - tutorial/tour-of-heroes/toh-pt0\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Provider\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser/BrowserModule\n - api/platform-server\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterOutlet\n - cli\n - cli/add\n - cli/generate\n - cli/generate#app-shell\n - cli/generate#application\n - cli/generate#library\n - cli/new\n - cli/run\n - guide/angular-package-format\n - guide/animations\n - guide/architecture\n - guide/architecture-services\n - guide/attribute-binding\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/browser-support\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/class-binding\n - guide/creating-libraries#integrating-with-the-cli-using-code-generation-schematics\n - guide/dependency-injection\n - guide/elements\n - guide/event-binding\n - guide/file-structure\n - guide/form-validation\n - guide/form-validation#adding-custom-validators-to-reactive-forms\n - guide/form-validation#adding-custom-validators-to-template-driven-forms\n - guide/forms\n - guide/forms-overview\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-element\n - guide/glossary#angular-package-format-apf\n - guide/glossary#angular-元素element\n - guide/glossary#angular-包格式-apf\n - guide/glossary#angular-詞彙表\n - guide/glossary#annotation\n - guide/glossary#app-shell\n - guide/glossary#architect\n - guide/glossary#attribute-directive\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#builder\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#class-decorator\n - guide/glossary#class-field-decorator\n - guide/glossary#collection\n - guide/glossary#command-line-interface-cli\n - guide/glossary#component\n - guide/glossary#configuration\n - guide/glossary#content-projection\n - guide/glossary#custom-element\n - guide/glossary#data-binding\n - guide/glossary#declarable\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection-di\n - guide/glossary#di-token\n - guide/glossary#di-令牌token\n - guide/glossary#directive\n - guide/glossary#domain-specific-language-dsl\n - guide/glossary#dynamic-component-loading\n - guide/glossary#eager-loading\n - guide/glossary#ecmascript\n - guide/glossary#element\n - guide/glossary#entry-point\n - guide/glossary#form-control\n - guide/glossary#form-model\n - guide/glossary#form-validation\n - guide/glossary#glossary\n - guide/glossary#immutability\n - guide/glossary#injectable\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#ivy\n - guide/glossary#javascript\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#lazy-loading\n - guide/glossary#library\n - guide/glossary#lifecycle-hook\n - guide/glossary#module\n - guide/glossary#ng-模組ngmodule\n - guide/glossary#ngc\n - guide/glossary#ngmodule\n - guide/glossary#npm-package\n - guide/glossary#npm-包\n - guide/glossary#observable\n - guide/glossary#observer\n - guide/glossary#output\n - guide/glossary#pipe\n - guide/glossary#platform\n - guide/glossary#polyfill\n - guide/glossary#project\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#resolver\n - guide/glossary#route-guard\n - guide/glossary#router\n - guide/glossary#router-outlet\n - guide/glossary#routing-component\n - guide/glossary#rule\n - guide/glossary#schematic\n - guide/glossary#schematics-cli\n - guide/glossary#scoped-package\n - guide/glossary#server-side-rendering\n - guide/glossary#service\n - guide/glossary#standalone\n - guide/glossary#structural-directive\n - guide/glossary#subscriber\n - guide/glossary#target\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#template-input-variable\n - guide/glossary#template-reference-variable\n - guide/glossary#token\n - guide/glossary#transpile\n - guide/glossary#tree\n - guide/glossary#typescript\n - guide/glossary#typescript-configuration-file\n - guide/glossary#typescript-配置檔案\n - guide/glossary#unidirectional-data-flow\n - guide/glossary#universal\n - guide/glossary#view\n - guide/glossary#view-engine\n - guide/glossary#view-hierarchy\n - guide/glossary#web-component\n - guide/glossary#web-元件\n - guide/glossary#workspace\n - guide/glossary#workspace-configuration\n - guide/glossary#zone\n - guide/glossary#不可變性immutability\n - guide/glossary#令牌token\n - guide/glossary#依賴注入dependency-injection\n - guide/glossary#元素element\n - guide/glossary#入口點entry-point\n - guide/glossary#內容投影content-projection\n - guide/glossary#動態元件載入dynamic-component-loading\n - guide/glossary#區域-zone\n - guide/glossary#單向資料流\n - guide/glossary#即時-just-in-time-jit-編譯\n - guide/glossary#原理圖-cli\n - guide/glossary#原理圖schematic\n - guide/glossary#變更檢測change-detection\n - guide/glossary#可宣告物件declarable\n - guide/glossary#可注入物件injectable\n - guide/glossary#可觀察物件observable\n - guide/glossary#命令列介面cli\n - guide/glossary#響應式表單reactive-forms\n - guide/glossary#大小寫型別case-types\n - guide/glossary#屬性型指令attribute-directive\n - guide/glossary#工作區workspace\n - guide/glossary#工作區配置workspace-configuration\n - guide/glossary#平台platform\n - guide/glossary#庫library\n - guide/glossary#應用外殼app-shell\n - guide/glossary#建築師architect\n - guide/glossary#引導bootstrap\n - guide/glossary#急性載入eager-loading\n - guide/glossary#延遲載入lazy-loading\n - guide/glossary#指令directive\n - guide/glossary#提供者provider\n - guide/glossary#插值interpolation\n - guide/glossary#資料繫結data-binding\n - guide/glossary#服務service\n - guide/glossary#伺服器端渲染\n - guide/glossary#建構器builder\n - guide/glossary#模組module\n - guide/glossary#範本template\n - guide/glossary#範本參考變數template-reference-variable\n - guide/glossary#範本表示式template-expression\n - guide/glossary#範本輸入變數template-input-variable\n - guide/glossary#範本驅動表單template-driven-forms\n - guide/glossary#注入器-injector\n - guide/glossary#註解annotation\n - guide/glossary#獨立\n - guide/glossary#生命週期鉤子lifecycle-hook\n - guide/glossary#目錄樹tree\n - guide/glossary#目標target\n - guide/glossary#管道pipe\n - guide/glossary#類欄位裝飾器class-field-decorator\n - guide/glossary#類裝飾器class-decorator\n - guide/glossary#元件-component\n - guide/glossary#繫結-binding\n - guide/glossary#結構型指令structural-directive\n - guide/glossary#Polyfill指令碼polyfill\n - guide/glossary#自訂元素custom-element\n - guide/glossary#範圍化包-scoped-package\n - guide/glossary#表單控制項form-control\n - guide/glossary#表單模型form-model\n - guide/glossary#表單驗證form-validation\n - guide/glossary#裝飾器decorator--decoration\n - guide/glossary#觀察者observer\n - guide/glossary#規則rule\n - guide/glossary#檢視view\n - guide/glossary#檢視引擎view-engine\n - guide/glossary#檢視樹view-hierarchy\n - guide/glossary#解析器resolver\n - guide/glossary#訂閱者subscriber\n - guide/glossary#路由出口router-outlet\n - guide/glossary#路由器router\n - guide/glossary#路由守衛route-guard\n - guide/glossary#路由元件routing-component\n - guide/glossary#轉譯transpile\n - guide/glossary#輸入屬性-input\n - guide/glossary#輸出屬性output\n - guide/glossary#通用\n - guide/glossary#配置configuration\n - guide/glossary#集合collection\n - guide/glossary#專案project\n - guide/glossary#預先-ahead-of-time-aot-編譯\n - guide/glossary#領域特定語言dsl\n - guide/hierarchical-dependency-injection\n - guide/inputs-outputs\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#responding-to-projected-content-changes\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/pipes\n - guide/property-binding\n - guide/router\n - guide/router#preventing-unauthorized-access\n - guide/router-tutorial-toh#resolve-pre-fetching-component-data\n - guide/schematics\n - guide/service-worker-intro\n - guide/setup-local\n - guide/standalone-components\n - guide/structural-directives\n - guide/styleguide#02-01\n - guide/template-reference-variables\n - guide/template-reference-variables#template-input-variable\n - guide/template-syntax\n - guide/typescript-configuration\n - guide/universal\n - guide/workspace-config\n - guide/workspace-config#project-tool-configuration-options\n - https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\n - https://developer.mozilla.org/docs/Web/API/CustomElementRegistry\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://docs.npmjs.com/about-npm\n - https://en.wikipedia.org/wiki/Domain-specific_language\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://git-scm.com\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/browser\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/build_angular/src/builders/karma\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/glossary.md?message=docs%3A%20請簡述你的修改...\n - https://github.com/tc39/proposal-decorators\n - https://palantir.github.io/tslint\n - https://rxjs.dev\n - https://web.dev/faster-angular-change-detection\n - https://webpack.js.org\n - https://www.typescriptlang.org\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"}