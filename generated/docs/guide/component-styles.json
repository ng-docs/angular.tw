{"id":"guide/component-styles","title":"Component styles","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/component-styles.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"component-styles\" translation-result=\"on\">元件樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styles\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Component styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styles\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 應用使用標準的 CSS 來設定樣式。這意味著你可以把關於 CSS 的那些知識和技能直接用於 Angular 程式中，比如：樣式表、選擇器、規則以及媒體查詢等。</p><p translation-origin=\"off\">Angular applications are styled with standard CSS.\nThat means you can apply everything you know about CSS stylesheets, selectors, rules, and media queries directly to Angular applications.</p>\n\n<p translation-result=\"on\">另外，Angular 還能把<em>元件樣式</em>捆綁在元件上，以實現比標準樣式表更加模組化的設計。</p><p translation-origin=\"off\">Additionally, Angular can bundle <em>component styles</em> with components, enabling a more modular design than regular stylesheets.</p>\n\n<p translation-result=\"on\">本章將會講解如何載入和使用這些<em>元件樣式</em>。</p><p translation-origin=\"off\">This page describes how to load and apply these component styles.</p>\n\n<p translation-result=\"on\">可以執行<live-example></live-example>，在 Stackblitz 中試用並下載本頁的程式碼。</p><p translation-origin=\"off\">Run the <live-example></live-example> in Stackblitz and download the code from there.</p>\n\n<h2 id=\"using-component-styles\" translation-result=\"on\">使用元件樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#using-component-styles\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Using component styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#using-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">對你編寫的每個 Angular 元件來說，除了定義 HTML 範本之外，還要定義用於範本的 CSS 樣式、 指定任意的選擇器、規則和媒體查詢。</p><p translation-origin=\"off\">For every Angular component you write, you can define not only an HTML template, but also the CSS styles that go with that template, specifying any selectors, rules, and media queries that you need.</p>\n\n<p translation-result=\"on\">實現方式之一，是在元件的元資料中設定 <code>styles</code> 屬性。<code>styles</code> 屬性可以接受一個包含 CSS 程式碼的字串陣列。通常你只給它一個字串就行了，如同下例：</p><p translation-origin=\"off\">One way to do this is to set the <code>styles</code> property in the component metadata.\nThe <code>styles</code> property takes an array of strings that contain CSS code.\nUsually you give it one string, as in the following example:</p>\n\n<code-example header=\"src/app/hero-app.component.ts\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<h2 id=\"component-styling-best-practices\" translation-result=\"on\">元件樣式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styling-best-practices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Component styling best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styling-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有關 Angular 如何將樣式範圍限定為特定元件的資訊，參閱<a href=\"guide/view-encapsulation\">檢視封裝</a>。</p><p translation-origin=\"off\">See <a href=\"guide/view-encapsulation\">View Encapsulation</a> for information on how Angular scopes styles to specific components.</p>\n\n</div>\n<p translation-result=\"on\">你應該將元件的樣式視為該元件的私有實現細節。使用通用元件時，你不應該覆蓋元件的樣式，就像存取 TypeScript 類別的私有成員一樣。雖然 Angular 的預設樣式封裝可防止元件樣式影響其他元件，但全域樣式會影響頁面上的所有元件。這包括 <code>::ng-deep</code>，它會將元件樣式提升為全域樣式。</p><p translation-origin=\"off\">You should consider the styles of a component to be private implementation details for that component.\nWhen consuming a common component, you should not override the component's styles any more than you should access the private members of a TypeScript class.\nWhile Angular's default style encapsulation prevents component styles from affecting other components, global styles affect all components on the page.\nThis includes <code>::ng-deep</code>, which promotes a component style to a global style.</p>\n\n<h3 id=\"authoring-a-component-to-support-customization\" translation-result=\"on\">創作支援自訂樣式的元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#authoring-a-component-to-support-customization\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Authoring a component to support customization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#authoring-a-component-to-support-customization\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">作為元件作者，你可以用四種不同的方式之一顯式設計元件以接受自訂。</p><p translation-origin=\"off\">As component author, you can explicitly design a component to accept customization in one of four different ways.</p>\n\n<h4 id=\"1-use-css-custom-properties-recommended\" translation-result=\"on\">1. 使用 CSS 自訂屬性（推薦）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#1-use-css-custom-properties-recommended\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">1. Use CSS Custom Properties (recommended)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#1-use-css-custom-properties-recommended\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你可以透過使用 CSS 自訂屬性（也稱為 CSS 變數）定義其樣式來為元件定義受支援的自訂 API。使用你元件的任何人都可以透過為這些屬性定義值、自訂元件在渲染頁面上的最終外觀來使用此 API。</p><p translation-origin=\"off\">You can define a supported customization API for your component by defining its styles with CSS Custom Properties, alternatively known as CSS Variables.\nAnyone using your component can consume this API by defining values for these properties, customizing the final appearance of the component on the rendered page.</p>\n\n<p translation-result=\"on\">雖然這需要為每個自訂點定義一個自訂屬性，但它建立了一個清晰的 API 契約，可以在所有樣式的封裝模式下工作。</p><p translation-origin=\"off\">While this requires defining a custom property for each customization point, it creates a clear API contract that works in all style encapsulation modes.</p>\n\n<h4 id=\"2-declare-global-css-with-mixin\" translation-result=\"on\">2.使用 <code>@mixin</code> 宣告全域 CSS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#2-declare-global-css-with-mixin\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">2. Declare global CSS with <code>@mixin</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#2-declare-global-css-with-mixin\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">雖然 Angular 的模擬樣式封裝可防止樣式從元件中逃逸，但它並不能防止全域 CSS 影響整個頁面。雖然元件使用者應避免直接覆蓋元件的 CSS 內部，但你可以透過 Sass 等 CSS 預處理器提供受支援的自訂 API。</p><p translation-origin=\"off\">While Angular's emulated style encapsulation prevents styles from escaping a component, it does not prevent global CSS from affecting the entire page.\nWhile component consumers should avoid directly overwriting the CSS internals of a component, you can offer a supported customization API via a CSS preprocessor like Sass.</p>\n\n<p translation-result=\"on\">比如，元件可以提供一個或多個受支援的 mixin 來自訂元件外觀的各個方面。雖然這種方法在其實現中使用了全域樣式，但它允許元件作者透過對元件的私有 DOM 結構和 CSS 類別的更改來使 mixins 保持最新。</p><p translation-origin=\"off\">For example, a component may offer one or more supported mixins to customize various aspects of the component's appearance.\nWhile this approach uses global styles in its implementation, it allows the component author to keep the mixins up to date with changes to the component's private DOM structure and CSS classes.</p>\n\n<h4 id=\"3-customize-with-css-part\" translation-result=\"on\">3.使用 CSS <code>::part</code> 自訂<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#3-customize-with-css-part\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">3. Customize with CSS <code>::part</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#3-customize-with-css-part\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果你的元件使用了 <a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>，你可以應用 <code>part</code> 屬性來指定元件範本中的元素。這允許元件的使用者使用 <a href=\"https://developer.mozilla.org/docs/Web/CSS/::part\"><code>::part</code> 偽元素</a>創作針對這些特定元素的任意樣式。</p><p translation-origin=\"off\">If your component uses <a href=\"https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>, you can apply the <code>part</code> attribute to specify elements in your component's template.\nThis allows consumers of the component to author arbitrary styles targeting those specific elements with <a href=\"https://developer.mozilla.org/docs/Web/CSS/::part\">the <code>::part</code> pseudo-element</a>.</p>\n\n<p translation-result=\"on\">雖然這允許你限制範本中消費者可以自訂的元素，但它並不能限制哪些 CSS 屬性是可自訂的。</p><p translation-origin=\"off\">While this lets you limit the elements within your template that consumers can customize, it does not limit which CSS properties are customizable.</p>\n\n<h4 id=\"4-provide-a-typescript-api\" translation-result=\"on\">4.提供 TypeScript API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#4-provide-a-typescript-api\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">4. Provide a TypeScript API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#4-provide-a-typescript-api\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你可以定義一個 TypeScript API 來自訂樣式，使用範本繫結來更新 CSS 類和樣式。不建議這樣做，因為這種樣式 API 的額外 JavaScript 成本會產生比 CSS 高得多的效能成本。</p><p translation-origin=\"off\">You can define a TypeScript API for customizing styles, using template bindings to update CSS classes and styles.\nThis is not recommended because the additional JavaScript cost of this style API incurs far more performance cost than CSS.</p>\n\n<h2 id=\"special-selectors\" translation-result=\"on\">特殊的選擇器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#special-selectors\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Special selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#special-selectors\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">元件樣式中有一些從影子（Shadow） DOM 樣式範圍領域（記錄在<a href=\"https://www.w3.org\">W3C</a>的<a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a>中）引入的特殊<em>選擇器</em>：</p><p translation-origin=\"off\">Component styles have a few special <em>selectors</em> from the world of shadow DOM style scoping (described in the <a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a> page on the <a href=\"https://www.w3.org\">W3C</a> site).\nThe following sections describe these selectors.</p>\n\n<h3 id=\"host\"><code>:host</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">每個元件都會關聯一個與其元件選擇器相匹配的元素。這個元素稱為<em>宿主元素</em>，範本會渲染到其中。<code>:host</code> 偽類選擇器可用於建立針對宿主元素自身的樣式，而不是針對宿主內部的那些元素。</p><p translation-origin=\"off\">Every component is associated within an element that matches the component's selector.\nThis element, into which the template is rendered, is called the <em>host element</em>.\nThe <code>:host</code> pseudo-class selector may be used to create styles that target the host element itself, as opposed to targeting elements inside the host.</p>\n\n<code-example header=\"src/app/host-selector-example.component.ts\" path=\"component-styles/src/app/host-selector-example.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-main',\n  template: `\n      &lt;h1&gt;It Works!&lt;/h1&gt;\n      &lt;div&gt;\n        Start editing to see some magic happen :)\n      &lt;/div&gt;\n  `\n})\nexport class HostSelectorExampleComponent {\n\n}\n\n</code-example>\n<p translation-result=\"on\">下面的樣式將以元件的宿主元素為目標。應用於此選擇器的任何規則都將影響宿主元素及其所有後代（在這種情況下，將所有包含的文字斜體）。（譯註：後代的樣式源自 CSS 的樣式繼承特性）</p><p translation-origin=\"off\">Creating the following style will target the component's host element.\nAny rule applied to this selector will affect the host element and all its descendants (in this case, italicizing all contained text).</p>\n\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"host\">\n:host {\n  font-style: italic;\n}\n\n</code-example>\n<p translation-result=\"on\"><code>:host</code> 選擇是是把宿主元素作為目標的<em>唯一</em>方式。除此之外，你將沒辦法指定它，因為宿主不是元件自身範本的一部分，而是父元件範本的一部分。</p><p translation-origin=\"off\">The <code>:host</code> selector only targets the host element of a component.\nAny styles within the <code>:host</code> block of a child component will <em>not</em> affect parent components.</p>\n\n<p translation-result=\"on\">要把宿主樣式作為條件，就要像<em>函式</em>一樣把其它選擇器放在 <code>:host</code> 後面的括號中。</p><p translation-origin=\"off\">Use the <em>function form</em> to apply host styles conditionally by including another selector inside parentheses after <code>:host</code>.</p>\n\n<p translation-result=\"on\">在這個例子中，當 CSS 類 <code>active</code> 應用在宿主元素上時，宿主元素的內容也變成了粗體。</p><p translation-origin=\"off\">In this example the host's content also becomes bold when the <code>active</code> CSS class is applied to the host element.</p>\n\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\">\n:host {\n  font-style: italic;\n}\n\n:host(.active) {\n  font-weight: bold;\n}\n\n</code-example>\n<p translation-result=\"on\"><code>:host</code> 選擇器也可以與其他選擇器組合使用。在 <code>:host</code> 後面新增選擇器以選擇子元素，比如，使用 <code>:host h2</code> 定位元件檢視內的 <code>&lt;h2&gt;</code>。</p><p translation-origin=\"off\">The <code>:host</code> selector can also be combined with other selectors.\nAdd selectors behind the <code>:host</code> to select child elements, for example using <code>:host h2</code> to target all <code>&lt;h2&gt;</code> elements inside a component's view.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不應該在 <code>:host</code> 選擇器前面新增除 <code>:host-context</code> 之外的選擇器來試圖基於元件檢視的外部上下文為本元件設定樣式。因為此類選擇器的作用域不會限於元件的檢視，而是會選擇外部上下文，但這不是內建的行為。請改用 <code>:host-context</code> 選擇器。</p><p translation-origin=\"off\">You should not add selectors (other than <code>:host-context</code>) in front of the <code>:host</code> selector to style a component based on the outer context of the component's view.\nSuch selectors are not scoped to a component's view and will select the outer context, but it's not built-in behavior.\nUse <code>:host-context</code> selector for that purpose instead.</p>\n\n</div>\n<h3 id=\"host-context\">:host-context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host-context\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">有時候，需要以某些來自宿主的祖先元素為條件來決定是否要應用某些樣式。比如，在文件的 <code>&lt;body&gt;</code> 元素上可能有一個用於表示樣式主題（theme）的 CSS 類，你應當基於它來決定元件的樣式。</p><p translation-origin=\"off\">Sometimes it's useful to apply styles to elements within a component's template based on some condition in an element that is an ancestor of the host element.\nFor example, a CSS theme class could be applied to the document <code>&lt;body&gt;</code> element, and you want to change how your component looks based on that.</p>\n\n<p translation-result=\"on\">這時可以使用 <code>:host-context()</code> 偽類選擇器。它也以類似 <code>:host()</code> 形式使用。它在當前元件宿主元素的<em>祖先節點</em>中查詢 CSS 類，直到文件的根節點為止。它只能與其它選擇器組合使用。</p><p translation-origin=\"off\">Use the <code>:host-context()</code> pseudo-class selector, which works just like the function form of <code>:host()</code>.\nThe <code>:host-context()</code> selector looks for a CSS class in any ancestor of the component host element, up to the document root.\nThe <code>:host-context()</code> selector is only useful when combined with another selector.</p>\n\n<p translation-result=\"on\">在下面的例子中，只有當該元件的某個祖先元素有 CSS 類 <code>active</code> 時，才會把該元件<em>內部</em>的所有文字置為斜體。</p><p translation-origin=\"off\">The following example italicizes all text inside a component, but only\nif some <em>ancestor</em> element of the host element has the CSS class <code>active</code>.</p>\n\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\">\n:host-context(.active) {\n  font-style: italic;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n只有宿主元素及其各級子節點會受到影響，不包括加上 <code>active</code> 類別的這個節點的祖先。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nOnly the host element and its descendants will be affected, not the ancestor with the assigned <code>active</code> class.</p>\n\n</div>\n<h3 id=\"deprecated-deep--and-ng-deep\" translation-result=\"on\">已棄用 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#deprecated-deep--and-ng-deep\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">(deprecated) <code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#deprecated-deep--and-ng-deep\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">元件樣式通常只會作用於元件自身的 HTML 上。</p><p translation-origin=\"off\">Component styles normally apply only to the HTML in the component's own template.</p>\n\n<p translation-result=\"on\">把偽類 <code>::ng-deep</code> 應用到任何一條 CSS 規則上就會完全禁止對那條規則的檢視封裝。任何帶有 <code>::ng-deep</code> 的樣式都會變成全域樣式。為了把指定的樣式限定在當前元件及其下級元件中，請確保在 <code>::ng-deep</code> 之前帶上 <code>:host</code> 選擇器。如果 <code>::ng-deep</code> 組合器在 <code>:host</code> 偽類之外使用，該樣式就會汙染其它元件。</p><p translation-origin=\"off\">Applying the <code>::ng-deep</code> pseudo-class to any CSS rule completely disables view-encapsulation for that rule.\nAny style with <code>::ng-deep</code> applied becomes a global style.\nIn order to scope the specified style to the current component and all its descendants, be sure to include the <code>:host</code> selector before <code>::ng-deep</code>.\nIf the <code>::ng-deep</code> combinator is used without the <code>:host</code> pseudo-class selector, the style can bleed into other components.</p>\n\n<p translation-result=\"on\">這個例子以所有的 <code>&lt;h3&gt;</code> 元素為目標，從宿主元素到當前元素再到 DOM 中的所有子元素：</p><p translation-origin=\"off\">The following example targets all <code>&lt;h3&gt;</code> elements, from the host element down through this component to all of its child elements in the DOM.</p>\n\n<code-example header=\"src/app/hero-details.component.css\" path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\">\n:host ::ng-deep h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p translation-result=\"on\"><code>/deep/</code> 組合器還有兩個別名：<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>。</p><p translation-origin=\"off\">The <code>/deep/</code> combinator also has the aliases <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><code>/deep/</code> 和 <code>&gt;&gt;&gt;</code> 選擇器只能被用在<strong>模擬 (emulated)</strong>模式下。這種方式是預設值，也是用得最多的方式。更多資訊，見<a href=\"guide/view-encapsulation\">控制檢視封裝模式</a>一節。</p><p translation-origin=\"off\">Use <code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code> only with <em>emulated</em> view encapsulation.\nEmulated is the default and most commonly used view encapsulation.\nFor more information, see the <a href=\"guide/view-encapsulation\">View Encapsulation</a> section.</p>\n\n</div>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">CSS 標準中用於 \"刺穿 Shadow DOM\" 的組合器已經被棄用，並將<a href=\"https://www.chromestatus.com/features/6750456638341120\">這個特性從主流瀏覽器和工具中移除</a>。因此，我們也將在 Angular 中移除對它們的支援（包括 <code>/deep/</code>、<code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code>）。目前，建議先統一使用 <code>::ng-deep</code>，以便相容將來的工具。</p><p translation-origin=\"off\">The shadow-piercing descendant combinator is deprecated and <a href=\"https://www.chromestatus.com/feature/6750456638341120\">support is being removed from major browsers</a> and tools.\nAs such we plan to drop support in Angular (for all 3 of <code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code>).\nUntil then <code>::ng-deep</code> should be preferred for a broader compatibility with the tools.</p>\n\n</div>\n<p><a id=\"loading-styles\"></a></p>\n<h2 id=\"loading-component-styles\" translation-result=\"on\">把樣式載入進元件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#loading-component-styles\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Loading component styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#loading-component-styles\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有幾種方式把樣式加入元件：</p><p translation-origin=\"off\">There are several ways to add styles to a component:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">設定 <code>styles</code> 或 <code>styleUrls</code> 元資料</p><p translation-origin=\"off\">By setting <code>styles</code> or <code>styleUrls</code> metadata</p>\n\n</li>\n<li>\n<p translation-result=\"on\">內聯在範本的 HTML 中</p><p translation-origin=\"off\">Inline in the template HTML</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過 CSS 檔案匯入</p><p translation-origin=\"off\">With CSS imports</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">上述作用域規則對所有這些載入模式都適用。</p><p translation-origin=\"off\">The scoping rules outlined earlier apply to each of these loading patterns.</p>\n\n<h3 id=\"styles-in-component-metadata\" translation-result=\"on\">元資料中的樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#styles-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Styles in component metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#styles-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">給 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器新增一個 <code>styles</code> 陣列型屬性。</p><p translation-origin=\"off\">Add a <code>styles</code> array property to the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator.</p>\n\n<p translation-result=\"on\">這個陣列中的每一個字串（通常也只有一個）定義一份 CSS。</p><p translation-origin=\"off\">Each string in the array defines some CSS for this component.</p>\n\n<code-example header=\"src/app/hero-app.component.ts (CSS inline)\" path=\"component-styles/src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<div class=\"alert is-critical\">\n<p translation-result=\"on\">注意：這些樣式<strong>只對當前元件生效</strong>。它們<strong>既不會作用於範本中嵌入的任何元件</strong>，也不會作用於投影進來的元件（如 <code>ng-content</code>）。</p><p translation-origin=\"off\">Reminder:\nThese styles apply <em>only to this component</em>.\nThey are <em>not inherited</em> by any components nested within the template nor by any content projected into the component.</p>\n\n</div>\n<p translation-result=\"on\">當使用 <code>--inline-styles</code> 標識建立元件時，Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 命令就會定義一個空的 <code>styles</code> 陣列。</p><p translation-origin=\"off\">The Angular CLI command <a href=\"cli/generate\"><code>ng generate component</code></a> defines an empty <code>styles</code> array when you create the component with the <code>--inline-style</code> flag.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app --inline-style\n\n</code-example>\n<h3 id=\"style-files-in-component-metadata\" translation-result=\"on\">元件元資料中的樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#style-files-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Style files in component metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#style-files-in-component-metadata\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把外部 CSS 檔案新增到 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的 <code>styleUrls</code> 屬性中以載入外部樣式。</p><p translation-origin=\"off\">Load styles from external CSS files by adding a <code>styleUrls</code> property to a component's <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator:</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=\"hero\"&gt;&lt;/app-hero-main&gt;\n  `,\n  styleUrls: ['./hero-app.component.css']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n    <code-pane header=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-critical\">\n<p translation-result=\"on\">注意：這些樣式<strong>只對當前元件生效</strong>。它們<strong>既不會作用於範本中嵌入的任何元件</strong>，也不會作用於投影進來的元件（如 <code>ng-content</code>）。</p><p translation-origin=\"off\">Reminder: the styles in the style file apply <em>only to this component</em>.\nThey are <em>not inherited</em> by any components nested within the template nor by any content projected into the component.</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">你可以指定多個樣式檔案，甚至可以組合使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 和 <code>styleUrls</code> 方式。</p><p translation-origin=\"off\">You can specify more than one styles file or even a combination of <code>styles</code> and <code>styleUrls</code>.</p>\n\n</div>\n<p translation-result=\"on\">當你使用 Angular CLI 的 <a href=\"cli/generate\"><code>ng generate component</code></a> 命令但不帶 <code>--inline-style</code> 標誌時，CLI 會為你建立一個空白的樣式表文件，並且在所產生元件的 <code>styleUrls</code> 中參考該檔案。</p><p translation-origin=\"off\">When you use the Angular CLI command <a href=\"cli/generate\"><code>ng generate component</code></a> without the <code>--inline-style</code> flag, it creates an empty styles file for you and references that file in the component's generated <code>styleUrls</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-app\n\n</code-example>\n<h3 id=\"template-inline-styles\" translation-result=\"on\">範本內聯樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-inline-styles\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Template inline styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-inline-styles\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以直接在元件的 HTML 範本中寫 <code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> 標籤來內嵌 CSS 樣式。</p><p translation-origin=\"off\">Embed CSS styles directly into the HTML template by putting them inside <code>&lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;</code> tags.</p>\n\n<code-example header=\"src/app/hero-controls.component.ts\" path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-controls',\n  template: `\n    &lt;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button type=\"button\" (click)=\"activate()\"&gt;Activate&lt;/button&gt;\n  `\n})\n\n</code-example>\n<h3 id=\"template-link-tags\" translation-result=\"on\">範本中的 link 標籤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-link-tags\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Template link tags<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-link-tags\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你也可以在元件的 HTML 範本中寫 <code>&lt;link&gt;</code> 標籤。</p><p translation-origin=\"off\">You can also write <code>&lt;link&gt;</code> tags into the component's HTML template.</p>\n\n<code-example header=\"src/app/hero-team.component.ts\" path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-team',\n  template: `\n    &lt;!-- We must use a relative URL so that the AOT compiler can find the stylesheet --&gt;\n    &lt;link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\"&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let member of hero.team\"&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n\n</code-example>\n<div class=\"alert is-critical\">\n<p translation-result=\"on\">當使用 CLI 進行建構時，要確保這個連結到的樣式表文件被複制到了伺服器上。參閱<a href=\"guide/workspace-config#assets-configuration\">資產檔案配置指南</a>。</p><p translation-origin=\"off\">When building with the CLI, be sure to include the linked style file among the assets to be copied to the server as described in the <a href=\"guide/workspace-config#assets-configuration\">Assets configuration guide</a>.</p>\n\n<p translation-result=\"on\">只要參考過，CLI 就會計入這個樣式表，無論這個 link 標籤的 href 指向的 URL 是相對於應用根目錄的還是相對於元件檔案的。</p><p translation-origin=\"off\">Once included, the CLI includes the stylesheet, whether the link tag's href URL is relative to the application root or the component file.</p>\n\n</div>\n<h3 id=\"css-imports\" translation-result=\"on\">CSS <code>@imports</code> 語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">CSS <code>@imports</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以利用標準的 CSS <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code> 規則</a>來把其它 CSS 檔案匯入到 CSS 檔案中。</p><p translation-origin=\"off\">Import CSS files into the CSS files using the standard CSS <code>@import</code> rule.\nFor details, see <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code></a> on the <a href=\"https://developer.mozilla.org\">MDN</a> site.</p>\n\n<p translation-result=\"on\">在<em>這種</em>情況下，URL 是相對於你正在匯入的 CSS 檔案的。</p><p translation-origin=\"off\">In this case, the URL is relative to the CSS file into which you're importing.</p>\n\n<code-example header=\"src/app/hero-details.component.css (excerpt)\" path=\"component-styles/src/app/hero-details.component.css\" region=\"import\">\n/* The AOT compiler needs the `./` to show that this is local */\n@import './hero-details-box.css';\n\n</code-example>\n<h3 id=\"external-and-global-style-files\" translation-result=\"on\">外部以及全域樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#external-and-global-style-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">External and global style files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#external-and-global-style-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當使用 CLI 進行建構時，你必須配置 <code>angular.json</code> 檔案，使其包含<em>所有外部資源</em>（包括外部的樣式表文件）。</p><p translation-origin=\"off\">When building with the CLI, you must configure the <code>angular.json</code> to include <em>all external assets</em>, including external style files.</p>\n\n<p translation-result=\"on\">在它的 <code>styles</code> 區註冊這些<strong>全域</strong>樣式檔案，預設情況下，它會有一個預先配置的全域 <code>styles.css</code> 檔案。</p><p translation-origin=\"off\">Register <strong>global</strong> style files in the <code>styles</code> section which, by default, is pre-configured with the global <code>styles.css</code> file.</p>\n\n<p translation-result=\"on\">要了解更多，參閱 <a href=\"guide/workspace-config#styles-and-scripts-configuration\">樣式配置指南</a>。</p><p translation-origin=\"off\">See the <a href=\"guide/workspace-config#styles-and-scripts-configuration\">Styles configuration guide</a> to learn more.</p>\n\n<h3 id=\"non-css-style-files\" translation-result=\"on\">非 CSS 樣式檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#non-css-style-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Non-CSS style files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#non-css-style-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果使用 CLI 進行建構，那麼你可以用 <a href=\"https://sass-lang.com\">sass</a> 或 <a href=\"https://lesscss.org\">less</a> 來編寫樣式，並使用相應的副檔名（<code>.scss</code>、<code>.less</code>）把它們指定到 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 元資料中。例子如下：</p><p translation-origin=\"off\">If you're building with the CLI, you can write style files in <a href=\"https://sass-lang.com\">sass</a>, or <a href=\"https://lesscss.org\">less</a>, and specify those files in the <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> metadata with the appropriate extensions (<code>.scss</code>, <code>.less</code>) as in the following example:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n…\n\n</code-example>\n<p translation-result=\"on\">CLI 的建構過程會執行相關的預處理器。</p><p translation-origin=\"off\">The CLI build process runs the pertinent CSS preprocessor.</p>\n\n<p translation-result=\"on\">當使用 <code>ng generate component</code> 命令產生元件檔案時，CLI 會預設產生一個空白的 CSS 樣式檔案（<code>.css</code>）。你可以配置 CLI，讓它預設使用你喜歡的 CSS 預處理器，參閱<a href=\"guide/workspace-config#generation-schematics\">工作區配置指南</a>中的解釋。</p><p translation-origin=\"off\">When generating a component file with <code>ng generate component</code>, the CLI emits an empty CSS styles file (<code>.css</code>) by default.\nConfigure the CLI to default to your preferred CSS preprocessor as explained in the <a href=\"guide/workspace-config#generation-schematics\">Workspace configuration guide</a>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/component-overview\n - guide/deprecations\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgFor\n - api/core/Component\n - api/core/Component#styleUrls\n - cli/generate\n - guide/component-styles#1-use-css-custom-properties-recommended\n - guide/component-styles#1-使用-css-自訂屬性推薦\n - guide/component-styles#2-declare-global-css-with-mixin\n - guide/component-styles#2使用-mixin-宣告全域-css\n - guide/component-styles#3-customize-with-css-part\n - guide/component-styles#3使用-css-part-自訂\n - guide/component-styles#4-provide-a-typescript-api\n - guide/component-styles#4提供-typescript-api\n - guide/component-styles#authoring-a-component-to-support-customization\n - guide/component-styles#component-styles\n - guide/component-styles#component-styling-best-practices\n - guide/component-styles#css-imports\n - guide/component-styles#css-imports-語法\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/component-styles#external-and-global-style-files\n - guide/component-styles#host\n - guide/component-styles#host-context\n - guide/component-styles#loading-component-styles\n - guide/component-styles#non-css-style-files\n - guide/component-styles#special-selectors\n - guide/component-styles#style-files-in-component-metadata\n - guide/component-styles#styles-in-component-metadata\n - guide/component-styles#template-inline-styles\n - guide/component-styles#template-link-tags\n - guide/component-styles#using-component-styles\n - guide/component-styles#使用元件樣式\n - guide/component-styles#元資料中的樣式\n - guide/component-styles#創作支援自訂樣式的元件\n - guide/component-styles#外部以及全域樣式檔案\n - guide/component-styles#已棄用-deep-和-ng-deep\n - guide/component-styles#把樣式載入進元件中\n - guide/component-styles#範本中的-link-標籤\n - guide/component-styles#範本內聯樣式\n - guide/component-styles#特殊的選擇器\n - guide/component-styles#元件元資料中的樣式檔案\n - guide/component-styles#元件樣式\n - guide/component-styles#元件樣式最佳實踐\n - guide/component-styles#非-css-樣式檔案\n - guide/view-encapsulation\n - guide/workspace-config#assets-configuration\n - guide/workspace-config#generation-schematics\n - guide/workspace-config#styles-and-scripts-configuration\n - https://developer.mozilla.org\n - https://developer.mozilla.org/docs/Web/CSS/::part\n - https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM\n - https://developer.mozilla.org/en/docs/Web/CSS/@import\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/component-styles.md?message=docs%3A%20請簡述你的修改...\n - https://lesscss.org\n - https://sass-lang.com\n - https://www.chromestatus.com/feature/6750456638341120\n - https://www.chromestatus.com/features/6750456638341120\n - https://www.w3.org\n - https://www.w3.org/TR/css-scoping-1\n-->"}