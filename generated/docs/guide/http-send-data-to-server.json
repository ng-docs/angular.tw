{"id":"guide/http-send-data-to-server","title":"HTTP: Send data to a server","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-send-data-to-server.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"http-send-data-to-a-server\" translation-result=\"on\">HTTP：向伺服器傳送資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">HTTP: Send data to a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">除了從伺服器獲取資料外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 還支援其它一些 HTTP 方法，比如 PUT，POST 和 DELETE，你可以用它們來修改遠端資料。</p><p translation-origin=\"off\">In addition to fetching data from a server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.</p>\n\n<p translation-result=\"on\">本指南中的這個範例應用包括一個簡略版本的《英雄之旅》，它會獲取英雄資料，並允許使用者新增、刪除和修改它們。下面幾節在 <code>HeroesService</code> 範例中展示了資料更新方法的一些例子。</p><p translation-origin=\"off\">The sample app for this guide includes an abridged version of the \"Tour of Heroes\" example that fetches heroes and enables users to add, delete, and update them.\nThe following sections show examples of the data-update methods from the sample's <code>HeroesService</code>.</p>\n\n<h2 id=\"make-a-post-request\" translation-result=\"on\">發出 POST 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a POST request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">應用經常在提交表單時透過 POST 請求向伺服器傳送資料。下面這個例子中，<code>HeroesService</code> 在向資料庫新增英雄時發起了一個 HTTP POST 請求。</p><p translation-origin=\"off\">Apps often send data to a server with a POST request when submitting a form.\nIn the following example, the <code>HeroesService</code> makes an HTTP POST request when adding a hero to the database.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (addHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the database */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 方法像 <code>get()</code> 一樣也有型別引數，可以用它來指出你期望伺服器返回特定型別的資料。該方法需要一個資源 URL 和兩個額外的引數：</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> method is similar to <code>get()</code> in that it has a type parameter, which you can use to specify that you expect the server to return data of a given type.\nThe method takes a resource URL and two additional parameters:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">引數</nt-wrapper><nt-wrapper translation-origin=\"off\">Parameter</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">body</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要在請求正文中 POST 的資料。</nt-wrapper><nt-wrapper translation-origin=\"off\">The data to POST in the body of the request.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">options</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含方法選項的物件，在這裡用於指定所需的標頭。</nt-wrapper><nt-wrapper translation-origin=\"off\">An object containing method options which, in this case, specify required headers.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">該範例<a href=\"guide/http-handle-request-errors#error-details\">如上所述</a>會捕獲錯誤。</p><p translation-origin=\"off\">The example catches errors as <a href=\"guide/http-handle-request-errors#error-details\">described above</a>.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 透過訂閱該服務方法返回的 <code>Observable</code> 發起了一次實際的 <code>POST</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual POST operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n\n<code-example header=\"app/heroes/heroes.component.ts (addHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero =&gt; this.heroes.push(hero));\n\n</code-example>\n<p translation-result=\"on\">當伺服器成功做出響應時，會帶有這個新建立的英雄，然後該元件就會把這個英雄新增到正在顯示的 <code>heroes</code> 列表中。</p><p translation-origin=\"off\">When the server responds successfully with the newly added hero, the component adds that hero to the displayed <code>heroes</code> list.</p>\n\n<h2 id=\"make-a-delete-request\" translation-result=\"on\">發出刪除請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a DELETE request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">該應用可以把英雄的 ID 傳給 <code>HttpClient.delete</code> 方法的請求 URL 來刪除一個英雄。</p><p translation-origin=\"off\">This application deletes a hero with the <code>HttpClient.delete</code> method by passing the hero's ID in the request URL.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;unknown&gt; {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">當 <code>HeroesComponent</code> 訂閱了該服務方法返回的 <code>Observable</code> 時，就會發起一次實際的 <code>DELETE</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual DELETE operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n\n<code-example header=\"app/heroes/heroes.component.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p translation-result=\"on\">該元件不會等待刪除操作的結果，所以它的 subscribe（訂閱）中沒有回呼(Callback)函式。不過就算你不關心結果，也仍然要訂閱它。呼叫 <code>subscribe()</code> 方法會<strong>執行</strong>這個可觀察物件，這時才會真的發起 DELETE 請求。</p><p translation-origin=\"off\">The component isn't expecting a result from the delete operation, so it subscribes without a callback.\nEven though you are not using the result, you still have to subscribe.\nCalling the <code>subscribe()</code> method <em>executes</em> the observable, which is what initiates the DELETE request.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">你必須呼叫 <code>subscribe()</code>，否則什麼也不會發生。只調用 <code>HeroesService.deleteHero()</code> 是不會發起 DELETE 請求的。</p><p translation-origin=\"off\">You must call <code>subscribe()</code> or nothing happens.\nJust calling <code>HeroesService.deleteHero()</code> does not initiate the DELETE request.</p>\n\n</div>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<h2 id=\"make-a-put-request\" translation-result=\"on\">發出 PUT 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a PUT request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">應用可以使用 HttpClient 服務傳送 PUT 請求。下面的 <code>HeroesService</code> 範例（就像 POST 範例一樣）用一個修改過的資料替換了該資源。</p><p translation-origin=\"off\">An app can send PUT requests using the HTTP client service.\nThe following <code>HeroesService</code> example, like the POST example, replaces a resource with updated data.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (updateHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.put&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">對於任何返回可觀察物件的 HTTP 方法，呼叫者 <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"為什麼你必須始終訂閱。\">必須 <code>subscribe()</code></a> 從 <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 返回的可觀察物件才會發起請求。</p><p translation-origin=\"off\">As for any of the HTTP methods that return an observable, the caller, <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"Why you must always subscribe.\">must <code>subscribe()</code></a> to the observable returned from the <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> in order to initiate the request.</p>\n\n<h2 id=\"add-and-updating-headers\" translation-result=\"on\">新增和更新表頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Add and updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">很多伺服器都需要額外的頭來執行儲存操作。比如，伺服器可能需要一個授權令牌，或者需要 <code>Content-Type</code> 頭來顯式宣告請求體的 MIME 型別。</p><p translation-origin=\"off\">Many servers require extra headers for save operations.\nFor example, a server might require an authorization token, or \"Content-Type\" header to explicitly declare the MIME type of the request body.</p>\n\n<h3 id=\"add-headers\" translation-result=\"on\">新增標頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroesService</code> 在一個 <code>httpOptions</code> 物件中定義了這樣的頭，它們被傳給每個 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的儲存型方法。</p><p translation-origin=\"off\">The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that are passed to every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (httpOptions)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"update-headers\" translation-result=\"on\">更新標頭<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Update headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你不能直接修改前面的選項物件中的 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 請求頭，因為 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 類別的例項是不可變物件。請改用 <code>set()</code> 方法，以返回當前例項應用了新更改之後的副本。</p><p translation-origin=\"off\">You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.\nUse the <code>set()</code> method instead, to return a clone of the current instance with the new changes applied.</p>\n\n<p translation-result=\"on\">下面的例子示範了當舊令牌過期時，可以在發起下一個請求之前更新授權頭。</p><p translation-origin=\"off\">The following example shows how, when an old token expires, you can update the authorization header before making the next request.</p>\n\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<p><a id=\"url-params\"></a></p>\n\n  <div class=\"reviewed\">最後複查時間：3/16/2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpHeaders\n - guide/http-handle-request-errors#error-details\n - guide/http-request-data-from-server#always-subscribe\n - guide/http-send-data-to-server#add-and-updating-headers\n - guide/http-send-data-to-server#add-headers\n - guide/http-send-data-to-server#http-send-data-to-a-server\n - guide/http-send-data-to-server#http向伺服器傳送資料\n - guide/http-send-data-to-server#make-a-delete-request\n - guide/http-send-data-to-server#make-a-post-request\n - guide/http-send-data-to-server#make-a-put-request\n - guide/http-send-data-to-server#update-headers\n - guide/http-send-data-to-server#發出-post-請求\n - guide/http-send-data-to-server#發出-put-請求\n - guide/http-send-data-to-server#發出刪除請求\n - guide/http-send-data-to-server#更新標頭\n - guide/http-send-data-to-server#新增和更新表頭\n - guide/http-send-data-to-server#新增標頭\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-send-data-to-server.md?message=docs%3A%20請簡述你的修改...\n-->"}