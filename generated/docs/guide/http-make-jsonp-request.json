{"id":"guide/http-make-jsonp-request","title":"HTTP: Make a JSONP request","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-make-jsonp-request.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"http-make-a-jsonp-request\" translation-result=\"on\">HTTP：發出 JSONP 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#http-make-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">HTTP: Make a JSONP request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#http-make-a-jsonp-request\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">“帶填充的 JSON”(JSONP) 是一種欺騙 Web 瀏覽器執行帶有 <code>&lt;script&gt;</code> 標籤的請求的方法，該標籤使用 SRC 屬性發出特殊的 API 請求。</p><p translation-origin=\"off\">“JSON with Padding” (JSONP) is a method to deceive a web browser into carrying out requests with a <code>&lt;script&gt;</code> tag that uses the SRC attribute to make a special API request.</p>\n\n<p translation-result=\"on\">當伺服器不支援 <a href=\"https://developer.mozilla.org/docs/Web/HTTP/CORS\">CORS 協議</a>時，應用程式可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 跨域發出 <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> 請求。</p><p translation-origin=\"off\">Apps can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to make <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> requests across domains when a server doesn't support <a href=\"https://developer.mozilla.org/docs/Web/HTTP/CORS\">CORS protocol</a>.</p>\n\n<p translation-result=\"on\">Angular 的 JSONP 請求會返回一個 <code>Observable</code>。遵循訂閱可觀察物件變數的模式，並在使用 <a href=\"api/common/AsyncPipe\">async 管道</a>管理結果之前，使用 RxJS <code>map</code> 運運算元轉換響應。</p><p translation-origin=\"off\">Angular JSONP requests return an <code>Observable</code>.\nFollow the pattern for subscribing to observables and use the RxJS <code>map</code> operator to transform the response before using the <a href=\"api/common/AsyncPipe\">async pipe</a> to manage the results.</p>\n\n<p translation-result=\"on\">在 Angular 中，透過在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 中包含 <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> 來使用 JSONP。在以下範例中，<code>searchHeroes()</code> 方法使用 JSONP 請求來查詢名稱包含搜尋詞的英雄。</p><p translation-origin=\"off\">In Angular, use JSONP by including <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> in the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> imports.\nIn the following example, the <code>searchHeroes()</code> method uses a JSONP request to query for heroes whose names contain the search term.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable {\n  term = term.trim();\n\n  const heroesURL = `${this.heroesURL}?${term}`;\n  return this.http.jsonp(heroesUrl, 'callback').pipe(\n      catchError(this.handleError('searchHeroes', [])) // then handle the error\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">該請求將 <code>heroesURL</code> 作為第一個引數，並將回呼(Callback)函式名稱作為第二個引數。響應被包裝在回呼(Callback)函式中，該函式接受 JSONP 方法返回的可觀察物件，並將它們透過管道傳給錯誤處理程式。</p><p translation-origin=\"off\">This request passes the <code>heroesURL</code> as the first parameter and the callback function name as the second parameter.\nThe response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</p>\n\n<h2 id=\"request-non-json-data\" translation-result=\"on\">請求非 JSON 資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#request-non-json-data\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Request non-JSON data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-make-jsonp-request#request-non-json-data\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">不是所有的 API 都會返回 JSON 資料。在下面這個例子中，<code>DownloaderService</code> 中的方法會從伺服器讀取文字檔案，並把檔案的內容記錄下來，然後把這些內容使用 <code>Observable&lt;string&gt;</code> 的形式返回給呼叫者。</p><p translation-origin=\"off\">Not all APIs return JSON data.\nIn this next example, a <code>DownloaderService</code> method reads a text file from the server and logs the file contents, before returning those contents to the caller as an <code>Observable&lt;string&gt;</code>.</p>\n\n<code-example header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\">\ngetTextFile(filename: string) {\n  // The Observable returned by get() is of type Observable&lt;string&gt;\n  // because a text response was specified.\n  // There's no need to pass a &lt;string&gt; type parameter to get().\n  return this.http.get(filename, {responseType: 'text'})\n    .pipe(\n      tap( // Log the result or error\n      {\n        next: (data) =&gt; this.log(filename, data),\n        error: (error) =&gt; this.logError(filename, error)\n      }\n      )\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">這裡的 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回字串而不是預設的 JSON 物件，因為它的 <code>responseType</code> 選項是 <code>'text'</code>。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns a string rather than the default JSON because of the <code>responseType</code> option.</p>\n\n<p translation-result=\"on\">RxJS 的 <code>tap</code> 運運算元使程式碼可以檢查透過可觀察物件的成功值和錯誤值，而不會干擾它們。</p><p translation-origin=\"off\">The RxJS <code>tap</code> operator lets the code inspect both success and error values passing through the observable without disturbing them.</p>\n\n<p translation-result=\"on\">在 <code>DownloaderComponent</code> 中的 <code>download()</code> 方法透過訂閱這個服務中的方法來發起一次請求。</p><p translation-origin=\"off\">A <code>download()</code> method in the <code>DownloaderComponent</code> initiates the request by subscribing to the service method.</p>\n\n<code-example header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\" path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results =&gt; this.contents = results);\n}\n\n</code-example>\n<p><a id=\"error-handling\"></a></p>\n\n  <div class=\"reviewed\">最後複查時間：11/3/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClientJsonpModule\n - api/core/NgModule\n - guide/http-make-jsonp-request#http-make-a-jsonp-request\n - guide/http-make-jsonp-request#http發出-jsonp-請求\n - guide/http-make-jsonp-request#request-non-json-data\n - guide/http-make-jsonp-request#請求非-json-資料\n - https://developer.mozilla.org/docs/Web/HTTP/CORS\n - https://en.wikipedia.org/wiki/JSONP\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-make-jsonp-request.md?message=docs%3A%20請簡述你的修改...\n-->"}