{"id":"guide/reactive-forms","title":"Reactive forms","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/reactive-forms.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"reactive-forms\" translation-result=\"on\">響應式表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><em>響應式表單</em>提供了一種模型驅動的方式來處理表單輸入，其中的值會隨時間而變化。本文會向你展示如何建立和更新基本的表單控制項，接下來還會在一個表單組中使用多個控制項，驗證表單的值，以及建立動態表單，也就是在執行期新增或移除控制項。</p><p translation-origin=\"off\">Reactive forms provide a model-driven approach to handling form inputs whose values change over time.\nThis guide shows you how to create and update a basic form control, progress to using multiple controls in a group, validate form values, and create dynamic forms where you can add or remove controls at run time.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">試試這個<live-example name=\"reactive-forms\" title=\"Reactive Forms in Stackblitz\">響應式表單的現場演練</live-example>。</p><p translation-origin=\"off\">Try this <live-example name=\"reactive-forms\" title=\"Reactive Forms in Stackblitz\">Reactive Forms live-example</live-example>.</p>\n\n</div>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在深入瞭解被動表單之前，你應該對這些內容有一個基本的瞭解：</p><p translation-origin=\"off\">Before going further into reactive forms, you should have a basic understanding of the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> 程式設計</p><p translation-origin=\"off\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> programming</p>\n\n</li>\n<li>\n<p translation-result=\"on\">Angular 的應用設計基礎，就像<a href=\"guide/architecture\" title=\"Angular 概念簡介。\">Angular Concepts 中</a>描述的那樣</p><p translation-origin=\"off\">Angular application-design fundamentals, as described in <a href=\"guide/architecture\" title=\"Introduction to Angular concepts\">Angular Concepts</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/forms-overview\" title=\"Angular 表單概述\">“表單簡介”</a>中提供的表單設計概念</p><p translation-origin=\"off\">The form-design concepts that are presented in <a href=\"guide/forms-overview\" title=\"Overview of Angular forms\">Introduction to Forms</a></p>\n\n</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-reactive-forms\" translation-result=\"on\">響應式表單概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#overview-of-reactive-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Overview of reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#overview-of-reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">響應式表單使用顯式的、不可變的方式，管理表單在特定的時間點上的狀態。對表單狀態的每一次變更都會返回一個新的狀態，這樣可以在變化時維護模型的整體性。響應式表單是圍繞 <a href=\"guide/glossary#observable\" title=\"Observable definition.\">Observable</a> 流建構的，表單的輸入和值都是透過這些輸入值組成的流來提供的，它可以同步存取。</p><p translation-origin=\"off\">Reactive forms use an explicit and immutable approach to managing the state of a form at a given point in time.\nEach change to the form state returns a new state, which maintains the integrity of the model between changes.\nReactive forms are built around <a href=\"guide/glossary#observable\" title=\"Observable definition\">observable</a> streams, where form inputs and values are provided as streams of input values, which can be accessed synchronously.</p>\n\n<p translation-result=\"on\">響應式表單還提供了一種更直觀的測試路徑，因為在請求時你可以確信這些資料是一致的、可預料的。這個流的任何一個消費者都可以安全地操縱這些資料。</p><p translation-origin=\"off\">Reactive forms also provide a straightforward path to testing because you are assured that your data is consistent and predictable when requested.\nAny consumers of the streams have access to manipulate that data safely.</p>\n\n<p translation-result=\"on\">響應式表單與<a href=\"guide/forms\" title=\"Template-driven forms guide\">範本驅動表單</a>有著顯著的不同點。響應式表單透過對資料模型的同步存取提供了更多的可預測性，使用 Observable 的運運算元提供了不可變性，並且透過 Observable 流提供了變化追蹤功能。</p><p translation-origin=\"off\">Reactive forms differ from <a href=\"guide/forms\" title=\"Template-driven forms guide\">template-driven forms</a> in distinct ways.\nReactive forms provide synchronous access to the data model, immutability with observable operators, and change tracking through observable streams.</p>\n\n<p translation-result=\"on\">範本驅動表單允許你直接在範本中修改資料，但不像響應式表單那麼明確，因為它們依賴嵌入到範本中的指令，並藉助可變資料來非同步追蹤變化。參閱<a href=\"guide/forms-overview\" title=\"Angular 表單概覽\">表單概覽</a>以瞭解這兩種正規化之間的詳細比較。</p><p translation-origin=\"off\">Template-driven forms let direct access modify data in your template, but are less explicit than reactive forms because they rely on directives embedded in the template, along with mutable data to track changes asynchronously.\nSee the <a href=\"guide/forms-overview\" title=\"Overview of Angular forms\">Forms Overview</a> for detailed comparisons between the two paradigms.</p>\n\n<h2 id=\"adding-a-basic-form-control\" translation-result=\"on\">新增基礎表單控制項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#adding-a-basic-form-control\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding a basic form control<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#adding-a-basic-form-control\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用表單控制項有三個步驟。</p><p translation-origin=\"off\">There are three steps to using form controls.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在你的應用中註冊響應式表單模組。該模組聲明瞭一些你要用在響應式表單中的指令。</p><p translation-origin=\"off\">Register the reactive forms module in your application.\nThis module declares the reactive-form directives that you need to use reactive forms.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">產生一個新的 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項，並把它儲存在元件中。</p><p translation-origin=\"off\">Generate a new component and instantiate a new <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在範本中註冊這個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>。</p><p translation-origin=\"off\">Register the <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> in the template.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">然後，你可以把元件新增到範本中來顯示表單。</p><p translation-origin=\"off\">You can then display the form by adding the component to the template.</p>\n\n<p translation-result=\"on\">下面的例子展示瞭如何新增一個表單控制項。在這個例子中，使用者在輸入欄位中輸入自己的名字，捕獲其輸入值，並顯示表單控制項的當前值。</p><p translation-origin=\"off\">The following examples show how to add a single form control.\nIn the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">動作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">註冊響應式表單模組</nt-wrapper><nt-wrapper translation-origin=\"off\">Register the reactive forms module</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要使用響應式表單控制項，就要從 <code>@angular/forms</code> 套件中匯入 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>，並把它新增到你的 NgModule 的 <code>imports</code> 陣列中。<code-example header=\"src/app/app.module.ts (excerpt)\" path=\"reactive-forms/src/app/app.module.ts\" region=\"imports\">\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    // other imports ...\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>\n  ],\n})\nexport class AppModule { }\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">To use reactive form controls, import <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> from the <code>@angular/forms</code> package and add it to your NgModule's <code>imports</code> array. <code-example header=\"src/app/app.module.ts (excerpt)\" path=\"reactive-forms/src/app/app.module.ts\" region=\"imports\">\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    // other imports ...\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>\n  ],\n})\nexport class AppModule { }\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">產生新的 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></nt-wrapper><nt-wrapper translation-origin=\"off\">Generate a new <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 <a href=\"cli\" title=\"使用 Angular 命令列介面。\">CLI 命令</a> <code>ng generate</code> 在專案中產生一個元件作為該表單控制項的宿主。<code-example header=\"src/app/name-editor/name-editor.component.ts\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"create-control\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent {\n  name = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('');\n}\n\n</code-example> 可以用 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的建構函式設定初始值，這個例子中它是空字串。透過在你的元件類中建立這些控制項，你可以直接對表單控制項的狀態進行監聽、修改和校驗。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use the <a href=\"cli/generate#component-command\" title=\"Using the Angular command-line interface\">CLI command</a> <code>ng generate</code> to generate a component in your project to host the control. <code-example header=\"src/app/name-editor/name-editor.component.ts\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"create-control\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-name-editor',\n  templateUrl: './name-editor.component.html',\n  styleUrls: ['./name-editor.component.css']\n})\nexport class NameEditorComponent {\n  name = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('');\n}\n\n</code-example> Use the constructor of <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> to set its initial value, which in this case is an empty string. By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在範本中註冊該控制項</nt-wrapper><nt-wrapper translation-origin=\"off\">Register the control in the template</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在元件類中建立了控制項之後，你還要把它和範本中的一個表單控制項關聯起來。修改範本，為表單控制項新增 <code>formControl</code> 繫結，<code>formControl</code> 是由 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中的 <code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code> 提供的。<code-example header=\"src/app/name-editor/name-editor.component.html\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"control-binding\">\n&lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n&lt;input id=\"name\" type=\"text\" [formControl]=\"name\"&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <ul> <li> 關於 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 提供的類和指令的彙總表，請參閱下面的<a href=\"guide/reactive-forms#reactive-forms-api\" title=\"API 摘要\">響應式表單 API</a>部分。</li> <li> 關於這些類和指令的完整語法，請參閱 API 參考手冊中的 <a href=\"api/forms\" title=\"API 參考。\">Forms 套件</a>部分。</li> </ul> </div> 使用這種範本繫結語法，把該表單控制項註冊給了範本中名為 <code>name</code> 的輸入元素。這樣，表單控制項和 DOM 元素就可以互相通訊了：檢視會反映模型的變化，模型也會反映檢視中的變化。</nt-wrapper><nt-wrapper translation-origin=\"off\">After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the <code>formControl</code> binding provided by <code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code>, which is also included in the <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>. <code-example header=\"src/app/name-editor/name-editor.component.html\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"control-binding\">\n&lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n&lt;input id=\"name\" type=\"text\" [formControl]=\"name\"&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <ul> <li> For a summary of the classes and directives provided by <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>, see the following <a href=\"guide/reactive-forms#reactive-forms-api\" title=\"API summary\">Reactive forms API</a> section </li> <li> For complete syntax details of these classes and directives, see the API reference documentation for the <a href=\"api/forms\" title=\"API reference\">Forms package</a> </li> </ul> </div> Using the template binding syntax, the form control is now registered to the <code>name</code> input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">顯示該元件</nt-wrapper><nt-wrapper translation-origin=\"off\">Display the component</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把該元件新增到範本時，將顯示指派給 <code>name</code> 的表單控制項。<code-example header=\"src/app/app.component.html (name editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-name-editor\">\n&lt;app-name-editor&gt;&lt;/app-name-editor&gt;\n\n</code-example> <div class=\"lightbox\"> <img alt=\"Name Editor, which has a name label and an input so the user can enter a name\" src=\"generated/images/guide/reactive-forms/name-editor-1.png\" width=\"396\" height=\"98\"> </div></nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> assigned to the <code>name</code> property is displayed when the property's host component is added to a template. <code-example header=\"src/app/app.component.html (name editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-name-editor\">\n&lt;app-name-editor&gt;&lt;/app-name-editor&gt;\n\n</code-example> <div class=\"lightbox\"> <img alt=\"Name Editor, which has a name label and an input so the user can enter a name\" src=\"generated/images/guide/reactive-forms/name-editor-1.png\" width=\"396\" height=\"98\"> </div></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"display-value\"></a></p>\n<h3 id=\"displaying-a-form-control-value\" translation-result=\"on\">顯示表單控制項的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#displaying-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Displaying a form control value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#displaying-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以用下列方式顯示它的值。</p><p translation-origin=\"off\">You can display the value in the following ways.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">透過可觀察物件 <code>valueChanges</code>，你可以在範本中使用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 或在元件類中使用 <code>subscribe()</code> 方法來監聽表單值的變化。</p><p translation-origin=\"off\">Through the <code>valueChanges</code> observable where you can listen for changes in the form's value in the template using <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> or in the component class using the <code>subscribe()</code> method</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>value</code> 屬性。它能讓你獲得當前值的一份快照。</p><p translation-origin=\"off\">With the <code>value</code> property, which gives you a snapshot of the current value</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">下面的例子展示瞭如何在範本中使用插值顯示當前值。</p><p translation-origin=\"off\">The following example shows you how to display the current value using interpolation in the template.</p>\n\n<code-example header=\"src/app/name-editor/name-editor.component.html (control value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"display-value\">\n&lt;p&gt;Value: {{ name.value }}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">一旦你修改了表單控制項所關聯的元素，這裡顯示的值也跟著變化了。</p><p translation-origin=\"off\">The displayed value changes as you update the form control element.</p>\n\n<p translation-result=\"on\">響應式表單還能透過每個例項的屬性和方法提供關於特定控制項的更多資訊。<a href=\"api/forms/AbstractControl\">AbstractControl</a> 的這些屬性和方法用於控制表單狀態，並在處理表單校驗時決定何時顯示資訊。\n欲知詳情，參閱稍後的<a href=\"guide/reactive-forms#basic-form-validation\">輸入驗證</a>一節。</p><p translation-origin=\"off\">Reactive forms provide access to information about a given control through properties and methods provided with each instance.\nThese properties and methods of the underlying <a href=\"api/forms/AbstractControl\" title=\"API reference\">AbstractControl</a> class are used to control form state and determine when to display messages when handling <a href=\"guide/reactive-forms#basic-form-validation\" title=\"Learn more about validating form input\">input validation</a>.</p>\n\n<p translation-result=\"on\">要了解 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的其它屬性和方法，參閱 <a href=\"api/forms/FormControl\">API 參考手冊</a>。</p><p translation-origin=\"off\">Read about other <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> properties and methods in the <a href=\"api/forms/FormControl\" title=\"Detailed syntax reference\">API Reference</a>.</p>\n\n<h3 id=\"replacing-a-form-control-value\" translation-result=\"on\">替換表單控制項的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#replacing-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Replacing a form control value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#replacing-a-form-control-value\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">響應式表單還有一些方法可以用程式設計的方式修改控制項的值，它讓你可以靈活的修改控制項的值而不需要藉助使用者互動。<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項提供了一個 <code>setValue()</code> 方法，它會修改這個表單控制項的值，並且驗證與控制項結構相對應的值的結構。比如，當從後端 API 或服務接收到了表單資料時，可以透過 <code>setValue()</code> 方法來把原來的值替換為新的值。</p><p translation-origin=\"off\">Reactive forms have methods to change a control's value programmatically, which gives you the flexibility to update the value without user interaction.\nA form control instance provides a <code>setValue()</code> method that updates the value of the form control and validates the structure of the value provided against the control's structure.\nFor example, when retrieving form data from a backend API or service, use the <code>setValue()</code> method to update the control to its new value, replacing the old value entirely.</p>\n\n<p translation-result=\"on\">下列的例子往元件類中添加了一個方法，它使用 <code>setValue()</code> 方法來將控制項的值修改為 <em>Nancy</em>。</p><p translation-origin=\"off\">The following example adds a method to the component class to update the value of the control to <em>Nancy</em> using the <code>setValue()</code> method.</p>\n\n<code-example header=\"src/app/name-editor/name-editor.component.ts (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.ts\" region=\"update-value\">\nupdateName() {\n  this.name.setValue('Nancy');\n}\n\n</code-example>\n<p translation-result=\"on\">修改範本，新增一個按鈕，用於模擬改名操作。在點 <code>Update Name</code> 按鈕之前表單控制項元素中輸入的任何值都會回顯為它的當前值。</p><p translation-origin=\"off\">Update the template with a button to simulate a name update.\nWhen you click the <strong>Update Name</strong> button, the value entered in the form control element is reflected as its current value.</p>\n\n<code-example header=\"src/app/name-editor/name-editor.component.html (update value)\" path=\"reactive-forms/src/app/name-editor/name-editor.component.html\" region=\"update-value\">\n&lt;button type=\"button\" (click)=\"updateName()\"&gt;Update Name&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">由於表單模型是該控制項的事實之源，因此當你單擊該按鈕時，元件中該輸入框的值也變化了，覆蓋掉它的當前值。</p><p translation-origin=\"off\">The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Name Editor Update with a name label, the name Nancy in the input, text specifying that the value of the input is Nancy and an Update Name button\" src=\"generated/images/guide/reactive-forms/name-editor-2.gif\" width=\"400\" height=\"241\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n在這個例子中，你只使用單個控制項，但是當呼叫 <a href=\"guide/reactive-forms#grouping-form-controls\" title=\"Learn more about form groups.\"><code>FormGroup</code></a> 或 <a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"Learn more about dynamic forms.\"><code>FormArray</code></a> 例項的 <code>setValue()</code> 方法時，傳入的值就必須匹配控制項組或控制項陣列的結構才行。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nIn this example, you're using a single control.\nWhen using the <code>setValue()</code> method with a <a href=\"guide/reactive-forms#grouping-form-controls\" title=\"Learn more about form groups\">form group</a> or <a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"Learn more about dynamic forms\">form array</a> instance, the value needs to match the structure of the group or array.</p>\n\n</div>\n<h2 id=\"grouping-form-controls\" translation-result=\"on\">把表單控制項分組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#grouping-form-controls\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Grouping form controls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#grouping-form-controls\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">表單中通常會包含幾個相互關聯的控制項。響應式表單提供了兩種把多個相關控制項分組到同一個輸入表單中的方法。</p><p translation-origin=\"off\">Forms typically contain several related controls.\nReactive forms provide two ways of grouping multiple related controls into a single input form.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">表單組</nt-wrapper><nt-wrapper translation-origin=\"off\">Form groups</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">表單分組</nt-wrapper><nt-wrapper translation-origin=\"off\">Form group</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義了一個帶有一組控制項的表單，你可以把它們放在一起管理。表單組的基礎知識將在本節中討論。你也可以透過<a href=\"guide/reactive-forms#nested-groups\" title=\"詳細瞭解巢狀(Nesting)組。\">巢狀(Nesting)表單組</a>來建立更復雜的表單。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines a form with a fixed set of controls that you can manage together. Form group basics are discussed in this section. You can also <a href=\"guide/reactive-forms#nested-groups\" title=\"See more about nesting groups\">nest form groups</a> to create more complex forms.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">表單陣列</nt-wrapper><nt-wrapper translation-origin=\"off\">Form array</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義了一個動態表單，你可以在執行時新增和刪除控制項。你也可以透過巢狀(Nesting)表單陣列來建立更復雜的表單。欲知詳情，參閱下面的<a href=\"guide/reactive-forms#dynamic-forms\" title=\"詳細瞭解表單陣列。\">建立動態表單</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines a dynamic form, where you can add and remove controls at run time. You can also nest form arrays to create more complex forms. For more about this option, see <a href=\"guide/reactive-forms#dynamic-forms\" title=\"See more about form arrays\">Creating dynamic forms</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">就像 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 的例項能讓你控制單個輸入框所對應的控制項一樣，<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的例項也能追蹤一組 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項（比如一個表單）的表單狀態。當建立 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 時，其中的每個控制項都會根據其名字進行追蹤。下面的例子展示瞭如何管理單個控制項組中的多個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項。</p><p translation-origin=\"off\">Just as a form control instance gives you control over a single input field, a form group instance tracks the form state of a group of form control instances (for example, a form).\nEach control in a form group instance is tracked by name when creating the form group.\nThe following example shows how to manage multiple form control instances in a single group.</p>\n\n<p translation-result=\"on\">產生一個 <code>ProfileEditor</code> 元件並從 <code>@angular/forms</code> 套件中匯入 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 類別。</p><p translation-origin=\"off\">Generate a <code>ProfileEditor</code> component and import the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> classes from the <code>@angular/forms</code> package.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component ProfileEditor\n\n</code-example>\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (imports)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"imports\">\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n</code-example>\n<p translation-result=\"on\">要將表單組新增到此元件中，請執行以下步驟。</p><p translation-origin=\"off\">To add a form group to this component, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立一個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項。</p><p translation-origin=\"off\">Create a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 模型關聯到檢視。</p><p translation-origin=\"off\">Associate the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> model and view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">儲存表單資料。</p><p translation-origin=\"off\">Save the form data.</p>\n\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">動作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立一個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項。</nt-wrapper><nt-wrapper translation-origin=\"off\">Create a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在元件類中建立一個名叫 <code>profileForm</code> 的屬性，並設定為 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的一個新例項。要初始化這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，請為建構函式提供一個由控制項組成的物件，物件中的每個名字都要和表單控制項的名字一一對應。<br> 對此個人檔案表單，要新增兩個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項，名字分別為 <code>firstName</code> 和 <code>lastName</code>。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  });\n}\n\n</code-example> 這些獨立的表單控制項被收集到了一個控制項組中。這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 用物件的形式提供了它的模型值，這個值來自組中每個控制項的值。<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項擁有和 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項相同的屬性（比如 <code>value</code>、<code>untouched</code>）和方法（比如 <code>setValue()</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Create a property in the component class named <code>profileForm</code> and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control. <br>  For the profile form, add two form control instances with the names <code>firstName</code> and <code>lastName</code>. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  });\n}\n\n</code-example> The individual form controls are now collected within a group. A <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as <code>value</code> and <code>untouched</code>) and methods (such as <code>setValue()</code>) as a form control instance.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 模型關聯到檢視。</nt-wrapper><nt-wrapper translation-origin=\"off\">Associate the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> model and view</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個表單組還能追蹤其中每個控制項的狀態及其變化，所以如果其中的某個控制項的狀態或值變化了，父控制項也會發出一次新的狀態變更或值變更事件。該控制項組的模型來自它的所有成員。在定義了這個模型之後，你必須更新範本，來把該模型反映到檢視中。<code-example header=\"src/app/profile-editor/profile-editor.component.html (template form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroup\">\n&lt;form [formGroup]=\"profileForm\"&gt;\n\n  &lt;label for=\"first-name\"&gt;First Name: &lt;/label&gt;\n  &lt;input id=\"first-name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"firstName\"&gt;\n\n  &lt;label for=\"last-name\"&gt;Last Name: &lt;/label&gt;\n  &lt;input id=\"last-name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"lastName\"&gt;\n\n&lt;/form&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <strong>NOTE</strong>: <br> 就像 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 所包含的那控制項一樣，<em>profileForm</em> 這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 也透過 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 指令繫結到了 <code>form</code> 元素，在該模型和表單中的輸入框之間建立了一個通訊層。</div> 由 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code> 指令提供的 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 屬性把每個輸入框和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中定義的表單控制項繫結起來。這些表單控制項會和相應的元素通訊，它們還把更改傳給 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 是模型值的事實之源。</nt-wrapper><nt-wrapper translation-origin=\"off\">A form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After you define the model, you must update the template to reflect the model in the view. <code-example header=\"src/app/profile-editor/profile-editor.component.html (template form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroup\">\n&lt;form [formGroup]=\"profileForm\"&gt;\n\n  &lt;label for=\"first-name\"&gt;First Name: &lt;/label&gt;\n  &lt;input id=\"first-name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"firstName\"&gt;\n\n  &lt;label for=\"last-name\"&gt;Last Name: &lt;/label&gt;\n  &lt;input id=\"last-name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"lastName\"&gt;\n\n&lt;/form&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <strong>NOTE</strong>: <br> Just as a form group contains a group of controls, the <em>profileForm</em> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> is bound to the <code>form</code> element with the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> directive, creating a communication layer between the model and the form containing the inputs. </div> The <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> input provided by the <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code> directive binds each individual input to the form control defined in <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. The form controls communicate with their respective elements. They also communicate changes to the form group instance, which provides the source of truth for the model value.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">儲存表單資料</nt-wrapper><nt-wrapper translation-origin=\"off\">Save form data</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>ProfileEditor</code> 元件從使用者那裡獲得輸入，但在真實的場景中，你可能想要先捕獲表單的值，等將來在元件外部進行處理。<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 指令會監聽 <code>form</code> 元素髮出的 <code>submit</code> 事件，併發出一個 <code>ngSubmit</code> 事件，讓你可以繫結一個回呼(Callback)函式。把 <code>onSubmit()</code> 回呼(Callback)方法新增為 <code>form</code> 標籤上的 <code>ngSubmit</code> 事件監聽器。<code-example header=\"src/app/profile-editor/profile-editor.component.html (submit event)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"ng-submit\">\n&lt;form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\"&gt;\n\n</code-example><code>ProfileEditor</code> 元件上的 <code>onSubmit()</code> 方法會捕獲 <code>profileForm</code> 的當前值。要保持該表單的封裝性，就要使用 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 向元件外部提供該表單的值。下面的例子會使用 <code>console.warn</code> 把這個值記錄到瀏覽器的控制檯中。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (submit method)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"on-submit\">\n\nonSubmit() {\n  // TODO: Use <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> with form value\n  console.warn(this.profileForm.value);\n}\n\n</code-example><code>form</code> 標籤所發出的 <code>submit</code> 事件是內建 DOM 事件，透過點選型別為 <code>submit</code> 的按鈕可以觸發本事件。這還讓使用者可以用Enter鍵來提交填完的表單。往表單的底部新增一個 <code>button</code>，用於觸發表單提交。<code-example header=\"src/app/profile-editor/profile-editor.component.html (submit button)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"submit-button\">\n&lt;p&gt;Complete the form to enable button.&lt;/p&gt;\n&lt;button type=\"submit\" [disabled]=\"!profileForm.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <strong>注意</strong>：<br>上面這個程式碼片段中的按鈕還附加了一個 <code>disabled</code> 繫結，用於在 <code>profileForm</code> 無效時禁用該按鈕。目前你還沒有執行任何表單驗證邏輯，因此該按鈕始終是可用的。稍後的<a href=\"guide/reactive-forms#basic-form-validation\" title=\"基礎表單驗證\">驗證表單輸入</a>部分會講解基礎的表單驗證。</div></nt-wrapper><nt-wrapper translation-origin=\"off\">The <code>ProfileEditor</code> component accepts input from the user, but in a real scenario you want to capture the form value and make available for further processing outside the component. The <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> directive listens for the <code>submit</code> event emitted by the <code>form</code> element and emits an <code>ngSubmit</code> event that you can bind to a callback function. Add an <code>ngSubmit</code> event listener to the <code>form</code> tag with the <code>onSubmit()</code> callback method. <code-example header=\"src/app/profile-editor/profile-editor.component.html (submit event)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"ng-submit\">\n&lt;form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\"&gt;\n\n</code-example> The <code>onSubmit()</code> method in the <code>ProfileEditor</code> component captures the current value of <code>profileForm</code>. Use <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> to keep the form encapsulated and to provide the form value outside the component. The following example uses <code>console.warn</code> to log a message to the browser console. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (submit method)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"on-submit\">\n\nonSubmit() {\n  // TODO: Use <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> with form value\n  console.warn(this.profileForm.value);\n}\n\n</code-example> The <code>submit</code> event is emitted by the <code>form</code> tag using the built-in DOM event. You trigger the event by clicking a button with <code>submit</code> type. This lets the user press the <strong>Enter</strong> key to submit the completed form. <br> Use a <code>button</code> element to add a button to the bottom of the form to trigger the form submission. <code-example header=\"src/app/profile-editor/profile-editor.component.html (submit button)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"submit-button\">\n&lt;p&gt;Complete the form to enable button.&lt;/p&gt;\n&lt;button type=\"submit\" [disabled]=\"!profileForm.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example> <div class=\"alert is-helpful\"> <strong>NOTE</strong>: <br> The button in the preceding snippet also has a <code>disabled</code> binding attached to it to disable the button when <code>profileForm</code> is invalid. You aren't performing any validation yet, so the button is always enabled. Basic form validation is covered in the <a href=\"guide/reactive-forms#basic-form-validation\" title=\"Basic form validation.\">Validating form input</a> section. </div></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">顯示此元件</nt-wrapper><nt-wrapper translation-origin=\"off\">Display the component</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要顯示包含此表單的 <code>ProfileEditor</code> 元件，請把它新增到元件範本中。<code-example header=\"src/app/app.component.html (profile editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-profile-editor\">\n&lt;app-profile-editor&gt;&lt;/app-profile-editor&gt;\n\n</code-example> <code>ProfileEditor</code> 讓你能管理 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的 <code>firstName</code> 和 <code>lastName</code> 等 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項。<div class=\"lightbox\"> <img alt=\"Profile Editor with labels and inputs for first and last name as well as a submit button\" src=\"generated/images/guide/reactive-forms/profile-editor-1.gif\" width=\"400\" height=\"232\"> </div></nt-wrapper><nt-wrapper translation-origin=\"off\">To display the <code>ProfileEditor</code> component that contains the form, add it to a component template. <code-example header=\"src/app/app.component.html (profile editor)\" path=\"reactive-forms/src/app/app.component.1.html\" region=\"app-profile-editor\">\n&lt;app-profile-editor&gt;&lt;/app-profile-editor&gt;\n\n</code-example> <code>ProfileEditor</code> lets you manage the form control instances for the <code>firstName</code> and <code>lastName</code> controls within the form group instance. <div class=\"lightbox\"> <img alt=\"Profile Editor with labels and inputs for first and last name as well as a submit button\" src=\"generated/images/guide/reactive-forms/profile-editor-1.gif\" width=\"400\" height=\"232\"> </div></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"nested-groups\"></a></p>\n<h3 id=\"creating-nested-form-groups\" translation-result=\"on\">建立巢狀(Nesting)的表單組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-nested-form-groups\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Creating nested form groups<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-nested-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">表單組可以同時接受單個表單控制項例項和其它表單組例項作為其子控制項。這可以讓複雜的表單模型更容易維護，並在邏輯上把它們分組到一起。</p><p translation-origin=\"off\">Form groups can accept both individual form control instances and other form group instances as children.\nThis makes composing complex form models easier to maintain and logically group together.</p>\n\n<p translation-result=\"on\">如果要建構複雜的表單，如果能在更小的分割槽中管理不同類別的資訊就會更容易一些。使用巢狀(Nesting)的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 可以讓你把大型表單組織成一些稍小的、易管理的分組。</p><p translation-origin=\"off\">When building complex forms, managing the different areas of information is easier in smaller sections.\nUsing a nested form group instance lets you break large forms groups into smaller, more manageable ones.</p>\n\n<p translation-result=\"on\">要製作更復雜的表單，請遵循如下步驟。</p><p translation-origin=\"off\">To make more complex forms, use the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立一個巢狀(Nesting)的表單組。</p><p translation-origin=\"off\">Create a nested group.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在範本中對這個巢狀(Nesting)表單分組。</p><p translation-origin=\"off\">Group the nested form in the template.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">某些型別的資訊天然就屬於同一個組。比如名稱和地址就是這類巢狀(Nesting)組的典型例子，下面的例子中就用到了它們。</p><p translation-origin=\"off\">Some types of information naturally fall into the same group.\nA name and address are typical examples of such nested groups, and are used in the following examples.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">動作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立一個巢狀(Nesting)的表單組。</nt-wrapper><nt-wrapper translation-origin=\"off\">Create a nested group</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要在 <code>profileForm</code> 中建立一個巢狀(Nesting)組，就要把一個巢狀(Nesting)的 <code>address</code> 元素新增到此表單組的例項中。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (nested form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"nested-formgroup\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    address: new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n      street: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      city: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      state: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      zip: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n    })\n  });\n}\n\n\n</code-example> 在這個例子中，<code>address group</code> 把現有的 <code>firstName</code>、<code>lastName</code> 控制項和新的 <code>street</code>、<code>city</code>、<code>state</code> 和 <code>zip</code> 控制項組合在一起。雖然 <code>address</code> 這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 是 <code>profileForm</code> 這個整體 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的一個子控制項，但是仍然適用同樣的值和狀態的變更規則。來自內嵌控制項組的狀態和值的變更將會冒泡到它的父控制項組，以維護整體模型的一致性。</nt-wrapper><nt-wrapper translation-origin=\"off\">To create a nested group in <code>profileForm</code>, add a nested <code>address</code> element to the form group instance. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (nested form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"nested-formgroup\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    address: new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n      street: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      city: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      state: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n      zip: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n    })\n  });\n}\n\n\n</code-example> In this example, <code>address group</code> combines the current <code>firstName</code> and <code>lastName</code> controls with the new <code>street</code>, <code>city</code>, <code>state</code>, and <code>zip</code> controls. Even though the <code>address</code> element in the form group is a child of the overall <code>profileForm</code> element in the form group, the same rules apply with value and status changes. Changes in status and value from the nested form group propagate to the parent form group, maintaining consistency with the overall model.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在範本中對這個巢狀(Nesting)表單分組。</nt-wrapper><nt-wrapper translation-origin=\"off\">Group the nested form in the template</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在修改了元件類中的模型之後，還要修改範本，來把這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項對接到它的輸入元素。<code-example header=\"src/app/profile-editor/profile-editor.component.html (template nested form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroupname\">\n&lt;div <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\"&gt;\n  &lt;h2&gt;Address&lt;/h2&gt;\n\n  &lt;label for=\"street\"&gt;Street: &lt;/label&gt;\n  &lt;input id=\"street\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n\n  &lt;label for=\"city\"&gt;City: &lt;/label&gt;\n  &lt;input id=\"city\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n\n  &lt;label for=\"state\"&gt;State: &lt;/label&gt;\n  &lt;input id=\"state\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"state\"&gt;\n\n  &lt;label for=\"zip\"&gt;Zip Code: &lt;/label&gt;\n  &lt;input id=\"zip\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n&lt;/div&gt;\n\n</code-example> <code>ProfileEditor</code> 表單顯示為一個組，但是將來這個模型會被進一步細分，以表示邏輯分組區域。<div class=\"lightbox\"> <img alt=\"Profile editor update adding address inputs, instructive text for filling out the form to enable the submit button, and a disabled submit button\" src=\"generated/images/guide/reactive-forms/profile-editor-2.png\" width=\"400\" height=\"739\"> </div> <div class=\"alert is-helpful\"> <strong>提示</strong>：<br>這裡使用了 <code>value</code> 屬性和 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> 管道在元件範本中顯示了這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的值。</div></nt-wrapper><nt-wrapper translation-origin=\"off\">After you update the model in the component class, update the template to connect the form group instance and its input elements. Add the <code>address</code> form group containing the <code>street</code>, <code>city</code>, <code>state</code>, and <code>zip</code> fields to the <code>ProfileEditor</code> template. <code-example header=\"src/app/profile-editor/profile-editor.component.html (template nested form group)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"formgroupname\">\n&lt;div <a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a>=\"address\"&gt;\n  &lt;h2&gt;Address&lt;/h2&gt;\n\n  &lt;label for=\"street\"&gt;Street: &lt;/label&gt;\n  &lt;input id=\"street\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"street\"&gt;\n\n  &lt;label for=\"city\"&gt;City: &lt;/label&gt;\n  &lt;input id=\"city\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"city\"&gt;\n\n  &lt;label for=\"state\"&gt;State: &lt;/label&gt;\n  &lt;input id=\"state\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"state\"&gt;\n\n  &lt;label for=\"zip\"&gt;Zip Code: &lt;/label&gt;\n  &lt;input id=\"zip\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"zip\"&gt;\n&lt;/div&gt;\n\n</code-example> The <code>ProfileEditor</code> form is displayed as one group, but the model is broken down further to represent the logical grouping areas. <div class=\"lightbox\"> <img alt=\"Profile editor update adding address inputs, instructive text for filling out the form to enable the submit button, and a disabled submit button\" src=\"generated/images/guide/reactive-forms/profile-editor-2.png\" width=\"400\" height=\"739\"> </div> <div class=\"alert is-helpful\"> <strong>TIP</strong>: <br> Display the value for the form group instance in the component template using the <code>value</code> property and <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code>. </div></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"updating-parts-of-the-data-model\" translation-result=\"on\">更新部分資料模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#updating-parts-of-the-data-model\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Updating parts of the data model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#updating-parts-of-the-data-model\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當修改包含多個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項的值時，你可能只希望更新模型中的一部分，而不是完全替換掉。這一節會講解該如何更新表單控制項資料模型模型中的一部分。</p><p translation-origin=\"off\">When updating the value for a form group instance that contains multiple controls, you might only want to update parts of the model.\nThis section covers how to update specific parts of a form control data model.</p>\n\n<p translation-result=\"on\">有兩種更新模型值的方式：</p><p translation-origin=\"off\">There are two ways to update the model value:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">方法</nt-wrapper><nt-wrapper translation-origin=\"off\">Methods</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>setValue()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 <code>setValue()</code> 方法來為單個控制項設定新值。<code>setValue()</code> 方法會嚴格遵循表單組的結構，並整體性替換控制項的值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Set a new value for an individual control. The <code>setValue()</code> method strictly adheres to the structure of the form group and replaces the entire value for the control.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>patchValue()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用此物件中定義的任意屬性對表單模型進行替換。</nt-wrapper><nt-wrapper translation-origin=\"off\">Replace any properties defined in the object that have changed in the form model.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><code>setValue()</code> 方法的嚴格檢查可以幫助你捕獲複雜表單巢狀(Nesting)中的錯誤，而 <code>patchValue()</code> 在遇到那些錯誤時可能會默默的失敗。</p><p translation-origin=\"off\">The strict checks of the <code>setValue()</code> method help catch nesting errors in complex forms, while <code>patchValue()</code> fails silently on those errors.</p>\n\n<p translation-result=\"on\">在 <code>ProfileEditorComponent</code> 中，使用 <code>updateProfile</code> 方法傳入下列資料可以更新使用者的名字與街道住址。</p><p translation-origin=\"off\">In <code>ProfileEditorComponent</code>, use the <code>updateProfile</code> method with the following example to update the first name and street address for the user.</p>\n\n<code-example header=\"src/app/profile-editor/profile-editor.component.ts (patch value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"patch-value\">\nupdateProfile() {\n  this.profileForm.patchValue({\n    firstName: 'Nancy',\n    address: {\n      street: '123 Drew Street'\n    }\n  });\n}\n\n</code-example>\n<p translation-result=\"on\">透過往範本中新增一個按鈕來模擬一次更新操作，以修改使用者檔案。</p><p translation-origin=\"off\">Simulate an update by adding a button to the template to update the user profile on demand.</p>\n\n<code-example header=\"src/app/profile-editor/profile-editor.component.html (update value)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.html\" region=\"patch-value\">\n&lt;button type=\"button\" (click)=\"updateProfile()\"&gt;Update Profile&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">當點選按鈕時，<code>profileForm</code> 模型中只有 <code>firstName</code> 和 <code>street</code> 被修改了。注意，<code>street</code> 是在 <code>address</code> 屬性的物件中被修改的。這種結構是必須的，因為 <code>patchValue()</code> 方法要針對模型的結構進行更新。<code>patchValue()</code> 只會更新表單模型中所定義的那些屬性。</p><p translation-origin=\"off\">When a user clicks the button, the <code>profileForm</code> model is updated with new values for <code>firstName</code> and <code>street</code>.\nNotice that <code>street</code> is provided in an object inside the <code>address</code> property.\nThis is necessary because the <code>patchValue()</code> method applies the update against the model structure.\n<code>PatchValue()</code> only updates properties that the form model defines.</p>\n\n<h2 id=\"using-the-formbuilder-service-to-generate-controls\" translation-result=\"on\">使用 FormBuilder 服務產生控制項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Using the FormBuilder service to generate controls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當需要與多個表單打交道時，手動建立多個表單控制項例項會非常繁瑣。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務提供了一些便捷方法來產生表單控制項。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 在幕後也使用同樣的方式來建立和返回這些例項，只是用起來更簡單。</p><p translation-origin=\"off\">Creating form control instances manually can become repetitive when dealing with multiple forms.\nThe <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service provides convenient methods for generating controls.</p>\n\n<p translation-result=\"on\">透過下列步驟可以利用這項服務。</p><p translation-origin=\"off\">Use the following steps to take advantage of this service.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">匯入 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 類別。</p><p translation-origin=\"off\">Import the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">注入這個 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務。</p><p translation-origin=\"off\">Inject the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">產生表單內容。</p><p translation-origin=\"off\">Generate the form contents.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">下面的例子展示瞭如何重構 <code>ProfileEditor</code> 元件，用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務來代替手工建立這些 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 和 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項。</p><p translation-origin=\"off\">The following examples show how to refactor the <code>ProfileEditor</code> component to use the form builder service to create form control and form group instances.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">動作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">匯入 FormBuilder 類</nt-wrapper><nt-wrapper translation-origin=\"off\">Import the FormBuilder class</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">從 <code>@angular/forms</code> 套件中匯入 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 類別。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder-imports\">\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Import the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class from the <code>@angular/forms</code> package. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder-imports\">\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">注入 FormBuilder 服務</nt-wrapper><nt-wrapper translation-origin=\"off\">Inject the FormBuilder service</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 是一個可注入的服務提供者，它是由 <code>ReactiveFormModule</code> 提供的。只要把它新增到元件的建構函式中就可以注入這個依賴。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (constructor)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"inject-form-builder\">\n\nconstructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { }\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service is an injectable provider that is provided with the reactive forms module. Inject this dependency by adding it to the component constructor. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (constructor)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"inject-form-builder\">\n\nconstructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { }\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">產生表單控制項</nt-wrapper><nt-wrapper translation-origin=\"off\">Generate form controls</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務有三個方法：<code>control()</code>、<code>group()</code> 和 <code>array()</code>。這些方法都是工廠方法，用於在元件類中分別產生 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>、<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (form builder)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = this.fb.group({\n    firstName: [''],\n    lastName: [''],\n    address: this.fb.group({\n      street: [''],\n      city: [''],\n      state: [''],\n      zip: ['']\n    }),\n  });\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { }\n}\n\n</code-example> 在上面的例子中，你可以使用 <code>group()</code> 方法，用和前面一樣的名字來定義這些屬性。這裡，每個控制項名對應的值都是一個數組，這個陣列中的第一項是其初始值。<div class=\"alert is-helpful\"> <strong>提示</strong>：<br>你可以只使用初始值來定義控制項，但是如果你的控制項還需要同步或非同步驗證器，那就在這個陣列中的第二項和第三項提供同步和非同步驗證器。</div>比較一下用表單建構器和手動建立例項這兩種方式。<code-tabs> <code-pane header=\"src/app/profile-editor/profile-editor.component.ts (instances)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup-compare\">\nprofileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  address: new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    street: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    city: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    state: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    zip: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n  })\n});\n\n</code-pane> <code-pane header=\"src/app/profile-editor/profile-editor.component.ts (form builder)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"formgroup-compare\">\nprofileForm = this.fb.group({\n  firstName: [''],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});\n\n</code-pane> </code-tabs></nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service has three methods: <code>control()</code>, <code>group()</code>, and <code>array()</code>. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays. Use the <code>group</code> method to create the <code>profileForm</code> controls. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (form builder)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-builder\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-profile-editor',\n  templateUrl: './profile-editor.component.html',\n  styleUrls: ['./profile-editor.component.css']\n})\nexport class ProfileEditorComponent {\n  profileForm = this.fb.group({\n    firstName: [''],\n    lastName: [''],\n    address: this.fb.group({\n      street: [''],\n      city: [''],\n      state: [''],\n      zip: ['']\n    }),\n  });\n\n  constructor(private fb: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>) { }\n}\n\n</code-example> In the preceding example, you use the <code>group()</code> method with the same object to define the properties in the model. The value for each control name is an array containing the initial value as the first item in the array. <div class=\"alert is-helpful\"> <strong>TIP</strong>: <br> You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array. </div> Compare using the form builder to creating the instances manually. <code-tabs> <code-pane header=\"src/app/profile-editor/profile-editor.component.ts (instances)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.1.ts\" region=\"formgroup-compare\">\nprofileForm = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n  firstName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  lastName: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n  address: new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    street: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    city: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    state: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    zip: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('')\n  })\n});\n\n</code-pane> <code-pane header=\"src/app/profile-editor/profile-editor.component.ts (form builder)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"formgroup-compare\">\nprofileForm = this.fb.group({\n  firstName: [''],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});\n\n</code-pane> </code-tabs></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"basic-form-validation\"></a></p>\n<h2 id=\"validating-form-input\" translation-result=\"on\">驗證表單輸入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#validating-form-input\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Validating form input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#validating-form-input\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>表單驗證</em>用於確保使用者的輸入是完整和正確的。本節講解了如何把單個驗證器新增到表單控制項中，以及如何顯示表單的整體狀態。表單驗證的更多知識在<a href=\"guide/form-validation\" title=\"關於表單驗證\">表單驗證</a>一章中有詳細的講解。</p><p translation-origin=\"off\"><em>Form validation</em> is used to ensure that user input is complete and correct.\nThis section covers adding a single validator to a form control and displaying the overall form status.\nForm validation is covered more extensively in the <a href=\"guide/form-validation\" title=\"All about form validation\">Form Validation</a> guide.</p>\n\n<p translation-result=\"on\">使用下列步驟新增表單驗證。</p><p translation-origin=\"off\">Use the following steps to add form validation.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在表單元件中匯入一個驗證器函式。</p><p translation-origin=\"off\">Import a validator function in your form component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把這個驗證器新增到表單中的相應欄位。</p><p translation-origin=\"off\">Add the validator to the field in the form.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增邏輯來處理驗證狀態。</p><p translation-origin=\"off\">Add logic to handle the validation status.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">最常見的驗證是做一個必填欄位。下面的例子給出瞭如何在 <code>firstName</code> 控制項中新增必填驗證並顯示驗證結果的方法。</p><p translation-origin=\"off\">The most common validation is making a field required.\nThe following example shows how to add a required validation to the <code>firstName</code> control and display the result of validation.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">操作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">匯入驗證器函式</nt-wrapper><nt-wrapper translation-origin=\"off\">Import a validator function</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">響應式表單包含了一組開箱即用的常用驗證器函式。這些函式接收一個控制項，用以驗證並根據驗證結果返回一個錯誤物件或空值。<br>從 <code>@angular/forms</code> 套件中匯入 <code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> 類別。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"validator-imports\">\nimport { <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Reactive forms include a set of validator functions for common use cases. These functions receive a control to validate against and return an error object or a null value based on the validation check. <br> Import the <code><a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a></code> class from the <code>@angular/forms</code> package. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"validator-imports\">\nimport { <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建一個必填欄位</nt-wrapper><nt-wrapper translation-origin=\"off\">Make a field required</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在 <code>ProfileEditor</code> 元件中，把靜態方法 <code>Validators.required</code> 設定為 <code>firstName</code> 控制項值陣列中的第二項。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (required validator)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"required-validator\">\nprofileForm = this.fb.group({\n  firstName: ['', Validators.required],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">In the <code>ProfileEditor</code> component, add the <code>Validators.required</code> static method as the second item in the array for the <code>firstName</code> control. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (required validator)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"required-validator\">\nprofileForm = this.fb.group({\n  firstName: ['', Validators.required],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">顯示表單狀態</nt-wrapper><nt-wrapper translation-origin=\"off\">Display form status</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當你往表單控制項上添加了一個必填欄位時，它的初始值是無效的（invalid）。這種無效狀態會傳播到其父 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 元素中，也讓這個 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的狀態變為無效的。你可以透過該 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項的 <code>status</code> 屬性來存取其當前狀態。<code-example header=\"src/app/profile-editor/profile-editor.component.html (display status)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"display-status\">\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Status: {{ profileForm.status }}&lt;/p&gt;\n\n</code-example> <div class=\"lightbox\"> <img alt=\"Profile Editor with validation status of invalid\" src=\"generated/images/guide/reactive-forms/profile-editor-3.png\" width=\"400\" height=\"737\"> </div> 提交按鈕被禁用了，因為 <code>firstName</code> 控制項的必填項規則導致了 <code>profileForm</code> 也是無效的。在你填寫了 <code>firstName</code> 輸入框之後，該表單就變成了有效的，並且提交按鈕也啟用了。<br> 要了解表單驗證的更多知識，參閱<a href=\"guide/form-validation\" title=\"關於表單驗證。\">表單驗證</a>指南。</nt-wrapper><nt-wrapper translation-origin=\"off\">When you add a required field to the form control, its initial status is invalid. This invalid status propagates to the parent form group element, making its status invalid. Access the current status of the form group instance through its <code>status</code> property. <br> Display the current status of <code>profileForm</code> using interpolation. <code-example header=\"src/app/profile-editor/profile-editor.component.html (display status)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"display-status\">\n&lt;p&gt;<a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Status: {{ profileForm.status }}&lt;/p&gt;\n\n</code-example> <div class=\"lightbox\"> <img alt=\"Profile Editor with validation status of invalid\" src=\"generated/images/guide/reactive-forms/profile-editor-3.png\" width=\"400\" height=\"737\"> </div> The <strong>Submit</strong> button is disabled because <code>profileForm</code> is invalid due to the required <code>firstName</code> form control. After you fill out the <code>firstName</code> input, the form becomes valid and the <strong>Submit</strong> button is enabled. <br> For more on form validation, visit the <a href=\"guide/form-validation\" title=\"All about form validation\">Form Validation</a> guide.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"dynamic-forms\"></a></p>\n<h2 id=\"creating-dynamic-forms\" translation-result=\"on\">建立動態表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-dynamic-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Creating dynamic forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#creating-dynamic-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 是 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 之外的另一個選擇，用於管理任意數量的匿名控制項。像 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項一樣，你也可以往 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中動態插入和移除控制項，並且 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 例項的值和驗證狀態也是根據它的子控制項計算得來的。不過，你不需要為每個控制項定義一個名字作為 key，因此，如果你事先不知道子控制項的數量，這就是一個很好的選擇。</p><p translation-origin=\"off\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> is an alternative to <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> for managing any number of unnamed controls.\nAs with form group instances, you can dynamically insert and remove controls from form array instances, and the form array instance value and validation status is calculated from its child controls.\nHowever, you don't need to define a key for each control by name, so this is a great option if you don't know the number of child values in advance.</p>\n\n<p translation-result=\"on\">要定義一個動態表單，請執行以下步驟。</p><p translation-origin=\"off\">To define a dynamic form, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">匯入 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 類別。</p><p translation-origin=\"off\">Import the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定義一個 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制項。</p><p translation-origin=\"off\">Define a <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> control.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 getter 方法存取 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 控制項。</p><p translation-origin=\"off\">Access the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> control with a getter method.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在範本中顯示這個表單陣列。</p><p translation-origin=\"off\">Display the form array in a template.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">下面的例子展示瞭如何在 <code>ProfileEditor</code> 中管理<em>別名</em>陣列。</p><p translation-origin=\"off\">The following example shows you how to manage an array of <em>aliases</em> in <code>ProfileEditor</code>.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">操作</nt-wrapper><nt-wrapper translation-origin=\"off\">Action</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">匯入 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 類別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Import the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> class</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">從 <code>@angular/form</code> 中匯入 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>，以使用它的型別資訊。<code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 服務用於建立 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 例項。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-array-imports\">\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> } from '@angular/forms';\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Import the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> class from <code>@angular/forms</code> to use for type information. The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> service is ready to create a <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> instance. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (import)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.2.ts\" region=\"form-array-imports\">\nimport { <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a> } from '@angular/forms';\n\n</code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義 FormArray 控制項</nt-wrapper><nt-wrapper translation-origin=\"off\">Define a <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> control</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">你可以透過把一組（從零項到多項）控制項定義在一個數組中來初始化一個 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>。為 <code>profileForm</code> 新增一個 <code>aliases</code> 屬性，把它定義為 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 型別。<br> 使用 <code><a href=\"api/forms/FormBuilder#array\" class=\"code-anchor\">FormBuilder.array()</a></code> 方法來定義該陣列，並用 <code><a href=\"api/forms/FormBuilder#control\" class=\"code-anchor\">FormBuilder.control()</a></code> 方法來往該陣列中新增一個初始控制項。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (aliases form array)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases\">\nprofileForm = this.fb.group({\n  firstName: ['', Validators.required],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n  aliases: this.fb.array([\n    this.fb.control('')\n  ])\n});\n\n</code-example> <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的這個 <code>aliases</code> 控制項現在管理著一個控制項，將來還可以動態新增多個。</nt-wrapper><nt-wrapper translation-origin=\"off\">You can initialize a form array with any number of controls, from zero to many, by defining them in an array. Add an <code>aliases</code> property to the form group instance for <code>profileForm</code> to define the form array. <br> Use the <code><a href=\"api/forms/FormBuilder#array\" class=\"code-anchor\">FormBuilder.array()</a></code> method to define the array, and the <code><a href=\"api/forms/FormBuilder#control\" class=\"code-anchor\">FormBuilder.control()</a></code> method to populate the array with an initial control. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (aliases form array)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases\">\nprofileForm = this.fb.group({\n  firstName: ['', Validators.required],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n  aliases: this.fb.array([\n    this.fb.control('')\n  ])\n});\n\n</code-example> The aliases control in the form group instance is now populated with a single control until more controls are added dynamically.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">存取 FormArray 控制項</nt-wrapper><nt-wrapper translation-origin=\"off\">Access the <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> control</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於重複使用 <code>profileForm.get()</code> 方法獲取每個例項的方式，getter 可以讓你輕鬆存取表單陣列各個例項中的別名。表單陣列例項用一個數組來代表未定數量的控制項。透過 getter 來存取控制項很方便，這種方法還能很容易地重複處理更多控制項。<br> 使用 getter 語法建立類屬性 <code>aliases</code>，以從父表單組中接收表示綽號的表單陣列控制項。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (aliases getter)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases-getter\">\n\nget aliases() {\n  return this.profileForm.get('aliases') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n}\n\n\n</code-example> <div class=\"alert is-helpful\"> <strong>注意</strong>：<br>因為返回的控制項的型別是 <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>，所以你要為該方法提供一個顯式的型別宣告來存取 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 特有的語法。</div> 定義一個方法來把一個綽號控制項動態插入到綽號 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中。用 <code><a href=\"api/forms/FormArray#push\" class=\"code-anchor\">FormArray.push()</a></code> 方法把該控制項新增為陣列中的新條目。<code-example header=\"src/app/profile-editor/profile-editor.component.ts (add alias)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"add-alias\">\n\naddAlias() {\n  this.aliases.push(this.fb.control(''));\n}\n\n</code-example>在這個範本中，這些控制項會被迭代，把每個控制項都顯示為一個獨立的輸入框。</nt-wrapper><nt-wrapper translation-origin=\"off\">A getter provides access to the aliases in the form array instance compared to repeating the <code>profileForm.get()</code> method to get each instance. The form array instance represents an undefined number of controls in an array. It's convenient to access a control through a getter, and this approach is straightforward to repeat for additional controls. <br> Use the getter syntax to create an <code>aliases</code> class property to retrieve the alias's form array control from the parent form group. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (aliases getter)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"aliases-getter\">\n\nget aliases() {\n  return this.profileForm.get('aliases') as <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>;\n}\n\n\n</code-example> <div class=\"alert is-helpful\"> <strong>NOTE</strong>: <br> Because the returned control is of the type <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code>, you need to provide an explicit type to access the method syntax for the form array instance. </div> Define a method to dynamically insert an alias control into the alias's form array. The <code><a href=\"api/forms/FormArray#push\" class=\"code-anchor\">FormArray.push()</a></code> method inserts the control as a new item in the array. <code-example header=\"src/app/profile-editor/profile-editor.component.ts (add alias)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.ts\" region=\"add-alias\">\n\naddAlias() {\n  this.aliases.push(this.fb.control(''));\n}\n\n</code-example> In the template, each control is displayed as a separate input field.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在範本中顯示表單陣列</nt-wrapper><nt-wrapper translation-origin=\"off\">Display the form array in the template</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要想為表單模型新增 <code>aliases</code>，你必須把它加入到範本中供使用者輸入。和 <code>FormGroupNameDirective</code> 提供的 <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> 一樣，<code>FormArrayNameDirective</code> 也使用 <code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> 在這個 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 例項和範本之間建立繫結。<br>在 <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> <code>&lt;div&gt;</code> 元素的結束標籤下方，新增一段範本 HTML。<code-example header=\"src/app/profile-editor/profile-editor.component.html (aliases form array template)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"formarrayname\">\n&lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"aliases\"&gt;\n  &lt;h2&gt;Aliases&lt;/h2&gt;\n  &lt;button type=\"button\" (click)=\"addAlias()\"&gt;+ Add another alias&lt;/button&gt;\n\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let alias of aliases.controls; let i=index\"&gt;\n    &lt;!-- The repeated alias template --&gt;\n    &lt;label for=\"alias-{{ i }}\"&gt;Alias:&lt;/label&gt;\n    &lt;input id=\"alias-{{ i }}\" type=\"text\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"i\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令對 <code>aliases</code> <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 提供的每個 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 進行迭代。因為 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 中的元素是匿名的，所以你要把<em>索引號</em>賦值給 <code>i</code> 變數，並且把它傳給每個控制項的 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 輸入屬性。<div class=\"lightbox\"> <img alt=\"Profile Editor with aliases section, which includes an alias label, input, and button for adding another alias text input\" src=\"generated/images/guide/reactive-forms/profile-editor-4.png\" width=\"400\" height=\"945\"> </div>每當新的 <code>alias</code> 加進來時，<code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 的例項就會基於這個索引號提供它的控制項。這將允許你在每次計算根控制項的狀態和值時追蹤每個控制項。</nt-wrapper><nt-wrapper translation-origin=\"off\">To attach the aliases from your form model, you must add it to the template. Similar to the <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> input provided by <code>FormGroupNameDirective</code>, <code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a></code> binds communication from the form array instance to the template with <code>FormArrayNameDirective</code>. <br> Add the following template HTML after the <code>&lt;div&gt;</code> closing the <code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">formGroupName</a></code> element. <code-example header=\"src/app/profile-editor/profile-editor.component.html (aliases form array template)\" path=\"reactive-forms/src/app/profile-editor/profile-editor.component.html\" region=\"formarrayname\">\n&lt;div <a href=\"api/forms/FormArrayName\" class=\"code-anchor\">formArrayName</a>=\"aliases\"&gt;\n  &lt;h2&gt;Aliases&lt;/h2&gt;\n  &lt;button type=\"button\" (click)=\"addAlias()\"&gt;+ Add another alias&lt;/button&gt;\n\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let alias of aliases.controls; let i=index\"&gt;\n    &lt;!-- The repeated alias template --&gt;\n    &lt;label for=\"alias-{{ i }}\"&gt;Alias:&lt;/label&gt;\n    &lt;input id=\"alias-{{ i }}\" type=\"text\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"i\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example> The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> directive iterates over each form control instance provided by the aliases form array instance. Because form array elements are unnamed, you assign the index to the <code>i</code> variable and pass it to each control to bind it to the <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> input. <div class=\"lightbox\"> <img alt=\"Profile Editor with aliases section, which includes an alias label, input, and button for adding another alias text input\" src=\"generated/images/guide/reactive-forms/profile-editor-4.png\" width=\"400\" height=\"945\"> </div> Each time a new alias instance is added, the new form array instance is provided its control based on the index. This lets you track each individual control when calculating the status and value of the root control.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">新增一個別名</nt-wrapper><nt-wrapper translation-origin=\"off\">Add an alias</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">最初，表單只包含一個綽號欄位，點選 <code>Add Alias</code> 按鈕，就出現了另一個欄位。你還可以驗證由範本底部的“Form Value”顯示出來的表單模型所報告的這個綽號陣列。<div class=\"alert is-helpful\"> <strong>注意</strong>：<br>除了為每個綽號使用 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 之外，你還可以改用 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 來組合上一些額外欄位。對其中的每個條目定義控制項的過程和前面沒有區別。</div></nt-wrapper><nt-wrapper translation-origin=\"off\">Initially, the form contains one <code>Alias</code> field. To add another field, click the <strong>Add Alias</strong> button. You can also validate the array of aliases reported by the form model displayed by <code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a> Value</code> at the bottom of the template. <div class=\"alert is-helpful\"> <strong>NOTE</strong>: <br> Instead of a form control instance for each alias, you can compose another form group instance with additional fields. The process of defining a control for each item is the same. </div></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"reactive-forms-api\"></a></p>\n<h2 id=\"reactive-forms-api-summary\" translation-result=\"on\">響應式表單 API 彙總<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms-api-summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Reactive forms API summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#reactive-forms-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下表給出了用於建立和管理響應式表單控制項的基礎類和服務。要了解完整的語法，請參閱 API 文件中的 <a href=\"api/forms\" title=\"API 參考。\">Forms 套件</a>。</p><p translation-origin=\"off\">The following table lists the base classes and services used to create and manage reactive form controls.\nFor complete syntax details, see the API reference documentation for the <a href=\"api/forms\" title=\"API reference\">Forms package</a>.</p>\n\n<h4 id=\"classes\" translation-result=\"on\">類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#classes\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#classes\"><i class=\"material-icons\">link</i></a></h4>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">類</nt-wrapper><nt-wrapper translation-origin=\"off\">Class</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">所有三種表單控制項類（<code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>、<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>）的抽象基底類別。它提供了一些公共的行為和屬性。</nt-wrapper><nt-wrapper translation-origin=\"off\">The abstract base class for the concrete form control classes <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>, <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, and <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>. It provides their common behaviors and properties.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">管理單體表單控制項的值和有效性狀態。它對應於 HTML 的表單控制項，比如 <code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Manages the value and validity status of an individual form control. It corresponds to an HTML form control such as <code>&lt;input&gt;</code> or <code>&lt;select&gt;</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">管理一組 <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> 例項的值和有效性狀態。該組的屬性中包括了它的子控制項。元件中的最上層表單就是 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Manages the value and validity state of a group of <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> instances. The group's properties include its child controls. The top-level form in your component is <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">管理一些 <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> 例項陣列的值和有效性狀態。</nt-wrapper><nt-wrapper translation-origin=\"off\">Manages the value and validity state of a numerically indexed array of <code><a href=\"api/forms/AbstractControl\" class=\"code-anchor\">AbstractControl</a></code> instances.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個可注入的服務，提供一些用於提供建立控制項例項的工廠方法。</nt-wrapper><nt-wrapper translation-origin=\"off\">An injectable service that provides factory methods for creating control instances.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">追蹤 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項集合的值和有效性狀態，每個例項都具有相同的值型別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Tracks the value and validity state of a collection of <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instances, each of which has the same value type.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h4 id=\"directives\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#directives\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reactive-forms#directives\"><i class=\"material-icons\">link</i></a></h4>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Directive</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlDirective\" class=\"code-anchor\">FormControlDirective</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把一個獨立的 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項繫結到表單控制項元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Syncs a standalone <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> instance to a form control element.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把一個現有 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 中的 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> 例項根據名字繫結到表單控制項元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Syncs <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> in an existing <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance to a form control element by name.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupDirective\" class=\"code-anchor\">FormGroupDirective</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把一個現有的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項繫結到 DOM 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Syncs an existing <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance to a DOM element.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormGroupName\" class=\"code-anchor\">FormGroupName</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把一個內嵌的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項繫結到一個 DOM 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Syncs a nested <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance to a DOM element.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/FormArrayName\" class=\"code-anchor\">FormArrayName</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把一個內嵌的 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 例項繫結到一個 DOM 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Syncs a nested <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> instance to a DOM element.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/ReactiveFormsModule\n - guide/dynamic-form\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/libraries\n - guide/npm-packages\n - guide/typed-forms\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/JsonPipe\n - api/common/NgFor\n - api/core/Component\n - api/core/EventEmitter\n - api/core/NgModule\n - api/forms\n - api/forms/AbstractControl\n - api/forms/Form\n - api/forms/FormArray\n - api/forms/FormArray#push\n - api/forms/FormArrayName\n - api/forms/FormBuilder\n - api/forms/FormBuilder#array\n - api/forms/FormBuilder#control\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/FormGroupName\n - api/forms/FormRecord\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - cli\n - cli/generate#component-command\n - guide/architecture\n - guide/form-validation\n - guide/forms\n - guide/forms-overview\n - guide/glossary#observable\n - guide/reactive-forms#adding-a-basic-form-control\n - guide/reactive-forms#basic-form-validation\n - guide/reactive-forms#classes\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#creating-nested-form-groups\n - guide/reactive-forms#directives\n - guide/reactive-forms#displaying-a-form-control-value\n - guide/reactive-forms#dynamic-forms\n - guide/reactive-forms#grouping-form-controls\n - guide/reactive-forms#nested-groups\n - guide/reactive-forms#overview-of-reactive-forms\n - guide/reactive-forms#prerequisites\n - guide/reactive-forms#reactive-forms\n - guide/reactive-forms#reactive-forms-api\n - guide/reactive-forms#reactive-forms-api-summary\n - guide/reactive-forms#replacing-a-form-control-value\n - guide/reactive-forms#updating-parts-of-the-data-model\n - guide/reactive-forms#using-the-formbuilder-service-to-generate-controls\n - guide/reactive-forms#validating-form-input\n - guide/reactive-forms#使用-formbuilder-服務產生控制項\n - guide/reactive-forms#建立動態表單\n - guide/reactive-forms#建立巢狀(Nesting)的表單組\n - guide/reactive-forms#前提條件\n - guide/reactive-forms#響應式表單\n - guide/reactive-forms#響應式表單-api-彙總\n - guide/reactive-forms#響應式表單概述\n - guide/reactive-forms#把表單控制項分組\n - guide/reactive-forms#指令\n - guide/reactive-forms#顯示表單控制項的值\n - guide/reactive-forms#更新部分資料模型\n - guide/reactive-forms#替換表單控制項的值\n - guide/reactive-forms#新增基礎表單控制項\n - guide/reactive-forms#類\n - guide/reactive-forms#驗證表單輸入\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/reactive-forms.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/\n-->"}