{"id":"guide/architecture-components","title":"Introduction to components and templates","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-components.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-components-and-templates\" translation-result=\"on\">元件簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#introduction-to-components-and-templates\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Introduction to components and templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#introduction-to-components-and-templates\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">一個<em>元件</em>控制著一塊被稱為<a href=\"guide/glossary#view\" title=\"檢視的定義\"><em>檢視</em></a>的螢幕區域。它由一個 TypeScript 類、一個 HTML 範本和一個 CSS 樣式表組成。TypeScript 類定義了 HTML 範本和渲染的 DOM 結構的互動，而樣式表描述了它的外觀。</p><p translation-origin=\"off\">A <em>component</em> controls a patch of screen called a <a href=\"guide/glossary#view\" title=\"Definition of view\"><em>view</em></a>. It consists\nof a TypeScript class, an HTML template, and a CSS style sheet. The TypeScript class defines the interaction\nof the HTML template and the rendered DOM structure, while the style sheet describes its appearance.</p>\n\n<p translation-result=\"on\">Angular 應用使用一些單個元件來定義並控制應用的不同方面。比如，應用可能包含一些描述下列內容的元件：</p><p translation-origin=\"off\">An Angular application uses individual components to define and control different aspects of the application.\nFor example, an application could include components to describe:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">帶有導航連結的應用根元件</p><p translation-origin=\"off\">The application root with the navigation links</p>\n\n</li>\n<li>\n<p translation-result=\"on\">英雄列表</p><p translation-origin=\"off\">The list of heroes</p>\n\n</li>\n<li>\n<p translation-result=\"on\">英雄編輯器</p><p translation-origin=\"off\">The hero editor</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在下面的例子中，<code>HeroListComponent</code> 類包括：</p><p translation-origin=\"off\">In the following example, the <code>HeroListComponent</code> class includes:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一個 <code>heroes</code> 屬性，內含英雄陣列。</p><p translation-origin=\"off\">A <code>heroes</code> property that holds an array of heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個 <code>selectedHero</code> 屬性，內含使用者最近選擇的英雄。</p><p translation-origin=\"off\">A <code>selectedHero</code> property that holds the last hero selected by the user.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個 <code>selectHero()</code> 方法，當用戶從列表中點選某個英雄時，它會設定 <code>selectedHero</code> 屬性。</p><p translation-origin=\"off\">A <code>selectHero()</code> method sets a <code>selectedHero</code> property when the user clicks to choose a hero from that list.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">該元件會使用 <code>HeroService</code> 服務來初始化 <code>heroes</code> 屬性，<code>HeroService</code> 是一個 TypeScript 的構造器<a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\">引數型屬性</a>。Angular 依賴注入系統會把 <code>HeroService</code> 服務提供給該元件。</p><p translation-origin=\"off\">The component initializes the <code>heroes</code> property by using the <code>HeroService</code> service, which is a TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\">parameter property</a> on the constructor. Angular's dependency injection system provides the <code>HeroService</code> service to the component.</p>\n\n<code-example header=\"src/app/hero-list.component.ts (class)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"class\">\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n  selectedHero: Hero | undefined;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p translation-result=\"on\">當用戶在應用中穿行時，Angular 就會建立、更新、銷燬一些元件。你的應用可以透過一些可選的<a href=\"guide/lifecycle-hooks\">生命週期鉤子</a>（比如 <code>ngOnInit()</code>）來在每個特定的時機採取行動。</p><p translation-origin=\"off\">Angular creates, updates, and destroys components as the user moves through the application.\nYour application can take action at each moment in this lifecycle through optional <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a>, like <code>ngOnInit()</code>.</p>\n\n<h2 id=\"component-metadata\" translation-result=\"on\">元件的元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#component-metadata\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Component metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#component-metadata\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"lightbox\">\n<img alt=\"Metadata\" class=\"left\" src=\"generated/images/guide/architecture/metadata.png\" width=\"170\" height=\"48\">\n</div>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器會指出緊隨其後的那個類是個元件類，併為其指定元資料。\n在下面的範例程式碼中，你可以看到 <code>HeroListComponent</code> 只是一個普通類，完全沒有 Angular 特有的標記或語法。\n直到給它加上了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器，它才變成了元件。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator identifies the class immediately below it as a component class, and specifies its metadata.\nIn the example code below, you can see that <code>HeroListComponent</code> is just a class, with no special Angular notation or syntax at all.\nIt's not a component until you mark it as one with the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator.</p>\n\n<p translation-result=\"on\">元件的元資料告訴 Angular 到哪裡獲取它需要的主要構成要素，以建立和展示這個元件及其檢視。具體來說，它把一個<em>範本</em>（無論是直接內聯在程式碼中還是參考的外部檔案）和該元件關聯起來。該元件及其範本，共同描述了一個<em>檢視</em>。</p><p translation-origin=\"off\">The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view.\nIn particular, it associates a <em>template</em> with the component, either directly with inline code, or by reference.\nTogether, the component and its template describe a <em>view</em>.</p>\n\n<p translation-result=\"on\">除了包含或指向範本之外，<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 的元資料還會配置要如何在 HTML 中參考該元件，以及該元件需要哪些服務等等。</p><p translation-origin=\"off\">In addition to containing or pointing to the template, the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata configures, for example, how the component can be referenced in HTML and what services it requires.</p>\n\n<p translation-result=\"on\">下面的例子中就是 <code>HeroListComponent</code> 的基礎元資料：</p><p translation-origin=\"off\">Here's an example of basic metadata for <code>HeroListComponent</code>.</p>\n\n<code-example header=\"src/app/hero-list.component.ts (metadata)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\nexport class HeroListComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  /* . . . */\n}\n\n\n</code-example>\n<p translation-result=\"on\">這個例子展示了一些最常用的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 配置選項：</p><p translation-origin=\"off\">This example shows some of the most useful <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> configuration options:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">配置選項</nt-wrapper><nt-wrapper translation-origin=\"off\">Configuration options</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個 CSS 選擇器，它會告訴 Angular，一旦在範本 HTML 中找到了這個選擇器對應的標籤，就建立並插入該元件的一個例項。比如，如果應用的 HTML 中包含 <code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>，Angular 就會在這些標籤中插入一個 <code>HeroListComponent</code> 例項的檢視。</nt-wrapper><nt-wrapper translation-origin=\"off\">A CSS selector that tells Angular to create and insert an instance of this component wherever it finds the corresponding tag in template HTML. For example, if an application's HTML contains <code>&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</code>, then Angular inserts an instance of the <code>HeroListComponent</code> view between those tags.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">該元件的 HTML 範本檔案相對於這個元件檔案的地址。另外，你還可以用 <code>template</code> 屬性的值來提供內聯的 HTML 範本。這個範本定義了該元件的<em>宿主檢視</em>。</nt-wrapper><nt-wrapper translation-origin=\"off\">The module-relative address of this component's HTML template. Alternatively, you can provide the HTML template inline, as the value of the <code>template</code> property. This template defines the component's <em>host view</em>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當前元件所需的服務<a href=\"guide/glossary#provider\">提供者</a>的一個數組。在這個例子中，它告訴 Angular 該如何提供一個 <code>HeroService</code> 例項，以獲取要顯示的英雄列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">An array of <a href=\"guide/glossary#provider\">providers</a> for services that the component requires. In the example, this tells Angular how to provide the <code>HeroService</code> instance that the component's constructor uses to get the list of heroes to display.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"templates-and-views\" translation-result=\"on\">範本與檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#templates-and-views\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Templates and views<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#templates-and-views\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"lightbox\">\n<img alt=\"Template\" class=\"left\" src=\"generated/images/guide/architecture/template.png\" width=\"200\" height=\"114\">\n</div>\n<p translation-result=\"on\">你要透過元件的配套範本來定義其檢視。範本就是一種 HTML，它會告訴 Angular 如何渲染該元件。</p><p translation-origin=\"off\">You define a component's view with its companion template.\nA template is a form of HTML that tells Angular how to render the component.</p>\n\n<p translation-result=\"on\">檢視通常會分層次進行組織，讓你能以 UI 分割槽或頁面為單位進行修改、顯示或隱藏。與元件直接關聯的範本會定義該元件的<em>宿主檢視</em>。該元件還可以定義一個<em>帶層次結構的檢視</em>，它包含一些<em>內嵌的檢視</em>作為其它元件的宿主。</p><p translation-origin=\"off\">Views are typically organized hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit.\nThe template immediately associated with a component defines that component's <em>host view</em>.\nThe component can also define a <em>view hierarchy</em>, which contains <em>embedded views</em>, hosted by other components.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Component tree\" class=\"left\" src=\"generated/images/guide/architecture/component-tree.png\" width=\"300\" height=\"231\">\n</div>\n<p translation-result=\"on\">帶層次結構的檢視可以包含來自同一模組（NgModule）中或其它模組中的元件的檢視。</p><p translation-origin=\"off\">A view hierarchy can include views from components in the same NgModule and from those in different NgModules.</p>\n\n<h2 id=\"template-syntax\" translation-result=\"on\">範本語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#template-syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#template-syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本很像標準的 HTML，但是它還包含 Angular 的<a href=\"guide/template-syntax\">範本語法</a>，這些範本語法可以根據你的應用邏輯、應用狀態和 DOM 資料來修改這些 HTML。你的範本可以使用<em>資料繫結</em>來協調應用和 DOM 中的資料，使用<em>管道</em>在顯示出來之前對其進行轉換，使用<em>指令</em>來把程式邏輯應用到要顯示的內容上。</p><p translation-origin=\"off\">A template looks like regular HTML, except that it also contains Angular <a href=\"guide/template-syntax\">template syntax</a>, which alters the HTML based on your application's logic and the state of application and DOM data.\nYour template can use <em>data binding</em> to coordinate the application and DOM data, <em>pipes</em> to transform data before it is displayed, and <em>directives</em> to apply application logic to what gets displayed.</p>\n\n<p translation-result=\"on\">比如，下面是本課程中 <code>HeroListComponent</code> 的範本：</p><p translation-origin=\"off\">For example, here is a template for the Tutorial's <code>HeroListComponent</code>.</p>\n\n<code-example header=\"src/app/hero-list.component.html\" path=\"architecture/src/app/hero-list.component.html\">\n&lt;h2&gt;Hero List&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Select a hero from the list to see details.&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n      {{hero.name}}\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p translation-result=\"on\">這個範本使用了典型的 HTML 元素，比如 <code>&lt;h2&gt;</code> 和 <code>&lt;p&gt;</code>。還包括一些 Angular 的範本語法元素，如 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>，<code>{{hero.name}}</code>，<code>click</code>、<code>[hero]</code> 和 <code>&lt;app-hero-detail&gt;</code>。這些範本語法元素告訴 Angular 該如何根據程式邏輯和資料在螢幕上渲染 HTML。</p><p translation-origin=\"off\">This template uses typical HTML elements like <code>&lt;h2&gt;</code> and  <code>&lt;p&gt;</code>. It also includes Angular template-syntax elements, <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, <code>{{hero.name}}</code>, <code>(click)</code>, <code>[hero]</code>, and <code>&lt;app-hero-detail&gt;</code>.\nThe template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令告訴 Angular 在一個列表上進行迭代</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> directive tells Angular to iterate over a list</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>{{hero.name}}</code>、<code>(click)</code> 和 <code>[hero]</code> 把程式資料繫結到及繫結回 DOM，以響應使用者的輸入。更多內容參閱稍後的<a href=\"guide/architecture-components#data-binding\">資料繫結</a>部分。</p><p translation-origin=\"off\"><code>{{hero.name}}</code>, <code>(click)</code>, and <code>[hero]</code> bind program data to and from the DOM, responding to user input.\nSee more about <a href=\"guide/architecture-components#data-binding\">data binding</a> below.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">此例子中的 <code>&lt;app-hero-detail&gt;</code> 元素標籤代表一個新元件 <code>HeroDetailComponent</code>。<code>HeroDetailComponent</code> 定義了由 <code>HeroListComponent</code> 所渲染的 DOM 結構中的 <code>hero-detail</code> 部分。</p><p translation-origin=\"off\">The <code>&lt;app-hero-detail&gt;</code> element tag in the example represents a new component, <code>HeroDetailComponent</code>.\nThe <code>HeroDetailComponent</code>  defines the <code>hero-detail</code> portion of the rendered DOM structure specified by the <code>HeroListComponent</code> component.</p>\n\n<p translation-result=\"on\">注意這些自訂元件是如何與原生 HTML 元素混用的。</p><p translation-origin=\"off\">Notice how these custom components mix with native HTML.</p>\n\n</li>\n</ul>\n<h3 id=\"data-binding\" translation-result=\"on\">資料繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#data-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#data-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果沒有框架，你就要自己負責把資料值推送到 HTML 控制項中，並把來自使用者的響應轉換成動作和對值的更新。手動寫這種資料推拉邏輯會很枯燥、容易出錯，難以閱讀 —— 有前端 JavaScript 開發經驗的程式設計師一定深有體會。</p><p translation-origin=\"off\">Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates.\nWriting such push and pull logic by hand is tedious, error-prone, and a nightmare to read, as any experienced front-end JavaScript programmer can attest.</p>\n\n<p translation-result=\"on\">Angular 支援<em>雙向資料繫結</em>，這是一種對範本中的各個部件與元件中的各個部件進行協調的機制。往範本 HTML 中新增繫結標記可以告訴 Angular 該如何連線它們。</p><p translation-origin=\"off\">Angular supports <em>two-way data binding</em>, a mechanism for coordinating the parts of a template with the parts of a component.\nAdd binding markup to the template HTML to tell Angular how to connect both sides.</p>\n\n<p translation-result=\"on\">下圖顯示了資料繫結標記的四種形式。每種形式都有一個方向 —— 從元件到 DOM、從 DOM 到元件或雙向。</p><p translation-origin=\"off\">The following diagram shows the four forms of data binding markup.\nEach form has a direction: to the DOM, from the DOM, or both.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/databinding.png\" width=\"220\" height=\"205\">\n</div>\n<p translation-result=\"on\">這個來自 <code>HeroListComponent</code> 範本中的例子使用了其中的三種形式：</p><p translation-origin=\"off\">This example from the <code>HeroListComponent</code> template uses three of these forms.</p>\n\n<code-example header=\"src/app/hero-list.component.html (binding)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n&lt;button type=\"button\" (click)=\"selectHero(hero)\"&gt;\n  {{hero.name}}\n&lt;/button&gt;\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">資料繫結</nt-wrapper><nt-wrapper translation-origin=\"off\">Data bindings</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>[hero]</code><a href=\"guide/property-binding\">屬性繫結</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><code>[hero]</code> <a href=\"guide/property-binding\">property binding</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把父元件 <code>HeroListComponent</code> 的 <code>selectedHero</code> 的值傳到子元件 <code>HeroDetailComponent</code> 的 <code>hero</code> 屬性中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Passes the value of <code>selectedHero</code> from the parent <code>HeroListComponent</code> to the <code>hero</code> property of the child <code>HeroDetailComponent</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>(click)</code><a href=\"guide/user-input#binding-to-user-input-events\">事件繫結</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><code>(click)</code> <a href=\"guide/user-input#binding-to-user-input-events\">event binding</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當用戶單擊英雄的名字時，呼叫元件的 <code>selectHero</code> 方法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Calls the component's <code>selectHero</code> method when the user clicks a hero's name.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>{{hero.name}}</code><a href=\"guide/interpolation\">插值</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><code>{{hero.name}}</code> <a href=\"guide/interpolation\">interpolation</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在 <code>&lt;button&gt;</code> 元素中顯示元件的 <code>hero.name</code> 屬性值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Displays the component's <code>hero.name</code> property value within the <code>&lt;button&gt;</code> element.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><strong>雙向資料繫結</strong>（主要用於<a href=\"guide/forms\">範本驅動表單</a>中），它會把屬性繫結和事件繫結組合成一種單獨的寫法。下面這個來自 <code>HeroDetailComponent</code> 範本中的例子透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令使用了雙向資料繫結：</p><p translation-origin=\"off\">Two-way data binding (used mainly in <a href=\"guide/forms\">template-driven forms</a>) combines property and event binding in a single notation.\nHere's an example from the <code>HeroDetailComponent</code> template that uses two-way data binding with the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p translation-result=\"on\">在雙向繫結中，資料屬性值透過屬性繫結從元件流到輸入框。使用者的修改透過事件繫結流回元件，把屬性值設定為最新的值。</p><p translation-origin=\"off\">In two-way binding, a data property value flows to the input box from the component as with property binding.\nThe user's changes also flow back to the component, resetting the property to the latest value, as with event binding.</p>\n\n<p translation-result=\"on\">Angular 在每個 JavaScript 事件迴圈中處理<em>所有的</em>資料繫結，它會從元件樹的根部開始，遞迴處理全部子元件。</p><p translation-origin=\"off\">Angular processes <em>all</em> data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Data Binding\" class=\"left\" src=\"generated/images/guide/architecture/component-databinding.png\" width=\"358\" height=\"219\">\n</div>\n<p translation-result=\"on\">資料繫結在範本及其元件之間的通訊中扮演了非常重要的角色，它對於父元件和子元件之間的通訊也同樣重要。</p><p translation-origin=\"off\">Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Parent/Child binding\" class=\"left\" src=\"generated/images/guide/architecture/parent-child-binding.png\" width=\"358\" height=\"171\">\n</div>\n<h3 id=\"pipes\" translation-result=\"on\">管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#pipes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#pipes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 的管道可以讓你在範本中宣告顯示值的轉換邏輯。帶有 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 裝飾器的類中會定義一個轉換函式，用來把輸入值轉換成供檢視顯示用的輸出值。</p><p translation-origin=\"off\">Angular pipes let you declare display-value transformations in your template HTML.\nA class with the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> decorator defines a function that transforms input values to output values for display in a view.</p>\n\n<p translation-result=\"on\">Angular 自帶了很多管道，比如 <a href=\"api/common/DatePipe\">date</a> 管道和 <a href=\"api/common/CurrencyPipe\">currency</a> 管道。完整的列表參閱 <a href=\"api?type=pipe\">Pipes API 列表</a>。你也可以自己定義一些新管道。</p><p translation-origin=\"off\">Angular defines various pipes, such as the <a href=\"api/common/DatePipe\">date</a> pipe and <a href=\"api/common/CurrencyPipe\">currency</a> pipe. For a complete list, see the <a href=\"api?type=pipe\">Pipes API list</a>.\nYou can also define new pipes.</p>\n\n<p translation-result=\"on\">要在 HTML 範本中指定值的轉換方式，請使用<a href=\"guide/pipes\">管道運運算元（<code>|</code>）</a>。</p><p translation-origin=\"off\">To specify a value transformation in an HTML template, use the <a href=\"guide/pipes\">pipe operator (<code>|</code>)</a>.</p>\n\n<code-example format=\"html\" language=\"html\">\n\n{{interpolated_value | pipe_name}}\n\n</code-example>\n<p translation-result=\"on\">你可以把管道串聯起來，把一個管道函式的輸出送給另一個管道函式進行轉換。\n管道還能接收一些引數，來控制它該如何進行轉換。比如，你可以把要使用的日期格式傳給 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道：</p><p translation-origin=\"off\">You can chain pipes, sending the output of one pipe function to be transformed by another pipe function.\nA pipe can also take arguments that control how it performs its transformation.\nFor example, you can pass the desired format to the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe.</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;!-- Default format: output 'Jun 15, 2015'--&gt;\n&lt;p&gt;Today is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&lt;/p&gt;\n\n&lt;!-- fullDate format: output 'Monday, June 15, 2015'--&gt;\n&lt;p&gt;The date is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate'}}&lt;/p&gt;\n\n&lt;!-- shortTime format: output '9:43 AM'--&gt;\n&lt;p&gt;The time is {{today | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'shortTime'}}&lt;/p&gt;\n\n</code-example>\n<h3 id=\"directives\" translation-result=\"on\">指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#directives\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#directives\"><i class=\"material-icons\">link</i></a></h3>\n\n<div class=\"lightbox\">\n<img alt=\"Directives\" class=\"left\" src=\"generated/images/guide/architecture/directive.png\" width=\"150\" height=\"147\">\n</div>\n<p translation-result=\"on\">Angular 的範本是<em>動態的</em>。當 Angular 渲染它們的時候，會根據<em>指令</em>給出的指示對 DOM 進行轉換。指令就是一個帶有 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器的類別。</p><p translation-origin=\"off\">Angular templates are <em>dynamic</em>.\nWhen Angular renders them, it transforms the DOM according to the instructions given by <em>directives</em>.\nA directive is a class with a <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator.</p>\n\n<p translation-result=\"on\">元件從技術角度上說就是一個指令，但是由於元件對 Angular 應用來說非常獨特、非常重要，因此 Angular 專門定義了 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器，它使用一些面向範本的特性擴充了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器。</p><p translation-origin=\"off\">A component is technically a directive.\nHowever, components are so distinctive and central to Angular applications that Angular defines the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator, which extends the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator with template-oriented features.</p>\n\n<p translation-result=\"on\">除元件外，還有兩種指令：<em>結構型指令</em>和<em>屬性型指令</em>。Angular 本身定義了一系列這兩種型別的指令，你也可以使用 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器來定義自己的指令。</p><p translation-origin=\"off\">In addition to components, there are two other kinds of directives: <em>structural</em> and <em>attribute</em>.\nAngular defines a number of directives of both kinds, and you can define your own using the  <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator.</p>\n\n<p translation-result=\"on\">像元件一樣，指令的元資料把它所裝飾的指令類和一個 <code>selector</code> 關聯起來，<code>selector</code> 用來把該指令插入到 HTML 中。在範本中，指令通常作為屬性出現在元素標籤上，可能僅僅作為名字出現，也可能作為賦值目標或繫結目標出現。</p><p translation-origin=\"off\">Just as for components, the metadata for a directive associates the decorated class with a <code>selector</code> element that you use to insert it into HTML.\nIn templates, directives typically appear within an element tag as attributes, either by name or as the target of an assignment or a binding.</p>\n\n<h4 id=\"structural-directives\" translation-result=\"on\">結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#structural-directives\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#structural-directives\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><em>結構型指令</em>透過新增、移除或替換 DOM 元素來修改佈局。這個範例範本使用了兩個內建的結構型指令來為要渲染的檢視新增程式邏輯：</p><p translation-origin=\"off\"><em>Structural directives</em> alter layout by adding, removing, and replacing elements in the DOM.\nThe example template uses two built-in structural directives to add application logic to how the view is rendered.</p>\n\n<code-example header=\"src/app/hero-list.component.html (structural)\" path=\"architecture/src/app/hero-list.component.1.html\" region=\"structural\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;&lt;/li&gt;\n&lt;app-hero-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個迭代器，它要求 Angular 為 <code>heroes</code> 列表中的每個英雄創建出一個 <code>&lt;li&gt;</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">An <em>iterative</em>, which tells Angular to create one <code>&lt;li&gt;</code> per hero in the <code>heroes</code> list.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>*ngIf</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">是個條件陳述式，只有當選中的英雄存在時，它才會包含 <code>HeroDetail</code> 元件。</nt-wrapper><nt-wrapper translation-origin=\"off\">A <em>conditional</em>, which includes the <code>HeroDetail</code> component only if a selected hero exists.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h4 id=\"attribute-directives\" translation-result=\"on\">屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#attribute-directives\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-components#attribute-directives\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><em>屬性型指令</em>會修改現有元素的外觀或行為。在範本中，它們看起來就像普通的 HTML 屬性一樣，因此得名“屬性型指令”。</p><p translation-origin=\"off\"><em>Attribute directives</em> alter the appearance or behavior of an existing element.\nIn templates they look like regular HTML attributes, hence the name.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令就是屬性型指令的一個例子，它實現了雙向資料繫結。<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 修改現有元素（一般是 <code>&lt;input&gt;</code>）的行為：設定其顯示屬性值，並響應 change 事件。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive, which implements two-way data binding, is an example of an attribute directive.\n<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> modifies the behavior of an existing element (typically <code>&lt;input&gt;</code>) by setting its display value property and responding to change events.</p>\n\n<code-example header=\"src/app/hero-detail.component.html (ngModel)\" path=\"architecture/src/app/hero-detail.component.html\" region=\"ngModel\">\n&lt;input type=\"text\" id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\"&gt;\n\n</code-example>\n<p translation-result=\"on\">Angular 還包含另一些預定義指令，它們會修改：</p><p translation-origin=\"off\">Angular includes pre-defined directives that change: </p>\n\n<ul>\n<li>\n<p translation-result=\"on\">佈局結構，比如 <a href=\"guide/built-in-directives#ngSwitch\">ngSwitch</a>，以及</p><p translation-origin=\"off\">The layout structure, such as <a href=\"guide/built-in-directives#ngSwitch\">ngSwitch</a>, and</p>\n\n</li>\n<li>\n<p translation-result=\"on\">DOM 元素和元件的某些方面，比如 <a href=\"guide/built-in-directives#ngstyle\">ngStyle</a> 和 <a href=\"guide/built-in-directives#ngClass\">ngClass</a>。</p><p translation-origin=\"off\">Aspects of DOM elements and components, such as <a href=\"guide/built-in-directives#ngstyle\">ngStyle</a> and <a href=\"guide/built-in-directives#ngClass\">ngClass</a>.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/attribute-directives\">屬性型指令</a>和<a href=\"guide/structural-directives\">結構型指令</a>這兩章。</p><p translation-origin=\"off\">Learn more in the <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a> guides.</p>\n\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0300\n - guide/architecture\n - guide/architecture-modules\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/forms-overview\n - guide/interpolation\n - guide/property-binding\n - guide/routing-overview\n - start\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/Directive\n - api/core/OnInit\n - api/core/Pipe\n - api/forms/NgModel\n - api?type=pipe\n - guide/architecture-components#attribute-directives\n - guide/architecture-components#component-metadata\n - guide/architecture-components#data-binding\n - guide/architecture-components#directives\n - guide/architecture-components#introduction-to-components-and-templates\n - guide/architecture-components#pipes\n - guide/architecture-components#structural-directives\n - guide/architecture-components#template-syntax\n - guide/architecture-components#templates-and-views\n - guide/architecture-components#屬性型指令\n - guide/architecture-components#指令\n - guide/architecture-components#資料繫結\n - guide/architecture-components#範本與檢視\n - guide/architecture-components#範本語法\n - guide/architecture-components#管道\n - guide/architecture-components#元件的元資料\n - guide/architecture-components#元件簡介\n - guide/architecture-components#結構型指令\n - guide/attribute-directives\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngstyle\n - guide/forms\n - guide/glossary#provider\n - guide/glossary#view\n - guide/interpolation\n - guide/lifecycle-hooks\n - guide/pipes\n - guide/property-binding\n - guide/structural-directives\n - guide/template-syntax\n - guide/user-input#binding-to-user-input-events\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-components.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/docs/handbook/2/classes.html#parameter-properties\n-->"}