{"id":"guide/dynamic-form","title":"Building dynamic forms","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dynamic-form.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"building-dynamic-forms\" translation-result=\"on\">建構動態表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#building-dynamic-forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Building dynamic forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#building-dynamic-forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">許多表單（比如問卷）可能在格式和意圖上都非常相似。為了更快更輕鬆地產生這種表單的不同版本，你可以根據描述業務物件模型的元資料來建立<em>動態表單範本</em>。然後就可以根據資料模型中的變化，使用該範本自動產生新的表單。</p><p translation-origin=\"off\">Many forms, such as questionnaires, can be very similar to one another in format and intent.\nTo make it faster and easier to generate different versions of such a form, you can create a <em>dynamic form template</em> based on metadata that describes the business object model.\nThen, use the template to generate new forms automatically, according to changes in the data model.</p>\n\n<p translation-result=\"on\">如果你有這樣一種表單，其內容必須經常更改以滿足快速變化的業務需求和監管需求，該技術就特別有用。一個典型的例子就是問卷。你可能需要在不同的上下文中獲取使用者的意見。使用者要看到的表單格式和樣式應該保持不變，而你要提的實際問題則會因上下文而異。</p><p translation-origin=\"off\">The technique is particularly useful when you have a type of form whose content must change frequently to meet rapidly changing business and regulatory requirements.\nA typical use-case is a questionnaire.\nYou might need to get input from users in different contexts.\nThe format and style of the forms a user sees should remain constant, while the actual questions you need to ask vary with the context.</p>\n\n<p translation-result=\"on\">在本課程中，你會建構一個渲染基本問卷的動態表單。你要為正在找工作的英雄們建立一個線上應用。英雄管理局會不斷修補應用流程，但是藉助動態表單，你可以動態建立新的表單，而無需修改應用程式碼。</p><p translation-origin=\"off\">In this tutorial you will build a dynamic form that presents a basic questionnaire.\nYou build an online application for heroes seeking employment.\nThe agency is constantly tinkering with the application process, but by using the dynamic form\nyou can create the new forms on the fly without changing the application code.</p>\n\n<p translation-result=\"on\">本課程將指導你完成以下步驟。</p><p translation-origin=\"off\">The tutorial walks you through the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為專案啟用響應式表單。</p><p translation-origin=\"off\">Enable reactive forms for a project.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個數據模型來表示表單控制項。</p><p translation-origin=\"off\">Establish a data model to represent form controls.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用範例資料填充模型。</p><p translation-origin=\"off\">Populate the model with sample data.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">開發一個元件來動態建立表單控制項。</p><p translation-origin=\"off\">Develop a component to create form controls dynamically.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">你建立的表單會使用輸入驗證和樣式來改善使用者體驗。它有一個 Submit 按鈕，這個按鈕只會在所有的使用者輸入都有效時啟用，並用色彩和一些錯誤資訊來標記出無效輸入。</p><p translation-origin=\"off\">The form you create uses input validation and styling to improve the user experience.\nIt has a Submit button that is only enabled when all user input is valid, and flags invalid input with color coding and error messages.</p>\n\n<p translation-result=\"on\">這個基本版可以不斷演進，以支援更多的問題型別、更優雅的渲染體驗以及更高大上的使用者體驗。</p><p translation-origin=\"off\">The basic version can evolve to support a richer variety of questions, more graceful rendering, and superior user experience.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">參閱 <live-example name=\"dynamic-form\"></live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"dynamic-form\"></live-example>.</p>\n\n</div>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在做本課程之前，你應該對下列內容有一個基本的瞭解。</p><p translation-origin=\"off\">Before doing this tutorial, you should have a basic understanding to the following.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 語言\">TypeScript</a>和 HTML5 程式設計</p><p translation-origin=\"off\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> and HTML5 programming</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture\" title=\"Angular 應用設計概念簡介\">Angular 應用設計</a>的基本概念</p><p translation-origin=\"off\">Fundamental concepts of <a href=\"guide/architecture\" title=\"Introduction to Angular app-design concepts\">Angular app design</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reactive-forms\" title=\"反應表單指南\">響應式表單</a>的基礎知識</p><p translation-origin=\"off\">Basic knowledge of <a href=\"guide/reactive-forms\" title=\"Reactive forms guide\">reactive forms</a></p>\n\n</li>\n</ul>\n<h2 id=\"enable-reactive-forms-for-your-project\" translation-result=\"on\">為專案啟用響應式表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#enable-reactive-forms-for-your-project\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Enable reactive forms for your project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#enable-reactive-forms-for-your-project\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">動態表單是基於響應式表單的。為了讓應用存取響應式表示式指令，<a href=\"guide/bootstrapping\" title=\"要學習如何從根模組啟動一個應用。\">根模組</a>會從 <code>@angular/forms</code> 函式庫中匯入 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>。</p><p translation-origin=\"off\">Dynamic forms are based on reactive forms.\nTo give the application access reactive forms directives, the <a href=\"guide/bootstrapping\" title=\"Learn about bootstrapping an app from the root module.\">root module</a> imports <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> from the <code>@angular/forms</code> library.</p>\n\n<p translation-result=\"on\">以下程式碼展示了此範例在根模組中所做的設定。</p><p translation-origin=\"off\">The following code from the example shows the setup in the root module.</p>\n\n<code-tabs>\n    <code-pane header=\"app.module.ts\" path=\"dynamic-form/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { DynamicFormComponent } from './dynamic-form.component';\nimport { DynamicFormQuestionComponent } from './dynamic-form-question.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a> ],\n  declarations: [ AppComponent, DynamicFormComponent, DynamicFormQuestionComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n\n</code-pane>\n    <code-pane header=\"main.ts\" path=\"dynamic-form/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"object-model\"></a></p>\n<h2 id=\"create-a-form-object-model\" translation-result=\"on\">建立一個表單物件模型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-form-object-model\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create a form object model<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-form-object-model\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">動態表單需要一個物件模型來描述此表單功能所需的全部場景。英雄應用表單中的例子是一組問題 - 也就是說，表單中的每個控制項都必須提問並接受一個答案。</p><p translation-origin=\"off\">A dynamic form requires an object model that can describe all scenarios needed by the form functionality.\nThe example hero-application form is a set of questions —that is, each control in the form must ask a question and accept an answer.</p>\n\n<p translation-result=\"on\">此類表單的資料模型必須能表示一個問題。本例中包含 <code>DynamicFormQuestionComponent</code>，它定義了一個問題作為模型中的基本物件。</p><p translation-origin=\"off\">The data model for this type of form must represent a question.\nThe example includes the <code>DynamicFormQuestionComponent</code>, which defines a  question as the fundamental object in the model.</p>\n\n<p translation-result=\"on\">這個 <code>QuestionBase</code> 是一組控制項的基底類別，可以在表單中表示問題及其答案。</p><p translation-origin=\"off\">The following <code>QuestionBase</code> is a base class for a set of controls that can represent the question and its answer in the form.</p>\n\n<code-example header=\"src/app/question-base.ts\" path=\"dynamic-form/src/app/question-base.ts\">\nexport class QuestionBase&lt;T&gt; {\n  value: T|undefined;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n  type: string;\n  options: {key: string, value: string}[];\n\n  constructor(options: {\n      value?: T;\n      key?: string;\n      label?: string;\n      required?: boolean;\n      order?: number;\n      controlType?: string;\n      type?: string;\n      options?: {key: string, value: string}[];\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n  }\n}\n\n\n</code-example>\n<h3 id=\"define-control-classes\" translation-result=\"on\">定義控制項類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#define-control-classes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Define control classes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#define-control-classes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此範例從這個基底類別派生出兩個新類，<code>TextboxQuestion</code> 和 <code>DropdownQuestion</code>，分別代表不同的控制項型別。當你在下一步中建立表單範本時，你會例項化這些具體的問題類，以便動態渲染相應的控制項。</p><p translation-origin=\"off\">From this base, the example derives two new classes, <code>TextboxQuestion</code> and <code>DropdownQuestion</code>, that represent different control types.\nWhen you create the form template in the next step, you instantiate these specific question types in order to render the appropriate controls dynamically.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">控制型別</nt-wrapper><nt-wrapper translation-origin=\"off\">Control type</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳細資訊</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>TextboxQuestion</code> 控制項型別</nt-wrapper><nt-wrapper translation-origin=\"off\"><code>TextboxQuestion</code> control type</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">表示問題並讓使用者輸入。<code-example header=\"src/app/question-textbox.ts\" path=\"dynamic-form/src/app/question-textbox.ts\">\nimport { QuestionBase } from './question-base';\n\nexport class TextboxQuestion extends QuestionBase&lt;string&gt; {\n  override controlType = 'textbox';\n}\n\n\n</code-example>  <code>TextboxQuestion</code> 控制項型別將使用 <code>&lt;input&gt;</code> 元素表示在表單範本中。該元素的 <code>type</code> 屬性將根據 <code>options</code> 引數中指定的 <code>type</code> 欄位定義（比如 <code>text</code>，<code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>，<code>url</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Presents a question and lets users enter input. <code-example header=\"src/app/question-textbox.ts\" path=\"dynamic-form/src/app/question-textbox.ts\">\nimport { QuestionBase } from './question-base';\n\nexport class TextboxQuestion extends QuestionBase&lt;string&gt; {\n  override controlType = 'textbox';\n}\n\n\n</code-example> The <code>TextboxQuestion</code> control type is represented in a form template using an <code>&lt;input&gt;</code> element. The <code>type</code> attribute of the element is defined based on the <code>type</code> field specified in the <code>options</code> argument (for example <code>text</code>, <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>, <code>url</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>DropdownQuestion</code> 控制項型別</nt-wrapper><nt-wrapper translation-origin=\"off\"><code>DropdownQuestion</code> control type</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">表示在選擇框中的一個選項列表。<code-example header=\"src/app/question-dropdown.ts\" path=\"dynamic-form/src/app/question-dropdown.ts\">\nimport { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase&lt;string&gt; {\n  override controlType = 'dropdown';\n}\n\n\n</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Presents a list of choices in a select box. <code-example header=\"src/app/question-dropdown.ts\" path=\"dynamic-form/src/app/question-dropdown.ts\">\nimport { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase&lt;string&gt; {\n  override controlType = 'dropdown';\n}\n\n\n</code-example></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"compose-form-groups\" translation-result=\"on\">編寫表單組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-form-groups\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Compose form groups<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-form-groups\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">動態表單會使用一個服務來根據表單模型建立輸入控制項的分組集合。下面的 <code>QuestionControlService</code> 會收集一組 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項，這些例項會消費問題模型中的元資料。你可以指定一些預設值和驗證規則。</p><p translation-origin=\"off\">A dynamic form uses a service to create grouped sets of input controls, based on the form model.\nThe following <code>QuestionControlService</code> collects a set of <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instances that consume the metadata from the question model.\nYou can specify default values and validation rules.</p>\n\n<code-example header=\"src/app/question-control.service.ts\" path=\"dynamic-form/src/app/question-control.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>, <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>, <a href=\"api/forms/Validators\" class=\"code-anchor\">Validators</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionControlService {\n  toFormGroup(questions: QuestionBase&lt;string&gt;[] ) {\n    const group: any = {};\n\n    questions.forEach(question =&gt; {\n      group[question.key] = question.required ? new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '', Validators.required)\n                                              : new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(question.value || '');\n    });\n    return new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>(group);\n  }\n}\n\n\n</code-example>\n<p><a id=\"form-component\"></a></p>\n<h2 id=\"compose-dynamic-form-contents\" translation-result=\"on\">編寫動態表單內容<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-dynamic-form-contents\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Compose dynamic form contents<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#compose-dynamic-form-contents\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">動態表單本身就是一個容器元件，稍後你會新增它。每個問題都會在表單元件的範本中用一個 <code>&lt;app-question&gt;</code> 標籤表示，該標籤會匹配 <code>DynamicFormQuestionComponent</code> 中的一個例項。</p><p translation-origin=\"off\">The dynamic form itself is represented by a container component, which you add in a later step.\nEach question is represented in the form component's template by an <code>&lt;app-question&gt;</code> tag, which matches an instance of <code>DynamicFormQuestionComponent</code>.</p>\n\n<p translation-result=\"on\"><code>DynamicFormQuestionComponent</code> 負責根據資料繫結的問題物件中的各種值來渲染單個問題的詳情。該表單依靠 <a href=\"api/forms/FormGroupDirective\" title=\"API 參考\"><code>[formGroup]</code> 指令</a>來將範本 HTML 和底層的控制項物件聯絡起來。<code>DynamicFormQuestionComponent</code> 會建立表單組，並用問題模型中定義的控制項來填充它們，並指定顯示和驗證規則。</p><p translation-origin=\"off\">The <code>DynamicFormQuestionComponent</code> is responsible for rendering the details of an individual question based on values in the data-bound question object.\nThe form relies on a <a href=\"api/forms/FormGroupDirective\" title=\"API reference\"><code>[formGroup]</code> directive</a> to connect the template HTML to the underlying control objects.\nThe <code>DynamicFormQuestionComponent</code> creates form groups and populates them with controls defined in the question model, specifying display and validation rules.</p>\n\n<code-tabs>\n    <code-pane header=\"dynamic-form-question.component.html\" path=\"dynamic-form/src/app/dynamic-form-question.component.html\">\n&lt;div [formGroup]=\"form\"&gt;\n  &lt;label [attr.for]=\"question.key\"&gt;{{question.label}}&lt;/label&gt;\n\n  &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"question.controlType\"&gt;\n\n    &lt;input *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'textbox'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\"&gt;\n\n    &lt;select [id]=\"question.key\" *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'dropdown'\" [<a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>]=\"question.key\"&gt;\n      &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let opt of question.options\" [value]=\"opt.key\"&gt;{{opt.value}}&lt;/option&gt;\n    &lt;/select&gt;\n\n  &lt;/div&gt;\n\n  &lt;div class=\"errorMessage\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"!isValid\"&gt;{{question.label}} is required&lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form-question.component.ts\" path=\"dynamic-form/src/app/dynamic-form-question.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html'\n})\nexport class DynamicFormQuestionComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() question!: QuestionBase&lt;string&gt;;\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  get isValid() { return this.form.controls[this.question.key].valid; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><code>DynamicFormQuestionComponent</code> 的目標是展示模型中定義的各類問題。你現在只有兩類問題，但可以想象將來還會有更多。範本中的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 陳述式會決定要顯示哪種型別的問題。這裡用到了帶有 <a href=\"api/forms/FormControlName\" title=\"FormControlName 指令的 API Reference 參考\"><code>formControlName</code></a> 和<a href=\"api/forms/FormGroupDirective\" title=\"FormGroupDirective API 參考指南\"><code>formGroup</code></a> 選擇器的指令。這兩個指令都是在 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 中定義的。</p><p translation-origin=\"off\">The goal of the <code>DynamicFormQuestionComponent</code> is to present question types defined in your model.\nYou only have two types of questions at this point but you can imagine many more.\nThe <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> statement in the template determines which type of question to display.\nThe switch uses directives with the <a href=\"api/forms/FormControlName\" title=\"FormControlName directive API reference\"><code>formControlName</code></a> and <a href=\"api/forms/FormGroupDirective\" title=\"FormGroupDirective API reference\"><code>formGroup</code></a> selectors.\nBoth directives are defined in <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>.</p>\n\n<p><a id=\"questionnaire-data\"></a></p>\n<h3 id=\"supply-data\" translation-result=\"on\">提供資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#supply-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Supply data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#supply-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">還要另外一項服務來提供一組具體的問題，以便構建出一個單獨的表單。在本練習中，你將建立 <code>QuestionService</code> 以從硬編碼的範例資料中提供這組問題。在真實世界的應用中，該服務可能會從後端獲取資料。重點是，你可以完全透過 <code>QuestionService</code> 返回的物件來控制英雄的求職申請問卷。要想在需求發生變化時維護問卷，你只需要在 <code>questions</code> 陣列中新增、更新和刪除物件。</p><p translation-origin=\"off\">Another service is needed to supply a specific set of questions from which to build an individual form.\nFor this exercise you create the <code>QuestionService</code> to supply this array of questions from the hard-coded sample data.\nIn a real-world app, the service might fetch data from a backend system.\nThe key point, however, is that you control the hero job-application questions entirely through the objects returned from <code>QuestionService</code>.\nTo maintain the questionnaire as requirements change, you only need to add, update, and remove objects from the <code>questions</code> array.</p>\n\n<p translation-result=\"on\"><code>QuestionService</code> 以一個繫結到 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 的問題陣列的形式提供了一組問題。</p><p translation-origin=\"off\">The <code>QuestionService</code> supplies a set of questions in the form of an array bound to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> questions.</p>\n\n<code-example header=\"src/app/question.service.ts\" path=\"dynamic-form/src/app/question.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase } from './question-base';\nimport { TextboxQuestion } from './question-textbox';\nimport { of } from 'rxjs';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class QuestionService {\n\n  // TODO: get from a remote source of question metadata\n  getQuestions() {\n\n    const questions: QuestionBase&lt;string&gt;[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: '<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>',\n        order: 2\n      })\n    ];\n\n    return of(questions.sort((a, b) =&gt; a.order - b.order));\n  }\n}\n\n\n</code-example>\n<p><a id=\"dynamic-template\"></a></p>\n<h2 id=\"create-a-dynamic-form-template\" translation-result=\"on\">建立一個動態表單範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-dynamic-form-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create a dynamic form template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#create-a-dynamic-form-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>DynamicFormComponent</code> 元件是表單的入口點和主容器，它在範本中用 <code>&lt;app-dynamic-form&gt;</code> 表示。</p><p translation-origin=\"off\">The <code>DynamicFormComponent</code> component is the entry point and the main container for the form, which is represented using the <code>&lt;app-dynamic-form&gt;</code> in a template.</p>\n\n<p translation-result=\"on\"><code>DynamicFormComponent</code> 元件透過把每個問題都繫結到一個匹配 <code>DynamicFormQuestionComponent</code> 的 <code>&lt;app-question&gt;</code> 元素來渲染問題列表。</p><p translation-origin=\"off\">The <code>DynamicFormComponent</code> component presents a list of questions by binding each one to an <code>&lt;app-question&gt;</code> element that matches the <code>DynamicFormQuestionComponent</code>.</p>\n\n<code-tabs>\n    <code-pane header=\"dynamic-form.component.html\" path=\"dynamic-form/src/app/dynamic-form.component.html\">\n&lt;div&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\"&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let question of questions\" class=\"form-row\"&gt;\n      &lt;app-question [question]=\"question\" [form]=\"form\"&gt;&lt;/app-question&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-row\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"!form.valid\"&gt;Save&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n\n  &lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"payLoad\" class=\"form-row\"&gt;\n    &lt;strong&gt;Saved the following values&lt;/strong&gt;&lt;br&gt;{{payLoad}}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"dynamic-form.component.ts\" path=\"dynamic-form/src/app/dynamic-form.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a> } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\nimport { QuestionControlService } from './question-control.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [ QuestionControlService ]\n})\nexport class DynamicFormComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() questions: QuestionBase&lt;string&gt;[] | null = [];\n  form!: <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase&lt;string&gt;[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"display-the-form\" translation-result=\"on\">顯示表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#display-the-form\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Display the form<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#display-the-form\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要顯示動態表單的一個例項，<code>AppComponent</code> 外殼範本會把一個 <code>QuestionService</code> 返回的 <code>questions</code> 陣列傳給表單容器元件 <code>&lt;app-dynamic-form&gt;</code>。</p><p translation-origin=\"off\">To display an instance of the dynamic form, the <code>AppComponent</code> shell template passes the <code>questions</code> array returned by the <code>QuestionService</code> to the form container component, <code>&lt;app-dynamic-form&gt;</code>.</p>\n\n<code-example header=\"app.component.ts\" path=\"dynamic-form/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { QuestionService } from './question.service';\nimport { QuestionBase } from './question-base';\nimport { Observable } from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Job Application for Heroes&lt;/h2&gt;\n      &lt;app-dynamic-form [questions]=\"questions$ | async\"&gt;&lt;/app-dynamic-form&gt;\n    &lt;/div&gt;\n  `,\n  providers:  [QuestionService]\n})\nexport class AppComponent {\n  questions$: Observable&lt;QuestionBase&lt;any&gt;[]&gt;;\n\n  constructor(service: QuestionService) {\n    this.questions$ = service.getQuestions();\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">這個例子為英雄提供了一個工作申請表的模型，但是除了 <code>QuestionService</code> 返回的物件外，沒有涉及任何跟英雄有關的問題。這種模型和資料的分離，允許你為任何型別的調查表複用這些元件，只要它與這個<em>問題</em>物件模型相容即可。</p><p translation-origin=\"off\">The example provides a model for a job application for heroes, but there are no references to any specific hero question other than the objects returned by <code>QuestionService</code>.\nThis separation of model and data lets you repurpose the components for any type of survey, as long as it's compatible with the <em>question</em> object model.</p>\n\n<h3 id=\"ensuring-valid-data\" translation-result=\"on\">確保資料有效<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#ensuring-valid-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Ensuring valid data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#ensuring-valid-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">表單範本使用元資料的動態資料繫結來渲染表單，而不用做任何與具體問題有關的硬編碼。它動態添加了控制項元資料和驗證標準。</p><p translation-origin=\"off\">The form template uses dynamic data binding of metadata to render the form without making any hardcoded assumptions about specific questions.\nIt adds both control metadata and validation criteria dynamically.</p>\n\n<p translation-result=\"on\">要確保輸入有效，<em>就要</em>禁用 <em>“Save”</em> 按鈕，直到此表單處於有效狀態。當表單有效時，你可以單擊 <em>“Save”</em> 按鈕，該應用就會把表單的當前值渲染為 JSON。</p><p translation-origin=\"off\">To ensure valid input, the <em>Save</em> button is disabled until the form is in a valid state.\nWhen the form is valid, click <em>Save</em> and the application renders the current form values as JSON.</p>\n\n<p translation-result=\"on\">最終的表單如下圖所示。</p><p translation-origin=\"off\">The following figure shows the final form.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Dynamic-Form\" src=\"generated/images/guide/dynamic-form/dynamic-form.png\" width=\"316\" height=\"230\">\n</div>\n<h2 id=\"next-steps\" translation-result=\"on\">後續步驟<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-form#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">步驟</nt-wrapper><nt-wrapper translation-origin=\"off\">Steps</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳細資訊</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">不同型別的表單和控制項集合</nt-wrapper><nt-wrapper translation-origin=\"off\">Different types of forms and control collection</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">本課程展示瞭如何建構一個問卷，它只是一種動態表單。這個例子使用 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 來收集一組控制項。關於不同型別動態表單的範例，參閱在響應式表單中的<a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"用陣列建立動態表單\">建立動態表單</a>一節。那個例子還展示瞭如何使用 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 而不是 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 來收集一組控制項。</nt-wrapper><nt-wrapper translation-origin=\"off\">This tutorial shows how to build a questionnaire, which is just one kind of dynamic form. The example uses <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> to collect a set of controls. For an example of a different type of dynamic form, see the section <a href=\"guide/reactive-forms#creating-dynamic-forms\" title=\"Create dynamic forms with arrays\">Creating dynamic forms</a> in the Reactive Forms guide. That example also shows how to use <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> instead of <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> to collect a set of controls.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">驗證使用者輸入</nt-wrapper><nt-wrapper translation-origin=\"off\">Validating user input</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/reactive-forms#validating-form-input\" title=\"基本輸入驗證\">驗證表單輸入</a>部分介紹瞭如何在響應式表單中進行輸入驗證的基礎知識。<br><a href=\"guide/form-validation\" title=\"表單驗證指南\">表單驗證指南</a>更深入地介紹了該主題。</nt-wrapper><nt-wrapper translation-origin=\"off\">The section <a href=\"guide/reactive-forms#validating-form-input\" title=\"Basic input validation\">Validating form input</a> introduces the basics of how input validation works in reactive forms. <br> The <a href=\"guide/form-validation\" title=\"Form validation guide\">Form validation guide</a> covers the topic in more depth.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/forms-overview\n - guide/security\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/FormGroupDirective\n - api/forms/ReactiveFormsModule\n - api/forms/Validators\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/architecture\n - guide/bootstrapping\n - guide/dynamic-form#building-dynamic-forms\n - guide/dynamic-form#compose-dynamic-form-contents\n - guide/dynamic-form#compose-form-groups\n - guide/dynamic-form#create-a-dynamic-form-template\n - guide/dynamic-form#create-a-form-object-model\n - guide/dynamic-form#define-control-classes\n - guide/dynamic-form#display-the-form\n - guide/dynamic-form#enable-reactive-forms-for-your-project\n - guide/dynamic-form#ensuring-valid-data\n - guide/dynamic-form#next-steps\n - guide/dynamic-form#prerequisites\n - guide/dynamic-form#supply-data\n - guide/dynamic-form#為專案啟用響應式表單\n - guide/dynamic-form#建立一個動態表單範本\n - guide/dynamic-form#建立一個表單物件模型\n - guide/dynamic-form#前提條件\n - guide/dynamic-form#後續步驟\n - guide/dynamic-form#定義控制項類\n - guide/dynamic-form#提供資料\n - guide/dynamic-form#顯示表單\n - guide/dynamic-form#建構動態表單\n - guide/dynamic-form#確保資料有效\n - guide/dynamic-form#編寫動態表單內容\n - guide/dynamic-form#編寫表單組\n - guide/form-validation\n - guide/reactive-forms\n - guide/reactive-forms#creating-dynamic-forms\n - guide/reactive-forms#validating-form-input\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/dynamic-form.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/\n-->"}