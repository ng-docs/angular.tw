{"id":"guide/entry-components","title":"Entry components","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/entry-components.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"entry-components\" translation-result=\"on\">入口元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#entry-components\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"entry-componentslink\">Entry components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#entry-components\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"https://angular.cn/guide/ivy\">Ivy 渲染引擎</a>已棄用入口元件。有關更多資訊，請參見<a href=\"https://angular.cn/guide/deprecations\">“棄用的 API 和功能”</a>中的 <a href=\"https://angular.io/guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\">entryComponents 已棄用</a>。</p><p translation-origin=\"off\">Entry components are deprecated, for more information, see <a href=\"guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\">entryComponents deprecation</a> in the <a href=\"guide/deprecations\">Deprecated APIs and features</a>.</p>\n\n</div>\n<p translation-result=\"on\">從分類上說，入口元件是 Angular 命令式載入的任意元件（也就是說你沒有在範本中參考過它），\n你可以在 NgModule 中引導它，或把它包含在路由定義中來指定入口元件。</p><p translation-origin=\"off\">An entry component is any component that Angular loads imperatively, (which means you're not referencing it in the template), by type.\nYou specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">對比一下這兩種元件型別：有一類元件被包含在範本中，它們是宣告式載入的；另一類元件你會命令式載入它，這就是入口元件。</p><p translation-origin=\"off\">To contrast the two types of components, there are components which are included in the template, which are declarative.\nAdditionally, there are components which you load imperatively; that is, entry components.</p>\n\n</div>\n<p translation-result=\"on\">入口元件有兩種主要的型別：</p><p translation-origin=\"off\">There are two main kinds of entry components:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">引導用的根元件</p><p translation-origin=\"off\">The bootstrapped root component</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在路由定義中指定的元件</p><p translation-origin=\"off\">A component you specify in a route definition</p>\n\n</li>\n</ul>\n<h2 id=\"a-bootstrapped-entry-component\" translation-result=\"on\">引導用的入口元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#a-bootstrapped-entry-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"a-bootstrapped-entry-componentlink\">A bootstrapped entry component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#a-bootstrapped-entry-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面這個例子中指定了一個引導用元件 <code>AppComponent</code>，位於基本的 <code>app.module.ts</code> 中：</p><p translation-origin=\"off\">The following is an example of specifying a bootstrapped component, <code>AppComponent</code>, in a basic <code>app.module.ts</code>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] // bootstrapped entry component\n})\n\n</code-example>\n<p translation-result=\"on\">可引導元件是一個入口元件，Angular 會在引導過程中把它載入到 DOM 中。\n其它入口元件是在其它時機動態載入的，比如用路由器。</p><p translation-result=\"on\">Angular 會動態載入根元件 <code>AppComponent</code>，是因為它的型別作為引數傳給了 <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 函式。</p><p translation-origin=\"off\">A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch).\nOther entry components are loaded dynamically by other means, such as with the router.</p>\n\n<p translation-origin=\"off\">Angular loads a root <code>AppComponent</code> dynamically because it's listed by type in <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">元件也可以在該模組的 <code>ngDoBootstrap()</code> 方法中進行命令式引導。\n<code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 屬性告訴編譯器，這裡是一個入口元件，它應該產生程式碼，來使用這個元件引導該應用。</p><p translation-origin=\"off\">A component can also be bootstrapped imperatively in the module's <code>ngDoBootstrap()</code> method.\nThe <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</p>\n\n</div>\n<p translation-result=\"on\">引導用的元件必須是入口元件，因為引導過程是命令式的，所以它需要一個入口元件。</p><p translation-origin=\"off\">A bootstrapped component is necessarily an entry component because bootstrapping is an imperative process, thus it needs to have an entry component.</p>\n\n<h2 id=\"a-routed-entry-component\" translation-result=\"on\">路由到的入口元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#a-routed-entry-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"a-routed-entry-componentlink\">A routed entry component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#a-routed-entry-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">入口元件的第二種型別出現在路由定義中，就像這樣：</p><p translation-origin=\"off\">The second kind of entry component occurs in a route definition like this:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">路由定義使用元件型別參考了一個元件：<code>component: CustomerListComponent</code>。</p><p translation-result=\"on\">所有路由元件都必須是入口元件。這需要你把同一個元件新增到兩個地方（路由中和 <code>entryComponents</code> 中），但編譯器足夠聰明，可以識別出這裡是一個路由定義，因此它會自動把這些路由元件新增到 <code>entryComponents</code> 中。</p><p translation-origin=\"off\">A route definition refers to a component by its type with <code>component: CustomerListComponent</code>.</p>\n\n<p translation-origin=\"off\">All router components must be entry components.\nBecause this would require you to add the component in two places (router and <code>entryComponents</code>) the Compiler is smart enough to recognize that this is a router definition and automatically add the router component into <code>entryComponents</code>.</p>\n\n<h2 id=\"the-entrycomponents-array\" translation-result=\"on\"><code>entryComponents</code> 陣列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#the-entrycomponents-array\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-entrycomponents-arraylink\">The <code>entryComponents</code> array<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#the-entrycomponents-array\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">   從支援 Ivy 的 9.0.0 開始，<code>entryComponents</code> 屬性就不再需要了，參見<a href=\"guide/deprecations#entryComponents\">棄用指南</a>。</p><p translation-origin=\"off\">Since 9.0.0 with Ivy, the <code>entryComponents</code> property is no longer necessary.\nSee <a href=\"guide/deprecations#entryComponents\">deprecations guide</a>.</p>\n\n</div>\n<p translation-result=\"on\">雖然 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器具有一個 <code>entryComponents</code> 陣列，但大多數情況下你不用顯式設定入口元件，因為 Angular 會自動把 <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> 中的元件以及路由定義中的元件新增到入口元件中。\n雖然這兩種機制足夠自動新增大多數入口元件，但如果你要用其它方式根據型別來命令式的引導或動態載入某個元件，你就必須把它們顯式新增到 <code>entryComponents</code> 中了。</p><p translation-origin=\"off\">Though the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator has an <code>entryComponents</code> array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in <code>@<a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">NgModule.bootstrap</a></code> and those in route definitions to entry components automatically.\nThough these two mechanisms account for most entry components, if your application happens to bootstrap or dynamically load a component by type imperatively, you must add it to <code>entryComponents</code> explicitly.</p>\n\n<h3 id=\"entrycomponents-and-the-compiler\" translation-result=\"on\"><code>entryComponents</code> 和編譯器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#entrycomponents-and-the-compiler\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"entrycomponents-and-the-compilerlink\"><code>entryComponents</code> and the compiler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#entrycomponents-and-the-compiler\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">對於生產環境的應用，你總是希望載入儘可能小的程式碼。\n這些程式碼應該只包含你實際使用到的類，並且排除那些從未用到的元件。因此，Angular 編譯器只會為那些可以從 <code>entryComponents</code> 中直接或間接存取到的元件產生程式碼。\n這意味著，僅僅往 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 中新增更多參考，並不能表達出它們在最終的程式碼套件中是必要的。</p><p translation-result=\"on\">實際上，很多庫宣告和匯出的元件都是你從未用過的。\n比如，Material Design 庫會匯出其中的所有元件，因為它不知道你會用哪一個。然而，顯然你也不打算全都用上。\n對於那些你沒有參考過的，搖樹最佳化工具就會把這些元件從最終的程式碼套件中摘出去。</p><p translation-result=\"on\">如果一個元件既不是<em>入口元件</em>也沒有在範本中使用過，搖樹最佳化工具就會把它扔出去。\n所以，最好只新增那些真正的入口元件，以便讓應用盡可能保持精簡。</p><p translation-origin=\"off\">For production applications you want to load the smallest code possible.\nThe code should contain only the classes that you actually need and exclude components that are never used.\nFor this reason, the Angular compiler only generates code for components which are reachable from the <code>entryComponents</code>; This means that adding more references to <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> does not imply that they will necessarily be included in the final bundle.</p>\n\n<p translation-origin=\"off\">In fact, many libraries declare and export components you'll never use.\nFor example, a material design library will export all components because it doesn't know which ones you will use.\nHowever, it is unlikely that you will use them all.\nFor the ones you don't reference, the tree shaker drops these components from the final code package.</p>\n\n<p translation-origin=\"off\">If a component isn't an <em>entry component</em> and isn't found in a template, the tree shaker will throw it away.\nSo, it's best to add only the components that are truly entry components to help keep your app as trim as possible.</p>\n\n<h2 id=\"more-on-angular-modules\" translation-result=\"on\">關於 Angular 模組的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#more-on-angular-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"more-on-angular-moduleslink\">More on Angular modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entry-components#more-on-angular-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/module-types\">NgModule 的分類</a></p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of NgModules</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/lazy-loading-ngmodules\">使用 Angular 路由器延遲載入模組</a></p><p translation-origin=\"off\"><a href=\"guide/lazy-loading-ngmodules\">Lazy Loading Modules with the Angular Router</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/providers\">服務提供者</a>。</p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/ngmodule-faq\">NgModule 常見問題</a>.</p><p translation-origin=\"off\"><a href=\"guide/ngmodule-faq\">NgModules FAQ</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/DoBootstrap\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodule-vs-jsmodule\n - guide/ngmodules\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - api/router/Routes\n - guide/deprecations\n - guide/deprecations#entryComponents\n - guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\n - guide/entry-components#a-bootstrapped-entry-component\n - guide/entry-components#a-routed-entry-component\n - guide/entry-components#entry-components\n - guide/entry-components#entrycomponents-and-the-compiler\n - guide/entry-components#entrycomponents-和編譯器\n - guide/entry-components#entrycomponents-陣列\n - guide/entry-components#more-on-angular-modules\n - guide/entry-components#the-entrycomponents-array\n - guide/entry-components#入口元件\n - guide/entry-components#關於-angular-模組的更多知識\n - guide/entry-components#引導用的入口元件\n - guide/entry-components#路由到的入口元件\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-faq\n - guide/providers\n - https://angular.cn/guide/deprecations\n - https://angular.cn/guide/ivy\n - https://angular.io/guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/entry-components.md?message=docs%3A%20請簡述你的修改...\n-->"}