{"id":"guide/testing-attribute-directives","title":"Testing Attribute Directives","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/testing-attribute-directives.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <p><a id=\"attribute-directive\"></a></p>\n<h1 id=\"testing-attribute-directives\" translation-result=\"on\">測試屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-attribute-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Testing Attribute Directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-attribute-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><em>屬性型指令</em>會修改元素、元件或其他指令的行為。它的名字反映了該指令的應用方式：作為宿主元素的一個屬性。</p><p translation-origin=\"off\">An <em>attribute directive</em> modifies the behavior of an element, component or another directive.\nIts name reflects the way the directive is applied: as an attribute on a host element.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你要試驗本指南中所講的應用，請<live-example name=\"testing\" nodownload=\"\">在瀏覽器中執行它</live-example>或<live-example name=\"testing\" downloadonly=\"\">下載並在本地執行它</live-example>。</p><p translation-origin=\"off\">If you'd like to experiment with the application that this guide describes, <live-example name=\"testing\" nodownload=\"\">run it in your browser</live-example> or <live-example name=\"testing\" downloadonly=\"\">download and run it locally</live-example>.</p>\n\n</div>\n<h2 id=\"testing-the-highlightdirective\" translation-result=\"on\">測試 <code>HighlightDirective</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-the-highlightdirective\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Testing the <code>HighlightDirective</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-attribute-directives#testing-the-highlightdirective\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本範例應用的 <code>HighlightDirective</code> 會根據資料繫結中的顏色或預設顏色（淺灰）來設定元素的背景色。它還會把該元素的自訂屬性（<code>customProperty</code>）設定為 <code>true</code>，當然這除了示範本技術之外別無它用。</p><p translation-origin=\"off\">The sample application's <code>HighlightDirective</code> sets the background color of an element based on either a data bound color or a default color (lightgray).\nIt also sets a custom property of the element (<code>customProperty</code>) to <code>true</code> for no reason other than to show that it can.</p>\n\n<code-example header=\"app/shared/highlight.directive.ts\" path=\"testing/src/app/shared/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[highlight]' })\n/**\n * Set backgroundColor for the attached element to highlight color\n * and set the element's customProperty to true\n */\nexport class HighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  defaultColor =  'rgb(211, 211, 211)'; // lightgray\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('highlight') bgColor = '';\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n    el.nativeElement.style.customProperty = true;\n  }\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.bgColor || this.defaultColor;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">它在整個應用中都用到過，也許最簡單的是在 <code>AboutComponent</code> 中：</p><p translation-origin=\"off\">It's used throughout the application, perhaps most simply in the <code>AboutComponent</code>:</p>\n\n<code-example header=\"app/about/about.component.ts\" path=\"testing/src/app/about/about.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n  &lt;h2 highlight=\"skyblue\"&gt;About&lt;/h2&gt;\n  &lt;h3&gt;Quote of the day:&lt;/h3&gt;\n  &lt;twain-quote&gt;&lt;/twain-quote&gt;\n  `\n})\nexport class AboutComponent { }\n\n\n</code-example>\n<p translation-result=\"on\">要想在 <code>AboutComponent</code> 中測試 <code>HighlightDirective</code> 的特定用法，只需要瀏覽<a href=\"guide/testing-components-scenarios\">元件測試場景</a>中的<a href=\"guide/testing-components-scenarios#nested-component-tests\">“巢狀(Nesting)元件測試”</a>一節中提到的各種技巧。</p><p translation-origin=\"off\">Testing the specific use of the <code>HighlightDirective</code> within the <code>AboutComponent</code> requires only the techniques explored in the <a href=\"guide/testing-components-scenarios#nested-component-tests\">\"Nested component tests\"</a> section of <a href=\"guide/testing-components-scenarios\">Component testing scenarios</a>.</p>\n\n<code-example header=\"app/about/about.component.spec.ts\" path=\"testing/src/app/about/about.component.spec.ts\" region=\"tests\">\nbeforeEach(() =&gt; {\n  fixture = TestBed.configureTestingModule({\n    declarations: [ AboutComponent, HighlightDirective ],\n    schemas:      [ <a href=\"api/core/CUSTOM_ELEMENTS_SCHEMA\" class=\"code-anchor\">CUSTOM_ELEMENTS_SCHEMA</a> ]\n  })\n  .createComponent(AboutComponent);\n  fixture.detectChanges(); // initial binding\n});\n\nit('should have skyblue &lt;h2&gt;', () =&gt; {\n  const h2: HTMLElement = fixture.nativeElement.querySelector('h2');\n  const bgColor = h2.style.backgroundColor;\n  expect(bgColor).toBe('skyblue');\n});\n\n</code-example>\n<p translation-result=\"on\">但是，測試單個使用案例不太可能涉及指令的全部能力。要找到並測試那些使用了該指令的所有元件會很乏味、很脆弱，而且幾乎不可能做到完全覆蓋。</p><p translation-origin=\"off\">However, testing a single use case is unlikely to explore the full range of a directive's capabilities.\nFinding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</p>\n\n<p translation-result=\"on\"><em>純類測試</em>可能會有一點幫助，但像這種屬性型指令往往會操縱 DOM。孤立的單元測試不會觸及 DOM，因此也無法給人帶來對指令功效的信心。</p><p translation-origin=\"off\"><em>Class-only tests</em> might be helpful, but attribute directives like this one tend to manipulate the DOM.\nIsolated unit tests don't touch the DOM and, therefore, do not inspire confidence in the directive's efficacy.</p>\n\n<p translation-result=\"on\">更好的解決方案是建立一個人工測試元件來示範應用該指令的所有方法。</p><p translation-origin=\"off\">A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</p>\n\n<code-example header=\"app/shared/highlight.directive.spec.ts (TestComponent)\" path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"test-component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n  &lt;h2 highlight=\"yellow\"&gt;Something Yellow&lt;/h2&gt;\n  &lt;h2 highlight&gt;The Default (Gray)&lt;/h2&gt;\n  &lt;h2&gt;No Highlight&lt;/h2&gt;\n  &lt;input #box [highlight]=\"box.value\" value=\"cyan\"/&gt;`\n})\nclass TestComponent { }\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"HighlightDirective spec in action\" src=\"generated/images/guide/testing/highlight-directive-spec.png\" width=\"200\" height=\"159\">\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">這個 <code>&lt;input&gt;</code> 使用案例將 <code>HighlightDirective</code> 繫結到輸入框中顏色值的名稱。初始值是單詞“cyan”，應該把它設為輸入框的背景顏色。</p><p translation-origin=\"off\">The <code>&lt;input&gt;</code> case binds the <code>HighlightDirective</code> to the name of a color value in the input box.\nThe initial value is the word \"cyan\" which should be the background color of the input box.</p>\n\n</div>\n<p translation-result=\"on\">下面是對該元件的一些測試：</p><p translation-origin=\"off\">Here are some tests of this component:</p>\n\n<code-example header=\"app/shared/highlight.directive.spec.ts (selected tests)\" path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"selected-tests\">\nbeforeEach(() =&gt; {\n  fixture = TestBed.configureTestingModule({\n    declarations: [ HighlightDirective, TestComponent ]\n  })\n  .createComponent(TestComponent);\n\n  fixture.detectChanges(); // initial binding\n\n  // all elements with an attached HighlightDirective\n  des = fixture.debugElement.queryAll(By.directive(HighlightDirective));\n\n  // the h2 without the HighlightDirective\n  bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));\n});\n\n// color tests\nit('should have three highlighted elements', () =&gt; {\n  expect(des.length).toBe(3);\n});\n\nit('should color 1st &lt;h2&gt; background \"yellow\"', () =&gt; {\n  const bgColor = des[0].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe('yellow');\n});\n\nit('should color 2nd &lt;h2&gt; background w/ default color', () =&gt; {\n  const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;\n  const bgColor = des[1].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe(dir.defaultColor);\n});\n\nit('should bind &lt;input&gt; background to value color', () =&gt; {\n  // easier to work with nativeElement\n  const input = des[2].nativeElement as HTMLInputElement;\n  expect(input.style.backgroundColor)\n    .withContext('initial backgroundColor')\n    .toBe('cyan');\n\n  input.value = 'green';\n\n  // Dispatch a DOM event so that Angular responds to the input value change.\n  input.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n  fixture.detectChanges();\n\n  expect(input.style.backgroundColor)\n    .withContext('changed backgroundColor')\n    .toBe('green');\n});\n\n\nit('bare &lt;h2&gt; should not have a customProperty', () =&gt; {\n  expect(bareH2.properties['customProperty']).toBeUndefined();\n});\n\n</code-example>\n<p translation-result=\"on\">一些技巧值得注意：</p><p translation-origin=\"off\">A few techniques are noteworthy:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>By.directive</code> 謂詞是一種獲取那些<em>不知道型別</em>但都附有本指令的元素的好辦法。</p><p translation-origin=\"off\">The <code>By.directive</code> predicate is a great way to get the elements that have this directive <em>when their element types are unknown</em></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>By.css('h2:not([highlight])')</code> 中的 <a href=\"https://developer.mozilla.org/docs/Web/CSS/:not\"><code>:not</code> 偽類</a>可以幫助你找到那些<em>沒有</em>該指令的 <code>&lt;h2&gt;</code> 元素。<code>By.css('*:not([highlight])')</code> 可以找到沒有該指令的<em>任意</em>元素。</p><p translation-origin=\"off\">The <a href=\"https://developer.mozilla.org/docs/Web/CSS/:not\"><code>:not</code> pseudo-class</a> in <code>By.css('h2:not([highlight])')</code> helps find <code>&lt;h2&gt;</code> elements that <em>do not</em> have the directive.\n<code>By.css('*:not([highlight])')</code> finds <em>any</em> element that does not have the directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/core/DebugElement#styles\" class=\"code-anchor\">DebugElement.styles</a></code> 提供了對元素樣式的存取，即使沒有真正的瀏覽器也是如此，這要歸功於 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 提供的抽象。但是，如果 <code>nativeElement</code> 顯得比使用其抽象版本更容易或更清晰，那就把它暴露出來。</p><p translation-origin=\"off\"><code><a href=\"api/core/DebugElement#styles\" class=\"code-anchor\">DebugElement.styles</a></code> affords access to element styles even in the absence of a real browser, thanks to the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> abstraction.\nBut feel free to exploit the <code>nativeElement</code> when that seems easier or more clear than the abstraction.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">Angular 會在指令宿主元素的注入器中新增上該指令。對預設顏色的測試使用第二個 <code>&lt;h2&gt;</code> 上的注入器來獲取它的 <code>HighlightDirective</code> 例項及其 <code>defaultColor</code>。</p><p translation-origin=\"off\">Angular adds a directive to the injector of the element to which it is applied.\nThe test for the default color uses the injector of the second <code>&lt;h2&gt;</code> to get its <code>HighlightDirective</code> instance and its <code>defaultColor</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">DebugElement.properties</a></code> 允許存取本指令設定的自訂屬性。</p><p translation-origin=\"off\"><code><a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">DebugElement.properties</a></code> affords access to the artificial custom property that is set by the directive</p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/testing\n-->\n<!-- links from this doc:\n - api/core/CUSTOM_ELEMENTS_SCHEMA\n - api/core/Component\n - api/core/DebugElement\n - api/core/DebugElement#properties\n - api/core/DebugElement#styles\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Input\n - api/core/OnChanges\n - api/router/Event\n - guide/testing-attribute-directives#testing-attribute-directives\n - guide/testing-attribute-directives#testing-the-highlightdirective\n - guide/testing-attribute-directives#測試-highlightdirective\n - guide/testing-attribute-directives#測試屬性型指令\n - guide/testing-components-scenarios\n - guide/testing-components-scenarios#nested-component-tests\n - https://developer.mozilla.org/docs/Web/CSS/:not\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/testing-attribute-directives.md?message=docs%3A%20請簡述你的修改...\n-->"}