{"id":"guide/using-libraries","title":"Usage of Angular libraries published to npm","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/using-libraries.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"usage-of-angular-libraries-published-to-npm\" translation-result=\"on\">使用已釋出到 npm 的 Angular 庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#usage-of-angular-libraries-published-to-npm\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Usage of Angular libraries published to npm<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#usage-of-angular-libraries-published-to-npm\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">當建構 Angular 應用時，你可以從精品第一方庫，比如 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a>，以及豐富的第三方庫生態系統中獲益。參閱 <a href=\"resources\" title=\"Explore Angular Resources | Angular\">Angular 資源集</a>頁面，瞭解最常用的函式庫連結。</p><p translation-origin=\"off\">When you build your Angular application, take advantage of sophisticated first-party libraries, as well as rich ecosystem of third-party libraries.\n<a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a> is an example of a sophisticated first-party library.\nFor links to the most popular libraries, see <a href=\"resources\" title=\"Explore Angular Resources | Angular\">Angular Resources</a>.</p>\n\n<h2 id=\"install-libraries\" translation-result=\"on\">安裝庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#install-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Install libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#install-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">這些庫都是作為 <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm 套件</a>釋出的，它們通常都帶有一些與 Angular CLI 整合好的原理圖。要把可複用的函式庫程式碼整合到應用中，你需要安裝該軟體包並在使用時匯入它提供的功能。對於大多數已釋出的 Angular 庫，你可以使用 Angular CLI 的 <code>ng add &lt;lib_name&gt;</code> 命令。</p><p translation-origin=\"off\">Libraries are published as <a href=\"guide/npm-packages\" title=\"Workspace npm dependencies | Angular\">npm packages</a>, usually together with schematics that integrate them with the Angular CLI.\nTo integrate reusable library code into an application, you need to install the package and import the provided functionality in the location you use it.\nFor most published Angular libraries, use the <code>ng add &lt;lib_name&gt;</code> Angular CLI command.</p>\n\n<p translation-result=\"on\">Angular CLI 的 <code>ng add</code> 命令使用包管理器來安裝庫套件，並呼叫該套件中的原理圖在專案程式碼中的新增腳手架。這些包管理器包括 <a href=\"https://www.npmjs.com\" title=\"npm\">npm</a> 或 <a href=\"https://yarnpkg.com\" title=\" Yarn\">yarn</a>。專案程式碼中的額外腳手架包括 import 陳述式、fonts 和 themes。</p><p translation-origin=\"off\">The <code>ng add</code> Angular CLI command uses a package manager to install the library package and invokes schematics that are included in the package to other scaffolding within the project code.\nExamples of package managers include <a href=\"https://www.npmjs.com\" title=\"npm\">npm</a> or <a href=\"https://yarnpkg.com\" title=\" Yarn\">yarn</a>.\nAdditional scaffolding within the project code includes import statements, fonts, and themes.</p>\n\n<p translation-result=\"on\">已釋出的函式庫通常會提供一個 <code>README</code> 檔案或其它文件來介紹如何把該庫新增到你的應用中。例子可參閱 <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a> 文件。</p><p translation-origin=\"off\">A published library typically provides a <code>README</code> file or other documentation on how to add that library to your application.\nFor an example, see the <a href=\"https://material.angular.io\" title=\"Angular Material | Angular\">Angular Material</a> documentation.</p>\n\n<h3 id=\"library-typings\" translation-result=\"on\">庫的型別資訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#library-typings\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Library typings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#library-typings\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">通常，庫套件中會在 <code>.d.ts</code> 檔案中包含型別資訊。參閱 <code>node_modules/@angular/material</code> 中的例子。如果庫套件中沒有包含型別資訊並且你的 IDE 報錯，你可能需要安裝與該庫關聯的 <code>@types/&lt;lib_name&gt;</code> 套件。</p><p translation-origin=\"off\">Typically, library packages include typings in <code>.d.ts</code> files; see examples in <code>node_modules/@angular/material</code>.\nIf the package of your library does not include typings and your IDE complains, you might need to install the <code>@types/&lt;lib_name&gt;</code> package with the library.</p>\n\n<p translation-result=\"on\">比如，假設你有一個名為 <code>d3</code> 的函式庫：</p><p translation-origin=\"off\">For example, suppose you have a library named <code>d3</code>:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install d3 --save\nnpm install @types/d3 --save-dev\n\n</code-example>\n<p translation-result=\"on\">已安裝到工作區中的 <code>@types/</code> 套件中所定義的型別，會自動新增到使用該庫的專案的 TypeScript 配置檔案中。TypeScript 預設就會在 <code>node_modules/@types</code> 資料夾中查詢型別，所以你不必單獨新增每一個類別型套件。</p><p translation-origin=\"off\">Types defined in a <code>@types/</code> package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library.\nTypeScript looks for types in the <code>node_modules/@types</code> directory by default, so you do not have to add each type package individually.</p>\n\n<p translation-result=\"on\">如果某個庫沒有 <code>@types/</code> 型別資訊，你仍然可以手動為它新增一些型別資訊。為此你要：</p><p translation-origin=\"off\">If a library does not have typings available at <code>@types/</code>, you may use it by manually adding typings for it.\nTo do this:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>src/</code> 資料夾中建立一個 <code>typings.d.ts</code> 檔案。該檔案會自動包含在全域型別定義中。</p><p translation-origin=\"off\">Create a <code>typings.d.ts</code> file in your <code>src/</code> directory.\nThis file is automatically included as global type definition.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>src/typings.d.ts</code> 中新增如下程式碼。</p><p translation-origin=\"off\">Add the following code in <code>src/typings.d.ts</code>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare module 'host' {\n  export interface <a href=\"api/core/Host\" class=\"code-anchor\">Host</a> {\n    protocol?: string;\n    hostname?: string;\n    pathname?: string;\n  }\n  export function parse(url: string, queryString?: string): <a href=\"api/core/Host\" class=\"code-anchor\">Host</a>;\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在使用該庫的元件或檔案中，新增如下程式碼。</p><p translation-origin=\"off\">In the component or file that uses the library, add the following code:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as host from 'host';\nconst parsedUrl = host.parse('https://angular.io');\nconsole.log(parsedUrl.hostname);\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">按需定義更多型別。</p><p translation-origin=\"off\">Define more typings as needed.</p>\n\n<h2 id=\"updating-libraries\" translation-result=\"on\">更新這些庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#updating-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Updating libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#updating-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">庫的釋出者可以對這些庫進行更新，而這些庫也有自己的依賴，所有依賴都需要保持最新。要檢查已安裝庫的更新，請使用 <a href=\"cli/update\" title=\"ng update | CLI |Angular\"><code>ng update</code> 命令</a>。</p><p translation-origin=\"off\">A library is able to be updated by the publisher, and also has individual dependencies which need to be kept current.\nTo check for updates to your installed libraries, use the <a href=\"cli/update\" title=\"ng update | CLI |Angular\"><code>ng update</code></a> Angular CLI command.</p>\n\n<p translation-result=\"on\">使用 <code>ng update &lt;lib_name&gt;</code> 命令來單獨更新某個庫的版本。Angular CLI 會檢查庫中最新發布的版本，如果最新版本比你已安裝的版本新，就會下載它並更新你的 <code>package.json</code> 以匹配最新版本。</p><p translation-origin=\"off\">Use <code>ng update &lt;lib_name&gt;</code> Angular CLI command to update individual library versions.\nThe Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your <code>package.json</code> to match the latest version.</p>\n\n<p translation-result=\"on\">如果要把 Angular 更新到新版本，你需要確保所用的函式庫都是最新的。如果庫之間相互依賴，你可能還要按特定的順序更新它們。請參閱 <a href=\"https://update.angular.io\" title=\"Angular Update Guide | Angular\">Angular 升級指南</a>以獲取幫助。</p><p translation-origin=\"off\">When you update Angular to a new version, you need to make sure that any libraries you are using are current.\nIf libraries have interdependencies, you might have to update them in a particular order.\nSee the <a href=\"https://update.angular.io\" title=\"Angular Update Guide | Angular\">Angular Update Guide</a> for help.</p>\n\n<h2 id=\"adding-a-library-to-the-runtime-global-scope\" translation-result=\"on\">把某個庫新增到執行時的全域範圍中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#adding-a-library-to-the-runtime-global-scope\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding a library to the runtime global scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#adding-a-library-to-the-runtime-global-scope\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果未將老式 JavaScript 庫匯入應用程式，你可以將其新增到執行時全域範圍並載入它，就像將其新增到 script 標記中一樣。使用工作區建構配置檔案 <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> 中此建構目標的 <code>scripts</code> 和 <code>styles</code> 選項，配置 Angular CLI 以便在建構時執行此操作。</p><p translation-origin=\"off\">If a legacy JavaScript library is not imported into an application, you may add it to the runtime global scope and load it as if it was added in a script tag.\nConfigure the Angular CLI to do this at build time using the <code>scripts</code> and <code>styles</code> options of the build target in the <a href=\"guide/workspace-config\" title=\"Angular workspace configuration | Angular\"><code>angular.json</code></a> workspace build configuration file.</p>\n\n<p translation-result=\"on\">比如，要使用 <a href=\"https://getbootstrap.com/docs/4.0/getting-started/introduction\" title=\"Introduction | Bootstrap\">Bootstrap 4</a> 庫</p><p translation-origin=\"off\">For example, to use the <a href=\"https://getbootstrap.com/docs/4.0/getting-started/introduction\" title=\"Introduction | Bootstrap\">Bootstrap 4</a> library</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用 npm 包管理器安裝庫和相關的依賴項：</p><p translation-origin=\"off\">Install the library and the associated dependencies using the npm package manager:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install jquery --save\nnpm install popper.js --save\nnpm install bootstrap --save\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>angular.json</code> 配置檔案中，把關聯的指令碼檔案新增到 \"scripts\" 陣列中：</p><p translation-origin=\"off\">In the <code>angular.json</code> configuration file, add the associated script files to the <code>scripts</code> array:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n\"scripts\": [\n  \"node_modules/jquery/dist/jquery.slim.js\",\n  \"node_modules/popper.js/dist/umd/popper.js\",\n  \"node_modules/bootstrap/dist/js/bootstrap.js\"\n],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把 <code>bootstrap.css</code> 檔案新增到 \"styles\" 陣列中：</p><p translation-origin=\"off\">Add the <code>bootstrap.css</code> CSS file to the <code>styles</code> array:</p>\n\n<code-example format=\"css\" language=\"css\">\n\n\"styles\": [\n  \"node_modules/bootstrap/dist/css/bootstrap.css\",\n  \"src/styles.css\"\n],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">執行或重啟 <code>ng serve</code>，看看你的應用是否正在使用 Bootstrap 4。</p><p translation-origin=\"off\">Run or restart the <code>ng serve</code> Angular CLI command to see Bootstrap 4 work in your application.</p>\n\n</li>\n</ol>\n<h3 id=\"using-runtime-global-libraries-inside-your-app\" translation-result=\"on\">在你的應用中使用執行時全域庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#using-runtime-global-libraries-inside-your-app\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using runtime-global libraries inside your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#using-runtime-global-libraries-inside-your-app\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過 “scripts” 陣列匯入某個庫之後，<strong>不要</strong>在 TypeScript 程式碼中再次使用 import 陳述式匯入它。以下程式碼片段是一個範例匯入陳述式。</p><p translation-origin=\"off\">After you import a library using the \"scripts\" array, do <strong>not</strong> import it using an import statement in your TypeScript code.\nThe following code snippet is an example import statement.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport * as $ from 'jquery';\n\n</code-example>\n<p translation-result=\"on\">如果你使用 import 陳述式匯入它，你將擁有該庫的兩個不同副本：一個作為全域庫匯入，另一個作為模組匯入。這對於帶有外掛的函式庫來說尤其糟糕，比如 JQuery，因為每個副本都包含不同的外掛。</p><p translation-origin=\"off\">If you import it using import statements, you have two different copies of the library: one imported as a global library, and one imported as a module.\nThis is especially bad for libraries with plugins, like JQuery, because each copy includes different plugins.</p>\n\n<p translation-result=\"on\">相反，執行 <code>npm install @types/jquery</code> Angular CLI 命令為你的函式庫下載型別資訊，然後按照庫的安裝步驟進行操作。這樣你就可以存取該庫公開的全域變量了。</p><p translation-origin=\"off\">Instead, run the <code>npm install @types/jquery</code> Angular CLI command to download typings for your library and then follow the library installation steps.\nThis gives you access to the global variables exposed by that library.</p>\n\n<h3 id=\"defining-typings-for-runtime-global-libraries\" translation-result=\"on\">定義執行時全域庫的型別資訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#defining-typings-for-runtime-global-libraries\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Defining typings for runtime-global libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/using-libraries#defining-typings-for-runtime-global-libraries\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你要用的全域庫沒有全域型別資訊，就可以在 <code>src/typings.d.ts</code> 中手動宣告它們。</p><p translation-origin=\"off\">If the global library you need to use does not have global typings, you can declare them manually as <code>any</code> in <code>src/typings.d.ts</code>.</p>\n\n<p translation-result=\"on\">比如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\ndeclare var libraryName: any;\n\n</code-example>\n<p translation-result=\"on\">有些指令碼擴充了其它庫，比如 JQuery 外掛：</p><p translation-origin=\"off\">Some scripts extend other libraries; for instance with JQuery plugins:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n$('.test').myPlugin();\n\n</code-example>\n<p translation-result=\"on\">在這種情況下，所安裝的 <code>@types/jquery</code> 就不包含 <code>myPlugin</code>，所以你需要在 <code>src/typings.d.ts</code> 中新增一個介面。比如：</p><p translation-origin=\"off\">In this case, the installed <code>@types/jquery</code> does not include <code>myPlugin</code>, so you need to add an interface in <code>src/typings.d.ts</code>.\nFor example:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\ninterface JQuery {\n  myPlugin(options?: any): any;\n}\n\n</code-example>\n<p translation-result=\"on\">如果不為這個由指令碼定義的擴充新增介面，IDE 就會顯示錯誤：</p><p translation-origin=\"off\">If you do not add the interface for the script-defined extension, your IDE shows an error:</p>\n\n<code-example format=\"none\" language=\"none\">\n\n[TS][Error] Property 'myPlugin' does not exist on type 'JQuery'\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：1/5/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/libraries\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/core/Host\n - cli/update\n - guide/npm-packages\n - guide/using-libraries#adding-a-library-to-the-runtime-global-scope\n - guide/using-libraries#defining-typings-for-runtime-global-libraries\n - guide/using-libraries#install-libraries\n - guide/using-libraries#library-typings\n - guide/using-libraries#updating-libraries\n - guide/using-libraries#usage-of-angular-libraries-published-to-npm\n - guide/using-libraries#using-runtime-global-libraries-inside-your-app\n - guide/using-libraries#使用已釋出到-npm-的-angular-庫\n - guide/using-libraries#在你的應用中使用執行時全域庫\n - guide/using-libraries#安裝庫\n - guide/using-libraries#定義執行時全域庫的型別資訊\n - guide/using-libraries#庫的型別資訊\n - guide/using-libraries#把某個庫新增到執行時的全域範圍中\n - guide/using-libraries#更新這些庫\n - guide/workspace-config\n - resources\n - https://getbootstrap.com/docs/4.0/getting-started/introduction\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/using-libraries.md?message=docs%3A%20請簡述你的修改...\n - https://material.angular.io\n - https://update.angular.io\n - https://www.npmjs.com\n - https://yarnpkg.com\n-->"}