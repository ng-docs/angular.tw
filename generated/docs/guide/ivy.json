{"id":"guide/ivy","title":"Angular Ivy","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/aio/aio/content/guide/ivy.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angular-ivy\" translation-result=\"on\">Angular Ivy ['aɪvɪ]（常春藤）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#angular-ivy\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"angular-ivy\">Angular Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#angular-ivy\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Ivy 是 Angular <a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\">下一代編譯和渲染管道</a>的代號。\n從 Angular 的版本 9 開始，這個新的編譯器和執行時指令集就代替了老的編譯器和執行時（即檢視引擎 View Engine）成為了預設值。</p><p translation-origin=\"off\">Ivy is the code name for Angular's <a href=\"https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\">next-generation compilation and rendering pipeline</a>.\nWith the version 9 release of Angular, the new compiler and runtime instructions are used by default instead of the older compiler and runtime, known as View Engine.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要想了解此<a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\">編譯器</a>和<a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\">執行時</a>的更多資訊，請參閱我們團隊的影片。</p><p translation-origin=\"off\">Learn more about the <a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\">Compiler</a> and <a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\">Runtime</a> in these videos from our team.</p>\n\n</div>\n<a id=\"aot-and-ivy\"></a>\n<h2 id=\"aot-and-ivy\" translation-result=\"on\">AOT 和 Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#aot-and-ivy\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"aot-and-ivy\">AOT and Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#aot-and-ivy\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Ivy 的 AOT 編譯速度更快，應該預設使用。在 <code>angular.json</code> 工作區配置檔案中，將專案的預設建構選項設定為始終使用 AOT 編譯。在 Ivy 中使用應用程式國際化（i18n）時，<a href=\"guide/i18n-common-merge\" title=\"Common Internationalization task #6: Merge translations into the application | Angular\">翻譯合併</a>還需要使用 AOT 編譯。</p><p translation-origin=\"off\">AOT compilation with Ivy is faster and should be used by default.\nIn the <code>angular.json</code> workspace configuration file, set the default build options for your project to always use AOT compilation.\nWhen using application internationalization (i18n) with Ivy, <a href=\"guide/i18n-common-merge\" title=\"Common Internationalization task #6: Merge translations into the application | Angular\">translation merging</a> also requires the use of AOT compilation.</p>\n\n<code-example language=\"json\" header=\"angular.json\">\n\n{\n  \"projects\": {\n    \"my-existing-project\": {\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            ...\n            \"aot\": true,\n          }\n        }\n      }\n    }\n  }\n}\n\n</code-example>\n<h2 id=\"ivy-and-libraries\" translation-result=\"on\">Ivy 和庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#ivy-and-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"ivy-and-libraries\">Ivy and libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#ivy-and-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以使用透過 View Engine 編譯器建立的函式庫來建構 Ivy 應用程式。此相容性由稱為 Angular 相容性編譯器（ <code>ngcc</code> ）的工具提供。CLI 命令在執行 Angular 建構時會根據需要執行 <code>ngcc</code>。</p><p translation-result=\"on\">要了解關於如何釋出庫的知識，參閱<a href=\"guide/creating-libraries#publishing-your-library\">釋出庫</a>部分。</p><p translation-origin=\"off\">Ivy applications can be built with libraries that were created with the View Engine compiler.\nThis compatibility is provided by a tool known as the Angular compatibility compiler (<code>ngcc</code>).\nCLI commands run <code>ngcc</code> as needed when performing an Angular build.</p>\n\n<p translation-origin=\"off\">For more information on how to publish libraries see <a href=\"guide/creating-libraries#publishing-your-library\">Publishing your Library</a>.</p>\n\n<a id=\"maintaining-library-compatibility\"></a>\n<h3 id=\"maintaining-library-compatibility\" translation-result=\"on\">保持庫的相容性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#maintaining-library-compatibility\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"maintaining-library-compatibility\">Maintaining library compatibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#maintaining-library-compatibility\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你是庫作者，則應從版本 9 之後繼續使用 View Engine 編譯器。透過讓所有庫繼續使用 View Engine，你將與使用 Ivy 的預設 v9 應用程式以及已選擇的應用程式保持相容性。</p><p translation-result=\"on\">關於如何編譯或打包 Angular 庫的更多資訊，請參閱<a href=\"guide/creating-libraries\">建立庫</a>指南。當你使用 Angular CLI 或 <code>ng-packagr</code> 整合的工具時，將始終以正確的方式自動建構你的函式庫。</p><p translation-origin=\"off\">If you are a library author, you should keep using the View Engine compiler as of version 9.\nBy having all libraries continue to use View Engine, you will maintain compatibility with default v9 applications that use Ivy, as well as with applications that have opted to continue using View Engine.</p>\n\n<p translation-origin=\"off\">See the <a href=\"guide/creating-libraries\">Creating Libraries</a> guide for more on how to compile or bundle your Angular library.\nWhen you use the tools integrated into the Angular CLI or <code>ng-packagr</code>, your library will always be built the right way automatically.</p>\n\n<a id=\"ivy-and-universal-app-shell\"></a>\n<h2 id=\"ivy-and-universalapp-shell\" translation-result=\"on\">Ivy 和 Universal / App shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#ivy-and-universalapp-shell\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"ivy-and-universalapp-shell\">Ivy and Universal/App shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#ivy-and-universalapp-shell\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在版本 9 中，用於 <a href=\"guide/app-shell\">App Shell</a> 和 <a href=\"guide/universal\">Angular Universal</a> 的伺服器建構器會預設啟用 <code>bundleDependencies</code> 選項。如果你選擇放棄打套件相依項，則需要執行獨立的 Angular 相容性編譯器（<code>ngcc</code>）。這是必要的，否則 Node 將無法解析 Ivy 版本的程式套件。</p><p translation-result=\"on\">你可以在每次安裝 <code>ngcc</code> 後透過新增 <code>postinstall</code> <a href=\"https://docs.npmjs.com/misc/scripts\">npm 指令碼</a>來執行 <code>ngcc</code> ：</p><p translation-origin=\"off\">In version 9, the server builder which is used for <a href=\"guide/app-shell\">App shell</a> and <a href=\"guide/universal\">Angular Universal</a> has the <code>bundleDependencies</code> option enabled by default.\nIf you opt-out of bundling dependencies you will need to run the standalone Angular compatibility compiler (<code>ngcc</code>). This is needed because otherwise Node will be unable to resolve the Ivy version of the packages.</p>\n\n<p translation-origin=\"off\">You can run <code>ngcc</code> after each installation of node_modules by adding a <code>postinstall</code> <a href=\"https://docs.npmjs.com/misc/scripts\">npm script</a>:</p>\n\n<code-example language=\"json\" header=\"package.json\">\n\n{\n  \"scripts\": {\n    \"postinstall\": \"ngcc\"\n  }\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p translation-result=\"on\">   不要使用 <code>--create-ivy-entry-points</code> 因為這將導致 Node 無法正確解析軟體套件的 Ivy 版本。</p><p translation-origin=\"off\">The <code>postinstall</code> script will run on every installation of <code>node_modules</code>, including those performed by <code>ng update</code> and <code>ng add</code>.\n*Don't use <code>--create-ivy-entry-points</code> as this will cause Node not to resolve the Ivy version of the packages correctly.</p>\n\n</li></ul></div>\n\n\n<a id=\"opting-out-of-angular-ivy\"></a>\n<h2 id=\"opting-out-of-ivy-in-version-9\" translation-result=\"on\">選擇性禁用版本 9 中的 Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#opting-out-of-ivy-in-version-9\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"opting-out-of-ivy-in-version-9\">Opting out of Ivy in version 9<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#opting-out-of-ivy-in-version-9\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在版本 9 中，Ivy 是預設值。為了在更新過程中與當前工作流相容，你可以選擇性禁用 Ivy，繼續使用以前的編譯器 View Engine。</p><p translation-origin=\"off\">In version 9, Ivy is the default.\nFor compatibility with current workflows during the update process, you can choose to opt out of Ivy and continue using the previous compiler, View Engine.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在禁用 Ivy 之前，請檢視 <a href=\"guide/ivy-compatibility#debugging\">Ivy 相容性指南</a>中的除錯建議。</p><p translation-origin=\"off\">Before disabling Ivy, check out the debugging recommendations in the <a href=\"guide/ivy-compatibility#debugging\">Ivy Compatibility Guide</a>.</p>\n\n</div>\n<p translation-result=\"on\">要選擇性禁用 Ivy，要在專案的 TypeScript 配置中更改 <code>angularCompilerOptions</code>，它通常位於工作區根目錄的 <code>tsconfig.app.json</code> 中。</p><p translation-result=\"on\">從版本 9 開始，預設情況下 <code>enableIvy</code> 標誌的值設定為 <code>true</code>。</p><p translation-result=\"on\">以下範例顯示瞭如何將 <code>enableIvy</code> 選項設定為 <code>false</code> 以便選擇性的禁用 Ivy。</p><p translation-origin=\"off\">To opt out of Ivy, change the <code>angularCompilerOptions</code> in your project's TypeScript configuration, most commonly located at <code>tsconfig.app.json</code> at the root of the workspace.</p>\n\n<p translation-origin=\"off\">The value of the <code>enableIvy</code> flag is set to <code>true</code> by default, as of version 9.</p>\n\n<p translation-origin=\"off\">The following example shows how to set the <code>enableIvy</code> option to <code>false</code> in order to opt out of Ivy.</p>\n\n<code-example language=\"json\" header=\"tsconfig.app.json\">\n\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\n    \"src/main.ts\",\n    \"src/polyfills.ts\"\n  ],\n  \"include\": [\n    \"src/**/*.d.ts\"\n  ],\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果禁用 Ivy，則可能還需要重新評估是否將 AOT 編譯設定為應用程式開發的預設設定，<a href=\"guide/ivy#aot-and-ivy\">如上所述</a>。</p><p translation-result=\"on\">要恢復編譯器的預設設定，請在 <code>angular.json</code> 配置檔案中設定建構選項 <code>aot: false</code>。</p><p translation-origin=\"off\">If you disable Ivy, you might also want to reconsider whether to make AOT compilation the default for your application development, as described <a href=\"guide/ivy#aot-and-ivy\">above</a>.</p>\n\n<p translation-origin=\"off\">To revert the compiler default, set the build option <code>aot: false</code> in the <code>angular.json</code> configuration file.</p>\n\n</div>\n<p translation-result=\"on\">如果禁用 Ivy 並且專案使用國際化，則還可以從預設位於 <code>src/polyfills.ts</code> 的專案的Polyfill指令碼檔案中刪除 <code>@angular/localize</code> 執行時元件。</p><p translation-result=\"on\">要移除它，請刪除此Polyfill指令碼檔案中的一行 <code>import '@angular/localize/init';</code>。</p><p translation-origin=\"off\">If you disable Ivy and the project uses internationalization, you can also remove the <code>@angular/localize</code> runtime component from the project's polyfills file located be default at <code>src/polyfills.ts</code>.</p>\n\n<p translation-origin=\"off\">To remove, delete the <code>import '@angular/localize/init';</code> line from the polyfills file.</p>\n\n<code-example language=\"typescript\" header=\"polyfills.ts\">\n\n/***************************************************************************************************\n * Load `$localize` onto the <a href=\"api/core/global\" class=\"code-anchor\">global</a> scope - used if i18n tags appear in Angular templates.\n */\nimport '@angular/localize/init';\n\n</code-example>\n<a id=\"using-ssr-without-angular-ivy\"></a>\n<h3 id=\"using-ssr-without-ivy\" translation-result=\"on\">在沒有 Ivy 的情況下使用 SSR<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#using-ssr-without-ivy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"using-ssr-without-ivy\">Using SSR without Ivy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ivy#using-ssr-without-ivy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果選擇性禁用 Ivy，並且你的應用程式使用 <a href=\"guide/universal\">Angular Universal</a> 在伺服器上渲染 Angular 應用程式，則還必須更改伺服器執行引導的方式。</p><p translation-result=\"on\">下面的範例展示瞭如何修改 <code>server.ts</code> 檔案以將 <code>AppServerModuleNgFactory</code> 提供為引導模組。</p><p translation-origin=\"off\">If you opt out of Ivy and your application uses <a href=\"guide/universal\">Angular Universal</a> to render Angular applications on the server, you must also change the way the server performs bootstrapping.</p>\n\n<p translation-origin=\"off\">The following example shows how you modify the <code>server.ts</code> file to provide the <code>AppServerModuleNgFactory</code> as the bootstrap module.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">從 <code>app.server.module.ngfactory</code> 虛擬檔案中匯入 <code>AppServerModuleNgFactory</code>。</p><p translation-origin=\"off\">Import <code>AppServerModuleNgFactory</code> from the <code>app.server.module.ngfactory</code> virtual file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ngExpressEngine</code> 呼叫中設定 <code>bootstrap: AppServerModuleNgFactory</code>。</p><p translation-origin=\"off\">Set <code>bootstrap: AppServerModuleNgFactory</code> in the <code>ngExpressEngine</code> call.</p>\n\n</li>\n</ul>\n<code-example language=\"typescript\" header=\"server.ts\">\n\nimport 'zone.js/node';\n\nimport { ngExpressEngine } from '@nguniversal/express-engine';\nimport * as express from 'express';\nimport { join } from 'path';\n\nimport { <a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a> } from '@angular/common';\n\nimport { AppServerModuleNgFactory } from './src/app/app.server.module.ngfactory';\n\n// The Express app is exported so that it can be used by serverless Functions.\nexport function app() {\n  const server = express();\n  const distFolder = join(process.cwd(), 'dist/ivy-test/<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>');\n  \n  // Our Universal express-engine (found @ https://github.com/angular/universal/tree/master/modules/express-engine)\n  server.engine('html', ngExpressEngine({\n    bootstrap: AppServerModuleNgFactory,\n  }));\n  \n  server.set('view engine', 'html');\n  server.set('views', distFolder);\n  \n  // Example Express Rest API endpoints\n  // app.get('/api/**', (req, res) =&gt; { });\n  // Serve <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> files from /<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>\n  server.get('*.*', express.static(distFolder, {\n    maxAge: '1y'\n  }));\n  \n  // All regular routes use the Universal engine\n  server.get('*', (req, res) =&gt; {\n    res.render('index', { req, providers: [{ provide: <a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a>, useValue: req.baseUrl }] });\n  });\n  \n  return server;\n}\n\nfunction run() {\n  const port = process.env.PORT || 4000;\n  \n  // Start up the Node server\n  const server = app();\n  server.listen(port, () =&gt; {\n    console.log(`Node Express server listening on http://localhost:${port}`);\n  });\n}\n\n// Webpack will replace 'require' with '__webpack_require__'\n// '__non_webpack_require__' is a proxy to Node 'require'\n// The below code is to ensure that the server is run only when not requiring the bundle.\ndeclare const __non_webpack_require__: NodeRequire;\nconst mainModule = __non_webpack_require__.main;\nif (mainModule &amp;&amp; mainModule.filename === __filename) {\n  run();\n}\n\nexport * from './src/main.server';\n\n</code-example>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間： 2021/9/15</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/entry-components\n - guide/glossary\n - guide/i18n-common-merge\n - guide/ivy-compatibility\n - guide/roadmap\n - guide/updating-to-version-12\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/common/APP_BASE_HREF\n - api/core/global\n - api/upgrade/static\n - guide/app-shell\n - guide/creating-libraries\n - guide/creating-libraries#publishing-your-library\n - guide/i18n-common-merge\n - guide/ivy#angular-ivy\n - guide/ivy#aot-and-ivy\n - guide/ivy#ivy-and-libraries\n - guide/ivy#ivy-and-universalapp-shell\n - guide/ivy#maintaining-library-compatibility\n - guide/ivy#opting-out-of-ivy-in-version-9\n - guide/ivy#using-ssr-without-ivy\n - guide/ivy-compatibility#debugging\n - guide/universal\n - https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7\n - https://docs.npmjs.com/misc/scripts\n - https://github.com/ng-docs/angular-cn/edit/aio/aio/content/guide/ivy.md?message=docs%3A%20請簡述你的修改...\n - https://www.youtube.com/watch?v=S0o-4yc2n-8\n - https://www.youtube.com/watch?v=anphffaCZrQ\n-->"}