{"id":"guide/attribute-directives","title":"Attribute directives","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/attribute-directives.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"attribute-directives\" translation-result=\"on\">屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">使用屬性型指令，可以更改 DOM 元素和 Angular 元件的外觀或行為。</p><p translation-origin=\"off\">Change the appearance or behavior of DOM elements and Angular components with attribute directives.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">包含本指南中程式碼片段的可工作範例，參閱<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"building-an-attribute-directive\" translation-result=\"on\">建立屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#building-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Building an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#building-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節將引導你建立“突出顯示”指令，該指令會將宿主元素的背景色設定為黃色。</p><p translation-origin=\"off\">This section walks you through creating a highlight directive that sets the background color of the host element to yellow.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">要建立指令，請使用 CLI 命令 <a href=\"cli/generate\"><code>ng generate directive</code></a>。</p><p translation-origin=\"off\">To create a directive, use the CLI command <a href=\"cli/generate\"><code>ng generate directive</code></a>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate directive highlight\n\n</code-example>\n<p translation-result=\"on\">CLI 建立 <code>src/app/highlight.directive.ts</code> 以及相應的測試檔案 <code>src/app/highlight.directive.spec.ts</code>，並在 <code>AppModule</code> 中宣告此指令類別。</p><p translation-origin=\"off\">The CLI creates <code>src/app/highlight.directive.ts</code>, a corresponding test file <code>src/app/highlight.directive.spec.ts</code>, and declares the directive class in the <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">CLI 產生預設的 <code>src/app/highlight.directive.ts</code>，如下所示：</p><p translation-origin=\"off\">The CLI generates the default <code>src/app/highlight.directive.ts</code> as follows:</p>\n\n<code-example header=\"src/app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.0.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 裝飾器的配置屬性會指定指令的 CSS 屬性選擇器 <code>[appHighlight]</code>。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator's configuration property specifies the directive's CSS attribute selector, <code>[appHighlight]</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">從 <code>@angular/core</code> 匯入 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>。<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 的 <code>nativeElement</code> 屬性會提供對宿主 DOM 元素的直接存取許可權。</p><p translation-origin=\"off\">Import <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> from <code>@angular/core</code>.\n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> grants direct access to the host DOM element through its <code>nativeElement</code> property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在指令的 <code>constructor()</code> 中新增 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 以<a href=\"guide/dependency-injection\">注入</a>對宿主 DOM 元素的參考，該元素就是 <code>appHighlight</code> 的作用目標。</p><p translation-origin=\"off\">Add <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> in the directive's <code>constructor()</code> to <a href=\"guide/dependency-injection\">inject</a> a reference to the host DOM element, the element to which you apply <code>appHighlight</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">向 <code>HighlightDirective</code> 類中新增邏輯，將背景設定為黃色。</p><p translation-origin=\"off\">Add logic to the <code>HighlightDirective</code> class that sets the background to yellow.</p>\n\n<code-example header=\"src/app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.1.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       this.el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">指令<em>不</em>支援名稱空間。</p><p translation-origin=\"off\">Directives <em>do not</em> support namespaces.</p>\n\n<code-example header=\"src/app/app.component.avoid.html (unsupported)\" path=\"attribute-directives/src/app/app.component.avoid.html\" region=\"unsupported\">\n&lt;p app:Highlight&gt;This is invalid&lt;/p&gt;\n\n</code-example>\n</div>\n<p><a id=\"apply-directive\"></a></p>\n<h2 id=\"applying-an-attribute-directive\" translation-result=\"on\">應用屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#applying-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Applying an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#applying-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<ol>\n<li>\n<p translation-result=\"on\">要使用 <code>HighlightDirective</code>，請將 <code>&lt;p&gt;</code> 元素新增到 HTML 範本中，並以偽指令作為屬性。</p><p translation-origin=\"off\">To use the <code>HighlightDirective</code>, add a <code>&lt;p&gt;</code> element to the HTML template with the directive as an attribute.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"attribute-directives/src/app/app.component.1.html\" region=\"applied\">\n&lt;p appHighlight&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">Angular 會建立 <code>HighlightDirective</code> 類別的例項，並將 <code>&lt;p&gt;</code> 元素的參考注入到該指令的建構函式中，它會將 <code>&lt;p&gt;</code> 元素的背景樣式設定為黃色。</p><p translation-origin=\"off\">Angular creates an instance of the <code>HighlightDirective</code> class and injects a reference to the <code>&lt;p&gt;</code> element into the directive's constructor, which sets the <code>&lt;p&gt;</code> element's background style to yellow.</p>\n\n<p><a id=\"respond-to-user\"></a></p>\n<h2 id=\"handling-user-events\" translation-result=\"on\">處理使用者事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#handling-user-events\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Handling user events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#handling-user-events\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節會展示如何檢測使用者何時將滑鼠移入或移出元素以及如何透過設定或清除突出顯示顏色來進行響應。</p><p translation-origin=\"off\">This section shows you how to detect when a user mouses into or out of the element and to respond by setting or clearing the highlight color.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">從 '@angular/core' 匯入 <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>。</p><p translation-origin=\"off\">Import <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> from '@angular/core'.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (imports)\" path=\"attribute-directives/src/app/highlight.directive.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">新增兩個事件處理程式，它們會在滑鼠進入或離開時做出響應，每個事件處理程式都帶有 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> 裝飾器。</p><p translation-origin=\"off\">Add two event handlers that respond when the mouse enters or leaves, each with the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> decorator.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (mouse-methods)\" path=\"attribute-directives/src/app/highlight.directive.2.ts\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight('');\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">要訂閱本屬性型指令宿主 DOM 元素上的事件（在本例中是 <code>&lt;p&gt;</code>），可以使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> 裝飾器。</p><p translation-origin=\"off\">Subscribe to events of the DOM element that hosts an attribute directive, the <code>&lt;p&gt;</code> in this case, with the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> decorator.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">處理程式會委託給一個輔助方法 <code>highlight()</code>，該方法會設定宿主 DOM 元素 <code>el</code> 的顏色。</p><p translation-origin=\"off\">The handlers delegate to a helper method, <code>highlight()</code>, that sets the color on the host DOM element, <code>el</code>.</p>\n\n</div>\n<p translation-result=\"on\">完整的指令如下：</p><p translation-origin=\"off\">The complete directive is as follows:</p>\n\n<code-example header=\"src/app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.2.ts\">\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight('');\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">當指標懸停在 p 元素上時，背景顏色就會出現；而當指標移出時，背景顏色就會消失。</p><p translation-origin=\"off\">The background color appears when the pointer hovers over the paragraph element and disappears as the pointer moves out.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Second Highlight\" src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" width=\"204\" height=\"72\">\n</div>\n<p><a id=\"bindings\"></a></p>\n<h2 id=\"passing-values-into-an-attribute-directive\" translation-result=\"on\">將值傳遞給屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#passing-values-into-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Passing values into an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#passing-values-into-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節將引導你在應用 <code>HighlightDirective</code> 時設定突出顯示顏色。</p><p translation-origin=\"off\">This section walks you through setting the highlight color while applying the <code>HighlightDirective</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>highlight.directive.ts</code> 中，從 <code>@angular/core</code> 匯入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">In <code>highlight.directive.ts</code>, import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (imports)\" path=\"attribute-directives/src/app/highlight.directive.3.ts\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">新增一個 <code>appHighlight</code> 的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性。</p><p translation-origin=\"off\">Add an <code>appHighlight</code> <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property.</p>\n\n<code-example header=\"src/app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.3.ts\" region=\"input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() appHighlight = '';\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器會將元資料新增到此類，以便讓該指令的 <code>appHighlight</code> 屬性可用於繫結。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator adds metadata to the class that makes the directive's <code>appHighlight</code> property available for binding.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>app.component.ts</code>，將 <code>color</code> 屬性新增到 <code>AppComponent</code>。</p><p translation-origin=\"off\">In <code>app.component.ts</code>, add a <code>color</code> property to the <code>AppComponent</code>.</p>\n\n<code-example header=\"src/app/app.component.ts (class)\" path=\"attribute-directives/src/app/app.component.1.ts\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要同時應用指令和顏色，請透過 <code>appHighlight</code> 指令選擇器使用屬性繫結，將其設定為 <code>color</code>。</p><p translation-origin=\"off\">To simultaneously apply the directive and the color, use property binding with the <code>appHighlight</code> directive selector, setting it equal to <code>color</code>.</p>\n\n<code-example header=\"src/app/app.component.html (color)\" path=\"attribute-directives/src/app/app.component.html\" region=\"color\">\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>[appHighlight]</code> 屬性繫結執行兩項任務：</p><p translation-origin=\"off\">The <code>[appHighlight]</code> attribute binding performs two tasks:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">將突出顯示指令應用於 <code>&lt;p&gt;</code> 元素</p><p translation-origin=\"off\">Applies the highlighting directive to the <code>&lt;p&gt;</code> element</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過屬性繫結設定指令的突出顯示顏色</p><p translation-origin=\"off\">Sets the directive's highlight color with a property binding</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"setting-the-value-with-user-input\" translation-result=\"on\">透過使用者輸入來設定值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#setting-the-value-with-user-input\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Setting the value with user input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#setting-the-value-with-user-input\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本節指導你新增單選按鈕，將你選擇的顏色繫結到 <code>appHighlight</code> 指令。</p><p translation-origin=\"off\">This section guides you through adding radio buttons to bind your color choice to the <code>appHighlight</code> directive.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">將標記新增到 <code>app.component.html</code> 以選擇顏色，如下所示：</p><p translation-origin=\"off\">Add markup to <code>app.component.html</code> for choosing a color as follows:</p>\n\n<code-example header=\"src/app/app.component.html (v2)\" path=\"attribute-directives/src/app/app.component.html\" region=\"v2\">\n&lt;h1&gt;My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&lt;/h1&gt;\n\n&lt;h2&gt;Pick a highlight color&lt;/h2&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\"&gt;Green\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\"&gt;Yellow\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\"&gt;Cyan\n&lt;/div&gt;\n&lt;p [appHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改 <code>AppComponent.color</code>，使其沒有初始值。</p><p translation-origin=\"off\">Revise the <code>AppComponent.color</code> so that it has no initial value.</p>\n\n<code-example header=\"src/app/app.component.ts (class)\" path=\"attribute-directives/src/app/app.component.ts\" region=\"class\">\nexport class AppComponent {\n  color = '';\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>highlight.directive.ts</code> 中，修改 <code>onMouseEnter</code> 方法，讓它首先嚐試使用 <code>appHighlight</code> 進行高亮顯示，如果 <code>appHighlight</code> 是 <code>undefined</code>，則回退為 <code>red</code>。</p><p translation-origin=\"off\">In <code>highlight.directive.ts</code>, revise <code>onMouseEnter</code> method so that it first tries to highlight with <code>appHighlight</code> and falls back to <code>red</code> if <code>appHighlight</code> is <code>undefined</code>.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (mouse-enter)\" path=\"attribute-directives/src/app/highlight.directive.3.ts\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.appHighlight || 'red');\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">啟動本應用的開發伺服器，以驗證使用者可以透過單選按鈕選擇顏色。</p><p translation-origin=\"off\">Serve your application to verify that the user can choose the color with the radio buttons.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Animated gif of the refactored highlight directive changing color according to the radio button the user selects\" src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" width=\"432\" height=\"172\">\n</div>\n</li>\n</ol>\n<p><a id=\"second-property\"></a></p>\n<h2 id=\"binding-to-a-second-property\" translation-result=\"on\">繫結到第二個屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Binding to a second property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節將指導你配置應用程式，以便開發人員可以設定預設顏色。</p><p translation-origin=\"off\">This section guides you through configuring your application so the developer can set the default color.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">將第二個 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 屬性 <code>defaultColor</code> 新增到 <code>HighlightDirective</code>。</p><p translation-origin=\"off\">Add a second <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property to <code>HighlightDirective</code> called <code>defaultColor</code>.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (defaultColor)\" path=\"attribute-directives/src/app/highlight.directive.ts\" region=\"defaultColor\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor = '';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改指令的 <code>onMouseEnter</code>，使其首先嚐試使用 <code>appHighlight</code> 進行突出顯示，然後嘗試 <code>defaultColor</code>，如果兩個屬性都 <code>undefined</code>，則變回 <code>red</code>。</p><p translation-origin=\"off\">Revise the directive's <code>onMouseEnter</code> so that it first tries to highlight with the <code>appHighlight</code>, then with the <code>defaultColor</code>, and falls back to <code>red</code> if both properties are <code>undefined</code>.</p>\n\n<code-example header=\"src/app/highlight.directive.ts (mouse-enter)\" path=\"attribute-directives/src/app/highlight.directive.ts\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.appHighlight || this.defaultColor || 'red');\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">若要繫結到 <code>AppComponent.color</code> 並回退為預設顏色“紫羅蘭（violet）”，請新增以下 HTML。在這裡，<code>defaultColor</code> 繫結沒有使用方括號 <code>[]</code>，因為它是靜態的。</p><p translation-origin=\"off\">To bind to the <code>AppComponent.color</code> and fall back to \"violet\" as the default color, add the following HTML.\nIn this case,  the <code>defaultColor</code> binding doesn't use square brackets, <code>[]</code>, because it is static.</p>\n\n<code-example header=\"src/app/app.component.html (defaultColor)\" path=\"attribute-directives/src/app/app.component.html\" region=\"defaultColor\">\n&lt;p [appHighlight]=\"color\" defaultColor=\"violet\"&gt;\n  Highlight me too!\n&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">與元件一樣，你可以將指令的多個屬性繫結新增到宿主元素上。</p><p translation-origin=\"off\">As with components, you can add multiple directive property bindings to a host element.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">如果沒有預設顏色（defaultColor）繫結，則預設為紅色。當用戶選擇一種顏色時，所選的顏色將成為突出顯示的顏色。</p><p translation-origin=\"off\">The default color is red if there is no default color binding.\nWhen the user chooses a color the selected color becomes the active highlight color.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Animated gif of final highlight directive that shows red color with no binding and violet with the default color set. When user selects color, the selection takes precedence.\" src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" width=\"440\" height=\"212\">\n</div>\n<p><a id=\"ngNonBindable\"></a></p>\n<h2 id=\"deactivating-angular-processing-with-ngnonbindable\" translation-result=\"on\">透過 <code>NgNonBindable</code> 停用 Angular 處理過程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Deactivating Angular processing with <code>NgNonBindable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要防止在瀏覽器中進行表示式求值，請將 <code>ngNonBindable</code> 新增到宿主元素。<code>ngNonBindable</code> 會停用範本中的插值、指令和繫結。</p><p translation-origin=\"off\">To prevent expression evaluation in the browser, add <code>ngNonBindable</code> to the host element.\n<code>ngNonBindable</code> deactivates interpolation, directives, and binding in templates.</p>\n\n<p translation-result=\"on\">在下面的範例中，表示式 <code>{{ 1 + 1 }}</code> 的渲染方式會和在程式碼編輯器的一樣，而不會顯示 <code>2</code>。</p><p translation-origin=\"off\">In the following example, the expression <code>{{ 1 + 1 }}</code> renders just as it does in your code editor, and does not display <code>2</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" linenums=\"false\" path=\"attribute-directives/src/app/app.component.html\" region=\"ngNonBindable\">\n&lt;p&gt;Use ngNonBindable to stop evaluation.&lt;/p&gt;\n&lt;p ngNonBindable&gt;This should not evaluate: {{ 1 + 1 }}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">將 <code>ngNonBindable</code> 應用於元素將停止對該元素的子元素的繫結。但是，<code>ngNonBindable</code> 仍然允許指令在應用 <code>ngNonBindable</code> 的元素上工作。在以下範例中，<code>appHighlight</code> 指令仍處於活躍狀態，但 Angular 不會對錶達式 <code>{{ 1 + 1 }}</code> 求值。</p><p translation-origin=\"off\">Applying <code>ngNonBindable</code> to an element stops binding for that element's child elements.\nHowever, <code>ngNonBindable</code> still lets directives work on the element where you apply <code>ngNonBindable</code>.\nIn the following example, the <code>appHighlight</code> directive is still active but Angular does not evaluate the expression <code>{{ 1 + 1 }}</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" linenums=\"false\" path=\"attribute-directives/src/app/app.component.html\" region=\"ngNonBindable-with-directive\">\n&lt;h3&gt;ngNonBindable with a directive&lt;/h3&gt;\n&lt;div ngNonBindable [appHighlight]=\"'yellow'\"&gt;This should not evaluate: {{ 1 +1 }}, but will highlight yellow.\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">如果將 <code>ngNonBindable</code> 應用於父元素，則 Angular 會禁用該元素的子元素的任何插值和繫結，比如屬性繫結或事件繫結。</p><p translation-origin=\"off\">If you apply <code>ngNonBindable</code> to a parent element, Angular disables interpolation and binding of any sort, such as property binding or event binding, for the element's children.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/bootstrapping\n - guide/built-in-directives\n - guide/content-projection\n - guide/dependency-injection-in-action\n - guide/example-apps-list\n - guide/glossary\n-->\n<!-- links from this doc:\n - api/core/Attribute\n - api/core/Directive\n - api/core/ElementRef\n - api/core/HostListener\n - api/core/Input\n - cli/generate\n - guide/attribute-directives#applying-an-attribute-directive\n - guide/attribute-directives#attribute-directives\n - guide/attribute-directives#binding-to-a-second-property\n - guide/attribute-directives#building-an-attribute-directive\n - guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\n - guide/attribute-directives#handling-user-events\n - guide/attribute-directives#passing-values-into-an-attribute-directive\n - guide/attribute-directives#setting-the-value-with-user-input\n - guide/attribute-directives#處理使用者事件\n - guide/attribute-directives#將值傳遞給屬性型指令\n - guide/attribute-directives#屬性型指令\n - guide/attribute-directives#應用屬性型指令\n - guide/attribute-directives#建立屬性型指令\n - guide/attribute-directives#繫結到第二個屬性\n - guide/attribute-directives#透過-ngnonbindable-停用-angular-處理過程\n - guide/attribute-directives#透過使用者輸入來設定值\n - guide/dependency-injection\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/attribute-directives.md?message=docs%3A%20請簡述你的修改...\n-->"}