{"id":"guide/typed-forms","title":"Typed Forms","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/typed-forms.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"typed-forms\" translation-result=\"on\">型別化表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">從 Angular 14 開始，響應式表單預設是嚴格型別的。</p><p translation-origin=\"off\">As of Angular 14, reactive forms are strictly typed by default.</p>\n\n<p><a id=\"prerequisites\"></a></p>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">作為本指南的背景，你應該已經熟悉<a href=\"guide/reactive-forms\" title=\"響應式表單\">Angular 響應式表單</a>。</p><p translation-origin=\"off\">As background for this guide, you should already be familiar with <a href=\"guide/reactive-forms\" title=\"Reactive Forms\">Angular Reactive Forms</a>.</p>\n\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-typed-forms\" translation-result=\"on\">型別化表單概覽<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Overview of Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<video controls=\"\">\n  <source src=\"assets/videos/Typed Forms in Angular-L-odCf4MfJc.webm\" type=\"video/webm\">\n  <source src=\"assets/videos/Typed Forms in Angular-L-odCf4MfJc.mp4\" type=\"video/mp4\">\n  <track src=\"assets/videos/Typed Forms in Angular-L-odCf4MfJc.en.vtt\" label=\"English\" kind=\"subtitles\" srclang=\"en\">\n  <track src=\"assets/videos/Typed Forms in Angular-L-odCf4MfJc.cn.vtt\" label=\"簡體中文\" kind=\"subtitles\" srclang=\"zh-CN\">\n  <track src=\"assets/videos/Typed Forms in Angular-L-odCf4MfJc.tw.vtt\" label=\"正體中文\" kind=\"subtitles\" srclang=\"zh-TW\" default=\"\">\n  <p>注意：本影片不支援 IE 瀏覽器</p>\n</video>\n<p translation-result=\"on\">使用 Angular 響應式表單，你可以顯式指定<em>表單模型</em>。作為一個簡單的例子，考慮這個基本的使用者登入表單：</p><p translation-origin=\"off\">With Angular reactive forms, you explicitly specify a <em>form model</em>. As a simple example, consider this basic user login form:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n});\n</code-example>\n<p translation-result=\"on\">Angular 提供了許多 API 來與此 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 互動。例如，你可以呼叫 <code>login.value</code> 、 <code>login.controls</code> 、 <code>login.patchValue</code> 等。（有關完整的 API 參考，請參閱<a href=\"api/forms/FormGroup\">API 文件</a>。）</p><p translation-origin=\"off\">Angular provides many APIs for interacting with this <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. For example, you may call <code>login.value</code>, <code>login.controls</code>, <code>login.patchValue</code>, etc. (For a full API reference, see the <a href=\"api/forms/FormGroup\">API documentation</a>.)</p>\n\n<p translation-result=\"on\">在以前的 Angular 版本中，這些 API 中的大多數都在其型別中的某處包含 <code>any</code>，並且與控制項結構或值本身的互動不是型別安全的。例如：你可以編寫以下無效程式碼：</p><p translation-origin=\"off\">In previous Angular versions, most of these APIs included <code>any</code> somewhere in their types, and interacting with the structure of the controls, or the values themselves, was not type-safe. For example: you could write the following invalid code:</p>\n\n<code-example language=\"ts\">\nconst emailDomain = login.value.email.domain;\n</code-example>\n<p translation-result=\"on\">使用嚴格型別的響應式表單時，上面的程式碼不會編譯，因為 <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code> 上並沒有 <code>domain</code> 屬性。</p><p translation-origin=\"off\">With strictly typed reactive forms, the above code does not compile, because there is no <code>domain</code> property on <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>.</p>\n\n<p translation-result=\"on\">除了增加安全性之外，這些型別還支援各種其他改進，例如 IDE 中更好的自動完成，以及顯式指定表單結構的方式。</p><p translation-origin=\"off\">In addition to the added safety, the types enable a variety of other improvements, such as better autocomplete in IDEs, and an explicit way to specify form structure.</p>\n\n<p translation-result=\"on\">這些改進當前僅適用於<em>響應</em>式表單（不適用於<a href=\"guide/forms\" title=\"表單指南\"><em>範本驅動的</em>表單</a>）。</p><p translation-origin=\"off\">These improvements currently apply only to <em>reactive</em> forms (not <a href=\"guide/forms\" title=\"Forms Guide\"><em>template-driven</em> forms</a>).</p>\n\n<p><a id=\"automated-migration\"></a></p>\n<h2 id=\"automated-untyped-forms-migration\" translation-result=\"on\">自動無型別表單遷移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Automated Untyped Forms Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">升級到 Angular 14 時，包含的遷移將自動使用相應的無型別版本替換程式碼中的所有表單類別。例如，上面的程式碼段將變為：</p><p translation-origin=\"off\">When upgrading to Angular 14, an included migration will automatically replace all the forms classes in your code with corresponding untyped versions. For example, the snippet from above would become:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n    password: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n});\n</code-example>\n<p translation-result=\"on\">每個 <code>Untyped</code> 符號都與以前的 Angular 版本具有完全相同的語義，因此你的應用程式應該像以前一樣繼續編譯。透過刪除 <code>Untyped</code> 字首，你可以增量啟用這些型別。</p><p translation-origin=\"off\">Each <code>Untyped</code> symbol has exactly the same semantics as in previous Angular versions, so your application should continue to compile as before. By removing the <code>Untyped</code> prefixes, you can incrementally enable the types.</p>\n\n<p><a id=\"form-control-inference\"></a></p>\n<h2 id=\"formcontrol-getting-started\" translation-result=\"on\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>：入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol入門\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>: Getting Started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">最簡單的表單由單個控制項組成：</p><p translation-origin=\"off\">The simplest possible form consists of a single control:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\n</code-example>\n<p translation-result=\"on\">此控制項將被自動推斷為 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code> 型別。TypeScript 會在整個<a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>中自動強制執行此型別，例如 <code>email.value</code> 、 <code>email.valueChanges</code> 、 <code>email.setValue(...)</code> 等。</p><p translation-origin=\"off\">This control will be automatically inferred to have the type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code>. TypeScript will automatically enforce this type throughout the <a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>, such as <code>email.value</code>, <code>email.valueChanges</code>, <code>email.setValue(...)</code>, etc.</p>\n\n<h3 id=\"nullability\" translation-result=\"on\">可空性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Nullability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可能想知道：為什麼此控制項的型別包含 <code>null</code> ？這是因為控制項可以隨時透過呼叫 reset 變為 <code>null</code>：</p><p translation-origin=\"off\">You might wonder: why does the type of this control include <code>null</code>?  This is because the control can become <code>null</code> at any time, by calling reset:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\nemail.reset();\nconsole.log(email.value); // null\n</code-example>\n<p translation-result=\"on\">TypeScript 將強制你始終處理控制項已變為 <code>null</code> 的可能性。如果要使此控制項不可為空，可以用 <code>nonNullable</code> 選項。這將導致控制項重置為其初始值，而不是 <code>null</code>：</p><p translation-origin=\"off\">TypeScript will enforce that you always handle the possibility that the control has become <code>null</code>. If you want to make this control non-nullable, you may use the <code>nonNullable</code> option. This will cause the control to reset to its initial value, instead of <code>null</code>:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com', {nonNullable: true});\nemail.reset();\nconsole.log(email.value); // angularrox@gmail.com\n</code-example>\n<p translation-result=\"on\">重申一下，此選項會在呼叫 <code>.reset()</code> 時影響表單的執行時行為，應小心翻轉。</p><p translation-origin=\"off\">To reiterate, this option affects the runtime behavior of your form when <code>.reset()</code> is called, and should be flipped with care.</p>\n\n<h3 id=\"specifying-an-explicit-type\" translation-result=\"on\">指定顯式型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Specifying an Explicit Type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以指定型別，而不是依賴推理。考慮一個初始化為 <code>null</code> 的控制項。因為初始值為 <code>null</code>，所以 TypeScript 將推斷 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;null&gt;</code>，這比我們想要的要窄。</p><p translation-origin=\"off\">It is possible to specify the type, instead of relying on inference. Consider a control that is initialized to <code>null</code>. Because the initial value is <code>null</code>, TypeScript will infer <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;null&gt;</code>, which is narrower than we want.</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(null);\nemail.setValue('angularrox@gmail.com'); // Error!\n</code-example>\n<p translation-result=\"on\">為防止這種情況，我們將型別顯式指定為 <code>string|null</code>：</p><p translation-origin=\"off\">To prevent this, we explicitly specify the type as <code>string|null</code>:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;(null);\nemail.setValue('angularrox@gmail.com');\n</code-example>\n<p><a id=\"form-array\"></a></p>\n<h2 id=\"formarray-dynamic-homogenous-collections\" translation-result=\"on\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>：動態的、同質的集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray動態的同質的集合\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>: Dynamic, Homogenous Collections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray-dynamic-homogenous-collections\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 包含一個開放式控制項列表。type 引數對應於每個內部控制項的型別：</p><p translation-origin=\"off\">A <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> contains an open-ended list of controls. The type parameter corresponds to the type of each inner control:</p>\n\n<code-example language=\"ts\">\nconst names = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Alex')]);\nnames.push(new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Jess'));\n</code-example>\n<p translation-result=\"on\">此 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 將具有內部控制項型別 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code>。</p><p translation-origin=\"off\">This <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> will have the inner controls type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;</code>.</p>\n\n<p translation-result=\"on\">如果你想在陣列中有多個不同的元素型別，則必須使用 <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>，因為 TypeScript 無法推斷哪種元素型別將出現在哪個位置。</p><p translation-origin=\"off\">If you want to have multiple different element types inside the array, you must use <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>, because TypeScript cannot infer which element type will occur at which position.</p>\n\n<p><a id=\"form-group-record\"></a></p>\n<h2 id=\"formgroup-and-formrecord\" translation-result=\"on\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-和-formrecord\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-and-formrecord\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 為具有列舉鍵集的表單提供了 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 型別，併為開放式或動態組提供了一種名為 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 的型別。</p><p translation-origin=\"off\">Angular provides the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> type for forms with an enumerated set of keys, and a type called <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>, for open-ended or dynamic groups.</p>\n\n<h3 id=\"partial-values\" translation-result=\"on\">部分值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Partial Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">再次考慮一個登入表單：</p><p translation-origin=\"off\">Consider again a login form:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n</code-example>\n<p translation-result=\"on\">在任何 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 上，都<a href=\"api/forms/FormGroup\">可以禁用控制項</a>。任何禁用的控制項都不會出現在組的值中。</p><p translation-origin=\"off\">On any <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, it is <a href=\"api/forms/FormGroup\">possible to disable controls</a>. Any disabled control will not appear in the group's value.</p>\n\n<p translation-result=\"on\">因此，<code>login.value</code> 的型別是 <code>Partial&lt;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}&gt;</code>。這種型別的 <code>Partial</code> 意味著每個成員可能是未定義的。</p><p translation-origin=\"off\">As a consequence, the type of <code>login.value</code> is <code>Partial&lt;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}&gt;</code>. The <code>Partial</code> in this type means that each member might be undefined.</p>\n\n<p translation-result=\"on\">更具體地說，<code>login.value.email</code> 的型別是 <code>string|undefined</code>，TypeScript 將強制你處理可能 <code>undefined</code> 的值（如果你啟用了 <code>strictNullChecks</code>）。</p><p translation-origin=\"off\">More specifically, the type of <code>login.value.email</code> is <code>string|undefined</code>, and TypeScript will enforce that you handle the possibly <code>undefined</code> value (if you have <code>strictNullChecks</code> enabled).</p>\n\n<p translation-result=\"on\">如果你想存取<em>包括</em>禁用控制項的值，從而繞過可能的 <code>undefined</code> 欄位，可以用 <code>login.getRawValue()</code>。</p><p translation-origin=\"off\">If you want to access the value <em>including</em> disabled controls, and thus bypass possible <code>undefined</code> fields, you can use <code>login.getRawValue()</code>.</p>\n\n<h3 id=\"optional-controls-and-dynamic-groups\" translation-result=\"on\">可選控制項和動態組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Optional Controls and Dynamic Groups<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">某些表單的控制項可能存在也可能不存在，可以在執行時新增和刪除。你可以用<em>可選欄位</em>來表示這些控制項：</p><p translation-origin=\"off\">Some forms have controls that may or may not be present, which can be added and removed at runtime. You can represent these controls using <em>optional fields</em>:</p>\n\n<code-example language=\"ts\">\ninterface LoginForm {\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string&gt;;\n    password?: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string&gt;;\n}\n\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&lt;LoginForm&gt;({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n\nlogin.removeControl('password');\n</code-example>\n<p translation-result=\"on\">在這個表單中，我們明確地指定了型別，這使我們可以將 <code>password</code> 控制項設為可選的。TypeScript 會強制只有可選控制項才能被新增或刪除。</p><p translation-origin=\"off\">In this form, we explicitly specify the type, which allows us to make the <code>password</code> control optional. TypeScript will enforce that only optional controls can be added or removed.</p>\n\n<h3 id=\"formrecord\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formrecord\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">某些 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的用法不符合上述模式，因為鍵是無法提前知道的。<code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 類就是為這種情況設計的：</p><p translation-origin=\"off\">Some <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> usages do not fit the above pattern because the keys are not known ahead of time. The <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> class is designed for that case:</p>\n\n<code-example language=\"ts\">\nconst addresses = new <a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a>&lt;<a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&lt;string|null&gt;&gt;({});\naddresses.addControl('Andrew', new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('2340 Folsom St'));\n</code-example>\n<p translation-result=\"on\">任何 <code>string|null</code> 型別的控制項都可以新增到此 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>。</p><p translation-origin=\"off\">Any control of type <code>string|null</code> can be added to this <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>.</p>\n\n<p translation-result=\"on\">如果你需要一個動態（開放式）和異構（控制項是不同型別）的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，則無法提升為型別安全的，這時你應該使用 <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>。</p><p translation-origin=\"off\">If you need a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> that is both dynamic (open-ended) and heterogeneous (the controls are different types), no improved type safety is possible, and you should use <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 也可以用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 建構：</p><p translation-origin=\"off\">A <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> can also be built with the <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>:</p>\n\n<code-example language=\"ts\">\nconst addresses = fb.record({'Andrew': '2340 Folsom St'});\n</code-example>\n<p>如果你需要一個動態（開放式）和異構（控制項是不同型別）的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，則無法提高型別安全，你應該使用 <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>。</p>\n<h2 id=\"formbuilder-and-nonnullableformbuilder\" translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 和 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-和-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> and <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-and-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 類已升級為支援新增的型別的版本，方式與上面的範例相同。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class has been upgraded to support the new types as well, in the same manner as the above examples.</p>\n\n<p translation-result=\"on\">此外，還有一個額外的建構器：<code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>。它是在所有控制項都上指定 <code>{nonNullable: true}</code> 的簡寫，用來在大型非空表單中消除主要的樣板程式碼。你可以用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 上的 <code>nonNullable</code> 屬性存取它：</p><p translation-origin=\"off\">Additionally, an additional builder is available: <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>. This type is shorthand for specifying <code>{nonNullable: true}</code> on every control, and can eliminate significant boilerplate from large non-nullable forms. You can access it using the <code>nonNullable</code> property on a <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>:</p>\n\n<code-example language=\"ts\">\nconst fb = new <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>();\nconst login = fb.nonNullable.group({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: '',\n    password: '',\n});\n</code-example>\n<p translation-result=\"on\">在上面的範例中，兩個內部控制項都將不可為空（即將設定 <code>nonNullable</code>）。</p><p translation-origin=\"off\">On the above example, both inner controls will be non-nullable (i.e. <code>nonNullable</code> will be set).</p>\n\n<p translation-result=\"on\">你還可以用名稱 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code> 注入它。</p><p translation-origin=\"off\">You can also inject it using the name <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：5/10/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/forms/FormRecord\n - api/forms/NonNullableFormBuilder\n - api/forms/UntypedFormArray\n - api/forms/UntypedFormControl\n - api/forms/UntypedFormGroup\n - guide/forms\n - guide/reactive-forms\n - guide/typed-forms#automated-untyped-forms-migration\n - guide/typed-forms#formarray-dynamic-homogenous-collections\n - guide/typed-forms#formarray動態的同質的集合\n - guide/typed-forms#formbuilder-and-nonnullableformbuilder\n - guide/typed-forms#formbuilder-和-nonnullableformbuilder\n - guide/typed-forms#formcontrol-getting-started\n - guide/typed-forms#formcontrol入門\n - guide/typed-forms#formgroup-and-formrecord\n - guide/typed-forms#formgroup-和-formrecord\n - guide/typed-forms#formrecord\n - guide/typed-forms#nullability\n - guide/typed-forms#optional-controls-and-dynamic-groups\n - guide/typed-forms#overview-of-typed-forms\n - guide/typed-forms#partial-values\n - guide/typed-forms#prerequisites\n - guide/typed-forms#specifying-an-explicit-type\n - guide/typed-forms#typed-forms\n - guide/typed-forms#前提條件\n - guide/typed-forms#可空性\n - guide/typed-forms#可選控制項和動態組\n - guide/typed-forms#指定顯式型別\n - guide/typed-forms#型別化表單\n - guide/typed-forms#型別化表單概覽\n - guide/typed-forms#自動無型別表單遷移\n - guide/typed-forms#部分值\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/typed-forms.md?message=docs%3A%20請簡述你的修改...\n-->"}