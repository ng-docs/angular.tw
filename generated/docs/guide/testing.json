{"id":"guide/testing","title":"Testing","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/testing.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <p><a id=\"top\"></a></p>\n\n<h1 id=\"testing\" translation-result=\"on\">測試<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">測試你的 Angular 應用可以幫助你檢查此應用是否正常執行。</p><p translation-origin=\"off\">Testing your Angular application helps you check that your application is working as you expect.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在為 Angular 應用編寫測試之前，你應該對這些概念有一個基本的瞭解：</p><p translation-origin=\"off\">Before writing tests for your Angular application, you should have a basic understanding of the following concepts:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture\">Angular 的基本原理</a></p><p translation-origin=\"off\"><a href=\"guide/architecture\">Angular fundamentals</a></p>\n\n</li>\n<li>\n<p><a href=\"https://javascript.info/\">JavaScript</a></p>\n</li>\n<li>\n<p>HTML</p>\n</li>\n<li>\n<p>CSS</p>\n</li>\n<li>\n<p><a href=\"cli\">Angular CLI</a></p>\n</li>\n</ul>\n<p translation-result=\"on\">測試文件提供了透過使用 <a href=\"cli\">Angular CLI</a> 建立的範例應用程式對 Angular 應用程式進行單元和整合測試的提示和技術。這個範例應用程式與<a href=\"tutorial/tour-of-heroes\"><em>英雄之旅</em>課程</a>中的範例應用程式非常相似。</p><p translation-origin=\"off\">The testing documentation offers tips and techniques for unit and integration testing Angular applications through a sample application created with the <a href=\"cli\">Angular CLI</a>.\nThis sample application is much like the one in the <a href=\"tutorial/tour-of-heroes\"><em>Tour of Heroes</em> tutorial</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你想嘗試本指南所講的應用程式，<live-example name=\"testing\" nodownload=\"\">請在瀏覽器中執行它</live-example>或<live-example name=\"testing\" downloadonly=\"\">下載並在本地執行它</live-example>。</p><p translation-origin=\"off\">If you'd like to experiment with the application that this guide describes, <live-example name=\"testing\" nodownload=\"\">run it in your browser</live-example> or <live-example name=\"testing\" downloadonly=\"\">download and run it locally</live-example>.</p>\n\n</div>\n<p><a id=\"setup\"></a></p>\n<h2 id=\"set-up-testing\" translation-result=\"on\">建立環境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-testing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Set up testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-testing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 會下載並安裝試用 <a href=\"https://jasmine.github.io\">Jasmine 測試框架</a> 測試 Angular 應用時所需的一切。</p><p translation-origin=\"off\">The Angular CLI downloads and installs everything you need to test an Angular application with <a href=\"https://jasmine.github.io\">Jasmine testing framework</a>.</p>\n\n<p translation-result=\"on\">你使用 CLI 建立的專案是可以立即用於測試的。執行 CLI 命令 <a href=\"cli/test\"><code>ng test</code></a> 即可：</p><p translation-origin=\"off\">The project you create with the CLI is immediately ready to test.\nJust run the <a href=\"cli/test\"><code>ng test</code></a> CLI command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng test\n\n</code-example>\n<p translation-result=\"on\"><code>ng test</code> 命令在<em>監視模式</em>下建構應用，並啟動 <a href=\"https://karma-runner.github.io\">karma 測試執行器</a>。</p><p translation-origin=\"off\">The <code>ng test</code> command builds the application in <em>watch mode</em>,\nand launches the <a href=\"https://karma-runner.github.io\">Karma test runner</a>.</p>\n\n<p translation-result=\"on\">它的控制檯輸出一般是這樣的：</p><p translation-origin=\"off\">The console output looks the below:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\n02 11 2022 09:08:28.605:INFO [karma-server]: Karma v6.4.1 server started at http://localhost:9876/\n02 11 2022 09:08:28.607:INFO [launcher]: Launching browsers Chrome with concurrency unlimited\n02 11 2022 09:08:28.620:INFO [launcher]: Starting browser Chrome\n02 11 2022 09:08:31.312:INFO [Chrome]: Connected on socket -LaEYvD2R7MdcS0-AAAB with id 31534482\nChrome: Executed 3 of 3 SUCCESS (0.193 secs / 0.172 secs)\nTOTAL: 3 SUCCESS\n\n</code-example>\n<p translation-result=\"on\">日誌的最後一行顯示 Karma 運行了三個測試，這些測試都通過了。</p><p translation-origin=\"off\">The last line of the log shows that Karma ran three tests that all passed.</p>\n\n<p translation-result=\"on\">測試輸出使用 <a href=\"https://github.com/dfederm/karma-jasmine-html-reporter\">Karma Jasmine HTML Reporter</a> 顯示在瀏覽器中。</p><p translation-origin=\"off\">The test output is displayed in the browser using <a href=\"https://github.com/dfederm/karma-jasmine-html-reporter\">Karma Jasmine HTML Reporter</a>.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Jasmine HTML Reporter in the browser\" src=\"generated/images/guide/testing/initial-jasmine-html-reporter.png\" width=\"502\" height=\"306\">\n</div>\n<p translation-result=\"on\">可以點選某一行測試，來單獨重跑這個測試，或者點選一行描述資訊來重跑所選測試組（“測試套件”）中的那些測試。</p><p translation-origin=\"off\">Click on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (\"test suite\").</p>\n\n<p translation-result=\"on\">同時，<code>ng test</code> 命令還會監聽這些變化。</p><p translation-origin=\"off\">Meanwhile, the <code>ng test</code> command is watching for changes.</p>\n\n<p translation-result=\"on\">要檢視它的實際效果，就對 <code>app.component.ts</code> 做一個小修改，並儲存它。這些測試就會重新執行，瀏覽器也會重新整理，然後新的測試結果就出現了。</p><p translation-origin=\"off\">To see this in action, make a small change to <code>app.component.ts</code> and save.\nThe tests run again, the browser refreshes, and the new test results appear.</p>\n\n<h2 id=\"configuration\" translation-result=\"on\">配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 會為你處理 Jasmine 和 Karma 配置。它根據 <code>angular.json</code> 檔案中指定的選項在記憶體中建構完整配置。</p><p translation-origin=\"off\">The Angular CLI takes care of Jasmine and Karma configuration for you. It constructs the full configuration in memory, based on options specified in the <code>angular.json</code> file.</p>\n\n<p translation-result=\"on\">如果你想自訂 Karma，你可以透過執行以下命令建立一個 <code>karma.conf.js</code>：</p><p translation-origin=\"off\">If you want to customize Karma, you can create a <code>karma.conf.js</code> by running the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate config karma\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在 <a href=\"http://karma-runner.github.io/6.4/config/configuration-file.html\">Karma 配置指南</a>中可以瞭解更多關於 Karma 配置的內容。</p><p translation-origin=\"off\">Read more about Karma configuration in the <a href=\"http://karma-runner.github.io/6.4/config/configuration-file.html\">Karma configuration guide</a>.</p>\n\n</div>\n<h3 id=\"other-test-frameworks\" translation-result=\"on\">其他測試框架<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#other-test-frameworks\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Other test frameworks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#other-test-frameworks\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你還可以使用其它的測試庫和測試執行器來對 Angular 應用進行單元測試。每個庫和執行器都有自己特有的安裝過程、配置項和語法。</p><p translation-origin=\"off\">You can also unit test an Angular application with other testing libraries and test runners.\nEach library and runner has its own distinctive installation procedures, configuration, and syntax.</p>\n\n<h3 id=\"test-file-name-and-location\" translation-result=\"on\">測試檔名及其位置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-file-name-and-location\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Test file name and location<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-file-name-and-location\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>src/app</code> 目錄中，CLI 為 <code>AppComponent</code> 生成了一個名叫 <code>app.component.spec.ts</code> 的測試檔案。</p><p translation-origin=\"off\">Inside the <code>src/app</code> folder the Angular CLI generated a test file for the <code>AppComponent</code> named <code>app.component.spec.ts</code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">測試檔案的副檔名<strong>必須是 <code>.spec.ts</code></strong>，以便測試工具可以把它識別成一個包含測試的檔案，也叫 <em>spec（規約）</em> 檔案。</p><p translation-origin=\"off\">The test file extension <strong>must be <code>.spec.ts</code></strong> so that tooling can identify it as a file with tests (also known as a <em>spec</em> file).</p>\n\n</div>\n<p translation-result=\"on\"><code>app.component.ts</code> 和 <code>app.component.spec.ts</code> 檔案位於同一個資料夾中，而且相鄰。其根檔名部分（<code>app.component</code>）都是一樣的。</p><p translation-origin=\"off\">The <code>app.component.ts</code> and <code>app.component.spec.ts</code> files are siblings in the same folder.\nThe root file names (<code>app.component</code>) are the same for both files.</p>\n\n<p translation-result=\"on\">請在你的專案中對<em>任意類別型</em>的測試檔案都堅持這兩條約定。</p><p translation-origin=\"off\">Adopt these two conventions in your own projects for <em>every kind</em> of test file.</p>\n\n<p><a id=\"q-spec-file-location\"></a></p>\n<h4 id=\"place-your-spec-file-next-to-the-file-it-tests\" translation-result=\"on\">把測試規約（spec）檔案放在它要測試的檔案旁邊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Place your spec file next to the file it tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">最好把單元測試規約檔案放到與它們測試的應用原始碼檔案相同的資料夾中：</p><p translation-origin=\"off\">It's a good idea to put unit test spec files in the same folder\nas the application source code files that they test:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">這些測試很容易找到。</p><p translation-origin=\"off\">Such tests are painless to find</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你一眼就能看到應用中是否缺少一些測試。</p><p translation-origin=\"off\">You see at a glance if a part of your application lacks tests</p>\n\n</li>\n<li>\n<p translation-result=\"on\">臨近的測試可以揭示一個部件會如何在上下文中工作。</p><p translation-origin=\"off\">Nearby tests can reveal how a part works in context</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當移動原始碼時（在所難免），你不會忘了同時移動測試。</p><p translation-origin=\"off\">When you move the source (inevitable), you remember to move the test</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當重新命名原始檔時（在所難免），你不會忘了重新命名測試檔案。</p><p translation-origin=\"off\">When you rename the source file (inevitable), you remember to rename the test file</p>\n\n</li>\n</ul>\n<p><a id=\"q-specs-in-test-folder\"></a></p>\n<h4 id=\"place-your-spec-files-in-a-test-folder\" translation-result=\"on\">把 spec 檔案放到 test 目錄下<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-files-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Place your spec files in a test folder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-files-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">應用的整合測試規範可以測試跨資料夾和模組的多個部分之間的互動。它們並不屬於任何一個特定的部分，所以把它們放在任何一個檔案旁都很不自然。</p><p translation-origin=\"off\">Application integration specs can test the interactions of multiple parts\nspread across folders and modules.\nThey don't really belong to any part in particular, so they don't have a\nnatural home next to any one file.</p>\n\n<p translation-result=\"on\">最好在 <code>tests</code> 目錄下為它們建立一個合適的資料夾。</p><p translation-origin=\"off\">It's often better to create an appropriate folder for them in the <code>tests</code> directory.</p>\n\n<p translation-result=\"on\">當然，用來測試那些測試助手的規約也位於 <code>test</code> 目錄下，緊挨著相應的測試助手檔案。</p><p translation-origin=\"off\">Of course specs that test the test helpers belong in the <code>test</code> folder,\nnext to their corresponding helper files.</p>\n\n<p><a id=\"ci\"></a></p>\n<h2 id=\"testing-in-continuous-integration\" translation-result=\"on\">建立持續整合環境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-in-continuous-integration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Testing in continuous integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-in-continuous-integration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">保持專案無錯誤的最佳方法之一是透過測試套件，但你可能會忘記一直執行測試。</p><p translation-origin=\"off\">One of the best ways to keep your project bug-free is through a test suite, but you might forget to run tests all the time.</p>\n\n<p translation-result=\"on\">避免專案出 BUG 的最佳方式之一，就是使用測試套件。但是很容易忘了一直執行它。持續整合（CI）伺服器讓你可以配置專案的程式碼儲存庫，以便每次提交和收到 Pull Request 時就會執行你的測試。</p><p translation-origin=\"off\">Continuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.</p>\n\n<p translation-result=\"on\">要在持續整合 (CI) 中測試你的 Angular CLI 應用程式，請執行以下命令：</p><p translation-origin=\"off\">To test your Angular CLI application in Continuous integration (CI) run the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng test --no-watch --no-progress\n\n</code-example>\n<h2 id=\"more-information-on-testing\" translation-result=\"on\">關於測試的更多資訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-information-on-testing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More information on testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-information-on-testing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當你設定準備好測試環境之後，可能會發現以下測試指南很有用。</p><p translation-origin=\"off\">After you've set up your application for testing, you might find the following testing guides useful.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-code-coverage\">程式碼覆蓋</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-code-coverage\">Code coverage</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">找出你的測試覆蓋了多少應用，以及如何指定所需的數量。</nt-wrapper><nt-wrapper translation-origin=\"off\">How much of your app your tests are covering and how to specify required amounts.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-services\">測試服務</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-services\">Testing services</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">如何測試應用中所用的服務。</nt-wrapper><nt-wrapper translation-origin=\"off\">How to test the services your application uses.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-components-basics\">測試元件的基礎知識</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-components-basics\">Basics of testing components</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">測試 Angular 元件的基礎知識。</nt-wrapper><nt-wrapper translation-origin=\"off\">Basics of testing Angular components.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-components-scenarios\">元件測試場景</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-components-scenarios\">Component testing scenarios</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">瞭解各種元件測試場景和使用案例。</nt-wrapper><nt-wrapper translation-origin=\"off\">Various kinds of component testing scenarios and use cases.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-attribute-directives\">測試屬性型指令</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-attribute-directives\">Testing attribute directives</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">如何測試你的屬性型指令。</nt-wrapper><nt-wrapper translation-origin=\"off\">How to test your attribute directives.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-pipes\">測試管道</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-pipes\">Testing pipes</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">如何測試管道。</nt-wrapper><nt-wrapper translation-origin=\"off\">How to test pipes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/test-debugging\">除錯測試程式碼</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/test-debugging\">Debugging tests</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">發現測試程式碼的常見 BUG。</nt-wrapper><nt-wrapper translation-origin=\"off\">Common testing bugs.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/testing-utility-apis\">測試實用工具 API</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/testing-utility-apis\">Testing utility APIs</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Angular 的測試特性。</nt-wrapper><nt-wrapper translation-origin=\"off\">Angular testing features.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：1/17/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/developer-guide-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/test-debugging\n - guide/testing-code-coverage\n - guide/testing-utility-apis\n - tutorial/tour-of-heroes/toh-pt0\n-->\n<!-- links from this doc:\n - cli\n - cli/test\n - guide/architecture\n - guide/test-debugging\n - guide/testing#configuration\n - guide/testing#more-information-on-testing\n - guide/testing#other-test-frameworks\n - guide/testing#place-your-spec-file-next-to-the-file-it-tests\n - guide/testing#place-your-spec-files-in-a-test-folder\n - guide/testing#prerequisites\n - guide/testing#set-up-testing\n - guide/testing#test-file-name-and-location\n - guide/testing#testing\n - guide/testing#testing-in-continuous-integration\n - guide/testing#關於測試的更多資訊\n - guide/testing#其他測試框架\n - guide/testing#前提條件\n - guide/testing#建立持續整合環境\n - guide/testing#建立環境\n - guide/testing#把-spec-檔案放到-test-目錄下\n - guide/testing#把測試規約spec檔案放在它要測試的檔案旁邊\n - guide/testing#測試\n - guide/testing#測試檔名及其位置\n - guide/testing#配置\n - guide/testing-attribute-directives\n - guide/testing-code-coverage\n - guide/testing-components-basics\n - guide/testing-components-scenarios\n - guide/testing-pipes\n - guide/testing-services\n - guide/testing-utility-apis\n - tutorial/tour-of-heroes\n - http://karma-runner.github.io/6.4/config/configuration-file.html\n - https://github.com/dfederm/karma-jasmine-html-reporter\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/testing.md?message=docs%3A%20請簡述你的修改...\n - https://jasmine.github.io\n - https://javascript.info/\n - https://karma-runner.github.io\n-->"}