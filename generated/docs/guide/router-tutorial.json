{"id":"guide/router-tutorial","title":"Using Angular routes in a single-page application","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/router-tutorial.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"using-angular-routes-in-a-single-page-application\" translation-result=\"on\">在單頁面應用中使用 Angular 路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#using-angular-routes-in-a-single-page-application\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Using Angular routes in a single-page application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#using-angular-routes-in-a-single-page-application\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本課程將介紹如何建構一個使用多個 Angular 路由的單頁面應用 SPA。</p><p translation-origin=\"off\">This tutorial describes how to build a single-page application, SPA that uses multiple Angular routes.</p>\n\n<p translation-result=\"on\">在 SPA（Single Page Application 單頁面應用）中，所有應用的所有功能都存在於同一個 HTML 頁面中。當用戶存取應用的各種特性時，瀏覽器只需渲染那些使用者需要關心的部分，而不用重新載入頁面。這種模式可以顯著改善應用的使用者體驗。</p><p translation-origin=\"off\">In a Single Page Application (SPA), all of your application's functions exist in a single HTML page.\nAs users access your application's features, the browser needs to render only the parts that matter to the user, instead of loading a new page.\nThis pattern can significantly improve your application's user experience.</p>\n\n<p translation-result=\"on\">為了定義使用者如何在應用中導航，你可以使用路由。可以新增一些路由來定義使用者如何從應用的某個部分導航到另一部分。也可以配置一些路由來防範意外或未經授權的行為。</p><p translation-origin=\"off\">To define how users navigate through your application, you use routes.\nAdd routes to define how users navigate from one part of your application to another.\nYou can also configure routes to guard against unexpected or unauthorized behavior.</p>\n\n<p translation-result=\"on\">要探索本課程的範例應用，請參閱<live-example></live-example>。</p><p translation-origin=\"off\">To explore a sample application featuring the contents of this tutorial, see the <live-example></live-example>.</p>\n\n<h2 id=\"objectives\" translation-result=\"on\">目標<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#objectives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Objectives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#objectives\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">將範例應用的各個特性組織到一些模組中。</p><p translation-origin=\"off\">Organize a sample application's features into modules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定義如何導航到元件。</p><p translation-origin=\"off\">Define how to navigate to a component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用引數把資訊傳給元件。</p><p translation-origin=\"off\">Pass information to a component using a parameter.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過巢狀(Nesting)多個路由來構造路由體系。</p><p translation-origin=\"off\">Structure routes by nesting several routes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">檢查使用者是否可以存取路由。</p><p translation-origin=\"off\">Check whether users can access a route.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">控制該應用是否可以放棄未儲存的更改。</p><p translation-origin=\"off\">Control whether the application can discard unsaved changes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過預先獲取路由資料和延遲載入特性模組來提高效能。</p><p translation-origin=\"off\">Improve performance by pre-fetching route data and lazy loading feature modules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">需要特定的條件來載入元件。</p><p translation-origin=\"off\">Require specific criteria to load components.</p>\n\n</li>\n</ul>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要完成本課程，你應該對以下概念有基本的瞭解：</p><p translation-origin=\"off\">To complete this tutorial, you should have a basic understanding of the following concepts:</p>\n\n<ul>\n<li>\n<p>JavaScript</p>\n</li>\n<li>\n<p>HTML</p>\n</li>\n<li>\n<p>CSS</p>\n</li>\n<li>\n<p><a href=\"cli\">Angular CLI</a></p>\n</li>\n</ul>\n<p translation-result=\"on\">你可能會發現<a href=\"tutorial/tour-of-heroes\">《英雄之旅》課程</a>很有用，但這不是必需的。</p><p translation-origin=\"off\">You might find the <a href=\"tutorial/tour-of-heroes\">Tour of Heroes tutorial</a> helpful, but it is not required.</p>\n\n<h2 id=\"create-a-sample-application\" translation-result=\"on\">建立一個範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create a sample application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Angular CLI，建立一個新的應用<em>angular-router-sample</em>。這個應用程式有兩個元件：<em>crisis-list</em>和<em>heroes-list</em>。</p><p translation-origin=\"off\">Using the Angular CLI, create a new application, <em>angular-router-sample</em>.\nThis application will have two components: <em>crisis-list</em> and <em>heroes-list</em>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立一個新的 Angular 專案 <em>angular-router-sample</em>。</p><p translation-origin=\"off\">Create a new Angular project, <em>angular-router-sample</em>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng new angular-router-sample\n\n</code-example>\n<p translation-result=\"on\">當系統提示 <code>Would you like to add Angular routing?</code> 時，選擇 <code>N</code>。</p><p translation-origin=\"off\">When prompted with <code>Would you like to add Angular routing?</code>, select <code>N</code>.</p>\n\n<p translation-result=\"on\">當系統提示 <code>Which stylesheet format would you like to use?</code> 時，選擇 <code>CSS</code>。</p><p translation-origin=\"off\">When prompted with <code>Which stylesheet format would you like to use?</code>, select <code>CSS</code>.</p>\n\n<p translation-result=\"on\">一段時間後，一個新專案 <code>angular-router-sample</code> 就準備就緒了。</p><p translation-origin=\"off\">After a few moments, a new project, <code>angular-router-sample</code>, is ready.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在終端上，導航到 <code>angular-router-sample</code> 目錄。</p><p translation-origin=\"off\">From your terminal, navigate to the <code>angular-router-sample</code> directory.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個元件 <em>crisis-list</em>。</p><p translation-origin=\"off\">Create a component, <em>crisis-list</em>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component crisis-list\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在你的程式碼編輯器中，找到檔案 <code>crisis-list.component.html</code> 並用如下 HTML 替換佔位符內容。</p><p translation-origin=\"off\">In your code editor, locate the file, <code>crisis-list.component.html</code> and replace the placeholder content with the following HTML.</p>\n\n<code-example header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router-tutorial/src/app/crisis-list/crisis-list.component.html\">\n&lt;h3&gt;CRISIS CENTER&lt;/h3&gt;\n&lt;p&gt;Get your crisis here&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">建立第二個元件 <code>heroes-list</code>。</p><p translation-origin=\"off\">Create a second component, <em>heroes-list</em>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component heroes-list\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在你的程式碼編輯器中，找到 <code>heroes-list.component.html</code> 檔案，並用如下 HTML 替換佔位符內容。</p><p translation-origin=\"off\">In your code editor, locate the file, <code>heroes-list.component.html</code> and replace the placeholder content with the following HTML.</p>\n\n<code-example header=\"src/app/heroes-list/heroes-list.component.html\" path=\"router-tutorial/src/app/heroes-list/heroes-list.component.html\">\n&lt;h3&gt;HEROES&lt;/h3&gt;\n&lt;p&gt;Get your heroes here&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在你的程式碼編輯器中，開啟檔案 <code>app.component.html</code> 並用如下 HTML 替換其內容。</p><p translation-origin=\"off\">In your code editor, open the file, <code>app.component.html</code> and replace its contents with the following HTML.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"setup\">\n&lt;h1&gt;Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> Sample&lt;/h1&gt;\n&lt;app-crisis-list&gt;&lt;/app-crisis-list&gt;\n&lt;app-heroes-list&gt;&lt;/app-heroes-list&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">執行 <code>ng serve</code> 來驗證新應用是否正常執行。</p><p translation-origin=\"off\">Verify that your new application runs as expected by running the <code>ng serve</code> command.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">開啟瀏覽器存取 <code>http://localhost:4200</code>。</p><p translation-origin=\"off\">Open a browser to <code>http://localhost:4200</code>.</p>\n\n<p translation-result=\"on\">你會看到一個網頁，它由一個標題和兩個元件的 HTML 組成。</p><p translation-origin=\"off\">You should see a single web page, consisting of a title and the HTML of your two components.</p>\n\n</li>\n</ol>\n<h2 id=\"import-routermodule-from-angularrouter\" translation-result=\"on\">從 <code>@angular/router</code> 匯入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#從-angularrouter-匯入-routermodule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Import <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> from <code>@angular/router</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#import-routermodule-from-angularrouter\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">路由允許你根據 URL 路徑顯示應用的特定檢視。要把這個功能新增到你的範例應用中，你需要更新 <code>app.module.ts</code> 檔案以使用模組 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。你可以從 <code>@angular/router</code> 匯入該模組。</p><p translation-origin=\"off\">Routing lets you display specific views of your application depending on the URL path.\nTo add this functionality to your sample application, you need to update the <code>app.module.ts</code> file to use the module, <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nYou import this module from <code>@angular/router</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>app.module.ts</code> 檔案。</p><p translation-origin=\"off\">From your code editor, open the <code>app.module.ts</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增如下 <code>import</code> 陳述式。</p><p translation-origin=\"off\">Add the following <code>import</code> statement.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"router-import\">\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\n</code-example>\n</li>\n</ol>\n<h2 id=\"define-your-routes\" translation-result=\"on\">定義你的各個路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#define-your-routes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Define your routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#define-your-routes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本節中，你將定義兩個路由：</p><p translation-origin=\"off\">In this section, you'll define two routes:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">路由 <code>/crisis-center</code> 用來開啟 <code>crisis-center</code> 元件。</p><p translation-origin=\"off\">The route <code>/crisis-center</code> opens the <code>crisis-center</code> component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">路由 <code>/heroes-list</code> 用來開啟 <code>heroes-list</code> 元件。</p><p translation-origin=\"off\">The route <code>/heroes-list</code> opens the <code>heroes-list</code> component.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">路由定義是一個 JavaScript 物件。每個路由通常都有兩個屬性。第一個屬性 <code>path</code> 是一個字串，它指定路由的 URL 路徑。第二個屬性 <code>component</code> 是元件類，它指定應用要為該路由顯示哪個元件。</p><p translation-origin=\"off\">A route definition is a JavaScript object.\nEach route typically has two properties.\nThe first property, <code>path</code>, is a string that specifies the URL path for the route.\nThe second property, <code>component</code>, is a string that specifies what component your application should display for that path.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>app.module.ts</code> 檔案。</p><p translation-origin=\"off\">From your code editor, open the <code>app.module.ts</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">找到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 部分。</p><p translation-origin=\"off\">Locate the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> section.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">用如下程式碼替換這部分的 <code>imports</code> 陣列。</p><p translation-origin=\"off\">Replace the <code>imports</code> array in that section with the following.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-basic\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n  ]),\n],\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">這段程式碼把 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 新增到了 <code>imports</code> 陣列中。接下來，該程式碼使用 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 的 <code>forRoot()</code> 方法來定義你的兩個路由。該方法接受一個 JavaScript 物件陣列，每個物件定義一個路由的屬性。<code>forRoot()</code> 方法確保你的應用只會例項化一個 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。欲知詳情，請參閱<a href=\"guide/singleton-services#forroot-and-the-router\">單例服務</a>。</p><p translation-origin=\"off\">This code adds the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>imports</code> array.\nNext, the code uses the <code>forRoot()</code> method of the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to define your two routes.\nThis method takes an array of JavaScript objects, with each object defining the properties of a route.\nThe <code>forRoot()</code> method ensures that your application only instantiates one <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nFor more information, see <a href=\"guide/singleton-services#forroot-and-the-router\">Singleton Services</a>.</p>\n\n<h2 id=\"update-your-component-with-router-outlet\" translation-result=\"on\">更新你的元件以新增 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#更新你的元件以新增-router-outlet\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Update your component with <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#update-your-component-with-router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">此刻，你已經為應用定義了兩個路由。但是，你的應用仍然在你的 <code>app.component.html</code> 範本中硬編碼著 <code>crisis-list</code> 和 <code>heroes-list</code> 元件。為了讓你的路由正常工作，需要更新範本，以便根據 URL 路徑動態載入一個元件。</p><p translation-origin=\"off\">At this point, you have defined two routes for your application.\nHowever, your application still has both the <code>crisis-list</code> and <code>heroes-list</code> components hard-coded in your <code>app.component.html</code> template.\nFor your routes to work, you need to update your template to dynamically load a component based on the URL path.</p>\n\n<p translation-result=\"on\">要實現這個功能，你就可以把 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令新增到範本檔案中。</p><p translation-origin=\"off\">To implement this functionality, you add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive to your template file.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>app.component.html</code> 檔案。</p><p translation-origin=\"off\">From your code editor, open the <code>app.component.html</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">刪除下面這幾行。</p><p translation-origin=\"off\">Delete the following lines.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"components\">\n&lt;app-crisis-list&gt;&lt;/app-crisis-list&gt;\n&lt;app-heroes-list&gt;&lt;/app-heroes-list&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">新增 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> 指令。</p><p translation-origin=\"off\">Add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"router-outlet\">\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">在瀏覽器中檢視更新後的應用。你應該只看到應用標題。要檢視 <code>crisis-list</code> 元件，就要把 <code>crisis-list</code> 新增到瀏覽器位址列的路徑末尾。比如：</p><p translation-origin=\"off\">View your updated application in your browser.\nYou should see only the application title.\nTo view the <code>crisis-list</code> component, add <code>crisis-list</code> to the end of the path in your browser's address bar.\nFor example:</p>\n\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/crisis-list\n\n</code-example>\n<p translation-result=\"on\">注意，<code>crisis-list</code> 元件會顯示出來。Angular 正在使用你定義的路由來動態載入元件。你可以用同樣的方法載入 <code>heroes-list</code> 元件：</p><p translation-origin=\"off\">Notice that the <code>crisis-list</code> component displays.\nAngular is using the route you defined to dynamically load the component.\nYou can load the <code>heroes-list</code> component the same way:</p>\n\n<code-example format=\"https\" language=\"https\">\n\nhttp://localhost:4200/heroes-list\n\n</code-example>\n<h2 id=\"control-navigation-with-ui-elements\" translation-result=\"on\">用 UI 元素控制導航<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#control-navigation-with-ui-elements\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Control navigation with UI elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#control-navigation-with-ui-elements\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">目前，你的應用支援兩種路由。但是目前使用這些路由的唯一方法是讓使用者在瀏覽器的位址列中手動輸入路徑。在本節中，你要新增兩個連結，使用者可以單擊它們在 <code>heroes-list</code> 和 <code>crisis-list</code> 元件之間導航。你還會新增一些 CSS 樣式。雖然這些樣式不是必需的，但它們可以讓你更容易的識別出當前顯示的元件的連結。你將在下一節中新增此功能。</p><p translation-origin=\"off\">Currently, your application supports two routes.\nHowever, the only way to use those routes is for the user to manually type the path in the browser's address bar.\nIn this section, you'll add two links that users can click to navigate between the <code>heroes-list</code> and <code>crisis-list</code> components.\nYou'll also add some CSS styles.\nWhile these styles are not required, they make it easier to identify the link for the currently-displayed component.\nYou'll add that functionality in the next section.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">開啟 <code>app.component.html</code> 檔案，在標題下方新增以下 HTML。</p><p translation-origin=\"off\">Open the <code>app.component.html</code> file and add the following HTML below the title.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"nav\">\n&lt;nav&gt;\n  &lt;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\"&gt;Crisis Center&lt;/a&gt; |\n  &lt;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n\n</code-example>\n<p translation-result=\"on\">這個 HTML 使用了 Angular 指令 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>。該指令將你定義的路由連線到範本檔案中。</p><p translation-origin=\"off\">This HTML uses an Angular directive, <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>.\nThis directive connects the routes you defined to your template files.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>app.component.css</code> 檔案並新增如下樣式。</p><p translation-origin=\"off\">Open the <code>app.component.css</code> file and add the following styles.</p>\n\n<code-example header=\"src/app/app.component.css\" path=\"router-tutorial/src/app/app.component.css\">\n.button {\n    box-shadow: inset 0 1px 0 0 #ffffff;\n    background: #ffffff linear-gradient(to bottom, #ffffff 5%, #f6f6f6 100%);\n    border-radius: 6px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    cursor: pointer;\n    color: #666666;\n    font-family: Arial, sans-serif;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0 1px 0 #ffffff;\n    outline: 0;\n}\n.activebutton {\n    box-shadow: inset 0 1px 0 0 #dcecfb;\n    background: #bddbfa linear-gradient(to bottom, #bddbfa 5%, #80b5ea 100%);\n    border: 1px solid #84bbf3;\n    color: #ffffff;\n    text-shadow: 0 1px 0 #528ecc;\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">如果你在瀏覽器中檢視應用，你會看到這兩個連結。單擊某個連結時，會出現相應的元件。</p><p translation-origin=\"off\">If you view your application in the browser, you should see these two links.\nWhen you click on a link, the corresponding component appears.</p>\n\n<h2 id=\"identify-the-active-route\" translation-result=\"on\">標出活動路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#identify-the-active-route\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Identify the active route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#identify-the-active-route\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">雖然使用者可以使用上一節中新增的連結來瀏覽你的應用，但他們並沒有簡單的方法來確定活動路由是什麼。可以用 Angular 的 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令新增這個功能。</p><p translation-origin=\"off\">While users can navigate your application using the links you added in the previous section, they don't have a straightforward way to identify what the active route is.\nAdd this functionality using Angular's <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>app.component.html</code> 檔案。</p><p translation-origin=\"off\">From your code editor, open the <code>app.component.html</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">更新 a 標籤以包含 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令。</p><p translation-origin=\"off\">Update the anchor tags to include the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"routeractivelink\">\n&lt;nav&gt;\n  &lt;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\"&gt;\n    Crisis Center\n  &lt;/a&gt; |\n  &lt;a class=\"button\"\n     <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\"\n     <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\"\n     ariaCurrentWhenActive=\"page\"&gt;\n    Heroes\n  &lt;/a&gt;\n&lt;/nav&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">再次檢視你的申請表。單擊其中一個按鈕時，該按鈕的樣式會自動更新，併為該使用者標出該活動元件。透過新增 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 指令，可以通知你的應用把一個特定的 CSS 類應用到當前的活動路由中。在本課程中，這個 CSS 類是 <code>activebutton</code>，但你可以使用任何想要的類別。</p><p translation-origin=\"off\">View your application again.\nAs you click one of the buttons, the style for that button updates automatically, identifying the active component to the user.\nBy adding the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive, you inform your application to apply a specific CSS class to the active route.\nIn this tutorial, that CSS class is <code>activebutton</code>, but you could use any class that you want.</p>\n\n<p translation-result=\"on\">請注意，我們還為 <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> 的 <code>ariaCurrentWhenActive</code> 指定了一個值。這可確保視障使用者（他們可能無法感知正在應用的不同樣式）也可以識別活動按鈕。有關更多資訊，請參閱無障礙性最佳實踐<a href=\"guide/accessibility#active-links-identification\">活動連結標識部分</a>。</p><p translation-origin=\"off\">Note that we are also specifying a value for the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code>'s <code>ariaCurrentWhenActive</code>. This makes sure that visually impaired users (which may not perceive the different styling being applied) can also identify the active button. For more information see the Accessibility Best Practices <a href=\"guide/accessibility#active-links-identification\">Active links identification section</a>.</p>\n\n<h2 id=\"adding-a-redirect\" translation-result=\"on\">新增一個重新導向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-redirect\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding a redirect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-redirect\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在本課程的這一步中，你將新增一個重新導向路由來把使用者導向 <code>/heroes-list</code> 元件。</p><p translation-origin=\"off\">In this step of the tutorial, you add a route that redirects the user to display the <code>/heroes-list</code> component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>app.module.ts</code> 檔案。</p><p translation-origin=\"off\">From your code editor, open the <code>app.module.ts</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>imports</code> 陣列中，按如下所示更新 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 部分。</p><p translation-origin=\"off\">In the <code>imports</code> array, update the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> section as follows.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-redirect\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n    {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n  ]),\n],\n\n</code-example>\n<p translation-result=\"on\">注意這個新路由使用一個空字串作為它的路徑。另外，它還把 <code>component</code> 屬性替換成了這兩個新屬性：</p><p translation-origin=\"off\">Notice that this new route uses an empty string as its path.\nIn addition, it replaces the <code>component</code> property with two new ones:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Properties</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>redirectTo</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個屬性指示 Angular 從空路徑重新導向到 <code>heroes-list</code> 路徑。</nt-wrapper><nt-wrapper translation-origin=\"off\">This property instructs Angular to redirect from an empty path to the <code>heroes-list</code> path.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>pathMatch</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個屬性指示 Angular 要如何匹配 URL。對於本課程，你應該把這個屬性設定為 <code>full</code>。當路徑為空字串時，建議使用此策略。關於此屬性的更多資訊，請參閱 <a href=\"/api/router/Route\">Route API 文件</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">This property instructs Angular on how much of the URL to match. For this tutorial, you should set this property to <code>full</code>. This strategy is recommended when you have an empty string for a path. For more information about this property, see the <a href=\"api/router/Route\">Route API documentation</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</li>\n</ol>\n<p translation-result=\"on\">現在，當你開啟應用時，它會預設顯示 <code>heroes-list</code> 元件。</p><p translation-origin=\"off\">Now when you open your application, it displays the <code>heroes-list</code> component by default.</p>\n\n<h2 id=\"adding-a-404-page\" translation-result=\"on\">新增 404 頁面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-404-page\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding a 404 page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用者可以嘗試存取你尚未定義的路由。為了解決這個問題，最佳做法是顯示一個 404 頁面。在本節中，你將建立一個 404 頁面，並更新路由配置，以便為任何未指定的路由顯示該頁面。</p><p translation-origin=\"off\">It is possible for a user to try to access a route that you have not defined.\nTo account for this behavior, the best practice is to display a 404 page.\nIn this section, you'll create a 404 page and update your route configuration to show that page for any unspecified routes.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在終端上，建立一個新的元件 <code>PageNotFound</code>。</p><p translation-origin=\"off\">From the terminal, create a new component, <code>PageNotFound</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component page-not-found\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在程式碼編輯器中，開啟 <code>page-not-found.component.html</code> 檔案並用下面的 HTML 替換它的內容。</p><p translation-origin=\"off\">From your code editor, open the <code>page-not-found.component.html</code> file and replace its contents with the following HTML.</p>\n\n<code-example header=\"src/app/page-not-found/page-not-found.component.html\" path=\"router-tutorial/src/app/page-not-found/page-not-found.component.html\">\n&lt;h2&gt;Page Not Found&lt;/h2&gt;\n&lt;p&gt;We couldn't find that page! Not even with x-ray vision.&lt;/p&gt;\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>app.module.ts</code> 檔案。在其 <code>imports</code> 陣列中，按如下所示更新 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 部分的內容。</p><p translation-origin=\"off\">Open the <code>app.module.ts</code> file.\nIn the <code>imports</code> array, update the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> section as follows.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-wildcard\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n    {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n    {path: '**', component: PageNotFoundComponent}\n  ]),\n],\n\n</code-example>\n<p translation-result=\"on\">新路由使用路徑 <code>**</code>。這個路徑是 Angular 表示萬用字元路由的方式。任何與你配置中的路由都不匹配的路由都會使用這個路由。</p><p translation-origin=\"off\">The new route uses a path, <code>**</code>.\nThis path is how Angular identifies a wildcard route.\nAny route that does not match an existing route in your configuration will use this route.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">請注意，萬用字元路由要放在陣列的末尾。路由的順序很重要，因為 Angular 會按順序應用路由並使用所找到的第一個匹配項。</p><p translation-origin=\"off\">Notice that the wildcard route is placed at the end of the array.\nThe order of your routes is important, as Angular applies routes in order and uses the first match it finds.</p>\n\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">嘗試導航到應用中不存在的路由，比如 <code>http://localhost:4200/powers</code>。此路由與 <code>app.module.ts</code> 檔案中定義的所有內容都不匹配。但是，由於你定義了一個萬用字元路由，該應用會自動顯示你的 <code>PageNotFound</code> 元件。</p><p translation-origin=\"off\">Try navigating to a non-existing route on your application, such as <code>http://localhost:4200/powers</code>.\nThis route doesn't match anything defined in your <code>app.module.ts</code> file.\nHowever, because you defined a wildcard route, the application automatically displays your <code>PageNotFound</code> component.</p>\n\n<h2 id=\"next-steps\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#next-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你已經有了一個基本的應用程式，它使用 Angular 的路由功能來根據 URL 地址改變使用者可以看到的元件。你還擴充了這些特性，以包含一個重新導向，以及一個用來顯示自訂 404 頁面的萬用字元路由。</p><p translation-origin=\"off\">At this point, you have a basic application that uses Angular's routing feature to change what components the user can see based on the URL address.\nYou have extended these features to include a redirect, as well as a wildcard route to display a custom 404 page.</p>\n\n<p translation-result=\"on\">關於路由的更多資訊，請參閱以下主題：</p><p translation-origin=\"off\">For more information about routing, see the following topics:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/router\">應用內路由和導航</a></p><p translation-origin=\"off\"><a href=\"guide/router\">In-app Routing and Navigation</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"api/router\">路由器 API</a></p><p translation-origin=\"off\"><a href=\"api/router\">Router API</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/routing-overview\n - guide/routing-with-urlmatcher\n-->\n<!-- links from this doc:\n - /api/router/Route\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/router\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - cli\n - guide/accessibility#active-links-identification\n - guide/router\n - guide/router-tutorial#adding-a-404-page\n - guide/router-tutorial#adding-a-redirect\n - guide/router-tutorial#control-navigation-with-ui-elements\n - guide/router-tutorial#create-a-sample-application\n - guide/router-tutorial#define-your-routes\n - guide/router-tutorial#identify-the-active-route\n - guide/router-tutorial#import-routermodule-from-angularrouter\n - guide/router-tutorial#next-steps\n - guide/router-tutorial#objectives\n - guide/router-tutorial#prerequisites\n - guide/router-tutorial#update-your-component-with-router-outlet\n - guide/router-tutorial#using-angular-routes-in-a-single-page-application\n - guide/router-tutorial#下一步\n - guide/router-tutorial#從-angularrouter-匯入-routermodule\n - guide/router-tutorial#建立一個範例應用\n - guide/router-tutorial#前提條件\n - guide/router-tutorial#在單頁面應用中使用-angular-路由\n - guide/router-tutorial#定義你的各個路由\n - guide/router-tutorial#更新你的元件以新增-router-outlet\n - guide/router-tutorial#標出活動路由\n - guide/router-tutorial#新增-404-頁面\n - guide/router-tutorial#新增一個重新導向\n - guide/router-tutorial#用-ui-元素控制導航\n - guide/router-tutorial#目標\n - guide/singleton-services#forroot-and-the-router\n - tutorial/tour-of-heroes\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/router-tutorial.md?message=docs%3A%20請簡述你的修改...\n-->"}