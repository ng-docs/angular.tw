{"id":"guide/ngmodule-api","title":"NgModule API","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ngmodule-api.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"ngmodule-api\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-result=\"on\">宏觀來講，NgModule 是組織 Angular 應用的一種方式，它們透過 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器中的元資料來實現這一點。這些元資料可以分成三類：</p><p translation-origin=\"off\">At a high level, NgModules are a way to organize Angular applications and they accomplish this through the metadata in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator.\nThe metadata falls into three categories:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">分類</nt-wrapper><nt-wrapper translation-origin=\"off\">Category</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">靜態</nt-wrapper><nt-wrapper translation-origin=\"off\">Static</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這個編譯器配置用於告訴編譯器指令的選擇器並透過選擇器匹配的方式決定要把該指令應用到範本中的什麼位置。它是透過 <code>declarations</code> 陣列來配置的。</nt-wrapper><nt-wrapper translation-origin=\"off\">Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured using the <code>declarations</code> array.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">執行時</nt-wrapper><nt-wrapper translation-origin=\"off\">Runtime</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">透過 <code>providers</code> 陣列提供給注入器的配置。</nt-wrapper><nt-wrapper translation-origin=\"off\">Injector configuration using the <code>providers</code> array.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">組合 / 分組</nt-wrapper><nt-wrapper translation-origin=\"off\">Composability / Grouping</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">透過 <code>imports</code> 和 <code>exports</code> 陣列來把多個 NgModule 放在一起，並讓它們可用。</nt-wrapper><nt-wrapper translation-origin=\"off\">Bringing NgModules together and making them available using the <code>imports</code> and <code>exports</code> arrays.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n\n</code-example>\n<h2 id=\"ngmodule-metadata\" translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-元資料\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料中屬性的彙總表。</p><p translation-origin=\"off\">The following table summarizes the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Property</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><em>屬於此模組</em>的可<a href=\"guide/ngmodule-faq#q-declarable\">宣告</a>類（<em>元件</em>、<em>指令</em>和<em>管道</em>）的列表。<ol><li>編譯範本時，你需要確定一組選擇器，用於觸發其對應的指令。</li><li>範本是在 NgModule（宣告範本元件的 NgModule）的上下文中編譯的，它使用以下規則確定選擇器集：<ul><li><code>declarations</code> 中列出的指令的所有選擇器。</li><li>從匯入的 NgModules 匯出的指令的所有選擇器。</li></ul></li></ol>元件、指令和管道必須<em>正好</em>屬於一個模組。如果你嘗試在多個模組中宣告同一個類，編譯器會發出錯誤。請注意不要重新宣告從另一個模組直接或間接匯入的類別。</nt-wrapper><nt-wrapper translation-origin=\"off\">A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes (<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>. <ol> <li> When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives. </li> <li> The template is compiled within the context of an NgModule —the NgModule within which the template's component is declared— which determines the set of selectors using the following rules: <ul> <li> All selectors of directives listed in <code>declarations</code>. </li> <li> All selectors of directives exported from imported NgModules. </li> </ul> </li> </ol> Components, directives, and pipes must belong to <em>exactly</em> one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">依賴注入提供者的列表。<br>Angular 會使用 NgModule 的注入器註冊這些提供者。如果是用於引導的 NgModule，則它是根注入器。<br>這些服務可用於注入到作為此注入器子項的任何元件、指令、管道或服務中。<br>延遲載入的模組有自己的注入器，它通常是應用程式根注入器的子。<br>延遲載入的服務的範圍為延遲模組的注入器。如果延遲載入的模組還提供了 <code>UserService</code>，則在該模組的上下文中建立的任何元件（例如透過路由器導航）都會獲取服務的本地例項，而不是根應用程式注入器中的例項。<br>外部模組中的元件會繼續接收其注入器提供的例項。<br>有關注入器層次結構和範圍的更多資訊，請參閱<a href=\"guide/providers\">提供者</a>和<a href=\"guide/dependency-injection\">DI 指南</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">A list of dependency-injection providers. <br> Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector. <br> These services become available for injection into any component, directive, pipe or service which is a child of this injector. <br> A lazy-loaded module has its own injector which is typically a child of the application root injector. <br> Lazy-loaded services are scoped to the lazy module's injector. If a lazy-loaded module also provides the <code>UserService</code>, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root application injector. <br> Components in external modules continue to receive the instance provided by their injectors. <br> For more information on injector hierarchy and scoping, see <a href=\"guide/providers\">Providers</a> and the <a href=\"guide/dependency-injection\">DI Guide</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應該摺疊到此模組中的模組列表。Folded 意味著就好像所有匯入的 NgModule 的匯出屬性都在這裡聲明瞭。<br>具體來說，就好像在此模組中聲明瞭其匯出的元件、指令或管道被元件範本參考的模組列表。<br>當在此模組中宣告參考或者匯入的模組已匯出它時，元件範本<a href=\"guide/ngmodule-faq#q-template-reference\">可以參考</a>另一個元件、指令或管道。例如，只有在模組匯入了 Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>（可能是透過匯入 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 間接）時，元件才能使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令。<br>你可以從 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 匯入許多標準指令，但一些熟悉的指令屬於其他模組。例如，你只能在匯入 Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 之後使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here. <br> Specifically, it is as if the list of modules whose exported components, directives, or pipes are referenced by the component templates were declared in this module. <br> A component template can <a href=\"guide/ngmodule-faq#q-template-reference\">reference</a> another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directives only if the module has imported the Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> (perhaps indirectly by importing <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>). <br> You can import many standard directives from the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> but some familiar directives belong to other modules. For example, you can use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> only after importing the Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">匯入模組可以使用的宣告列表（<em>元件</em>、<em>指令</em>和<em>管道</em>類）。<br>匯出的宣告是模組的<em>公共 API</em>。如果另一個模組中的元件匯入此模組並且此模組匯出 <code>UserComponent</code>，則另一個模組中的元件可以<a href=\"guide/ngmodule-faq#q-template-reference\">用</a><em>此</em>模組的 <code>UserComponent</code>。<br>預設情況下，宣告是私有的。如果此模組<em>不</em>匯出 <code>UserComponent</code>，則只有<em>此</em>模組中的元件可以使用 <code>UserComponent</code>。<br>匯入模組<em>不會</em>自動重新匯出匯入模組的匯入。模組“B”不能使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，因為它匯入了模組“A”，而模組“A”又匯入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。模組“B”必須匯入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 本身。<br>一個模組可以在其 <code>exports</code> 中列出另一個模組，在這種情況下，該模組的所有公共元件、指令和管道都會被匯出。<br><a href=\"guide/ngmodule-faq#q-reexport\">重新匯出</a>使模組可傳遞性顯式。如果模組“A”重新匯出 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>，而模組“B”匯入了模組“A”，則模組“B”元件可以用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，即使“B”本身沒有匯入 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">A list of declarations —<em>component</em>, <em>directive</em>, and <em>pipe</em> classes— that an importing module can use. <br> Exported declarations are the module's <em>public API</em>. A component in another module can <a href=\"guide/ngmodule-faq#q-template-reference\">use</a> <em>this</em> module's <code>UserComponent</code> if it imports this module and this module exports <code>UserComponent</code>. <br> Declarations are private by default. If this module does <em>not</em> export <code>UserComponent</code>, then only the components within <em>this</em> module can use <code>UserComponent</code>. <br> Importing a module does <em>not</em> automatically re-export the imported module's imports. Module 'B' can't use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> just because it imported module 'A' which imported <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>. Module 'B' must import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> itself. <br> A module can list another module among its <code>exports</code>, in which case all of that module's public components, directives, and pipes are exported. <br> <a href=\"guide/ngmodule-faq#q-reexport\">Re-export</a> makes module transitivity explicit. If Module 'A' re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and Module 'B' imports Module 'A', Module 'B' components can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> even though 'B' itself didn't import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">自動引導的元件列表。<br>通常此列表中只有一個元件，即應用程式的<em>根元件</em>。<br>Angular 可以用多個引導元件啟動，每個元件在宿主網頁中都有自己的位置。</nt-wrapper><nt-wrapper translation-origin=\"off\">A list of components that are automatically bootstrapped. <br> Usually there's only one component in this list, the <em>root component</em> of the application. <br> Angular can launch with multiple bootstrap components, each with its own location in the host web page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"more-on-ngmodules\" translation-result=\"on\">關於 NgModule 的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You may also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/feature-modules\">特性模組</a></p><p translation-origin=\"off\"><a href=\"guide/feature-modules\">Feature Modules</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/providers\">服務提供者</a></p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/module-types\">特性模組的分類</a></p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgFor\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-api#ngmodule-元資料\n - guide/ngmodule-api#關於-ngmodule-的更多知識\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/providers\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ngmodule-api.md?message=docs%3A%20請簡述你的修改...\n-->"}