{"id":"guide/property-binding-best-practices","title":"Property binding best practices","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/property-binding-best-practices.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"property-binding-best-practices\" translation-result=\"on\">屬性繫結的最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Property binding best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">透過遵循一些指導原則，你可以使用屬性繫結來幫助你減少錯誤並讓程式碼保持可讀性。</p><p translation-origin=\"off\">By following a few guidelines, you can use property binding in a way that helps you reduce bugs and keep your code readable.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本章包含程式碼片段的工作例項參閱<live-example name=\"property-binding\"></live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"property-binding\"></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"avoid-side-effects\" translation-result=\"on\">避免副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Avoid side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本表示式的計算應該沒有明顯的副作用。使用範本表示式的語法來幫你避免副作用。通常，正確的語法會阻止你為屬性繫結表示式中的任何東西賦值。該語法還會阻止你使用遞增和遞減運算子。</p><p translation-origin=\"off\">Evaluation of a template expression should have no visible side effects.\nUse the syntax for template expressions to help avoid side effects.\nIn general, the correct syntax prevents you from assigning a value to anything in a property binding expression.\nThe syntax also prevents you from using increment and decrement operators.</p>\n\n<h3 id=\"an-example-of-producing-side-effects\" translation-result=\"on\">產生副作用的一個例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">An example of producing side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你的表示式改變了你所繫結的其它東西的值，那麼這種更改就會產生副作用。Angular 可能顯示也可能不顯示更改後的值。如果 Angular 確實檢測到了這個變化，就會丟擲一個錯誤。</p><p translation-origin=\"off\">If you had an expression that changed the value of something else that you were binding to, that change of value would be a side effect.\nAngular might or might not display the changed value.\nIf Angular does detect the change, it throws an error.</p>\n\n<p translation-result=\"on\">作為一項最佳實踐，請只使用屬性和僅會返回值的方法。</p><p translation-origin=\"off\">As a best practice, use only properties and methods that return values.</p>\n\n<h2 id=\"return-the-proper-type\" translation-result=\"on\">返回合適的型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本表示式應該求值為目標屬性所期望的值型別。例如，返回：</p><p translation-origin=\"off\">A template expression should result in the type of value that the target property expects.\nFor example, return:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一個 <code>string</code>，如果目標屬性需要一個字串</p><p translation-origin=\"off\">a <code>string</code>, if the target property expects a string</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個 <code>number</code>，如果目標屬性需要一個數字</p><p translation-origin=\"off\">a <code>number</code>, if it expects a number</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個 <code>object</code>，如果目標屬性需要一個物件。</p><p translation-origin=\"off\">an <code>object</code>, if it expects an object.</p>\n\n</li>\n</ul>\n<p>範本表示式應該求值為目標屬性所期望的值型別。比如，如果目標屬性需要一個字串，就返回一個字串；如果需要一個數字，就返回一個數字；如果需要一個物件，就返回一個物件。</p>\n<h3 id=\"passing-in-a-string\" translation-result=\"on\">傳入字串<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Passing in a string<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在下面的例子中，<code>ItemDetailComponent</code> 的 <code>childItem</code> 屬性需要一個字串。</p><p translation-origin=\"off\">In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\">\n&lt;app-item-detail [childItem]=\"parentItem\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p translation-result=\"on\">你可以透過檢視 <code>ItemDetailComponent</code> 來確認這種預期，其中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 型別為 <code>string</code>：</p><p translation-origin=\"off\">Confirm this expectation by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> type is <code>string</code>:</p>\n\n<code-example header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\" path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem = '';\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 中的 <code>parentItem</code> 是一個字串，這意味著 <code>[childItem]=\"parentItem\"</code> 中的 <code>parentItem</code> 應該求值為一個字串。</p><p translation-origin=\"off\">The <code>parentItem</code> in <code>AppComponent</code> is a string, which means that the expression, <code>parentItem</code> within <code>[childItem]=\"parentItem\"</code>, evaluates to a string.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\">\nparentItem = 'lamp';\n\n</code-example>\n<p translation-result=\"on\">如果 <code>parentItem</code> 是其它型別的，你同樣應該把 <code>childItem</code> 這個 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 指定為那個型別。</p><p translation-origin=\"off\">If <code>parentItem</code> were some other type, you would need to specify <code>childItem</code>  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> as that type as well.</p>\n\n<h3 id=\"passing-in-an-object\" translation-result=\"on\">傳入一個物件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在這個例子中，<code>ItemListComponent</code> 是 <code>AppComponent</code> 的子元件，其 <code>items</code> 屬性需要一個物件陣列。</p><p translation-origin=\"off\">In this example, <code>ItemListComponent</code> is a child component of <code>AppComponent</code> and the <code>items</code> property expects an array of objects.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"property-binding/src/app/app.component.html\" region=\"pass-object\">\n&lt;app-item-list [items]=\"currentItems\"&gt;&lt;/app-item-list&gt;\n\n</code-example>\n<p translation-result=\"on\">在 <code>ItemListComponent</code> 中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> <code>items</code> 的型別為 <code>Item[]</code>。</p><p translation-origin=\"off\">In the <code>ItemListComponent</code> the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, <code>items</code>, has a type of <code>Item[]</code>.</p>\n\n<code-example header=\"src/app/item-list.component.ts\" path=\"property-binding/src/app/item-list/item-list.component.ts\" region=\"item-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[] = [];\n\n</code-example>\n<p translation-result=\"on\">注意 <code>Item</code> 是一個有兩個屬性的物件。一個是 <code>id</code>，一個是 <code>name</code>。</p><p translation-origin=\"off\">Notice that <code>Item</code> is an object and it has two properties, an <code>id</code> and a <code>name</code>.</p>\n\n<code-example header=\"src/app/item.ts\" path=\"property-binding/src/app/item.ts\" region=\"item-class\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p translation-result=\"on\">在 <code>app.component.ts</code> 中，<code>currentItems</code> 是一個物件陣列，與 <code>items.ts</code> 中的 <code>Item</code> 物件具有相同的形態：有一個 <code>id</code>，有一個 <code>name</code>。</p><p translation-origin=\"off\">In <code>app.component.ts</code>, <code>currentItems</code> is an array of objects in the same shape as the <code>Item</code> object in <code>items.ts</code>, with an <code>id</code> and a <code>name</code>.</p>\n\n<code-example header=\"src/app.component.ts\" path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p translation-result=\"on\">透過提供一個形態相同的物件，你就可以滿足 Angular 在計算表示式 <code>currentItems</code> 時對 <code>items</code> 的期待。</p><p translation-origin=\"off\">By supplying an object in the same shape, you meet the expectations of <code>items</code> when Angular evaluates the expression <code>currentItems</code>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/property-binding\n-->\n<!-- links from this doc:\n - api/core/Input\n - guide/property-binding-best-practices#an-example-of-producing-side-effects\n - guide/property-binding-best-practices#avoid-side-effects\n - guide/property-binding-best-practices#passing-in-a-string\n - guide/property-binding-best-practices#passing-in-an-object\n - guide/property-binding-best-practices#property-binding-best-practices\n - guide/property-binding-best-practices#return-the-proper-type\n - guide/property-binding-best-practices#產生副作用的一個例子\n - guide/property-binding-best-practices#傳入一個物件\n - guide/property-binding-best-practices#傳入字串\n - guide/property-binding-best-practices#屬性繫結的最佳實踐\n - guide/property-binding-best-practices#返回合適的型別\n - guide/property-binding-best-practices#避免副作用\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/property-binding-best-practices.md?message=docs%3A%20請簡述你的修改...\n-->"}