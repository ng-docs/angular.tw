{"id":"guide/angular-compiler-options","title":"Angular compiler options","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/angular-compiler-options.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angular-compiler-options\" translation-result=\"on\">Angular 編譯器選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#angular-compiler-options\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Angular compiler options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#angular-compiler-options\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">使用 <a href=\"guide/aot-compiler\">預先（AoT）編譯</a> 時，可以透過在 <a href=\"guide/typescript-configuration\">TypeScript 配置檔案中</a>指定<em>範本</em>編譯器選項來控制如何編譯應用程式。</p><p translation-origin=\"off\">When you use <a href=\"guide/aot-compiler\">ahead-of-time compilation (AOT)</a>, you can control how your application is compiled by specifying <em>template</em> compiler options in the <a href=\"guide/typescript-configuration\">TypeScript configuration file</a>.</p>\n\n<p translation-result=\"on\">範本選項物件 <code>angularCompilerOptions</code> 和為 TypeScript 編譯器提供標準選項的 <code>compilerOptions</code> 物件是兄弟。</p><p translation-origin=\"off\">The template options object, <code>angularCompilerOptions</code>, is a sibling to the <code>compilerOptions</code> object that supplies standard options to the TypeScript compiler.</p>\n\n<code-example header=\"tsconfig.json\" path=\"angular-compiler-options/tsconfig.json\" region=\"angular-compiler-options\">\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    // ...\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    // ...\n  }\n}\n\n</code-example>\n<p><a id=\"tsconfig-extends\"></a></p>\n<h2 id=\"configuration-inheritance-with-extends\" translation-result=\"on\">用 <code>extends</code> 語法配置繼承方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#configuration-inheritance-with-extends\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuration inheritance with extends<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#configuration-inheritance-with-extends\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">像 TypeScript 編譯器一樣，Angular 的 AOT 編譯器也支援對 TypeScript 配置檔案中的 <code>angularCompilerOptions</code> 進行 <code>extends</code>。<code>extends</code> 屬性位於最上層，和 <code>compilerOptions</code> 和 <code>angularCompilerOptions</code> 平級。</p><p translation-origin=\"off\">Like the TypeScript compiler, the Angular AOT compiler also supports <code>extends</code> in the <code>angularCompilerOptions</code> section of the TypeScript configuration file.\nThe <code>extends</code> property is at the top level, parallel to <code>compilerOptions</code> and <code>angularCompilerOptions</code>.</p>\n\n<p translation-result=\"on\">使用 <code>extends</code> 屬性，TypeScript 配置可以從另一個檔案中繼承設定。首先從基礎檔案中載入配置項，然後被繼承自它的配置檔案中的配置項覆寫。</p><p translation-origin=\"off\">A TypeScript configuration can inherit settings from another file using the <code>extends</code> property.\nThe configuration options from the base file are loaded first, then overridden by those in the inheriting configuration file.</p>\n\n<p translation-result=\"on\">比如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example header=\"tsconfig.app.json\" path=\"angular-compiler-options/tsconfig.app.json\" region=\"angular-compiler-options-app\">\n{\n    \"extends\": \"./tsconfig.json\",\n    \"compilerOptions\": {\n      \"outDir\": \"./out-tsc/app\",\n    // ...\n    \"angularCompilerOptions\": {\n      \"strictTemplates\": true,\n      \"preserveWhitespaces\": true,\n      // ...\n    }\n  }\n\n</code-example>\n<p translation-result=\"on\">欲知詳情，參閱 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 手冊</a>。</p><p translation-origin=\"off\">For more information, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript Handbook</a>.</p>\n\n<h2 id=\"template-options\" translation-result=\"on\">範本選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#template-options\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#template-options\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">以下選項可用於配置 AoT 範本編譯器。</p><p translation-origin=\"off\">The following options are available for configuring the AOT template compiler.</p>\n\n<h3 id=\"allowemptycodegenfiles\"><code>allowEmptyCodegenFiles</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#allowemptycodegenfiles\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則建立所有可能的檔案 —— 即使它們為空。預設值為 <code>false</code>。Bazel 的建構規則使用它來簡化 Bazel 規則追蹤檔案依賴性的方式。不要在 Bazel 規則之外使用此選項。</p><p translation-origin=\"off\">When <code>true</code>, create all possible files even if they are empty.\nDefault is <code>false</code>.\nUsed by the Bazel build rules to simplify how Bazel rules track file dependencies.\nDo not use this option outside of the Bazel rules.</p>\n\n<h3 id=\"annotationsas\"><code>annotationsAs</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotationsas\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">修改 Angular 專有註解的產生方式，以改善搖樹最佳化。非 Angular 註解不受影響。可選值為 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code> 或 <code>decorators</code>。預設值為 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code>。</p><p translation-origin=\"off\">Modifies how Angular-specific annotations are emitted to improve tree-shaking.\nNon-Angular annotations are not affected.\nOne of <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code> or <code>decorators</code>. The default value is <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">預設情況下，編譯器會用類中的靜態欄位替換裝飾器，這允許像 <a href=\"https://github.com/google/closure-compiler\">Closure 編譯器</a>這樣的高階搖樹器刪除未使用的類別。</p><p translation-origin=\"off\">By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like <a href=\"https://github.com/google/closure-compiler\">Closure compiler</a> to remove unused classes</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>decorators</code> 值會將裝飾器保留在原處，這將使編譯速度更快。TypeScript 會產生對輔助器 <code>__decorate</code> 的呼叫。使用 <code>--emitDecoratorMetadata</code> 以支援執行時反射。</p><p translation-origin=\"off\">The <code>decorators</code> value leaves the decorators in place, which makes compilation faster.\nTypeScript emits calls to the <code>__decorate</code> helper.\nUse <code>--emitDecoratorMetadata</code> for runtime reflection.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n這樣產生的程式碼將無法被正確地搖樹最佳化。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThat the resulting code cannot tree-shake properly.</p>\n\n</div>\n</li>\n</ul>\n<h3 id=\"annotateforclosurecompiler\"><code>annotateForClosureCompiler</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotateforclosurecompiler\"><i class=\"material-icons\">link</i></a></h3>\n<!-- vale Angular.Angular_Spelling = NO -->\n<p translation-result=\"on\">如果為 <code>true</code>，則使用 <a href=\"https://github.com/angular/tsickle\">Tsickle</a> 來用 <a href=\"https://jsdoc.app\">JSDoc</a> 對產生的 JavaScript 程式碼進行註解，這些註釋是供 <a href=\"https://github.com/google/closure-compiler\">Closure 編譯器</a> 使用的。預設值為 <code>false</code>。</p><p translation-origin=\"off\">When <code>true</code>, use <a href=\"https://github.com/angular/tsickle\">Tsickle</a> to annotate the emitted JavaScript with <a href=\"https://jsdoc.app\">JSDoc</a> comments needed by the <a href=\"https://github.com/google/closure-compiler\">Closure Compiler</a>.\nDefault is <code>false</code>.</p>\n\n<!-- vale Angular.Angular_Spelling = YES -->\n<h3 id=\"compilationmode\"><code>compilationMode</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#compilationmode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">指定要使用的編譯模式。可以使用以下模式：</p><p translation-origin=\"off\">Specifies the compilation mode to use.\nThe following modes are available:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">模式</nt-wrapper><nt-wrapper translation-origin=\"off\">Modes</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>'full'</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根據當前使用的 Angular 版本產生完全 AOT 編譯的程式碼。</nt-wrapper><nt-wrapper translation-origin=\"off\">Generates fully AOT-compiled code according to the version of Angular that is currently being used.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>'partial'</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">產生穩定的中間程式碼，適用於已釋出的函式庫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Generates code in a stable, but intermediate form suitable for a published library.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">預設值為 <code>'full'</code>。</p><p translation-origin=\"off\">The default value is <code>'full'</code>.</p>\n\n<h3 id=\"disableexpressionlowering\"><code>disableExpressionLowering</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disableexpressionlowering\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>（預設值），則轉換在註解中使用或允許使用的程式碼，以允許從範本的工廠模組匯入程式碼。欲知詳情，參閱<a href=\"guide/aot-compiler#metadata-rewriting\">元資料重寫</a>。</p><p translation-origin=\"off\">When <code>true</code>, the default, transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules.\nSee <a href=\"guide/aot-compiler#metadata-rewriting\">metadata rewriting</a> for more information.</p>\n\n<p translation-result=\"on\">如果為 <code>false</code>，則禁用此重寫，你必須手動進行重寫。</p><p translation-origin=\"off\">When <code>false</code>, disables this rewriting, requiring the rewriting to be done manually.</p>\n\n<h3 id=\"disabletypescriptversioncheck\"><code>disableTypeScriptVersionCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disabletypescriptversioncheck\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則在使用不受支援的 TypeScript 版本時，編譯器不會檢查 TypeScript 版本，並且不會報錯。不建議使用，因為不受支援的 TypeScript 版本可能具有未定義的行為。預設值為 <code>false</code>。</p><p translation-origin=\"off\">When <code>true</code>, the compiler does not look at the TypeScript version and does not report an error when an unsupported version of TypeScript is used.\nNot recommended, as unsupported versions of TypeScript might have undefined behavior.\nDefault is <code>false</code>.</p>\n\n<h3 id=\"enablei18nlegacymessageidformat\"><code>enableI18nLegacyMessageIdFormat</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablei18nlegacymessageidformat\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">指示 Angular 範本編譯器為範本中用 <code>i18n</code> 屬性標出的訊息建立舊版 ID。關於為本地化而對訊息進行標記的更多資訊，參閱<a href=\"guide/i18n-common-prepare#mark-text-in-component-template\" title=\"Mark text in component template - Prepare component for translation | Angular\">標記要翻譯的文字</a></p><p translation-origin=\"off\">Instructs the Angular template compiler to create legacy ids for messages that are tagged in templates by the <code>i18n</code> attribute.\nSee <a href=\"guide/i18n-common-prepare#mark-text-in-component-template\" title=\"Mark text in component template - Prepare component for translation | Angular\">Mark text for translations</a> for more information about marking messages for localization.</p>\n\n<p translation-result=\"on\">除非你的專案依賴先前已用舊版 ID 建立的翻譯，否則請將此選項設定為 <code>false</code>。預設值為 <code>true</code>。</p><p translation-origin=\"off\">Set this option to <code>false</code> unless your project relies upon translations that were created earlier using legacy IDs.\nDefault is <code>true</code>.</p>\n\n<p translation-result=\"on\">Ivy 之前版本的訊息提取工具為所提取的訊息 id 建立了多種舊格式。這些訊息格式存在一些問題，比如對空白字元的處理和對範本原始 HTML 內部資訊的依賴。</p><p translation-origin=\"off\">The pre-Ivy message extraction tooling created a variety of legacy formats for extracted message IDs.\nThese message formats have some issues, such as whitespace handling and reliance upon information inside the original HTML of a template.</p>\n\n<p translation-result=\"on\">新的訊息格式對空白字元的改動更寬容，在所有翻譯檔案格式中都相同，並且可以直接透過呼叫 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 來建立。這允許應用程式程式碼中的 <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> 訊息使用與元件範本中 <code>i18n</code> 訊息完全相同的 id。</p><p translation-origin=\"off\">The new message format is more resilient to whitespace changes, is the same across all translation file formats, and can be created directly from calls to <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code>.\nThis allows <code><a href=\"api/localize/init/$localize\" class=\"code-anchor\">$localize</a></code> messages in application code to use the same ID as identical <code>i18n</code> messages in component templates.</p>\n\n<h3 id=\"enableresourceinlining\"><code>enableResourceInlining</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enableresourceinlining\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">當為 <code>true</code> 時，將所有 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器中的 <code>templateUrl</code> 和 <code>styleUrls</code> 屬性替換為 <code>template</code> 和 <code>styles</code> 屬性中的內聯內容。</p><p translation-origin=\"off\">When <code>true</code>, replaces the <code>templateUrl</code> and <code>styleUrls</code> properties in all <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators with inline content in the <code>template</code> and <code>styles</code> properties.</p>\n\n<p translation-result=\"on\">啟用後，<code>ngc</code> 的 <code>.js</code> 輸出不會包含任何延遲載入的範本或樣式 URL。</p><p translation-origin=\"off\">When enabled, the <code>.js</code> output of <code>ngc</code> does not include any lazy-loaded template or style URLs.</p>\n\n<p translation-result=\"on\">對於使用 Angular CLI 建立的函式庫專案，dev 配置下預設為 <code>true</code>。</p><p translation-origin=\"off\">For library projects created with the Angular CLI, the development configuration default is <code>true</code>.</p>\n\n<p><a id=\"enablelegacytemplate\"></a></p>\n<h3 id=\"enablelegacytemplate\"><code>enableLegacyTemplate</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablelegacytemplate\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則把 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 替換為以棄用的 <code>&lt;template&gt;</code> 元素。預設值為 <code>false</code>。某些第三方 Angular 庫可能需要它。</p><p translation-origin=\"off\">When <code>true</code>, enables the deprecated <code>&lt;template&gt;</code> element in place of <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>.\nDefault is <code>false</code>.\nMight be required by some third-party Angular libraries.</p>\n\n<h3 id=\"flatmoduleid\"><code>flatModuleId</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleid\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">用於匯入扁平模組的模組 ID（當 <code>flatModuleOutFile</code> 為 <code>true</code> 時）。從扁平模組中匯入符號時，範本編譯器建立的參考將使用該模組的名稱。如果 <code>flatModuleOutFile</code> 為 <code>false</code> 則忽略。</p><p translation-origin=\"off\">The module ID to use for importing a flat module (when <code>flatModuleOutFile</code> is <code>true</code>).\nReferences created by the template compiler use this module name when importing symbols from the flat module.\nIgnored if <code>flatModuleOutFile</code> is <code>false</code>.</p>\n\n<h3 id=\"flatmoduleoutfile\"><code>flatModuleOutFile</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleoutfile\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">為 <code>true</code> 時，將產生指定檔名和相應扁平模組元資料的扁平模組索引。用於建立像 <code>@angular/core</code> 和 <code>@angular/common</code> 這樣打套件的扁平模組。使用此選項時，庫的 <code>package.json</code> 應參考所建立的扁平模組索引而不是庫的索引檔案。</p><p translation-origin=\"off\">When <code>true</code>, generates a flat module index of the given filename and the corresponding flat module metadata.\nUse to create flat modules that are packaged similarly to <code>@angular/core</code> and <code>@angular/common</code>.\nWhen this option is used, the <code>package.json</code> for the library should refer to the created flat module index instead of the library index file.</p>\n\n<p translation-result=\"on\">它只會產生一個 <code>.metadata.json</code> 檔案，該檔案包含從庫索引中匯出的符號所需的全部元資料。在建立的 <code>.ngfactory.js</code> 檔案中，扁平模組索引用於匯入符號，這些符號既包括庫索引中的公共 API，也包括縮排的內部符號。</p><p translation-origin=\"off\">Produces only one <code>.metadata.json</code> file, which contains all the metadata necessary for symbols exported from the library index.\nIn the created <code>.ngfactory.js</code> files, the flat module index is used to import symbols. Symbols that include both the public API from the library index as well as shrouded internal symbols.</p>\n\n<p translation-result=\"on\">預設情況下，<code>files</code> 欄位中提供的 <code>.ts</code> 檔案會被當做庫索引。如果指定了多個 <code>.ts</code> 檔案，則使用 <code>libraryIndex</code> 選擇要使用的檔案。如果提供了多個不帶 <code>libraryIndex</code> <code>.ts</code> 檔案，則會產生錯誤。</p><p translation-origin=\"off\">By default the <code>.ts</code> file supplied in the <code>files</code> field is assumed to be the library index.\nIf more than one <code>.ts</code> file is specified, <code>libraryIndex</code> is used to select the file to use.\nIf more than one <code>.ts</code> file is supplied without a <code>libraryIndex</code>, an error is produced.</p>\n\n<p translation-result=\"on\">使用指定的 <code>flatModuleOutFile</code> 名在與庫索引 <code>.d.ts</code> 檔案相同的位置建立扁平模組索引 <code>.d.ts</code> 和 <code>.js</code>。</p><p translation-origin=\"off\">A flat module index <code>.d.ts</code> and <code>.js</code> is created with the given <code>flatModuleOutFile</code> name in the same location as the library index <code>.d.ts</code> file.</p>\n\n<p translation-result=\"on\">比如，如果一個函式庫使用 <code>public_api.ts</code> 檔案作為模組的函式庫索引，則 <code>tsconfig.json</code> 的 <code>files</code> 欄位就是 <code>[\"public_api.ts\"]</code>。然後，比如把 <code>flatModuleOutFile</code> 選項設定為 <code>\"index.js\"</code>，這將產生 <code>index.d.ts</code> 和 <code>index.metadata.json</code> 檔案。該庫的 <code>package.json</code> 的 <code>module</code> 欄位中就會是 <code>\"index.js\"</code>，而 <code>typings</code> 欄位將是 <code>\"index.d.ts\"</code>。</p><p translation-origin=\"off\">For example, if a library uses the <code>public_api.ts</code> file as the library index of the module, the <code>tsconfig.json</code> <code>files</code> field would be <code>[\"public_api.ts\"]</code>.\nThe <code>flatModuleOutFile</code> option could then be set, for example, to <code>\"index.js\"</code>, which produces <code>index.d.ts</code> and <code>index.metadata.json</code> files.\nThe <code>module</code> field of the library's <code>package.json</code> would be <code>\"index.js\"</code> and the <code>typings</code> field would be <code>\"index.d.ts\"</code>.</p>\n\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">為 <code>true</code>（推薦）時，會啟用範本編譯器的<a href=\"guide/aot-compiler#binding-expression-validation\">繫結表示式驗證</a>階段。該階段會使用 TypeScript 來驗證繫結表示式。欲知詳情，參閱<a href=\"guide/template-typecheck\">範本型別檢查</a>。</p><p translation-origin=\"off\">When <code>true</code>, the recommended value, enables the <a href=\"guide/aot-compiler#binding-expression-validation\">binding expression validation</a> phase of the template compiler. This phase uses TypeScript to verify binding expressions.\nFor more information, see <a href=\"guide/template-typecheck\">Template type checking</a>.</p>\n\n<p translation-result=\"on\">預設值為 <code>false</code>，但是當你使用 Angular CLI 命令 <code>ng new --strict</code> 時，預設產生的專案配置中會將其設定為 <code>true</code>。</p><p translation-origin=\"off\">Default is <code>false</code>, but when you use the Angular CLI command <code>ng new --strict</code>, it is set to <code>true</code> in the new project's configuration.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><code>fullTemplateTypeCheck</code> 選項已經在 Angular 13 中棄用，改為使用 <code>strictTemplates</code> 家族的編譯器選項。</p><p translation-origin=\"off\">The <code>fullTemplateTypeCheck</code> option has been deprecated in Angular 13 in favor of the <code>strictTemplates</code> family of compiler options.</p>\n\n</div>\n<h3 id=\"generatecodeforlibraries\"><code>generateCodeForLibraries</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#generatecodeforlibraries\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，就會為 <code>.d.ts</code> 和相應的 <code>.metadata.json</code> 建立工廠檔案（<code>.ngfactory.js</code> 和 <code>.ngstyle.js</code>）。預設值為 <code>true</code>。</p><p translation-origin=\"off\">When <code>true</code>, creates factory files (<code>.ngfactory.js</code> and <code>.ngstyle.js</code>) for <code>.d.ts</code> files with a corresponding <code>.metadata.json</code> file. The default value is <code>true</code>.</p>\n\n<p translation-result=\"on\">如果為 <code>false</code>，則僅為 <code>.ts</code> 檔案產生工廠檔案。當要使用工廠摘要（summary）時，請這麼設定。</p><p translation-origin=\"off\">When <code>false</code>, factory files are created only for <code>.ts</code> files.\nDo this when using factory summaries.</p>\n\n<h3 id=\"preservewhitespaces\"><code>preserveWhitespaces</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#preservewhitespaces\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>false</code>（預設值），則從編譯的範本中刪除空白文字節點，這將產生較小的範本工廠模組。設定為 <code>true</code> 以保留空白文字節點。</p><p translation-origin=\"off\">When <code>false</code>, the default, removes blank text nodes from compiled templates, which results in smaller emitted template factory modules.\nSet to <code>true</code> to preserve blank text nodes.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">當使用水合時，建議使用 <code>preserveWhitespaces: false</code>，這是預設值。如果你透過把 <code>preserveWhitespaces: true</code> 新增到 tsconfig 中啟用了“保留空白字元”功能，水合時就可能出問題。因為這還不是一個收到全面支援的特性。要確保伺服器端和客戶端的 tsconfig 檔案中，此項設定是一致的。欲知詳情，參見<a href=\"guide/hydration#preserve-whitespaces\">水合指南</a>。</p><p translation-origin=\"off\">When using hydration, it is recommended that you use <code>preserveWhitespaces: false</code>, which is the default value. If you choose to enable preserving whitespaces by adding <code>preserveWhitespaces: true</code> to your tsconfig, it is possible you may encounter issues with hydration. This is not yet a fully supported configuration. Ensure this is also consistently set between the server and client tsconfig files. See the <a href=\"guide/hydration#preserve-whitespaces\">hydration guide</a> for more details.</p>\n\n</div>\n<h3 id=\"skipmetadataemit\"><code>skipMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skipmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">為 <code>true</code> 時，不產生 <code>.metadata.json</code> 檔案。預設值為 <code>false</code>。</p><p translation-origin=\"off\">When <code>true</code>, does not produce <code>.metadata.json</code> files.\nDefault is <code>false</code>.</p>\n\n<p translation-result=\"on\"><code>.metadata.json</code> 檔案包含範本編譯器從 <code>.ts</code> 檔案中獲得的資訊，該資訊未包含在 TypeScript 編譯器產生的 <code>.d.ts</code> 檔案中。該資訊包括註解的內容（比如元件的範本）等，TypeScript 會將該註解的內容傳送到 <code>.js</code> 檔案中，但不會發送到 <code>.d.ts</code> 檔案。</p><p translation-origin=\"off\">The <code>.metadata.json</code> files contain information needed by the template compiler from a <code>.ts</code> file that is not included in the <code>.d.ts</code> file produced by the TypeScript compiler.\nThis information includes, for example, the content of annotations, such as a component's template, which TypeScript emits to the <code>.js</code> file but not to the <code>.d.ts</code> file.</p>\n\n<p translation-result=\"on\">你可以在使用工廠摘要（summary）中將其設定為 <code>true</code>，因為工廠摘要中包括 <code>.metadata.json</code> 檔案中資訊的副本。</p><p translation-origin=\"off\">You can set to <code>true</code> when using factory summaries, because the factory summaries include a copy of the information that is in the <code>.metadata.json</code> file.</p>\n\n<p translation-result=\"on\">如果要使用 TypeScript 的 <code>--outFile</code> 選項，則設定為 <code>true</code>，因為元資料檔案對於這種 TypeScript 輸出風格無效。但是，Angular 社群不建議將 <code>--outFile</code> 和 Angular 一起使用。請使用打包程式，比如 <a href=\"https://webpack.js.org\">webpack</a>。</p><p translation-origin=\"off\">Set to <code>true</code> if you are using TypeScript's <code>--outFile</code> option, because the metadata files are not valid for this style of TypeScript output.\nThe Angular community does not recommend using <code>--outFile</code> with Angular.\nUse a bundler, such as <a href=\"https://webpack.js.org\">webpack</a>, instead.</p>\n\n<h3 id=\"skiptemplatecodegen\"><code>skipTemplateCodegen</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skiptemplatecodegen\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">為 <code>true</code> 時，不產生 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 檔案。這將關閉大多數範本編譯器，並禁用範本診斷報告。</p><p translation-origin=\"off\">When <code>true</code>, does not emit <code>.ngfactory.js</code> and <code>.ngstyle.js</code> files.\nThis turns off most of the template compiler and disables the reporting of template diagnostics.</p>\n\n<p translation-result=\"on\">可用於指示範本編譯器產生 <code>.metadata.json</code> 檔案，以使用 <code>npm</code> 軟體套件進行分發，同時避免產生無法分發至 <code>npm</code> 的 <code>.ngfactory.js</code> 和 <code>.ngstyle.js</code> 檔案。</p><p translation-origin=\"off\">Can be used to instruct the template compiler to produce <code>.metadata.json</code> files for distribution with an <code>npm</code> package. This avoids the production of <code>.ngfactory.js</code> and <code>.ngstyle.js</code> files that cannot be distributed to <code>npm</code>.</p>\n\n<p translation-result=\"on\">對於使用 Angular CLI 建立的函式庫專案，dev 配置預設為 <code>true</code>。</p><p translation-origin=\"off\">For library projects created with the Angular CLI, the development configuration default is <code>true</code>.</p>\n\n<h3 id=\"strictmetadataemit\"><code>strictMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">為 <code>true</code> 時，如果 <code>\"skipMetadataEmit\"</code> 為 <code>false</code> 則向 <code>.metadata.json</code> 檔案中報告錯誤。預設值為 <code>false</code>。只在 <code>\"skipMetadataEmit\"</code> 為 <code>false</code> 且 <code>\"skipTemplateCodegen\"</code> 為 <code>true</code> 時使用。</p><p translation-origin=\"off\">When <code>true</code>, reports an error to the <code>.metadata.json</code> file if <code>\"skipMetadataEmit\"</code> is <code>false</code>.\nDefault is <code>false</code>.\nUse only when <code>\"skipMetadataEmit\"</code> is <code>false</code> and <code>\"skipTemplateCodegen\"</code> is <code>true</code>.</p>\n\n<p translation-result=\"on\">該選項是為了驗證為產生 <code>npm</code> 套件而產生的 <code>.metadata.json</code> 檔案。這種驗證是嚴格的，並且會報告元資料中的錯誤，以免當範本編譯器使用它時再出錯。你可以透過在某個匯出符號的註釋文件中使用 <code>@dynamic</code> 註解來暫時防止（suppress）該選項報告錯誤。</p><p translation-origin=\"off\">This option is intended to verify the <code>.metadata.json</code> files emitted for bundling with an <code>npm</code> package.\nThe validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler.\nYou can choose to suppress the error emitted by this option for an exported symbol by including <code>@dynamic</code> in the comment documenting the symbol.</p>\n\n<p translation-result=\"on\"><code>.metadata.json</code> 檔案即使包含錯誤也是有效的。如果這些元資料用來確定註解的內容，則範本編譯器會報告這些錯誤。元資料收集器無法預測哪些符號是為了在註解中使用而設計的。它會先在元資料中為匯出的符號中包含錯誤節點。然後，如果使用了這些符號，則範本編譯器可以使用這些錯誤節點來報告錯誤。</p><p translation-origin=\"off\">It is valid for <code>.metadata.json</code> files to contain errors.\nThe template compiler reports these errors if the metadata is used to determine the contents of an annotation.\nThe metadata collector cannot predict the symbols that are designed for use in an annotation. It preemptively includes error nodes in the metadata for the exported symbols.\nThe template compiler can then use the error nodes to report an error if these symbols are used.</p>\n\n<p translation-result=\"on\">如果庫的客戶程式碼打算在註解中使用某個符號，則範本編譯器通常不會直接報錯。而是在客戶方實際用到該符號之後才報錯。此選項允許你在庫的建構階段就檢測到這些錯誤，比如用於產生 Angular 庫本身時。</p><p translation-origin=\"off\">If the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this. It gets reported after the client actually uses the symbol.\nThis option allows detection of these errors during the build phase of the library and is used, for example, in producing Angular libraries themselves.</p>\n\n<p translation-result=\"on\">對於使用 Angular CLI 建立的函式庫專案，dev 配置中預設為 <code>true</code>。</p><p translation-origin=\"off\">For library projects created with the Angular CLI, the development configuration default is <code>true</code>.</p>\n\n<h3 id=\"strictinjectionparameters\"><code>strictInjectionParameters</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictinjectionparameters\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則報告所提供的引數的錯誤，無法確定該引數的注入型別。如果為 <code>false</code>，則標記為 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 但其型別無法解析的類別的建構函式引數會產生警告。\n推薦的值為 <code>true</code>，但預設值為 <code>false</code>。</p><p translation-origin=\"off\">When <code>true</code>, reports an error for a supplied parameter whose injection type cannot be determined.\nWhen <code>false</code>, constructor parameters of classes marked with <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> whose type cannot be resolved produce a warning.\nThe recommended value is <code>true</code>, but the default value is <code>false</code>.</p>\n\n<p translation-result=\"on\">當你使用 CLI 命令 <code>ng new --strict</code> 時，預設產生的專案配置中將其設定為 <code>true</code>。</p><p translation-origin=\"off\">When you use the Angular CLI command <code>ng new --strict</code>, it is set to <code>true</code> in the created project's configuration.</p>\n\n<h3 id=\"stricttemplates\"><code>strictTemplates</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#stricttemplates\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則啟用<a href=\"guide/template-typecheck#strict-mode\">嚴格的範本型別檢查</a>。</p><p translation-origin=\"off\">When <code>true</code>, enables <a href=\"guide/template-typecheck#strict-mode\">strict template type checking</a>.</p>\n\n<p translation-result=\"on\">這些嚴格性標誌允許你啟用和禁用特定型別的嚴格範本型別檢查。參閱<a href=\"guide/template-typecheck#troubleshooting-template-errors\">排除範本錯誤</a>。</p><p translation-origin=\"off\">The strictness flags that this option enables allow you to turn on and off specific types of strict template type checking.\nSee <a href=\"guide/template-typecheck#troubleshooting-template-errors\">troubleshooting template errors</a>.</p>\n\n<p translation-result=\"on\">當你使用 Angular CLI 命令 <code>ng new --strict</code> 時，預設產生的專案配置中將其設定為 <code>true</code>。</p><p translation-origin=\"off\">When you use the Angular CLI command <code>ng new --strict</code>, it is set to <code>true</code> in the new project's configuration.</p>\n\n<h3 id=\"trace\"><code>trace</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#trace\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">如果為 <code>true</code>，則在編譯範本時輸出額外的資訊。預設值為 <code>false</code>。</p><p translation-origin=\"off\">When <code>true</code>, prints extra information while compiling templates.\nDefault is <code>false</code>.</p>\n\n<p><a id=\"cli-options\"></a></p>\n<h2 id=\"command-line-options\" translation-result=\"on\">命令列選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#command-line-options\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Command line options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#command-line-options\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">大多數時候你都會使用 Angular CLI 間接與 Angular 編譯器互動。當除錯某些問題時，你可能會發現直接呼叫 Angular 編譯器很有用。你可以使用 <code>@angular/compiler-cli</code> npm 套件提供的 <code>ngc</code> 命令從命令列呼叫編譯器。</p><p translation-origin=\"off\">Most of the time you interact with the Angular Compiler indirectly using Angular CLI. When debugging certain issues, you might find it useful to invoke the Angular Compiler directly.\nYou can use the <code>ngc</code> command provided by the <code>@angular/compiler-cli</code> npm package to call the compiler from the command line.</p>\n\n<p translation-result=\"on\"><code>ngc</code> 命令只是 TypeScript 的 <code>tsc</code> 編譯器命令的包裝器，主要透過<a href=\"guide/angular-compiler-options#angular-compiler-options\">前面部分</a>講過的 <code>tsconfig.json</code> 配置選項進行配置。</p><p translation-origin=\"off\">The <code>ngc</code> command is just a wrapper around TypeScript's <code>tsc</code> compiler command and is primarily configured via the <code>tsconfig.json</code> configuration options documented in <a href=\"guide/angular-compiler-options#angular-compiler-options\">the previous sections</a>.</p>\n\n<p translation-result=\"on\">除這個配置檔案之外，你還可以使用一些 <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\"><code>tsc</code> 命令列選項</a>來配置 <code>ngc</code>。</p><p translation-origin=\"off\">Besides the configuration file, you can also use <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\"><code>tsc</code> command line options</a> to configure <code>ngc</code>.</p>\n\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：4/19/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/deprecations\n - guide/file-structure\n - guide/language-service\n - guide/migration-legacy-message-id\n - guide/strict-mode\n - guide/typescript-configuration\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/core/ng-template\n - api/localize/init/$localize\n - api/upgrade/static\n - guide/angular-compiler-options#allowemptycodegenfiles\n - guide/angular-compiler-options#angular-compiler-options\n - guide/angular-compiler-options#angular-編譯器選項\n - guide/angular-compiler-options#annotateforclosurecompiler\n - guide/angular-compiler-options#annotationsas\n - guide/angular-compiler-options#command-line-options\n - guide/angular-compiler-options#compilationmode\n - guide/angular-compiler-options#configuration-inheritance-with-extends\n - guide/angular-compiler-options#disableexpressionlowering\n - guide/angular-compiler-options#disabletypescriptversioncheck\n - guide/angular-compiler-options#enablei18nlegacymessageidformat\n - guide/angular-compiler-options#enablelegacytemplate\n - guide/angular-compiler-options#enableresourceinlining\n - guide/angular-compiler-options#flatmoduleid\n - guide/angular-compiler-options#flatmoduleoutfile\n - guide/angular-compiler-options#fulltemplatetypecheck\n - guide/angular-compiler-options#generatecodeforlibraries\n - guide/angular-compiler-options#preservewhitespaces\n - guide/angular-compiler-options#skipmetadataemit\n - guide/angular-compiler-options#skiptemplatecodegen\n - guide/angular-compiler-options#strictinjectionparameters\n - guide/angular-compiler-options#strictmetadataemit\n - guide/angular-compiler-options#stricttemplates\n - guide/angular-compiler-options#template-options\n - guide/angular-compiler-options#trace\n - guide/angular-compiler-options#命令列選項\n - guide/angular-compiler-options#範本選項\n - guide/angular-compiler-options#用-extends-語法配置繼承方式\n - guide/aot-compiler\n - guide/aot-compiler#binding-expression-validation\n - guide/aot-compiler#metadata-rewriting\n - guide/hydration#preserve-whitespaces\n - guide/i18n-common-prepare#mark-text-in-component-template\n - guide/template-typecheck\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#troubleshooting-template-errors\n - guide/typescript-configuration\n - https://github.com/angular/tsickle\n - https://github.com/google/closure-compiler\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/angular-compiler-options.md?message=docs%3A%20請簡述你的修改...\n - https://jsdoc.app\n - https://webpack.js.org\n - https://www.typescriptlang.org/docs/handbook/compiler-options.html\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n-->"}