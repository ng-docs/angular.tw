{"id":"guide/file-structure","title":"Workspace and project file structure","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/file-structure.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"workspace-and-project-file-structure\" translation-result=\"on\">工作區和專案檔案結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#workspace-and-project-file-structure\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Workspace and project file structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#workspace-and-project-file-structure\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">你會以 Angular <a href=\"guide/glossary#workspace\">工作區</a>作為上下文來開發應用。工作區包含一個或多個<a href=\"guide/glossary#project\">專案</a>的檔案集。一個專案就是一組包含獨立應用或可共享庫的檔案。</p><p translation-origin=\"off\">You develop applications in the context of an Angular <a href=\"guide/glossary#workspace\">workspace</a>.\nA workspace contains the files for one or more <a href=\"guide/glossary#project\">projects</a>.\nA project is the set of files that comprise a standalone application or a shareable library.</p>\n\n<p translation-result=\"on\">Angular CLI 的 <code>ng new</code> 命令可以建立一個工作區。</p><p translation-origin=\"off\">The Angular CLI <code>ng new</code> command creates a workspace.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng new &lt;my-project&gt;\n\n</code-example>\n<p translation-result=\"on\">當你執行這個命令時，CLI 會在一個新的工作區中安裝必需的 Angular npm 套件和其它依賴項，其根應用名叫 <em>my-project</em>。該工作區的根資料夾中包含一些工作區配置檔案，和一個帶有自動產生的描述性文字的自述檔案，你可以自訂它。</p><p translation-origin=\"off\">When you run this command, the CLI installs the necessary Angular npm packages and other dependencies in a new workspace, with a root-level application named <em>my-project</em>.\nThe workspace root folder contains various support and configuration files, and a README file with generated descriptive text that you can customize.</p>\n\n<p translation-result=\"on\"><code>ng new</code> 還會預設建立一個位於工作區根級的骨架應用，及其端到端測試專案。這個骨架是一個簡單的 Welcome 應用，它可以執行，也很容易修改。這個<em>根應用</em>與工作區同名，其原始檔位於工作區的 <code>src/</code> 子資料夾中。</p><p translation-origin=\"off\">By default, <code>ng new</code> creates an initial skeleton application at the root level of the workspace, along with its end-to-end tests.\nThe skeleton is for a simple Welcome application that is ready to run and easy to modify.\nThe root-level application has the same name as the workspace, and the source files reside in the <code>src/</code> subfolder of the workspace.</p>\n\n<p translation-result=\"on\">這種預設行為適用於典型的“多重（multi）儲存庫”開發風格，每個應用都位於它自己的工作區中。建議初學者和中級使用者使用 <code>ng new</code> 為每個應用建立一個單獨的工作區。</p><p translation-origin=\"off\">This default behavior is suitable for a typical \"multi-repo\" development style where each application resides in its own workspace.\nBeginners and intermediate users are encouraged to use <code>ng new</code> to create a separate workspace for each application.</p>\n\n<p translation-result=\"on\">Angular 還支援包含<a href=\"guide/file-structure#multiple-projects\">多個專案</a>的工作區。這種開發環境適用於正在開發<a href=\"guide/glossary#library\">可共享庫</a>的高階使用者，以及那些使用“單一（mono）儲存庫”開發風格的企業，它只需要一個儲存庫，而且所有 Angular 專案都使用全域配置。</p><p translation-origin=\"off\">Angular also supports workspaces with <a href=\"guide/file-structure#multiple-projects\">multiple projects</a>.\nThis type of development environment is suitable for advanced users who are developing <a href=\"guide/glossary#library\">shareable libraries</a>,\nand for enterprises that use a \"monorepo\" development style, with a single repository and global configuration for all Angular projects.</p>\n\n<p translation-result=\"on\">要設定單一儲存庫的工作區，你應該跳過建立根應用的過程。參閱下面的<a href=\"guide/file-structure#multiple-projects\">設定多專案工作區</a>部分。</p><p translation-origin=\"off\">To set up a monorepo workspace, you should skip the creating the root application.\nSee <a href=\"guide/file-structure#multiple-projects\">Setting up for a multi-project workspace</a> below.</p>\n\n<h2 id=\"workspace-configuration-files\" translation-result=\"on\">工作區配置檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#workspace-configuration-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Workspace configuration files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#workspace-configuration-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每個工作區中的所有專案共享同一個 <a href=\"guide/workspace-config\">CLI 配置環境</a>。該工作區的最上層包含著全工作區級的配置檔案、根應用的配置檔案以及一些包含根應用的原始檔和測試檔案的子資料夾。</p><p translation-origin=\"off\">All projects within a workspace share a <a href=\"guide/workspace-config\">CLI configuration context</a>.\nThe top level of the workspace contains workspace-wide configuration files, configuration files for the root-level application, and subfolders for the root-level application source and test files.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">工作區配置檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Workspace configuration files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>.editorconfig</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">程式碼編輯器的配置。參閱 <a href=\"https://editorconfig.org\">EditorConfig</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Configuration for code editors. See <a href=\"https://editorconfig.org\">EditorConfig</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>.gitignore</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定 <a href=\"https://git-scm.com/\">Git</a> 應忽略的不必追蹤的檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies intentionally untracked files that <a href=\"https://git-scm.com\">Git</a> should ignore.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>README.md</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根應用的簡介文件。</nt-wrapper><nt-wrapper translation-origin=\"off\">Introductory documentation for the root application.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>angular.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為工作區中的所有專案指定 CLI 的預設配置，包括 CLI 要用到的建構、啟動開發伺服器和測試工具的配置項，比如 <a href=\"https://karma-runner.github.io\">Karma</a> 和 <a href=\"http://www.protractortest.org\">Protractor</a>。欲知詳情，參閱 <a href=\"guide/workspace-config\">Angular 工作區配置</a> 部分。</nt-wrapper><nt-wrapper translation-origin=\"off\">CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as <a href=\"https://karma-runner.github.io\">Karma</a>, and <a href=\"https://www.protractortest.org\">Protractor</a>. For details, see <a href=\"guide/workspace-config\">Angular Workspace Configuration</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">配置工作區中所有專案可用的 <a href=\"guide/npm-packages\">npm 套件相依</a>。關於此檔案的具體格式和內容，參閱 <a href=\"https://docs.npmjs.com/files/package.json\">npm 的文件</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Configures <a href=\"guide/npm-packages\">npm package dependencies</a> that are available to all projects in the workspace. See <a href=\"https://docs.npmjs.com/files/package.json\">npm documentation</a> for the specific format and contents of this file.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>package-lock.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">提供 npm 客戶端安裝到 <code>node_modules</code> 的所有軟體套件的版本資訊。欲知詳情，參閱 <a href=\"https://docs.npmjs.com/files/package-lock.json\">npm 的文件</a>。如果你使用的是 yarn 客戶端，那麼該檔案<a href=\"https://yarnpkg.com/lang/en/docs/yarn-lock\">就是 yarn.lock</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Provides version information for all packages installed into <code>node_modules</code> by the npm client. See <a href=\"https://docs.npmjs.com/files/package-lock.json\">npm documentation</a> for details. If you use the yarn client, this file will be <a href=\"https://yarnpkg.com/lang/en/docs/yarn-lock\">yarn.lock</a> instead.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>src/</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根專案的原始檔。</nt-wrapper><nt-wrapper translation-origin=\"off\">Source files for the root-level application project.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>node_modules/</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為整個工作區提供 <a href=\"guide/npm-packages\">npm 套件</a>。這些工作區級的 <code>node_modules</code> 依賴對其中的所有專案可見。</nt-wrapper><nt-wrapper translation-origin=\"off\">Provides <a href=\"guide/npm-packages\">npm packages</a> to the entire workspace. Workspace-wide <code>node_modules</code> dependencies are visible to all projects.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>tsconfig.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">工作區中所有專案的基本 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置。所有其它配置檔案都繼承自這個基本配置。欲知詳情，參閱 TypeScript 文件中的 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">透過 extends 進行配置繼承</a> 部分。</nt-wrapper><nt-wrapper translation-origin=\"off\">The base <a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration for projects in the workspace. All other configuration files inherit from this base file. For more information, see the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\">Configuration inheritance with extends</a> section of the TypeScript documentation.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"application-project-files\" translation-result=\"on\">應用專案檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-project-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Application project files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-project-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">CLI 命令 <code>ng new my-app</code> 會預設建立名為 “my-app” 的工作區資料夾，並在 <code>src/</code> 資料夾下為工作區最上層的根應用產生一個新的應用骨架。新產生的應用包含一個根模組的原始檔，包括一個根元件及其範本。</p><p translation-origin=\"off\">By default, the CLI command <code>ng new my-app</code> creates a workspace folder named \"my-app\" and generates a new application skeleton in a <code>src/</code> folder at the top level of the workspace.\nA newly generated application contains source files for a root module, with a root component and template.</p>\n\n<p translation-result=\"on\">當工作區檔案結構到位時，可以在命令列中使用 <code>ng generate</code> 命令往該應用中新增功能和資料。這個初始的根應用是 CLI 命令的<em>預設應用</em>（除非你在建立<a href=\"guide/file-structure#multiple-projects\">其它應用</a>之後更改了預設值）。</p><p translation-origin=\"off\">When the workspace file structure is in place, you can use the <code>ng generate</code> command on the command line to add functionality and data to the application.\nThis initial root-level application is the <em>default app</em> for CLI commands (unless you change the default after creating <a href=\"guide/file-structure#multiple-projects\">additional apps</a>).</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">除了透過命令列使用 CLI 之外，還可以直接操作應用程式原始檔夾和配置檔案中的檔案。</p><p translation-origin=\"off\">Besides using the CLI on the command line, you can also manipulate files directly in the application's source folder and configuration files.</p>\n\n</div>\n<p translation-result=\"on\">對於單應用的工作區，工作區的 <code>src/</code> 子資料夾包含根應用的原始檔（應用邏輯、資料和靜態資源）。對於多專案的工作區，<code>projects/</code> 資料夾中的其它專案各自包含一個具有相同結構的 <code>project-name/src/</code> 子目錄。</p><p translation-origin=\"off\">For a single-application workspace, the <code>src</code> subfolder of the workspace contains the source files (application logic, data, and assets) for the root application.\nFor a multi-project workspace, additional projects in the <code>projects</code> folder contain a <code>project-name/src/</code> subfolder with the same structure.</p>\n\n<h3 id=\"application-source-files\" translation-result=\"on\">應用原始檔<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-source-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Application source files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-source-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">最上層檔案 <code>src/</code> 為測試並執行你的應用提供支援。其子資料夾中包含應用原始碼和應用的專屬配置。</p><p translation-origin=\"off\">Files at the top level of <code>src/</code> support testing and running your application.\nSubfolders contain the application source and application-specific configuration.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">應用支援檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Application support files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>app/</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含定義應用邏輯和資料的元件檔案。詳見<a href=\"guide/file-structure#app-src\">下文</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Contains the component files in which your application logic and data are defined. See details <a href=\"guide/file-structure#app-src\">below</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>assets/</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含要在建構應用時應該按原樣複製的圖像和其它靜態資原始檔。</nt-wrapper><nt-wrapper translation-origin=\"off\">Contains image and other asset files to be copied as-is when you build your application.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>favicon.ico</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用作該應用在標籤欄中的圖示。</nt-wrapper><nt-wrapper translation-origin=\"off\">An icon to use for this application in the bookmark bar.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>index.html</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當有人存取你的站點時，提供服務的主要 HTML 頁面。CLI 會在建構你的應用時自動新增所有的 JavaScript 和 CSS 檔案，所以你通常不用手動新增任何 <code>&lt;script&gt;</code> 或 <code>&lt;link&gt;</code> 標籤。</nt-wrapper><nt-wrapper translation-origin=\"off\">The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any <code>&lt;script&gt;</code> or<code>&lt;link&gt;</code> tags here manually.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>main.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應用的主要入口點。用 <a href=\"guide/glossary#jit\">JIT 編譯器</a>編譯應用，然後引導應用的根模組（AppModule）在瀏覽器中執行。你也可以在不改變任何程式碼的情況下改用 <a href=\"guide/aot-compiler\">AOT 編譯器</a>，只要在 CLI 的 <code>build</code> 和 <code>serve</code> 命令中加上 <code>--aot</code> 標誌就可以了。</nt-wrapper><nt-wrapper translation-origin=\"off\">The main entry point for your application. Compiles the application with the <a href=\"guide/glossary#jit\">JIT compiler</a> and bootstraps the application's root module (AppModule) to run in the browser. You can also use the <a href=\"guide/aot-compiler\">AOT compiler</a> without changing any code by appending the <code>--aot</code> flag to the CLI <code>build</code> and <code>serve</code> commands.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>styles.css</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">列出為專案提供樣式的 CSS 檔案。該擴充還反映了你為該專案配置的樣式預處理器。</nt-wrapper><nt-wrapper translation-origin=\"off\">Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">新的 Angular 專案預設使用嚴格模式。如果不需要使用嚴格模式，可以在建立專案時選擇不用它。更多資訊，請參見<a href=\"guide/strict-mode\">嚴格模式</a>。</p><p translation-origin=\"off\">New Angular projects use strict mode by default.\nIf this is not desired you can opt out when creating the project.\nFor more information, see <a href=\"guide/strict-mode\">Strict mode</a>.</p>\n\n</div>\n<p><a id=\"app-src\"></a></p>\n<p translation-result=\"on\">在 <code>src/</code> 資料夾裡面，<code>app/</code> 資料夾中包含此專案的邏輯和資料。Angular 元件、範本和樣式也都在這裡。</p><p translation-origin=\"off\">Inside the <code>src</code> folder, the <code>app</code> folder contains your project's logic and data.\nAngular components, templates, and styles go here.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\"><code>src/app/</code> 檔案</nt-wrapper><nt-wrapper translation-origin=\"off\"><code>src/app/</code> files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>app/app.config.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">這些定義告訴 Angular 如何組裝應用程式的配置邏輯。當你嚮應用程式新增更多提供者時，必須在此處宣告它們。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the application config logic that tells Angular how to assemble the application. As you add more providers to the app, they must be declared here.<br><br><em>Only generated when using the <code>--standalone</code> option.</em></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>app/app.component.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為應用的根元件定義邏輯，名為 <code>AppComponent</code>。當你嚮應用中新增元件和服務時，與這個根元件相關聯的檢視就會成為<a href=\"guide/glossary#view-hierarchy\">檢視樹</a>的根。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the logic for the application's root component, named <code>AppComponent</code>. The view associated with this root component becomes the root of the <a href=\"guide/glossary#view-hierarchy\">view hierarchy</a> as you add components and services to your application.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>app/app.component.html</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義與根元件 <code>AppComponent</code> 關聯的 HTML 範本。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the HTML template associated with the root <code>AppComponent</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>app/app.component.css</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為根元件 <code>AppComponent</code> 定義了基本的 CSS 樣式表。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the base CSS stylesheet for the root <code>AppComponent</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>app/app.component.spec.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為根元件 <code>AppComponent</code> 定義了一個單元測試。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines a unit test for the root <code>AppComponent</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>app/app.module.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義了名為 <code>AppModule</code> 的根模組，它會告訴 Angular 如何組裝應用。這裡最初只宣告一個 <code>AppComponent</code>。當你嚮應用中新增更多元件時，它們也必須在這裡宣告。<br><br><strong>只有當使用了 <code>--standalone</code> 選項時才會產生。</strong></nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the root module, named <code>AppModule</code>, that tells Angular how to assemble the application. Initially declares only the <code>AppComponent</code>. As you add more components to the app, they must be declared here.<br><br><em>Only generated when using the <code>--standalone</code> option.</em></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"application-configuration-files\" translation-result=\"on\">應用配置檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-configuration-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Application configuration files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#application-configuration-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">根應用的配置檔案位於工作區的根目錄下。對於多專案工作區，專案專屬的配置檔案位於專案根目錄 <code>projects/project-name/</code>。</p><p translation-origin=\"off\">The application-specific configuration files for the root application reside at the workspace root level.\nFor a multi-project workspace, project-specific configuration files are in the project root, under <code>projects/project-name/</code>.</p>\n\n<p translation-result=\"on\">專案專屬的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置檔案繼承自工作區範圍內的 <code>tsconfig.json</code>。</p><p translation-origin=\"off\">Project-specific <a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration files inherit from the workspace-wide <code>tsconfig.json</code>.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">應用專屬的配置檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Application-specific configuration files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>tsconfig.app.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應用專屬的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置，包括 TypeScript 和 Angular 範本編譯器的選項。參閱 <a href=\"guide/typescript-configuration\">TypeScript 配置</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Application-specific <a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration, including TypeScript and Angular template compiler options. See <a href=\"guide/typescript-configuration\">TypeScript Configuration</a> and <a href=\"guide/angular-compiler-options\">Angular Compiler Options</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>tsconfig.spec.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應用測試的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置。參閱 <a href=\"guide/typescript-configuration\">TypeScript 配置</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration for the application tests. See <a href=\"guide/typescript-configuration\">TypeScript Configuration</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"multiple-projects\"></a></p>\n<h2 id=\"multiple-projects\" translation-result=\"on\">多重專案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#multiple-projects\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Multiple projects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#multiple-projects\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">多專案工作區適用於對所有 Angular 專案使用單一儲存庫（單儲存庫模型）和全域配置的企業。多專案工作區也能為庫開發提供支援。</p><p translation-origin=\"off\">A multi-project workspace is suitable for an enterprise that uses a single repository and global configuration for all Angular projects (the \"monorepo\" model).\nA multi-project workspace also supports library development.</p>\n\n<h3 id=\"setting-up-for-a-multi-project-workspace\" translation-result=\"on\">建立多專案工作區<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#setting-up-for-a-multi-project-workspace\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Setting up for a multi-project workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#setting-up-for-a-multi-project-workspace\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你打算在工作區中包含多個專案，可以在建立工作區時不要自動建立初始應用，併為工作區指定一個唯一的名字。下列命令用於建立一個包含全工作區級配置檔案的工作區，但沒有根應用。</p><p translation-origin=\"off\">If you intend to have multiple projects in a workspace, you can skip the initial application generation when you create the workspace, and give the workspace a unique name.\nThe following command creates a workspace with all of the workspace-wide configuration files, but no root-level application.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng new my-workspace --no-create-application\n\n</code-example>\n<p translation-result=\"on\">然後，你可以使用工作區內唯一的名字來產生應用和庫。</p><p translation-origin=\"off\">You can then generate applications and libraries with names that are unique within the workspace.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ncd my-workspace\nng generate application my-first-app\n\n</code-example>\n<h3 id=\"multiple-project-file-structure\" translation-result=\"on\">多重專案的檔案結構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#multiple-project-file-structure\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Multiple project file structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#multiple-project-file-structure\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">工作區中第一個顯式產生的應用會像工作區中的其它專案一樣放在 <code>projects</code> 資料夾中。新產生的函式庫也會新增到 <code>projects</code> 下。當你以這種方式建立專案時，工作區的檔案結構與<a href=\"guide/workspace-config\">工作區配置檔案</a> <code>angular.json</code> 中的結構完全一致。</p><p translation-origin=\"off\">The first explicitly generated application goes into the <code>projects</code> folder along with all other projects in the workspace.\nNewly generated libraries are also added under <code>projects</code>.\nWhen you create projects this way, the file structure of the workspace is entirely consistent with the structure of the <a href=\"guide/workspace-config\">workspace configuration file</a>, <code>angular.json</code>.</p>\n\n<div class=\"filetree\">\n    <div class=\"file\">\n        my-workspace\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          … &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (workspace-wide config files)\n        </div>\n        <div class=\"file\">\n          projects &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (generated applications and libraries)\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              my-first-app &nbsp; --(an explicitly generated application)\n            </div>\n            <div class=\"children\">\n                <div class=\"file\">\n                  … &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --(application-specific config)\n                </div>\n                <div class=\"file\">\n                  src &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --(source and support files for application)\n                </div>\n            </div>\n            <div class=\"file\">\n              my-lib &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --(a generated library)\n            </div>\n            <div class=\"children\">\n                <div class=\"file\">\n                  … &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --(library-specific config)\n                </div>\n                <div class=\"file\">\n                  src &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --(source and support files for library)\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<h2 id=\"library-project-files\" translation-result=\"on\">庫專案檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#library-project-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Library project files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#library-project-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當你使用 CLI 命令（比如 <code>ng generate library my-lib</code>）產生一個函式庫時，所產生的檔案會放在工作區的 <code>projects/</code> 資料夾中。關於如何建立自己的函式庫的更多資訊，參閱<a href=\"guide/creating-libraries\">建立庫</a>一章。</p><p translation-origin=\"off\">When you generate a library using the CLI (with a command such as <code>ng generate library my-lib</code>), the generated files go into the <code>projects/</code> folder of the workspace.\nFor more information about creating your own libraries, see  <a href=\"guide/creating-libraries\">Creating Libraries</a>.</p>\n\n<p translation-result=\"on\">庫和應用不同，它們有自己的 <code>package.json</code> 配置檔案。</p><p translation-origin=\"off\">Libraries unlike applications have their own <code>package.json</code> configuration file.</p>\n\n<p translation-result=\"on\">在 <code>projects/</code> 目錄下，<code>my-lib</code> 資料夾中包含你的函式庫程式碼。</p><p translation-origin=\"off\">Under the <code>projects/</code> folder, the <code>my-lib</code> folder contains your library code.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">庫的原始檔</nt-wrapper><nt-wrapper translation-origin=\"off\">Library source files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>src/lib</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含庫專案的邏輯和資料。像應用專案一樣，庫專案也可以包含元件、服務、模組、指令和管道。</nt-wrapper><nt-wrapper translation-origin=\"off\">Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>src/public-api.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定從庫中匯出的所有檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies all files that are exported from your library.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>ng-package.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建構庫時，<a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a> 用到的配置檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">Configuration file used by <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a> for building your library.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">配置這個庫所需的 <a href=\"guide/npm-packages\">npm 套件相依</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Configures <a href=\"guide/npm-packages\">npm package dependencies</a> that are required for this library.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>tsconfig.lib.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">庫專屬的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置，包括 TypeScript 和 Angular 範本編譯器選項。參閱 <a href=\"guide/typescript-configuration\">TypeScript 配置</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Library-specific <a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration, including TypeScript and Angular template compiler options. See <a href=\"guide/typescript-configuration\">TypeScript Configuration</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>tsconfig.lib.prod.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">庫專屬的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置，用於建構生產模式的函式庫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Library-specific <a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration that is used when building the library in production mode.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>tsconfig.spec.json</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">測試庫時用到的 <a href=\"https://www.typescriptlang.org\">TypeScript</a> 配置。參閱 <a href=\"guide/typescript-configuration\">TypeScript 配置</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://www.typescriptlang.org\">TypeScript</a> configuration for the library tests. See <a href=\"guide/typescript-configuration\">TypeScript Configuration</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：4/24/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - cli\n - guide/architecture-next-steps\n - guide/creating-libraries\n - guide/glossary\n - guide/setup-local\n - guide/upgrade-setup\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/creating-libraries\n - guide/file-structure#app-src\n - guide/file-structure#application-configuration-files\n - guide/file-structure#application-project-files\n - guide/file-structure#application-source-files\n - guide/file-structure#library-project-files\n - guide/file-structure#multiple-project-file-structure\n - guide/file-structure#multiple-projects\n - guide/file-structure#setting-up-for-a-multi-project-workspace\n - guide/file-structure#workspace-and-project-file-structure\n - guide/file-structure#workspace-configuration-files\n - guide/file-structure#多重專案\n - guide/file-structure#多重專案的檔案結構\n - guide/file-structure#工作區和專案檔案結構\n - guide/file-structure#工作區配置檔案\n - guide/file-structure#庫專案檔案\n - guide/file-structure#應用原始檔\n - guide/file-structure#應用配置檔案\n - guide/file-structure#應用專案檔案\n - guide/file-structure#建立多專案工作區\n - guide/glossary#jit\n - guide/glossary#library\n - guide/glossary#project\n - guide/glossary#view-hierarchy\n - guide/glossary#workspace\n - guide/npm-packages\n - guide/strict-mode\n - guide/typescript-configuration\n - guide/workspace-config\n - http://www.protractortest.org\n - https://docs.npmjs.com/files/package-lock.json\n - https://docs.npmjs.com/files/package.json\n - https://editorconfig.org\n - https://git-scm.com\n - https://git-scm.com/\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/file-structure.md?message=docs%3A%20請簡述你的修改...\n - https://github.com/ng-packagr/ng-packagr\n - https://karma-runner.github.io\n - https://www.protractortest.org\n - https://www.typescriptlang.org\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends\n - https://yarnpkg.com/lang/en/docs/yarn-lock\n-->"}