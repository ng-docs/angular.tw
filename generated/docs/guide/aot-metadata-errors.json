{"id":"guide/aot-metadata-errors","title":"AOT metadata errors","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/aot-metadata-errors.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"aot-metadata-errors\" translation-result=\"on\">AOT 元資料錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-metadata-errors\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">AOT metadata errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#aot-metadata-errors\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">以下是你可能會遇到的元資料錯誤，帶有解釋和建議的更正。</p><p translation-origin=\"off\">The following are metadata errors you may encounter, with explanations and suggested corrections.</p>\n\n<p translation-result=\"on\"><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">不支援此表示式格式（Expression form not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">參考了局部（未匯出的）符號（Reference to a local (non-exported) symbol）</a><br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">只允許初始化過的變數和常量（Only initialized variables and constants）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">參考了未匯出的類（Reference to a non-exported class）</a><br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">參考了未匯出的函式（Reference to a non-exported function）</a><br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">不支援函式呼叫（Function calls are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">不支援解構變數或常量（Destructured variable or constant not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">不能解析此型別（Could not resolve type）</a><br>\n<a href=\"guide/aot-metadata-errors#name-expected\">期待是名字（Name expected）</a><br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">不支援的列舉成員名（Unsupported enum member name）</a><br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">不支援帶標籤函式的範本表示式（Tagged template expressions are not supported）</a><br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">期待是符號參考（Symbol reference expected）</a><br></p><p translation-origin=\"off\"><a href=\"guide/aot-metadata-errors#expression-form-not-supported\">Expression form not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-local-symbol\">Reference to a local (non-exported) symbol</a> <br>\n<a href=\"guide/aot-metadata-errors#only-initialized-variables\">Only initialized variables and constants</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\">Reference to a non-exported class</a> <br>\n<a href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\">Reference to a non-exported function</a> <br>\n<a href=\"guide/aot-metadata-errors#function-calls-not-supported\">Function calls are not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#destructured-variable-not-supported\">Destructured variable or constant not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#could-not-resolve-type\">Could not resolve type</a> <br>\n<a href=\"guide/aot-metadata-errors#name-expected\">Name expected</a> <br>\n<a href=\"guide/aot-metadata-errors#unsupported-enum-member-name\">Unsupported enum member name</a> <br>\n<a href=\"guide/aot-metadata-errors#tagged-template-expressions-not-supported\">Tagged template expressions are not supported</a> <br>\n<a href=\"guide/aot-metadata-errors#symbol-reference-expected\">Symbol reference expected</a> <br> </p>\n\n<p><a id=\"expression-form-not-supported\"></a></p>\n<h2 id=\"expression-form-not-supported\" translation-result=\"on\">不支援此表示式格式（Expression form not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Expression form not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#expression-form-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">編譯器在對 Angular 元資料求值時遇到了一個它不能理解的表示式。</p><p translation-origin=\"off\"><em>The compiler encountered an expression it didn't understand while evaluating Angular metadata.</em></p>\n\n</div>\n<p translation-result=\"on\">如以下範例所示，使用了編譯器的<a href=\"guide/aot-compiler#expression-syntax\">受限表示式語法</a>之外的語言特性可能會產生此錯誤：</p><p translation-origin=\"off\">Language features outside of the compiler's <a href=\"guide/aot-compiler#expression-syntax\">restricted expression syntax</a>\ncan produce this error, as seen in the following example:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport class Fooish { … }\n…\nconst prop = typeof Fooish; // typeof is not valid in metadata\n  …\n  // bracket notation is not valid in metadata\n  { provide: 'token', useValue: { [prop]: 'value' } };\n  …\n\n</code-example>\n<p translation-result=\"on\">你可以在普通的應用程式碼中使用 <code>typeof</code> 和方括號標記法來指定屬性名，但是這些特性不能在定義 Angular 元資料的表示式中使用。</p><p translation-origin=\"off\">You can use <code>typeof</code> and bracket notation in normal application code.\nYou just can't use those features within expressions that define Angular metadata.</p>\n\n<p translation-result=\"on\">透過在編寫 Angular 元資料時堅持使用編譯器的<a href=\"guide/aot-compiler#expression-syntax\">受限表示式語法</a>來避免此錯誤，並小心新的或不常用的 TypeScript 功能。</p><p translation-origin=\"off\">Avoid this error by sticking to the compiler's <a href=\"guide/aot-compiler#expression-syntax\">restricted expression syntax</a>\nwhen writing Angular metadata\nand be wary of new or unusual TypeScript features.</p>\n\n<p><a id=\"reference-to-a-local-symbol\"></a></p>\n<h2 id=\"reference-to-a-local-non-exported-symbol\" translation-result=\"on\">參考本地（未匯出的）符號（Reference to a local (non-exported) symbol）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Reference to a local (non-exported) symbol<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>如果要參考區域性（未匯出的）符號 'symbol name'，請考慮匯出它。</em></p><p translation-origin=\"off\"><em>Reference to a local (non-exported) symbol 'symbol name'. Consider exporting the symbol.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器遇到了區域性定義的未匯出或未初始化的符號。</p><p translation-origin=\"off\">The compiler encountered a referenced to a locally defined symbol that either wasn't exported or wasn't initialized.</p>\n\n<p translation-result=\"on\">下面就是存在該問題的 <code>provider</code> 範例。</p><p translation-origin=\"off\">Here's a <code>provider</code> example of the problem.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nlet foo: number; // neither exported nor initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p translation-result=\"on\">編譯器會產生這個元件工廠，其中包含 <code>useValue</code> 提供者的程式碼。<em>那個</em>工廠模組不能存取<em>這個</em>原始碼模組，無法存取這個（未匯出的）<code>foo</code> 變數。</p><p translation-origin=\"off\">The compiler generates the component factory, which includes the <code>useValue</code> provider code, in a separate module. <em>That</em> factory module can't reach back to <em>this</em> source module to access the local (non-exported) <code>foo</code> variable.</p>\n\n<p translation-result=\"on\">你可以透過初始化 <code>foo</code> 來修正這個錯誤。</p><p translation-origin=\"off\">You could fix the problem by initializing <code>foo</code>.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nlet foo = 42; // initialized\n\n</code-example>\n<p translation-result=\"on\">編譯器會將表示式<a href=\"guide/aot-compiler#code-folding\">摺疊</a>到提供者中，就像你自己寫的一樣。</p><p translation-origin=\"off\">The compiler will <a href=\"guide/aot-compiler#code-folding\">fold</a> the expression into the provider as if you had written this.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nproviders: [\n  { provide: Foo, useValue: 42 }\n]\n\n</code-example>\n<p translation-result=\"on\">另外，你也可以透過匯出 <code>foo</code> 來解決它，這樣 <code>foo</code> 將會在執行期間你真正知道它的值的時候被賦值。</p><p translation-origin=\"off\">Alternatively, you can fix it by exporting <code>foo</code> with the expectation that <code>foo</code> will be assigned at runtime when you actually know its value.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let foo: number; // exported\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: … ,\n  providers: [\n    { provide: Foo, useValue: foo }\n  ]\n})\nexport class MyComponent {}\n\n</code-example>\n<p translation-result=\"on\">新增 <code>export</code> 的方式通常用於需要在元資料中參考變數時，如 <code>providers</code> 和 <code>animations</code>，這樣編譯器就可以在這些表示式中產生對已匯出變數的參考了。它不需要知道這些變數的<em>值</em>。</p><p translation-origin=\"off\">Adding <code>export</code> often works for variables referenced in metadata such as <code>providers</code> and <code>animations</code> because the compiler can generate <em>references</em> to the exported variables in these expressions. It doesn't need the <em>values</em> of those variables.</p>\n\n<p translation-result=\"on\">當編譯器需要知道<em>真正的值</em>以產生程式碼時，新增 <code>export</code> 的方式就是無效的。比如這裡的 <code>template</code> 屬性。</p><p translation-origin=\"off\">Adding <code>export</code> doesn't work when the compiler needs the <em>actual value</em>\nin order to generate code.\nFor example, it doesn't work for the <code>template</code> property.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string; // exported but not initialized\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p translation-result=\"on\">編譯器<em>現在就</em>需要 <code>template</code> 屬性的值來產生元件工廠。\n僅僅有對該變數的參考是不夠的。\n給這個宣告加上 <code>export</code> 字首只會產生一個新的錯誤 \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code>【只能參考初始化過的變數和常量】</a>\"。</p><p translation-origin=\"off\">The compiler needs the value of the <code>template</code> property <em>right now</em> to generate the component factory.\nThe variable reference alone is insufficient.\nPrefixing the declaration with <code>export</code> merely produces a new error, \"<a href=\"guide/aot-metadata-errors#only-initialized-variables\"><code>Only initialized variables and constants can be referenced</code></a>\".</p>\n\n<p><a id=\"only-initialized-variables\"></a></p>\n<h2 id=\"only-initialized-variables-and-constants\" translation-result=\"on\">只支援初始化過的變數和常量（Only initialized variables and constants）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Only initialized variables and constants<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#only-initialized-variables-and-constants\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>只能參考已初始化過的變數和常量，因為範本編譯器需要該變數的值。</em></p><p translation-origin=\"off\"><em>Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器發現某個到已匯出的變數或靜態欄位的參考是沒有初始化過的。而它需要根據那個變數的值來產生程式碼。</p><p translation-origin=\"off\">The compiler found a reference to an exported variable or static field that wasn't initialized.\nIt needs the value of that variable to generate code.</p>\n\n<p translation-result=\"on\">下面的例子試圖把元件的 <code>template</code> 屬性設定為已匯出的 <code>someTemplate</code> 變數的值，而這個值雖然宣告過，卻沒有初始化過。</p><p translation-origin=\"off\">The following example tries to set the component's <code>template</code> property to the value of the exported <code>someTemplate</code> variable which is declared but <em>unassigned</em>.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nexport let someTemplate: string;\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p translation-result=\"on\">如果你從其它模組中匯入了 <code>someTemplate</code>，但那個模組中忘了初始化它，就會看到這個錯誤。</p><p translation-origin=\"off\">You'd also get this error if you imported <code>someTemplate</code> from some other module and neglected to initialize it there.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR - not initialized there either\nimport { someTemplate } from './config';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p translation-result=\"on\">編譯器不能等到執行時才得到該範本的資訊。它必須從原始碼中靜態獲得這個 <code>someTemplate</code> 變數的值，以便產生元件工廠，元件工廠中需要包含根據這個範本來產生元素的程式碼。</p><p translation-origin=\"off\">The compiler cannot wait until runtime to get the template information.\nIt must statically derive the value of the <code>someTemplate</code> variable from the source code so that it can generate the component factory, which includes instructions for building the element based on the template.</p>\n\n<p translation-result=\"on\">要糾正這個錯誤，請在<em>同一行</em>的初始化子句中初始化這個變數的值。</p><p translation-origin=\"off\">To correct this error, provide the initial value of the variable in an initializer clause <em>on the same line</em>.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport let someTemplate = '&lt;h1&gt;Greetings from Angular&lt;/h1&gt;';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-component',\n  template: someTemplate\n})\nexport class MyComponent {}\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-class\"></a></p>\n<h2 id=\"reference-to-a-non-exported-class\" translation-result=\"on\">參考未匯出過的類（Reference to a non-exported class）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Reference to a non-exported class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-class\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>對非匯出類 <code>&lt;class name&gt;</code> 的參考。</em>\n<em>考慮匯出此類別。</em></p><p translation-origin=\"off\"><em>Reference to a non-exported class <code>&lt;class name&gt;</code>.</em>\n<em>Consider exporting the class.</em></p>\n\n</div>\n<p translation-result=\"on\">元資料參考了一個未匯出的類別。</p><p translation-origin=\"off\">Metadata referenced a class that wasn't exported.</p>\n\n<p translation-result=\"on\">比如，你可能定義了一個類別並在某個 <code>providers</code> 陣列中把它用作了依賴注入令牌，但是忘了匯出這個類別。</p><p translation-origin=\"off\">For example, you may have defined a class and used it as an injection token in a providers array but neglected to export that class.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nabstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">Angular 在單獨的模組中產生類工廠，並且該工廠<a href=\"guide/aot-compiler#exported-symbols\">只能存取匯出的類</a>。要更正此錯誤，請匯出所參考的類別。</p><p translation-origin=\"off\">Angular generates a class factory in a separate module and that factory <a href=\"guide/aot-compiler#exported-symbols\">can only access exported classes</a>.\nTo correct this error, export the referenced class.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport abstract class MyStrategy { }\n\n  …\n  providers: [\n    { provide: MyStrategy, useValue: … }\n  ]\n  …\n\n</code-example>\n<p><a id=\"reference-to-a-non-exported-function\"></a></p>\n<h2 id=\"reference-to-a-non-exported-function\" translation-result=\"on\">參考未匯出過的函式（Reference to a non-exported function）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Reference to a non-exported function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#reference-to-a-non-exported-function\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">元資料中參考了未匯出的函式。</p><p translation-origin=\"off\"><em>Metadata referenced a function that wasn't exported.</em></p>\n\n</div>\n<p translation-result=\"on\">比如，你可能已經把某個服務提供者的 <code>useFactory</code> 屬性設定成了一個區域性定義但忘了匯出的函式。</p><p translation-origin=\"off\">For example, you may have set a providers <code>useFactory</code> property to a locally defined function that you neglected to export.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nfunction myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">Angular 在單獨的模組中產生類工廠，該工廠<a href=\"guide/aot-compiler#exported-symbols\">只能存取匯出的函式</a>。要更正此錯誤，請匯出此函式。</p><p translation-origin=\"off\">Angular generates a class factory in a separate module and that factory <a href=\"guide/aot-compiler#exported-symbols\">can only access exported functions</a>.\nTo correct this error, export the function.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nexport function myStrategy() { … }\n\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy }\n  ]\n  …\n\n</code-example>\n<p><a id=\"function-calls-not-supported\"></a></p>\n<h2 id=\"function-calls-are-not-supported\" translation-result=\"on\">不支援函式呼叫（Function calls are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Function calls are not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#function-calls-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>不支援函式呼叫。考慮把這個函式或 lambda 表示式替換成一個對已匯出函式的參考。</em></p><p translation-origin=\"off\"><em>Function calls are not supported. Consider replacing the function or lambda with a reference to an exported function.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器當前不支援<a href=\"guide/aot-compiler#function-expression\">函式表示式或 lambda 函式</a>。比如，你不能將提供者的 <code>useFactory</code> 設定為這樣的匿名函式或箭頭函式。</p><p translation-origin=\"off\">The compiler does not currently support <a href=\"guide/aot-compiler#function-expression\">function expressions or lambda functions</a>.\nFor example, you cannot set a provider's <code>useFactory</code> to an anonymous function or arrow function like this.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: function() { … } },\n    { provide: OtherStrategy, useFactory: () =&gt; { … } }\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">如果你在某個提供者的 <code>useValue</code> 中呼叫函式或方法，也會導致這個錯誤。</p><p translation-origin=\"off\">You also get this error if you call a function or method in a provider's <code>useValue</code>.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { calculateValue } from './utilities';\n\n  …\n  providers: [\n    { provide: SomeValue, useValue: calculateValue() }\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">要改正這個問題，就要從模組中匯出這個函式，並改成在服務提供者的 <code>useFactory</code> 中參考該函式。</p><p translation-origin=\"off\">To correct this error, export a function from the module and refer to the function in a <code>useFactory</code> provider instead.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { calculateValue } from './utilities';\n\nexport function myStrategy() { … }\nexport function otherStrategy() { … }\nexport function someValueFactory() {\n  return calculateValue();\n}\n  …\n  providers: [\n    { provide: MyStrategy, useFactory: myStrategy },\n    { provide: OtherStrategy, useFactory: otherStrategy },\n    { provide: SomeValue, useFactory: someValueFactory }\n  ]\n  …\n\n</code-example>\n<p><a id=\"destructured-variable-not-supported\"></a></p>\n<h2 id=\"destructured-variable-or-constant-not-supported\" translation-result=\"on\">不支援解構變數或常量（Destructured variable or constant not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Destructured variable or constant not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>範本編譯器不支援參考匯出的解構語法的變數或常量。考慮簡化這一點，以避免解構語法。</em></p><p translation-origin=\"off\"><em>Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器不支援參考透過<a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">解構</a>賦值的方式得到的變數。</p><p translation-origin=\"off\">The compiler does not support references to variables assigned by <a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\">destructuring</a>.</p>\n\n<p translation-result=\"on\">比如，你不能這麼寫：</p><p translation-origin=\"off\">For example, you cannot write something like this:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nimport { configuration } from './configuration';\n\n// destructured assignment to foo and bar\nconst {foo, bar} = configuration;\n  …\n  providers: [\n    {provide: Foo, useValue: foo},\n    {provide: Bar, useValue: bar},\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">要糾正這個錯誤，就要參考非解構方式的變數。</p><p translation-origin=\"off\">To correct this error, refer to non-destructured values.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { configuration } from './configuration';\n  …\n  providers: [\n    {provide: Foo, useValue: configuration.foo},\n    {provide: Bar, useValue: configuration.bar},\n  ]\n  …\n\n</code-example>\n<p><a id=\"could-not-resolve-type\"></a></p>\n<h2 id=\"could-not-resolve-type\" translation-result=\"on\">無法解析型別（Could not resolve type）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Could not resolve type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#could-not-resolve-type\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">編譯器遇到了某個型別，但是不知道它是由哪個模組匯出的。</p><p translation-origin=\"off\"><em>The compiler encountered a type and can't determine which module exports that type.</em></p>\n\n</div>\n<p translation-result=\"on\">這通常會發生在你參考環境型別時。比如，<code>Window</code> 型別就是在全域 <code>.d.ts</code> 檔案中宣告的環境型別。</p><p translation-origin=\"off\">This can happen if you refer to an ambient type.\nFor example, the <code>Window</code> type is an ambient type declared in the global <code>.d.ts</code> file.</p>\n\n<p translation-result=\"on\">如果你在元件的建構函式中參考它就會導致一個錯誤，因為編譯器必須對建構函式進行靜態分析。</p><p translation-origin=\"off\">You'll get an error if you reference it in the component constructor, which the compiler must statically analyze.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ })\nexport class MyComponent {\n  constructor (private win: Window) { … }\n}\n\n</code-example>\n<p translation-result=\"on\">TypeScript 能理解這些環境型別，所以你不用匯入它們。但 Angular 編譯器不理解你沒有匯入或匯出過的型別。</p><p translation-origin=\"off\">TypeScript understands ambient types so you don't import them.\nThe Angular compiler does not understand a type that you neglect to export or import.</p>\n\n<p translation-result=\"on\">這種情況下，編譯器就無法理解如何使用這個 <code>Window</code> 令牌來進行注入。</p><p translation-origin=\"off\">In this case, the compiler doesn't understand how to inject something with the <code>Window</code> token.</p>\n\n<p translation-result=\"on\">不要在元資料表示式中參考環境型別。</p><p translation-origin=\"off\">Do not refer to ambient types in metadata expressions.</p>\n\n<p translation-result=\"on\">如果你必須注入某個環境型別的例項，可以用以下四步來巧妙解決這個問題：</p><p translation-origin=\"off\">If you must inject an instance of an ambient type,\nyou can finesse the problem in four steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為環境型別的例項建立一個注入令牌。</p><p translation-origin=\"off\">Create an injection token for an instance of the ambient type.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個返回該例項的工廠函式。</p><p translation-origin=\"off\">Create a factory function that returns that instance.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用該工廠函式新增一個 <code>useFactory</code> 提供者。</p><p translation-origin=\"off\">Add a <code>useFactory</code> provider with that factory function.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> 來注入這個例項。</p><p translation-origin=\"off\">Use <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a></code> to inject the instance.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">下面的例子說明了這一點。</p><p translation-origin=\"off\">Here's an illustrative example.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> } from '@angular/core';\n\nexport const WINDOW = new <a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a>('Window');\nexport function _window() { return window; }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  …\n  providers: [\n    { provide: WINDOW, useFactory: _window }\n  ]\n})\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW) private win: Window) { … }\n}\n\n</code-example>\n<p translation-result=\"on\">對於編譯器來說，建構函式中出現 <code>Window</code> 型別已不再是個問題，因為它現在使用 <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> 來產生注入程式碼。</p><p translation-origin=\"off\">The <code>Window</code> type in the constructor is no longer a problem for the compiler because it\nuses the <code>@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(WINDOW)</code> to generate the injection code.</p>\n\n<p translation-result=\"on\">Angular 也用 <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> 令牌做了類似的事情，所以你也可以注入瀏覽器的 <code>document</code> 物件（或它的一個抽象層，取決於該應用執行在哪個平台）。</p><p translation-origin=\"off\">Angular does something similar with the <code><a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a></code> token so you can inject the browser's <code>document</code> object (or an abstraction of it, depending upon the platform in which the application runs).</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> }   from '@angular/core';\nimport { <a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a> } from '@angular/common';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nexport class MyComponent {\n  constructor (@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(<a href=\"api/common/DOCUMENT\" class=\"code-anchor\">DOCUMENT</a>) private doc: Document) { … }\n}\n\n</code-example>\n<p><a id=\"name-expected\"></a></p>\n<h2 id=\"name-expected\" translation-result=\"on\">期望有名字（Name expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#name-expected\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Name expected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#name-expected\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>編譯器在正在計算的表示式中期望有一個名字。</em></p><p translation-origin=\"off\"><em>The compiler expected a name in an expression it was evaluating.</em></p>\n\n</div>\n<p translation-result=\"on\">如果將數字用作屬性名稱，則可能發生這種情況，如以下範例所示。</p><p translation-origin=\"off\">This can happen if you use a number as a property name as in the following example.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nprovider: [{ provide: Foo, useValue: { 0: 'test' } }]\n\n</code-example>\n<p translation-result=\"on\">把該屬性的名字改為非數字型別。</p><p translation-origin=\"off\">Change the name of the property to something non-numeric.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// CORRECTED\nprovider: [{ provide: Foo, useValue: { '0': 'test' } }]\n\n</code-example>\n<p><a id=\"unsupported-enum-member-name\"></a></p>\n<h2 id=\"unsupported-enum-member-name\" translation-result=\"on\">不支援的列舉成員名稱（Unsupported enum member name）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Unsupported enum member name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#unsupported-enum-member-name\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Angular 不能確定你在元資料中參考的<a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">列舉成員</a>的值。</p><p translation-origin=\"off\"><em>Angular couldn't determine the value of the <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum member</a> that you referenced in metadata.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器可以理解簡單的列舉值，但不能理解複雜的，比如從那些計算屬性中派生出來的。</p><p translation-origin=\"off\">The compiler can understand simple enum values but not complex values such as those derived from computed properties.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nenum Colors {\n  Red = 1,\n  White,\n  Blue = \"Blue\".length // <a href=\"api/core/computed\" class=\"code-anchor\">computed</a>\n}\n\n  …\n  providers: [\n    { provide: BaseColor,   useValue: Colors.White } // ok\n    { provide: DangerColor, useValue: Colors.Red }   // ok\n    { provide: StrongColor, useValue: Colors.Blue }  // bad\n  ]\n  …\n\n</code-example>\n<p translation-result=\"on\">避免參考那些使用了複雜初始化物件或計算屬性的列舉。</p><p translation-origin=\"off\">Avoid referring to enums with complicated initializers or computed properties.</p>\n\n<p><a id=\"tagged-template-expressions-not-supported\"></a></p>\n<h2 id=\"tagged-template-expressions-are-not-supported\" translation-result=\"on\">不支援帶標籤的範本表示式（Tagged template expressions are not supported）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Tagged template expressions are not supported<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><em>元資料中不支援帶標籤函式的範本表示式。</em></p><p translation-origin=\"off\"><em>Tagged template expressions are not supported in metadata.</em></p>\n\n</div>\n<p translation-result=\"on\">編譯器遇到了 JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">帶標籤的範本表示式</a>，如下所示。</p><p translation-origin=\"off\">The compiler encountered a JavaScript ES2015 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">tagged template expression</a> such as the following.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n// ERROR\nconst expression = 'funky';\nconst raw = String.raw`A tagged template ${expression} string`;\n …\n template: '&lt;div&gt;' + raw + '&lt;/div&gt;'\n …\n\n</code-example>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a>是 JavaScript ES2015 的原生<em>標籤函式</em>。</p><p translation-origin=\"off\"><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw()</code></a> is a <em>tag function</em> native to JavaScript ES2015.</p>\n\n<p translation-result=\"on\">AOT 編譯器不支援帶標籤函式的範本表示式，避免在元資料表示式中使用它們。</p><p translation-origin=\"off\">The AOT compiler does not support tagged template expressions; avoid them in metadata expressions.</p>\n\n<p><a id=\"symbol-reference-expected\"></a></p>\n<h2 id=\"symbol-reference-expected\" translation-result=\"on\">期待符號的參考（Symbol reference expected）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Symbol reference expected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-metadata-errors#symbol-reference-expected\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">編譯器期待在錯誤資訊指出的位置是一個符號參考。</p><p translation-origin=\"off\"><em>The compiler expected a reference to a symbol at the location specified in the error message.</em></p>\n\n</div>\n<p translation-result=\"on\">當你在類別的 <code>extends</code> 子句中使用表示式時就會出現這個錯誤。</p><p translation-origin=\"off\">This error can occur if you use an expression in the <code>extends</code> clause of a class.</p>\n\n<!--todo: Chuck: After reviewing your PR comment I'm still at a loss. See [comment there](https://github.com/angular/angular/pull/17712#discussion_r132025495). -->\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n-->\n<!-- links from this doc:\n - api/common/DOCUMENT\n - api/core/Component\n - api/core/Inject\n - api/core/InjectionToken\n - api/core/computed\n - guide/aot-compiler#code-folding\n - guide/aot-compiler#exported-symbols\n - guide/aot-compiler#expression-syntax\n - guide/aot-compiler#function-expression\n - guide/aot-metadata-errors#aot-metadata-errors\n - guide/aot-metadata-errors#aot-元資料錯誤\n - guide/aot-metadata-errors#could-not-resolve-type\n - guide/aot-metadata-errors#destructured-variable-not-supported\n - guide/aot-metadata-errors#destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#expression-form-not-supported\n - guide/aot-metadata-errors#function-calls-are-not-supported\n - guide/aot-metadata-errors#function-calls-not-supported\n - guide/aot-metadata-errors#name-expected\n - guide/aot-metadata-errors#only-initialized-variables\n - guide/aot-metadata-errors#only-initialized-variables-and-constants\n - guide/aot-metadata-errors#reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#reference-to-a-local-symbol\n - guide/aot-metadata-errors#reference-to-a-non-exported-class\n - guide/aot-metadata-errors#reference-to-a-non-exported-function\n - guide/aot-metadata-errors#symbol-reference-expected\n - guide/aot-metadata-errors#tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#tagged-template-expressions-not-supported\n - guide/aot-metadata-errors#unsupported-enum-member-name\n - guide/aot-metadata-errors#不支援函式呼叫function-calls-are-not-supported\n - guide/aot-metadata-errors#不支援帶標籤的範本表示式tagged-template-expressions-are-not-supported\n - guide/aot-metadata-errors#不支援此表示式格式expression-form-not-supported\n - guide/aot-metadata-errors#不支援的列舉成員名稱unsupported-enum-member-name\n - guide/aot-metadata-errors#不支援解構變數或常量destructured-variable-or-constant-not-supported\n - guide/aot-metadata-errors#只支援初始化過的變數和常量only-initialized-variables-and-constants\n - guide/aot-metadata-errors#參考未匯出過的函式reference-to-a-non-exported-function\n - guide/aot-metadata-errors#參考未匯出過的類reference-to-a-non-exported-class\n - guide/aot-metadata-errors#參考本地未匯出的符號reference-to-a-local-non-exported-symbol\n - guide/aot-metadata-errors#無法解析型別could-not-resolve-type\n - guide/aot-metadata-errors#期待符號的參考symbol-reference-expected\n - guide/aot-metadata-errors#期望有名字name-expected\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/aot-metadata-errors.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/docs/handbook/enums.html\n - https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring\n-->"}