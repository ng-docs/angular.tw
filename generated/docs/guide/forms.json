{"id":"guide/forms","title":"Building a template-driven form","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/forms.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"building-a-template-driven-form\" translation-result=\"on\">建構範本驅動表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#building-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Building a template-driven form<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#building-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h1>\n\n<p><a id=\"template-driven\"></a></p>\n<p translation-result=\"on\">本課程會向你展示如何建立範本驅動的表單。表單中的控制項元素繫結到具有輸入驗證功能的資料屬性。輸入驗證有助於保持資料的完整性，而樣式可以改善使用者體驗。</p><p translation-origin=\"off\">This tutorial shows you how to create a template-driven form. The control elements in the form are bound to data properties that have input validation. The input validation helps maintain data integrity and styling to improve the user experience.</p>\n\n<p translation-result=\"on\">當在範本中進行更改時，範本驅動表單會使用<a href=\"guide/architecture-components#data-binding\" title=\"介紹 2 路資料繫結\">雙向資料繫結</a>來更新元件中的資料模型，反之亦然。</p><p translation-origin=\"off\">Template-driven forms use <a href=\"guide/architecture-components#data-binding\" title=\"Intro to 2-way data binding\">two-way data binding</a> to update the data model in the component as changes are made in the template and vice versa.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Angular 支援兩種互動式表單的設計方法。你可以使用 Angular 中的<a href=\"guide/glossary#template\" title=\"範本術語的定義\">範本語法和指令</a>中的表單專用指令建構表單。本課程講解了這些用於編寫範本的指令和技巧。你還可以使用響應式或模型驅動的方式來建構表單。</p><p translation-origin=\"off\">Angular supports two design approaches for interactive forms.\nYou can build forms by using Angular <a href=\"guide/glossary#template\" title=\"Definition of template terms\">template syntax and directives</a> to write templates with the form-specific directives.\nThis tutorial describes the directives and techniques to use when writing templates. You can also use a reactive or model-driven approach to build forms.</p>\n\n<p translation-result=\"on\">範本驅動表單適用於小型或簡單的表單，而響應式表單則更具延展性，適用於複雜表單。要比較這兩種方法，參閱<a href=\"guide/forms-overview\" title=\"Angular 表單概述\">“表單簡介”</a></p><p translation-origin=\"off\">Template-driven forms are suitable for small or simple forms, while reactive forms are more scalable and suitable for complex forms.\nFor a comparison of the two approaches, see <a href=\"guide/forms-overview\" title=\"Overview of Angular forms.\">Introduction to Forms</a></p>\n\n</div>\n<p translation-result=\"on\">你可以用 Angular 範本來建構各種表單，比如登入表單、聯絡人表單和幾乎所有的業務表單。你可以創造性地對控制項進行佈局並把它們繫結到物件模型的資料上。你可以指定驗證規則並顯示驗證錯誤，根據條件啟用或禁用特定控制項，觸發內建的視覺反饋等等。</p><p translation-origin=\"off\">You can build almost any kind of form with an Angular template —login forms, contact forms, and pretty much any business form.\nYou can lay out the controls creatively and bind them to the data in your object model.\nYou can specify validation rules and display validation errors, conditionally allow input from specific controls, trigger built-in visual feedback, and much more.</p>\n\n<p translation-result=\"on\">本課程向你展示瞭如何建構一個簡化的表單，例如<a href=\"tutorial\" title=\"英雄之旅\">《英雄之旅》課程</a>中的表單來講解這些技術。</p><p translation-origin=\"off\">This tutorial shows you how to build a simplified form like the one from the <a href=\"tutorial/tour-of-heroes\" title=\"Tour of Heroes\">Tour of Heroes tutorial</a> to illustrate the techniques.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">執行或下載範例應用：<live-example></live-example>。</p><p translation-origin=\"off\">Run or download the example application: <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"objectives\" translation-result=\"on\">目標<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#objectives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Objectives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#objectives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本課程將教你如何執行以下操作：</p><p translation-origin=\"off\">This tutorial teaches you how to do the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">使用元件和範本建構一個 Angular 表單</p><p translation-origin=\"off\">Build an Angular form with a component and template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 建立雙向資料繫結，以便讀寫輸入控制項的值</p><p translation-origin=\"off\">Use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> to create two-way data bindings for reading and writing input-control values</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用追蹤控制項狀態的特殊 CSS 類來提供視覺反饋</p><p translation-origin=\"off\">Provide visual feedback using special CSS classes that track the state of the controls</p>\n\n</li>\n<li>\n<p translation-result=\"on\">向用戶顯示驗證錯誤，並根據表單狀態有條件地允許來自表單控制項的輸入</p><p translation-origin=\"off\">Display validation errors to users and conditionally allow input from form controls based on the form status</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-reference-variables\">使用範本參考變數</a>在 HTML 元素之間共享資訊</p><p translation-origin=\"off\">Share information across HTML elements using <a href=\"guide/template-reference-variables\">template reference variables</a></p>\n\n</li>\n</ul>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在進一步研究範本驅動表單之前，你應該對下列內容有一個基本的瞭解。</p><p translation-origin=\"off\">Before going further into template-driven forms, you should have a basic understanding of the following.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://www.typescriptlang.org/\" title=\"TypeScript 語言\">TypeScript</a>和 HTML5 程式設計</p><p translation-origin=\"off\"><a href=\"https://www.typescriptlang.org/\" title=\"The TypeScript language\">TypeScript</a> and HTML5 programming</p>\n\n</li>\n<li>\n<p translation-result=\"on\">Angular 的應用設計基礎，就像<a href=\"guide/architecture\" title=\"Angular 概念簡介。\">Angular 概念簡介</a>中描述的那樣</p><p translation-origin=\"off\">Angular application-design fundamentals, as described in <a href=\"guide/architecture\" title=\"Introduction to Angular concepts\">Angular Concepts</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/template-syntax\" title=\"範本語法指南\">Angular 範本語法</a>的基礎知識</p><p translation-origin=\"off\">The basics of <a href=\"guide/template-syntax\" title=\"Template syntax guide\">Angular template syntax</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/forms-overview\" title=\"Angular 表單概述\">“表單簡介”</a>中提供的表單設計概念</p><p translation-origin=\"off\">The form-design concepts that are presented in <a href=\"guide/forms-overview\" title=\"Overview of Angular forms\">Introduction to Forms</a></p>\n\n</li>\n</ul>\n<p><a id=\"intro\"></a></p>\n<h2 id=\"build-a-template-driven-form\" translation-result=\"on\">建構一個範本驅動表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Build a template-driven form<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-a-template-driven-form\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本驅動表單依賴於 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 定義的指令。</p><p translation-origin=\"off\">Template-driven forms rely on directives defined in the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">會協調其附著在的表單元素中的值變更與資料模型中的變更，以便你透過輸入驗證和錯誤處理來響應使用者輸入。</nt-wrapper><nt-wrapper translation-origin=\"off\">Reconciles value changes in the attached form element with changes in the data model, allowing you to respond to user input with input validation and error handling.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">會建立一個最上層的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 例項，並把它繫結到 <code>&lt;form&gt;</code> 元素上，以追蹤它所聚合的那些表單值並驗證狀態。只要你匯入了 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，預設情況下這個指令就會在所有 <code>&lt;form&gt;</code> 標籤上啟用。你不需要新增特殊的選擇器。</nt-wrapper><nt-wrapper translation-origin=\"off\">Creates a top-level <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance and binds it to a <code>&lt;form&gt;</code> element to track aggregated form value and validation status. As soon as you import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>, this directive becomes active by default on all <code>&lt;form&gt;</code> tags. You don't need to add a special selector.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">NgModelGroup</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">會建立 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的例項並把它繫結到 DOM 元素中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Creates and binds a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> instance to a DOM element.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"the-sample-application\" translation-result=\"on\">範例應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-sample-application\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">The sample application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-sample-application\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><em>英雄僱傭管理局</em>使用本指南中的範例表單來維護英雄的個人資訊。畢竟英雄也要工作啊。這個表單有助於該機構將正確的英雄與正確的危機匹配起來。</p><p translation-origin=\"off\">The sample form in this guide is used by the <em>Hero Employment Agency</em> to maintain personal information about heroes.\nEvery hero needs a job.\nThis form helps the agency match the right hero with the right crisis.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Clean Form\" src=\"generated/images/guide/forms/hero-form-1.png\" width=\"479\" height=\"339\">\n</div>\n<p translation-result=\"on\">該表單突出了一些易於使用的設計特性。比如，這兩個必填欄位的左邊是綠色條，以便讓它們醒目。這些欄位都有初始值，所以表單是有效的，並且 <strong>Submit</strong> 按鈕也是啟用的。</p><p translation-origin=\"off\">The form highlights some design features that make it easier to use.\nFor instance, the two required fields have a green bar on the left to make them easy to spot.\nThese fields have initial values, so the form is valid and the <strong>Submit</strong> button is enabled.</p>\n\n<p translation-result=\"on\">使用此表單會向你展示：</p><p translation-origin=\"off\">Working with this form shows you:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">如何包含驗證邏輯</p><p translation-origin=\"off\">How to include validation logic</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如何使用標準 CSS 自訂外觀表現</p><p translation-origin=\"off\">How to customize the presentation with standard CSS</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如何處理錯誤條件以確保輸入的有效性</p><p translation-origin=\"off\">How to handle error conditions to ensure valid input</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">如果使用者刪除了英雄的名字，那麼表單就會失效。該應用會檢測已更改的狀態，並以醒目的樣式顯示驗證錯誤。此外，<strong>Submit</strong> 按鈕會被禁用，輸入控制項左側的“必填”欄也會從綠色變為紅色。</p><p translation-origin=\"off\">If the user deletes the hero name, for example, the form becomes not valid.\nThe application detects the changed status, and displays a validation error in an attention-grabbing style.\nThe <strong>Submit</strong> button is not enabled, and the \"required\" bar to the left of the input control changes from green to red.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Invalid, Name Required\" src=\"generated/images/guide/forms/hero-form-2.png\" width=\"465\" height=\"402\">\n</div>\n<h3 id=\"step-overview\" translation-result=\"on\">步驟概述<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#step-overview\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Step overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#step-overview\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在本課程中，你將使用以下步驟將一個範例表單繫結到資料並處理使用者輸入。</p><p translation-origin=\"off\">In the course of this tutorial, you bind a sample form to data and handle user input using the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立基本表單。</p><p translation-origin=\"off\">Build the basic form.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">定義一個範例資料模型</p><p translation-origin=\"off\">Define a sample data model</p>\n\n</li>\n<li>\n<p translation-result=\"on\">包括必需的基礎設施，比如 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code></p><p translation-origin=\"off\">Include required infrastructure such as the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code></p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令和雙向資料繫結語法把表單控制項繫結到資料屬性。</p><p translation-origin=\"off\">Bind form controls to data properties using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive and two-way data-binding syntax.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">檢查 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 如何使用 CSS 類報告控制項狀態</p><p translation-origin=\"off\">Examine how <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> reports control states using CSS classes</p>\n\n</li>\n<li>\n<p translation-result=\"on\">為控制項命名，以便讓 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 可以存取它們</p><p translation-origin=\"off\">Name controls to make them accessible to <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 追蹤輸入的有效性和控制項的狀態。</p><p translation-origin=\"off\">Track input validity and control status using <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">新增自訂 CSS 來根據狀態提供視覺化反饋</p><p translation-origin=\"off\">Add custom CSS to provide visual feedback on the status</p>\n\n</li>\n<li>\n<p translation-result=\"on\">顯示和隱藏驗證錯誤資訊</p><p translation-origin=\"off\">Show and hide validation-error messages</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">透過新增到模型資料來響應原生 HTML 按鈕的單擊事件。</p><p translation-origin=\"off\">Respond to a native HTML button-click event by adding to the model data.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用表單的 <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> 輸出屬性來處理表單提交。</p><p translation-origin=\"off\">Handle form submission using the <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> output property of the form.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在表單生效之前，先禁用 <strong>Submit</strong> 按鈕</p><p translation-origin=\"off\">Disable the <strong>Submit</strong> button until the form is valid</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在提交完成後，把已完成的表單替換成頁面上不同的內容</p><p translation-origin=\"off\">After submit, swap out the finished form for different content on the page</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<p><a id=\"step1\"></a></p>\n<h2 id=\"build-the-form\" translation-result=\"on\">建立表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-the-form\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Build the form<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#build-the-form\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以根據這裡提供的程式碼從頭建立範例應用，也可以檢視 <live-example></live-example>。</p><p translation-origin=\"off\">You can recreate the sample application from the code provided here, or you can examine or download the <live-example></live-example>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">這裡提供的範例應用會建立一個 <code>Hero</code> 類，用於定義表單中所反映的資料模型。</p><p translation-origin=\"off\">The provided sample application creates the <code>Hero</code> class which defines the data model reflected in the form.</p>\n\n<code-example header=\"src/app/hero.ts\" language=\"typescript\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">該表單的佈局和細節是在 <code>HeroFormComponent</code> 類中定義的。</p><p translation-origin=\"off\">The form layout and details are defined in the <code>HeroFormComponent</code> class.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.ts (v1)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n}\n\n\n</code-example>\n<p translation-result=\"on\">該元件的 <code>selector</code> 值為 “app-hero-form”，意味著你可以用 <code>&lt;app-hero-form&gt;</code> 標籤把這個表單放到父範本中。</p><p translation-origin=\"off\">The component's <code>selector</code> value of \"app-hero-form\" means you can drop this form in a parent template using the <code>&lt;app-hero-form&gt;</code> tag.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">下面的程式碼會建立一個新的 hero 例項，以便讓初始的表單顯示一個範例英雄。</p><p translation-origin=\"off\">The following code creates a new hero instance, so that the initial form can show an example hero.</p>\n\n<code-example language=\"typescript\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"SkyDog\">\nconst myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<p translation-result=\"on\">這個示範使用虛擬資料來表達 <code>model</code> 和 <code>powers</code>。在真正的應用中，你會注入一個數據服務來獲取和儲存實際資料，或者把它們作為輸入屬性和輸出屬性進行公開。</p><p translation-origin=\"off\">This demo uses dummy data for <code>model</code> and <code>powers</code>.\nIn a real app, you would inject a data service to get and save real data, or expose these properties as inputs and outputs.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">該應用啟用了表單功能，並註冊了已建立的表單元件。</p><p translation-origin=\"off\">The application enables the Forms feature and registers the created form component.</p>\n\n<code-example header=\"src/app/app.module.ts\" language=\"typescript\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">該表單顯示在根元件範本定義的應用佈局中。</p><p translation-origin=\"off\">The form is displayed in the application layout defined by the root component's template.</p>\n\n<code-example header=\"src/app/app.component.html\" language=\"html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-example>\n<p translation-result=\"on\">初始範本定義了一個帶有兩個表單組和一個提交按鈕的表單佈局。表單組對應於 Hero 資料模型的兩個屬性：name 和 alterEgo。每個組都有一個標籤和一個使用者輸入框。</p><p translation-origin=\"off\">The initial template defines the layout for a form with two form groups and a submit button.\nThe form groups correspond to two properties of the Hero data model, name and alterEgo.\nEach group has a label and a box for user input.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong>Name</strong> <code>&lt;input&gt;</code> 控制項元素中包含了 HTML5 的 <code>required</code> 屬性</p><p translation-origin=\"off\">The <strong>Name</strong> <code>&lt;input&gt;</code> control element has the HTML5 <code>required</code> attribute</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>Alter Ego</strong> <code>&lt;input&gt;</code> 沒有控制項元素，因為 <code>alterEgo</code> 是可選的</p><p translation-origin=\"off\">The <strong>Alter Ego</strong> <code>&lt;input&gt;</code> control element does not because <code>alterEgo</code> is optional</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><strong>Submit</strong> 按鈕裡面有一些用於樣式化的類別。此時，表單佈局全都是純 HTML5，沒有繫結或指令。</p><p translation-origin=\"off\">The <strong>Submit</strong> button has some classes on it for styling.\nAt this point, the form  layout is all plain HTML5, with no bindings or directives.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">範例表單使用的是 <a href=\"https://getbootstrap.com/css\">Twitter Bootstrap 中的</a>一些樣式類：<code>container</code>，<code>form-group</code>，<code>form-control</code> 和 <code>btn</code>。要使用這些樣式，就要在該應用的樣式表中匯入該函式庫。</p><p translation-origin=\"off\">The sample form uses some style classes from <a href=\"https://getbootstrap.com/css\">Twitter Bootstrap</a>: <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code>.\nTo use these styles, the application's style sheet imports the library.</p>\n\n<code-example header=\"src/styles.css\" path=\"forms/src/styles.1.css\">\n@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">這份表單讓英雄申請人從管理局批准過的固定清單中選出一項超能力。預定義 <code>powers</code> 列表是資料模型的一部分，在 <code>HeroFormComponent</code> 內部維護。Angular 的<a href=\"api/common/NgForOf\" title=\"API 參考\">NgForOf 指令</a>會遍歷這些資料值，以填充這個 <code>&lt;select&gt;</code> 元素。</p><p translation-origin=\"off\">The form makes the hero applicant choose one superpower from a fixed list of agency-approved powers.\nThe predefined list of <code>powers</code> is part of the data model, maintained internally in <code>HeroFormComponent</code>.\nThe Angular <a href=\"api/common/NgForOf\" title=\"API reference\">NgForOf directive</a> iterates over the data values to populate the <code>&lt;select&gt;</code> element.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (powers)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"powers\">\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\" id=\"power\" required&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">如果你現在正在執行該應用，你會看到選擇控制項中的超能力列表。由於尚未將這些 input 元素繫結到資料值或事件，因此它們仍然是空白的，沒有任何行為。</p><p translation-origin=\"off\">If you run the application right now, you see the list of powers in the selection control.\nThe input elements are not yet bound to data values or events, so they are still blank and have no behavior.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Early form with no binding\" src=\"generated/images/guide/forms/hero-form-3.png\" width=\"473\" height=\"294\">\n</div>\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"bind-input-controls-to-data-properties\" translation-result=\"on\">把輸入控制項繫結到資料屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#bind-input-controls-to-data-properties\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Bind input controls to data properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#bind-input-controls-to-data-properties\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下一步是使用雙向資料繫結把輸入控制項繫結到相應的 <code>Hero</code> 屬性，這樣它們就可以透過更新資料模型來響應使用者的輸入，並透過更新顯示來響應資料中的程式化變更。</p><p translation-origin=\"off\">The next step is to bind the input controls to the corresponding <code>Hero</code> properties with two-way data binding, so that they respond to user input by updating the data model, and also respond to programmatic changes in the data by updating the display.</p>\n\n<p translation-result=\"on\">該 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令是由 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 宣告的，它能讓你把範本驅動表單中的控制項繫結到資料模型中的屬性。當你使用雙向資料繫結的語法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 引入該指令時，Angular 就可以追蹤控制項的值和使用者互動，並保持檢視與模型的同步。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive declared in the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> lets you bind controls in your template-driven form to properties in your data model.\nWhen you include the directive using the  syntax for two-way data binding, <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>, Angular can track the value and user interaction of the control and keep the view synced with the model.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">編輯範本 <code>hero-form.component.html</code>。</p><p translation-origin=\"off\">Edit the template file <code>hero-form.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">找到 <strong>Name</strong> 標籤旁邊的 <code>&lt;input&gt;</code> 標記。</p><p translation-origin=\"off\">Find the <code>&lt;input&gt;</code> tag next to the <strong>Name</strong> label.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用雙向資料繫結語法 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code> 新增 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p><p translation-origin=\"off\">Add the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive, using two-way data binding syntax <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"...\"</code>.</p>\n\n</li>\n</ol>\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModelName-1\">\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">這個例子中在每個 input 標記後面都有一個臨時的診斷插值 <code>{{model.name}}</code>，以顯示相應屬性的當前資料值。本提醒是為了讓你在觀察完這個雙向資料繫結後刪除這些診斷行。</p><p translation-origin=\"off\">This example has a temporary diagnostic interpolation after each input tag, <code>{{model.name}}</code>, to show the current data value of the corresponding property.\nThe comment reminds you to remove the diagnostic lines when you have finished observing the two-way data binding at work.</p>\n\n</div>\n<p><a id=\"ngForm\"></a></p>\n<h3 id=\"access-the-overall-form-status\" translation-result=\"on\">存取表單的整體狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#access-the-overall-form-status\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Access the overall form status<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#access-the-overall-form-status\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當你匯入了 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 時，Angular 會自動為範本中的 <code>&lt;form&gt;</code> 標籤建立並附加一個 <a href=\"api/forms/NgForm\" title=\"NgForm 的 API 參考\">NgForm</a> 指令。（因為 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 定義了一個能匹配 <code>&lt;form&gt;</code> 元素的選擇器 <code>form</code>）。</p><p translation-origin=\"off\">When you imported the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> in your component, Angular automatically created and attached an <a href=\"api/forms/NgForm\" title=\"API reference for NgForm\">NgForm</a> directive to the <code>&lt;form&gt;</code> tag in the template (because <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> has the selector <code>form</code> that matches <code>&lt;form&gt;</code> elements).</p>\n\n<p translation-result=\"on\">要存取 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 和表單的整體狀態，<a href=\"guide/template-reference-variables\">就要宣告一個範本參考變數</a>。</p><p translation-origin=\"off\">To get access to the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> and the overall form status, declare a <a href=\"guide/template-reference-variables\">template reference variable</a>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">編輯範本 <code>hero-form.component.html</code>。</p><p translation-origin=\"off\">Edit the template file <code>hero-form.component.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">為 <code>&lt;form&gt;</code> 標籤新增範本參考變數 <code>#heroForm</code>，並把它的值設定如下。</p><p translation-origin=\"off\">Update the <code>&lt;form&gt;</code> tag with a template reference variable, <code>#heroForm</code>, and set its value as follows.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"template-variable\">\n&lt;form #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n<p translation-result=\"on\">範本變數 <code>heroForm</code> 現在是對 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令例項的參考，該指令例項管理整個表單。</p><p translation-origin=\"off\">The <code>heroForm</code> template variable  is now a reference to the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive instance that governs the form as a whole.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行該應用。</p><p translation-origin=\"off\">Run the app.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">開始在 <strong>Name</strong> 輸入框中輸入。</p><p translation-origin=\"off\">Start typing in the <strong>Name</strong> input box.</p>\n\n<p translation-result=\"on\">在新增和刪除字元時，你可以看到它們從資料模型中出現和消失。比如：</p><p translation-origin=\"off\">As you add and delete characters, you can see them appear and disappear from the data model.\nFor example:</p>\n\n<div class=\"lightbox\">\n<img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action.png\" width=\"500\" height=\"74\">\n</div>\n<p translation-result=\"on\">用來顯示插值的診斷行證明了這些值確實從輸入框流向了模型，然後再返回。</p><p translation-origin=\"off\">The diagnostic line that shows interpolated values demonstrates that values are really flowing from the input box to the model and back again.</p>\n\n</li>\n</ol>\n<h3 id=\"naming-control-elements\" translation-result=\"on\">為控制項元素命名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#naming-control-elements\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Naming control elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#naming-control-elements\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在元素上使用 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 時，必須為該元素定義一個 <code>name</code> 屬性。Angular 會用這個指定的名字來把這個元素註冊到父 <code>&lt;form&gt;</code> 元素上的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令中。</p><p translation-origin=\"off\">When you use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> on an element, you must define a <code>name</code> attribute for that element.\nAngular uses the assigned name to register the element with the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive attached to the parent <code>&lt;form&gt;</code> element.</p>\n\n<p translation-result=\"on\">這個例子中為 <code>&lt;input&gt;</code> 元素添加了一個 <code>name</code> 屬性，並把它的值設定為 “name”，用來表示英雄的名字。任何唯一的值都可以用，但最好用描述性的名稱。</p><p translation-origin=\"off\">The example added a <code>name</code> attribute to the <code>&lt;input&gt;</code> element and set it to \"name\",\nwhich makes sense for the hero's name.\nAny unique value will do, but using a descriptive name is helpful.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為<strong>Alter Ego</strong>和<strong>Hero Power</strong>新增類似的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 繫結和 <code>name</code> 屬性。</p><p translation-origin=\"off\">Add similar <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> bindings and <code>name</code> attributes to <strong>Alter Ego</strong> and <strong>Hero Power</strong>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你現在可以移除顯示插值的診斷訊息了。</p><p translation-origin=\"off\">You can now remove the diagnostic messages that show interpolated values.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">為了確認雙向資料繫結適用於整個英雄模型，請向元件的範本頂部新增一個使用 <a href=\"api/common/JsonPipe\"><code>json</code></a> 管道的新文字繫結，這會將資料序列化為字串。</p><p translation-origin=\"off\">To confirm that two-way data binding works for the entire hero model, add a new text binding with the <a href=\"api/common/JsonPipe\"><code>json</code></a> pipe at the top to the component's template, which serializes the data to a string.</p>\n\n<p translation-result=\"on\">表單範本修改完畢後，應如下所示：</p><p translation-origin=\"off\">After these revisions, the form template should look like the following:</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngModel-2\">\n{{ model | json }}\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n  &lt;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\"  id=\"power\"\n          required\n          [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"&gt;\n    &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\">注意，每個 <code>&lt;input&gt;</code> 元素都有一個 <code>id</code> 屬性。<code>&lt;label&gt;</code> 元素的 <code>for</code> 屬性用它來把標籤匹配到輸入控制項。這是一個<a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/label\">標準的 HTML 特性</a>。</p><p translation-origin=\"off\">Notice that each <code>&lt;input&gt;</code> element has an <code>id</code> property.\nThis is used by the <code>&lt;label&gt;</code> element's <code>for</code> attribute to match the label to its input control.\nThis is a <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/label\">standard HTML feature</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">每個 <code>&lt;input&gt;</code> 元素都有一個必需的 <code>name</code> 屬性，Angular 用它來登錄檔單中的控制項。</p><p translation-origin=\"off\">Each <code>&lt;input&gt;</code> element also has the required <code>name</code> property that Angular uses to register the control with the form.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">如果你現在執行該應用並更改英雄模型的每個屬性，該表單可能會顯示如下：</p><p translation-origin=\"off\">If you run the application now and change every hero model property, the form might display like this:</p>\n\n<div class=\"lightbox\">\n<img alt=\"ngModel in action\" src=\"generated/images/guide/forms/ng-model-in-action-2.png\" width=\"515\" height=\"377\">\n</div>\n<p translation-result=\"on\">透過表單頂部的診斷行可以確認所有的更改都已反映在模型中。</p><p translation-origin=\"off\">The diagnostic near the top of the form confirms that all of your changes are reflected in the model.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你已經觀察到了這種效果，可以刪除 <code>{{ model | json }}</code> 的文字綁定了。</p><p translation-origin=\"off\">When you have observed the effects, you can delete the <code>{{ model | json }}</code> text binding.</p>\n\n</li>\n</ol>\n<h2 id=\"track-form-states\" translation-result=\"on\">追蹤表單狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-form-states\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Track form states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-form-states\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">提交表單後，Angular 會將 <code>ng-submitted</code> 類應用於 <code>form</code> 元素。此類可用於在提交後更改表單的樣式。</p><p translation-origin=\"off\">Angular applies the <code>ng-submitted</code> class to <code>form</code> elements after the form has been submitted. This class can be used to change the form's style after it has been submitted.</p>\n\n<h2 id=\"track-control-states\" translation-result=\"on\">追蹤控制項狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-states\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Track control states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-states\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">將 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令新增到某個控制項上時也會將一些描述其狀態的類別名稱新增上去。這些類可用於根據控制項的狀態更改控制項的樣式。</p><p translation-origin=\"off\">Adding the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive to a control adds class names to the control that describe its state.\nThese classes can be used to change a control's style based on its state.</p>\n\n<p translation-result=\"on\">下表描述了 Angular 根據控制項狀態應用的類別名稱。</p><p translation-origin=\"off\">The following table describes the class names that Angular applies based on the control's state.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">狀態</nt-wrapper><nt-wrapper translation-origin=\"off\">States</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">為 true 時的類別名稱</nt-wrapper><nt-wrapper translation-origin=\"off\">Class if true</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">為 false 時的類別名稱</nt-wrapper><nt-wrapper translation-origin=\"off\">Class if false</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">該控制項已被存取過。</nt-wrapper><nt-wrapper translation-origin=\"off\">The control has been visited.</nt-wrapper></td>\n<td align=\"left\"><code>ng-touched</code></td>\n<td align=\"left\"><code>ng-untouched</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">控制項的值已被更改。</nt-wrapper><nt-wrapper translation-origin=\"off\">The control's value has changed.</nt-wrapper></td>\n<td align=\"left\"><code>ng-dirty</code></td>\n<td align=\"left\"><code>ng-pristine</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">控制項的值是有效的。</nt-wrapper><nt-wrapper translation-origin=\"off\">The control's value is valid.</nt-wrapper></td>\n<td align=\"left\"><code>ng-valid</code></td>\n<td align=\"left\"><code>ng-invalid</code></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">Angular 還會在提交時將 <code>ng-submitted</code> 類應用於 <code>form</code> 元素，但不會應用於此 <code>form</code> 元素中的控制項。</p><p translation-origin=\"off\">Angular also applies the <code>ng-submitted</code> class to <code>form</code> elements upon submission,\nbut not to the controls inside the <code>form</code> element.</p>\n\n<p translation-result=\"on\">你可以用這些 CSS 類來根據控制項的狀態定義其樣式。</p><p translation-origin=\"off\">You use these CSS classes to define the styles for your control based on its status.</p>\n\n<h3 id=\"observe-control-states\" translation-result=\"on\">觀察控制項狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#observe-control-states\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Observe control states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#observe-control-states\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要想知道框架是如何新增和移除這些類別的，請開啟瀏覽器的開發者工具，檢查代表英雄名字的 <code>&lt;input&gt;</code>。</p><p translation-origin=\"off\">To see how the classes are added and removed by the framework, open the browser's developer tools and inspect the <code>&lt;input&gt;</code> element that represents the hero name.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用瀏覽器的開發者工具，找到與 “<strong>Name</strong>” 輸入框對應的 <code>&lt;input&gt;</code> 元素。除了 “form-control” 類之外，你還可以看到該元素有多個 CSS 類別。</p><p translation-origin=\"off\">Using your browser's developer tools, find the  <code>&lt;input&gt;</code> element that corresponds to the <strong>Name</strong> input box.\nYou can see that the element has multiple CSS classes in addition to \"form-control\".</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當你第一次啟動它的時候，這些類表明它是一個有效的值，該值在初始化或重置之後還沒有改變過，並且在該控制項自初始化或重置後也沒有被存取過。</p><p translation-origin=\"off\">When you first bring it up, the classes indicate that it has a valid value, that the value has not been changed since initialization or reset, and that the control has not been visited since initialization or reset.</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;input … class=\"form-control ng-untouched ng-pristine ng-valid\" …&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\"><strong>在 Name</strong> <code>&lt;input&gt;</code> 框中執行以下操作，看看會出現哪些類別。</p><p translation-origin=\"off\">Take the following actions on the <strong>Name</strong> <code>&lt;input&gt;</code> box, and observe which classes appear.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">檢視，但不要碰它。這些類表明它沒有被碰過、還是最初的值，並且有效。</p><p translation-origin=\"off\">Look but don't touch.\nThe classes indicate that it is untouched, pristine, and valid.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <strong>Name</strong> 框內單擊，然後單擊它外部。該控制項現在已被存取過，該元素具有 <code>ng-touched</code> 類，取代了 <code>ng-untouched</code> 類別。</p><p translation-origin=\"off\">Click inside the name box, then click outside it.\nThe control has now been visited, and the element has the <code>ng-touched</code> class instead of the <code>ng-untouched</code> class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在名字的末尾新增斜槓。現在它被碰過，而且是髒的（變化過）。</p><p translation-origin=\"off\">Add slashes to the end of the name.\nIt is now touched and dirty.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">刪掉這個名字。這會使該值無效，所以 <code>ng-invalid</code> 類會取代 <code>ng-valid</code> 類別。</p><p translation-origin=\"off\">Erase the name.\nThis makes the value invalid, so the <code>ng-invalid</code> class replaces the <code>ng-valid</code> class.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"create-visual-feedback-for-states\" translation-result=\"on\">為狀態建立視覺反饋<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-visual-feedback-for-states\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Create visual feedback for states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-visual-feedback-for-states\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">注意 <code>ng-valid</code> / <code>ng-invalid</code> 這兩個類，因為你想在值無效時發出強烈的視覺訊號。你還要標記必填欄位。</p><p translation-origin=\"off\">The <code>ng-valid</code>/<code>ng-invalid</code> pair is particularly interesting, because you want to send a\nstrong visual signal when the values are invalid.\nYou also want to mark required fields.</p>\n\n<p translation-result=\"on\">你可以在輸入框的左側用彩條標記必填欄位和無效資料：</p><p translation-origin=\"off\">You can mark required fields and invalid data at the same time with a colored bar\non the left of the input box:</p>\n\n<div class=\"lightbox\">\n<img alt=\"Invalid Form\" src=\"generated/images/guide/forms/validity-required-indicator.png\" width=\"600\" height=\"171\">\n</div>\n<p translation-result=\"on\">要想用這種方式修改外觀，請執行以下步驟。</p><p translation-origin=\"off\">To change the appearance in this way, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為 <code>ng-*</code> CSS 類新增一些定義。</p><p translation-origin=\"off\">Add definitions for the <code>ng-*</code> CSS classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把這些類定義新增到一個新的 <code>forms.css</code> 檔案中。</p><p translation-origin=\"off\">Add these class definitions to a new <code>forms.css</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把這個新檔案新增到專案中，作為 <code>index.html</code> 的兄弟：</p><p translation-origin=\"off\">Add the new file to the project as a sibling to <code>index.html</code>:</p>\n\n<code-example header=\"src/assets/forms.css\" language=\"css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>index.html</code> 檔案中，更新 <code>&lt;head&gt;</code> 標籤以包含新的樣式表。</p><p translation-origin=\"off\">In the <code>index.html</code> file, update the <code>&lt;head&gt;</code> tag to include the new style sheet.</p>\n\n<code-example header=\"src/index.html (styles)\" path=\"forms/src/index.html\" region=\"styles\">\n&lt;link rel=\"stylesheet\" href=\"assets/forms.css\"&gt;\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"show-and-hide-validation-error-messages\" translation-result=\"on\">顯示和隱藏驗證錯誤資訊<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Show and hide validation error messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><strong>Name</strong> 輸入框是必填的，清除它就會把彩條變成紅色。這表明有些東西是錯的，但是使用者並不知道要怎麼做或該做什麼。你可以透過檢視和響應控制項的狀態來提供有用的資訊。</p><p translation-origin=\"off\">The <strong>Name</strong> input box is required and clearing it turns the bar red.\nThat indicates that something is wrong, but the user doesn't know what is wrong or what to do about it.\nYou can provide a helpful message by checking for and responding to the control's state.</p>\n\n<p translation-result=\"on\">當用戶刪除該名字時，該表單應如下所示：</p><p translation-origin=\"off\">When the user deletes the name, the form should look like this:</p>\n\n<div class=\"lightbox\">\n<img alt=\"Name required\" src=\"generated/images/guide/forms/name-required-error.png\" width=\"400\" height=\"108\">\n</div>\n<p translation-result=\"on\"><strong>Hero Power</strong> 選擇框也是必填的，但它不需要這樣的錯誤處理，因為選擇框已經把選擇限制在有效值範圍內。</p><p translation-origin=\"off\">The <strong>Hero Power</strong> select box is also required, but it doesn't need this kind of error handling because the selection box already constrains the selection to valid values.</p>\n\n<p translation-result=\"on\">要在適當的時候定義和顯示錯誤資訊，請執行以下步驟。</p><p translation-origin=\"off\">To define and show an error message when appropriate, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用範本參考變數擴充 <code>&lt;input&gt;</code> 標籤，你可以用來從範本中存取輸入框的 Angular 控制項。在這個例子中，該變數是 <code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>。</p><p translation-origin=\"off\">Extend the <code>&lt;input&gt;</code> tag with a template reference variable that you can use to access the input box's Angular control from within the template.\nIn the example, the variable is <code>#name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">範本參考變數（<code>#name</code>）設定為 <code>\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>，因為 \"ngModel\" 是 <a href=\"api/core/Directive#exportAs\"><code>NgModel.exportAs</code></a> 屬性的值。這個屬性告訴 Angular 如何把參考變數和指令連結起來。</p><p translation-origin=\"off\">The template reference variable (<code>#name</code>) is set to <code>\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code> because that is the value of the <a href=\"api/core/Directive#exportAs\"><code>NgModel.exportAs</code></a> property.\nThis property tells Angular how to link a reference variable to a directive.</p>\n\n</div>\n</li>\n<li>\n<p translation-result=\"on\">新增一個包含合適錯誤資訊 <code>&lt;div&gt;</code>。</p><p translation-origin=\"off\">Add a <code>&lt;div&gt;</code> that contains a suitable error message.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過把 <code>name</code> 控制項的屬性繫結到 <code>&lt;div&gt;</code> 元素的 <code>hidden</code> 屬性來顯示或隱藏錯誤資訊。</p><p translation-origin=\"off\">Show or hide the error message by binding properties of the <code>name</code> control to the message <code>&lt;div&gt;</code> element's <code>hidden</code> property.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (hidden-error-msg)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"hidden-error-msg\">\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">為 <code>name</code> 輸入框新增一個有條件的錯誤資訊，如下例所示。</p><p translation-origin=\"off\">Add a conditional error message to the <code>name</code> input box, as in the following example.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"name-with-error-msg\">\n&lt;label for=\"name\"&gt;Name&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n       #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n&lt;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\"&gt;\n  Name is required\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">關於 \"pristine\"（原始）狀態的說明</header><header ng-should-translate=\"\" translation-origin=\"off\">Illustrating the \"pristine\" state</header>\n\n<p translation-result=\"on\">在這個例子中，當控制項是有效的（valid）或者是<em>原始的</em>（pristine）時，你會隱藏這些訊息。原始表示該使用者在此表單中顯示的值尚未更改過。如果你忽略了 <code>pristine</code> 狀態，那麼只有當值有效時才會隱藏這些訊息。如果你把一個新的（空白）英雄或一個無效的英雄傳給這個元件，你會立刻看到錯誤資訊，而這時候你還沒有做過任何事情。</p><p translation-origin=\"off\">In this example, you hide the message when the control is either valid or <em>pristine</em>.\nPristine means the user hasn't changed the value since it was displayed in this form.\nIf you ignore the <code>pristine</code> state, you would hide the message only when the value is valid.\nIf you arrive in this component with a new, blank hero or an invalid hero, you'll see the error message immediately, before you've done anything.</p>\n\n<p translation-result=\"on\">你可能希望只有在使用者做出無效更改時，才顯示該訊息。因此當 <code>pristine</code> 狀態時，隱藏這條訊息就可以滿足這個目標。當你在下一步中為表單新增一個新的英雄時，就會看到這個選擇有多重要。</p><p translation-origin=\"off\">You might want the message to display only when the user makes an invalid change.\nHiding the message while the control is in the <code>pristine</code> state achieves that goal.\nYou'll see the significance of this choice when you add a new hero to the form in the next step.</p>\n\n</div>\n<h2 id=\"add-a-new-hero\" translation-result=\"on\">新增一個新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本練習透過新增模型資料，展示瞭如何響應原生 HTML 按鈕單擊事件。要讓表單使用者新增一個新的英雄，就要新增一個能響應 click 事件的 <strong>New Hero</strong> 按鈕。</p><p translation-origin=\"off\">This exercise shows how you can respond to a native HTML button-click event by adding to the model data.\nTo let form users add a new hero, you will add a <strong>New Hero</strong> button that responds to a click event.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在範本中，把 “New Hero” 這個 <code>&lt;button&gt;</code> 元素放在表單底部。</p><p translation-origin=\"off\">In the template, place a \"New Hero\" <code>&lt;button&gt;</code> element at the bottom of the form.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在元件檔案中，把建立英雄的方法新增到英雄資料模型中。</p><p translation-origin=\"off\">In the component file, add the hero-creation method to the hero data model.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.ts (New Hero method)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"new-hero\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把按鈕的 click 事件繫結到一個建立英雄的方法 <code>newHero()</code> 上。</p><p translation-origin=\"off\">Bind the button's click event to a hero-creation method, <code>newHero()</code>.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (New Hero button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-no-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">再次執行該應用，單擊 <strong>New Hero</strong> 按鈕。</p><p translation-origin=\"off\">Run the application again and click the <strong>New Hero</strong> button.</p>\n\n<p translation-result=\"on\">表單會清空，輸入框左側的<em>必填</em>欄會顯示紅色，說明 <code>name</code> 和 <code>power</code> 屬性無效。請注意，錯誤訊息是隱藏的。這是因為表單處於原始狀態。你還沒有改過任何東西。</p><p translation-origin=\"off\">The form clears, and the <em>required</em> bars to the left of the input box are red, indicating invalid <code>name</code> and <code>power</code> properties.\nNotice that the error messages are hidden.\nThis is because the form is pristine; you haven't changed anything yet.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">輸入一個名字，然後再次點選 <strong>New Hero</strong>。</p><p translation-origin=\"off\">Enter a name and click <strong>New Hero</strong> again.</p>\n\n<p translation-result=\"on\">現在，該應用會顯示一條錯誤資訊 <code>Name is required</code>，因為該輸入框不再是原始狀態。表單會記住你在單擊 <strong>New Hero</strong> 之前輸入過一個名字。</p><p translation-origin=\"off\">Now the application displays a <code>Name is required</code> error message, because the input box is no longer pristine.\nThe form remembers that you entered a name before clicking <strong>New Hero</strong>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要恢復表單控制項的原始狀態，可以在呼叫 <code>newHero()</code> 方法之後強制呼叫表單的 <code>reset()</code> 方法以清除所有標誌。</p><p translation-origin=\"off\">To restore the pristine state of the form controls, clear all of the flags imperatively by calling the form's <code>reset()</code> method after calling the <code>newHero()</code> method.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (Reset the form)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"new-hero-button-form-reset\">\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">現在單擊 <strong>New Hero</strong> 會重置表單及其控制項標誌。</p><p translation-origin=\"off\">Now clicking <strong>New Hero</strong> resets both the form and its control flags.</p>\n\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">關於使用事件繫結監聽 DOM 事件和更新相應元件屬性的更多資訊，參閱<a href=\"guide/user-input\">“使用者輸入”指南。</a>。</p><p translation-origin=\"off\">See the <a href=\"guide/user-input\">User Input</a> guide for more information about listening for DOM events with an event binding and updating a corresponding component property.</p>\n\n</div>\n<h2 id=\"submit-the-form-with-ngsubmit\" translation-result=\"on\">使用 <code>ngSubmit</code> 提交表單<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Submit the form with <code>ngSubmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用者應該可以在填寫之後提交這個表單。表單底部的 <strong>Submit</strong> 按鈕本身沒有任何作用，但由於它的型別（<code>type=\"submit\"</code>），它會觸發一個表單提交事件。要響應此事件，請執行以下步驟。</p><p translation-origin=\"off\">The user should be able to submit this form after filling it in.\nThe <strong>Submit</strong> button at the bottom of the form does nothing on its own, but it does trigger a form-submit event because of its type (<code>type=\"submit\"</code>).\nTo respond to this event, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">把表單的 <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> 事件屬性繫結到一個 hero-form 元件的 <code>onSubmit()</code> 方法中。</p><p translation-origin=\"off\">Bind the form's <a href=\"api/forms/NgForm#properties\"><code>ngSubmit</code></a> event property to the hero-form component's <code>onSubmit()</code> method.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (ngSubmit)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"ngSubmit\">\n&lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">使用範本參考變數 <code>#heroForm</code> 存取包含 <strong>Submit</strong> 按鈕的表單，並建立一個事件繫結。你可以把表示它整體有效性的 form 屬性繫結到 <strong>Submit</strong> 按鈕的 <code>disabled</code> 屬性上。</p><p translation-origin=\"off\">Use the template reference variable, <code>#heroForm</code> to access the form that contains the <strong>Submit</strong> button and create an event binding.\nYou will bind the form property that indicates its overall validity to the <strong>Submit</strong> button's <code>disabled</code> property.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (submit-button)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submit-button\">\n&lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">執行該應用。注意，該按鈕已啟用 - 雖然它還沒有做任何有用的事情。</p><p translation-origin=\"off\">Run the application.\nNotice that the button is enabled —although it doesn't do anything useful yet.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">刪除<strong>名稱</strong>值。這違反了“必需”規則，因此會顯示錯誤訊息，並注意它還會禁用“<strong>提交”</strong>按鈕。</p><p translation-origin=\"off\">Delete the <strong>Name</strong> value.\nThis violates the \"required\" rule, so it displays the error message —and notice that it also disables the <strong>Submit</strong> button.</p>\n\n<p translation-result=\"on\">你不必把按鈕的啟用狀態明確地關聯表單的有效性上。當 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 在增強的表單元素上定義範本參考變數時，會自動執行此操作，然後在按鈕控制項中參考該變數。</p><p translation-origin=\"off\">You didn't have to explicitly wire the button's enabled state to the form's validity.\nThe <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> did this automatically when you defined a template reference variable on the enhanced form element, then referred to that variable in the button control.</p>\n\n</li>\n</ol>\n<h3 id=\"respond-to-form-submission\" translation-result=\"on\">響應表單提交<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#respond-to-form-submission\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Respond to form submission<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#respond-to-form-submission\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要展示對表單提交的響應，你可以隱藏資料輸入區域並就地顯示其它內容。</p><p translation-origin=\"off\">To show a response to form submission, you can hide the data entry area and display something else in its place.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">把整個表單包裹進一個 <code>&lt;div&gt;</code> 中並把它的 <code>hidden</code> 屬性繫結到 <code>HeroFormComponent.submitted</code> 屬性上。</p><p translation-origin=\"off\">Wrap the entire form in a <code>&lt;div&gt;</code> and bind its <code>hidden</code> property to the <code>HeroFormComponent.submitted</code> property.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"edit-div\">\n&lt;div [hidden]=\"submitted\"&gt;\n  &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n\n     &lt;!-- ... all of the form ... --&gt;\n\n  &lt;/form&gt;\n&lt;/div&gt;\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\">主表單從一開始就是可見的，因為在提交之前，它的 <code>submitted</code> 屬性都是 false，正如 <code>HeroFormComponent</code> 中的這個片段所顯示的：</p><p translation-origin=\"off\">The main form is visible from the start because the <code>submitted</code> property is false until you submit the form, as this fragment from the <code>HeroFormComponent</code> shows:</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.ts (submitted)\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">點選 <strong>Submit</strong> 按鈕後，<code>submitted</code> 標誌就變為 <code>true</code>，表單就會消失。</p><p translation-origin=\"off\">When you click the <strong>Submit</strong> button, the <code>submitted</code> flag becomes true and the form disappears.</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">要在表單處於已提交狀態時顯示其它內容，請在新的 <code>&lt;div&gt;</code> 包裝器下新增以下 HTML。</p><p translation-origin=\"off\">To show something else while the form is in the submitted state, add the following HTML below the new <code>&lt;div&gt;</code> wrapper.</p>\n\n<code-example header=\"src/app/hero-form/hero-form.component.html (excerpt)\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"submitted\">\n&lt;div [hidden]=\"!submitted\"&gt;\n  &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n    &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">這個 <code>&lt;div&gt;</code>（用於顯示帶插值繫結的唯讀英雄）只在元件處於已提交狀態時才會出現。</p><p translation-origin=\"off\">This <code>&lt;div&gt;</code>, which shows a read-only hero with interpolation bindings, appears only while the component is in the submitted state.</p>\n\n<p translation-result=\"on\">另外還顯示了一個 <em>Edit</em> 按鈕，它的 click 事件繫結到了一個清除 <code>submitted</code> 標誌的表示式。</p><p translation-origin=\"off\">The alternative display includes an <em>Edit</em> button whose click event is bound to an expression that clears the <code>submitted</code> flag.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">單擊 <em>Edit</em> 按鈕，將顯示切換回可編輯的表單。</p><p translation-origin=\"off\">Click the <em>Edit</em> button to switch the display back to the editable form.</p>\n\n</li>\n</ol>\n<h2 id=\"summary\" translation-result=\"on\">總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本頁討論的 Angular 表單利用了下列框架特性來支援資料修改，驗證等工作。</p><p translation-origin=\"off\">The Angular form discussed in this page takes advantage of the following\nframework features to provide support for data modification, validation, and more.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">一個 Angular HTML 表單範本</p><p translation-origin=\"off\">An Angular HTML form template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">帶 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器的表單元件類</p><p translation-origin=\"off\">A form component class with a <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator</p>\n\n</li>\n<li>\n<p translation-result=\"on\">繫結到 <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> 事件屬性來處理表單提交</p><p translation-origin=\"off\">Handling form submission by binding to the <code><a href=\"api/forms/NgForm#ngSubmit\" class=\"code-anchor\">NgForm.ngSubmit</a></code> event property</p>\n\n</li>\n<li>\n<p translation-result=\"on\">範本參考變數，比如 <code>#heroForm</code> 和 <code>#name</code></p><p translation-origin=\"off\">Template-reference variables such as <code>#heroForm</code> and <code>#name</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">雙向資料繫結的 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 語法</p><p translation-origin=\"off\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax for two-way data binding</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>name</code> 屬性的用途是驗證和表單元素的變更追蹤</p><p translation-origin=\"off\">The use of <code>name</code> attributes for validation and form-element change tracking</p>\n\n</li>\n<li>\n<p translation-result=\"on\">輸入控制項上的參考變數的 <code>valid</code> 屬性會表明控制項是有效的還是應該顯示錯誤訊息</p><p translation-origin=\"off\">The reference variable's <code>valid</code> property on input controls indicates whether a control is valid or should show error messages</p>\n\n</li>\n<li>\n<p translation-result=\"on\">用 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的有效性來控制 <strong>Submit</strong> 按鈕的啟用狀態</p><p translation-origin=\"off\">Controlling the <strong>Submit</strong> button's enabled state by binding to <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> validity</p>\n\n</li>\n<li>\n<p translation-result=\"on\">自訂 CSS 類，向用戶提供有關無效控制項的視覺反饋</p><p translation-origin=\"off\">Custom CSS classes that provide visual feedback to users about controls that are not valid</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">這裡是該應用最終版本的程式碼：</p><p translation-origin=\"off\">Here's the code for the final version of the application:</p>\n\n<code-tabs>\n    <code-pane header=\"hero-form/hero-form.component.ts\" path=\"forms/src/app/hero-form/hero-form.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-form',\n  templateUrl: './hero-form.component.html',\n  styleUrls: ['./hero-form.component.css']\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr. IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-form/hero-form.component.html\" path=\"forms/src/app/hero-form/hero-form.component.html\" region=\"final\">\n&lt;div class=\"container\"&gt;\n  &lt;div [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero <a href=\"api/forms/Form\" class=\"code-anchor\">Form</a>&lt;/h1&gt;\n    &lt;form (ngSubmit)=\"onSubmit()\" #heroForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.name\" name=\"name\"\n               #name=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n        &lt;select class=\"form-control\" id=\"power\"\n                required\n                [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"model.power\" name=\"power\"\n                #power=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"&gt;\n          &lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let pow of powers\" [value]=\"pow\"&gt;{{pow}}&lt;/option&gt;\n        &lt;/select&gt;\n        &lt;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\"&gt;\n          Power is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\"&gt;New Hero&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n  &lt;div [hidden]=\"!submitted\"&gt;\n    &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.name }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n      &lt;div class=\"col-xs-9\"&gt;{{ model.power }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroFormComponent } from './hero-form/hero-form.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"app.component.html\" path=\"forms/src/app/app.component.html\">\n&lt;app-hero-form&gt;&lt;/app-hero-form&gt;\n\n\n</code-pane>\n    <code-pane header=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n    <code-pane header=\"main.ts\" path=\"forms/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n    <code-pane header=\"forms.css\" path=\"forms/src/assets/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n</code-tabs>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/form-validation\n - guide/forms-overview\n - guide/glossary\n - guide/npm-packages\n - guide/reactive-forms\n - guide/typed-forms\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/JsonPipe\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/Component\n - api/core/Directive#exportAs\n - api/core/NgModule\n - api/forms/Form\n - api/forms/FormGroup\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgForm#ngSubmit\n - api/forms/NgForm#properties\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/architecture\n - guide/architecture-components#data-binding\n - guide/forms#access-the-overall-form-status\n - guide/forms#add-a-new-hero\n - guide/forms#bind-input-controls-to-data-properties\n - guide/forms#build-a-template-driven-form\n - guide/forms#build-the-form\n - guide/forms#building-a-template-driven-form\n - guide/forms#create-visual-feedback-for-states\n - guide/forms#naming-control-elements\n - guide/forms#objectives\n - guide/forms#observe-control-states\n - guide/forms#prerequisites\n - guide/forms#respond-to-form-submission\n - guide/forms#show-and-hide-validation-error-messages\n - guide/forms#step-overview\n - guide/forms#submit-the-form-with-ngsubmit\n - guide/forms#summary\n - guide/forms#the-sample-application\n - guide/forms#track-control-states\n - guide/forms#track-form-states\n - guide/forms#為控制項元素命名\n - guide/forms#為狀態建立視覺反饋\n - guide/forms#使用-ngsubmit-提交表單\n - guide/forms#前提條件\n - guide/forms#響應表單提交\n - guide/forms#建立表單\n - guide/forms#總結\n - guide/forms#把輸入控制項繫結到資料屬性\n - guide/forms#顯示和隱藏驗證錯誤資訊\n - guide/forms#建構一個範本驅動表單\n - guide/forms#建構範本驅動表單\n - guide/forms#步驟概述\n - guide/forms#新增一個新英雄\n - guide/forms#目標\n - guide/forms#範例應用\n - guide/forms#觀察控制項狀態\n - guide/forms#存取表單的整體狀態\n - guide/forms#追蹤控制項狀態\n - guide/forms#追蹤表單狀態\n - guide/forms-overview\n - guide/glossary#template\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/user-input\n - tutorial\n - tutorial/tour-of-heroes\n - https://developer.mozilla.org/docs/Web/HTML/Element/label\n - https://getbootstrap.com/css\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/forms.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/\n-->"}