{"id":"guide/template-statements","title":"Template statements","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-statements.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"template-statements\" translation-result=\"on\">範本陳述式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#template-statements\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Template statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#template-statements\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">範本陳述式是可在 HTML 中用於響應使用者事件的方法或屬性。使用範本陳述式，你的應用可以透過諸如顯示動態內容或提交表單之類別的動作吸參考戶。</p><p translation-origin=\"off\">Template statements are methods or properties that you can use in your HTML to respond to user events.\nWith template statements, your application can engage users through actions such as displaying dynamic content or submitting forms.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">關於本指南中的語法和程式碼段的資訊，請參閱<live-example name=\"template-syntax\">Template syntax</live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"template-syntax\">Template syntax</live-example> for the syntax and code snippets in this guide.</p>\n\n</div>\n<p translation-result=\"on\">在以下範例中，範本陳述式 <code>deleteHero()</code> 出現在 <code>=</code> 號右側的引號中，<code>(event)=\"statement\"</code>。</p><p translation-origin=\"off\">In the following example, the template statement <code>deleteHero()</code> appears in quotes to the right of the equals sign <code>=</code> character as in <code>(event)=\"statement\"</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\">\n&lt;button type=\"button\" (click)=\"deleteHero()\"&gt;Delete hero&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">當用戶單擊 <strong>Delete hero</strong> 按鈕時，Angular 就會呼叫元件類中 <code>deleteHero()</code> 方法。</p><p translation-origin=\"off\">When the user clicks the <strong>Delete hero</strong> button, Angular calls the <code>deleteHero()</code> method in the component class.</p>\n\n<p translation-result=\"on\">可以將範本陳述式與元素、元件或指令一起使用以響應事件。</p><p translation-origin=\"off\">Use template statements with elements, components, or directives in response to events.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">響應事件是 Angular <a href=\"guide/glossary#unidirectional-data-flow\">單向資料流</a>的一個方面。你可以在單個事件迴圈中更改應用程式中的任何內容。</p><p translation-origin=\"off\">Responding to events is an aspect of Angular's <a href=\"guide/glossary#unidirectional-data-flow\">unidirectional data flow</a>.\nYou can change anything in your application during a single event loop.</p>\n\n</div>\n<h2 id=\"syntax\" translation-result=\"on\">語法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">與<a href=\"guide/interpolation\">範本表示式</a>一樣，範本陳述式使用類似於 JavaScript 的語言。但是，範本陳述式的解析器與範本表示式的解析器有所不同。此外，範本陳述式解析器特別支援基本賦值 <code>=</code> 和帶有分號 <code>;</code> 的串聯表示式。</p><p translation-origin=\"off\">Like <a href=\"guide/interpolation\">template expressions</a>, template statements use a language that looks like JavaScript.\nHowever, the parser for template statements differs from the parser for template expressions.\nIn addition, the template statements parser specifically supports both basic assignment (<code>=</code>) and chaining expressions with semicolons (<code>;</code>).</p>\n\n<p translation-result=\"on\">不允許使用以下 JavaScript 和範本表示式語法：</p><p translation-origin=\"off\">The following JavaScript and template expression syntax is not allowed:</p>\n\n<ul>\n<li>\n<p><code>new</code></p>\n</li>\n<li>\n<p translation-result=\"on\">遞增和遞減運算子 <code>++</code> 和 <code>--</code></p><p translation-origin=\"off\">Increment and decrement operators, <code>++</code> and <code>--</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">賦值運算子，比如 <code>+=</code> 和 <code>-=</code></p><p translation-origin=\"off\">Operator assignment, such as <code>+=</code> and <code>-=</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">按位運算子，比如 <code>|</code> 和 <code>&amp;</code></p><p translation-origin=\"off\">The bitwise operators, such as <code>|</code> and <code>&amp;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/pipes\">管道運運算元</a></p><p translation-origin=\"off\">The <a href=\"guide/pipes\">pipe operator</a></p>\n\n</li>\n</ul>\n<h2 id=\"statement-context\" translation-result=\"on\">陳述式的上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-context\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Statement context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-context\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">陳述式具有上下文 - 也就是陳述式所屬應用中的特定部分。</p><p translation-origin=\"off\">Statements have a context —a particular part of the application to which the statement belongs.</p>\n\n<p translation-result=\"on\">陳述式只能參考陳述式上下文中的內容，通常是元件例項。比如，<code>(click)=\"deleteHero()\"</code> 中的 <code>deleteHero()</code> 就是下面程式碼段中的元件方法之一。</p><p translation-origin=\"off\">Statements can refer only to what's in the statement context, which is typically the component instance.\nFor example, <code>deleteHero()</code> of <code>(click)=\"deleteHero()\"</code> is a method of the component in the following snippet.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\">\n&lt;button type=\"button\" (click)=\"deleteHero()\"&gt;Delete hero&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">陳述式上下文還可以參考範本自身的上下文屬性。在下面的範例中，元件的事件處理方法 <code>onSave()</code> 將範本自己的 <code>$event</code> 物件用作引數。在接下來的兩行中，<code>deleteHero()</code> 方法接收了<a href=\"guide/structural-directives#shorthand\">範本輸入變數</a> <code>hero</code> 作為引數，而 <code>onSubmit()</code> 接收了<a href=\"guide/template-reference-variables\">範本參考變數</a> <code>#heroForm</code> 作為引數。</p><p translation-origin=\"off\">The statement context may also refer to properties of the template's own context.\nIn the following example, the component's event handling method, <code>onSave()</code> takes the template's own <code>$event</code> object as an argument.\nOn the next two lines, the <code>deleteHero()</code> method takes a <a href=\"guide/structural-directives#shorthand\">template input variable</a>, <code>hero</code>, and <code>onSubmit()</code> takes a <a href=\"guide/template-reference-variables\">template reference variable</a>, <code>#heroForm</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\">\n&lt;button type=\"button\" (click)=\"onSave($event)\"&gt;Save&lt;/button&gt;\n&lt;button type=\"button\" *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\"&gt;{{hero.name}}&lt;/button&gt;\n&lt;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"&gt; ... &lt;/form&gt;\n\n</code-example>\n<p translation-result=\"on\">在這個例子中，<code>$event</code> 物件、<code>hero</code> 和 <code>#heroForm</code> 的上下文都是其範本。</p><p translation-origin=\"off\">In this example, the context of the <code>$event</code> object, <code>hero</code>, and <code>#heroForm</code> is the template.</p>\n\n<p translation-result=\"on\">範本上下文中的名稱優先於元件上下文中的名稱。前面 <code>deleteHero(hero)</code> 中的 <code>hero</code> 是範本輸入變數，而不是元件的 <code>hero</code> 屬性。</p><p translation-origin=\"off\">Template context names take precedence over component context names.\nIn the preceding <code>deleteHero(hero)</code>, the <code>hero</code> is the template input variable, not the component's <code>hero</code> property.</p>\n\n<h2 id=\"statement-best-practices\" translation-result=\"on\">範本陳述式最佳實踐<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-best-practices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Statement best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">實踐</nt-wrapper><nt-wrapper translation-origin=\"off\">Practices</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">簡明</nt-wrapper><nt-wrapper translation-origin=\"off\">Conciseness</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用方法呼叫或基本屬性賦值，來讓範本陳述式保持最小化。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use method calls or basic property assignments to keep template statements minimal.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在上下文中工作</nt-wrapper><nt-wrapper translation-origin=\"off\">Work within the context</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">範本陳述式的上下文可以是元件類例項或範本。因此，範本陳述式無法參考全域名稱空間中的任何內容，比如 <code>window</code> 或 <code>document</code>。比如，範本陳述式不能呼叫 <code>console.log()</code> 或 <code>Math.max()</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">The context of a template statement can be the component class instance or the template. Because of this, template statements cannot refer to anything in the global namespace such as <code>window</code> or <code>document</code>. For example, template statements can't call <code>console.log()</code> or <code>Math.max()</code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/binding-syntax\n - guide/event-binding\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - guide/glossary#unidirectional-data-flow\n - guide/interpolation\n - guide/pipes\n - guide/structural-directives#shorthand\n - guide/template-reference-variables\n - guide/template-statements#statement-best-practices\n - guide/template-statements#statement-context\n - guide/template-statements#syntax\n - guide/template-statements#template-statements\n - guide/template-statements#範本陳述式\n - guide/template-statements#範本陳述式最佳實踐\n - guide/template-statements#陳述式的上下文\n - guide/template-statements#語法\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-statements.md?message=docs%3A%20請簡述你的修改...\n-->"}