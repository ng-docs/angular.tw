{"id":"guide/built-in-directives","title":"Built-in directives","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/built-in-directives.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"built-in-directives\" translation-result=\"on\">內建指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">指令是為 Angular 應用程式中的元素新增額外行為的類別。使用 Angular 的內建指令，你可以管理表單、列表、樣式以及要讓使用者看到的任何內容。</p><p translation-origin=\"off\">Directives are classes that add additional behavior to elements\nin your Angular applications.\nUse Angular's built-in directives to manage forms, lists, styles, and what users see.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">包含本指南中程式碼片段的可工作範例，參閱<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<p translation-result=\"on\">Angular 指令的不同型別如下：</p><p translation-origin=\"off\">The different types of Angular directives are as follows:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令型別</nt-wrapper><nt-wrapper translation-origin=\"off\">Directive Types</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/component-overview\">元件</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/component-overview\">Components</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">帶有範本的指令。這種指令型別是最常見的指令型別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Used with a template. This type of directive is the most common directive type.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">屬性型指令</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/built-in-directives#built-in-attribute-directives\">Attribute directives</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">更改元素、元件或其他指令的外觀或行為的指令。</nt-wrapper><nt-wrapper translation-origin=\"off\">Change the appearance or behavior of an element, component, or another directive.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/built-in-directives#built-in-structural-directives\">結構型指令</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/built-in-directives#built-in-structural-directives\">Structural directives</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">透過新增和刪除 DOM 元素來更改 DOM 佈局。</nt-wrapper><nt-wrapper translation-origin=\"off\">Change the DOM layout by adding and removing DOM elements.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">本指南涵蓋了內建的<a href=\"guide/built-in-directives#built-in-attribute-directives\">屬性型指令</a>和<a href=\"guide/built-in-directives#built-in-structural-directives\">結構型指令</a>。</p><p translation-origin=\"off\">This guide covers built-in <a href=\"guide/built-in-directives#built-in-attribute-directives\">attribute directives</a> and <a href=\"guide/built-in-directives#built-in-structural-directives\">structural directives</a>.</p>\n\n<p><a id=\"attribute-directives\"></a></p>\n<h2 id=\"built-in-attribute-directives\" translation-result=\"on\">內建屬性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">屬性型指令會監聽並修改其它 HTML 元素和元件的行為、Attribute 和 Property。</p><p translation-origin=\"off\">Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components.</p>\n\n<p translation-result=\"on\">許多 NgModule（比如 <a href=\"guide/router\" title=\"路由和導航\"><code>RouterModule</code></a> 和 <a href=\"guide/forms\" title=\"表單\"><code>FormsModule</code></a> 都定義了自己的屬性型指令。最常見的屬性型指令如下：</p><p translation-origin=\"off\">Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a> and the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">通用指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Common directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">新增和刪除一組 CSS 類別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Adds and removes a set of CSS classes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngstyle\"><code>NgStyle</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">新增和刪除一組 HTML 樣式。</nt-wrapper><nt-wrapper translation-origin=\"off\">Adds and removes a set of HTML styles.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將雙向資料繫結新增到 HTML 表單元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Adds two-way data binding to an HTML form element.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">內建指令只會使用公開 API。它們不會存取任何無法被其它指令存取的私有 API。</p><p translation-origin=\"off\">Built-in directives use only public APIs.\nThey do not have special access to any private APIs that other directives can't access.</p>\n\n</div>\n<p><a id=\"ngClass\"></a></p>\n<h2 id=\"adding-and-removing-classes-with-ngclass\" translation-result=\"on\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 新增和刪除類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngclass-新增和刪除類\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding and removing classes with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-and-removing-classes-with-ngclass\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">用 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 同時新增或刪除多個 CSS 類別。</p><p translation-origin=\"off\">Add or remove multiple CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要新增或刪除<em>單個</em>類，請使用<a href=\"guide/class-binding\">類繫結</a>而不是 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>。</p><p translation-origin=\"off\">To add or remove a <em>single</em> class, use <a href=\"guide/class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n\n</div>\n<h3 id=\"using-ngclass-with-an-expression\" translation-result=\"on\">將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與表示式一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#將-ngclass-與表示式一起使用\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with an expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-an-expression\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在要設定樣式的元素上，新增 <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> 並將其設定為等於某個表示式。在這裡，是在 <code>app.component.ts</code> 中將 <code>isSpecial</code> 設定為布林值 <code>true</code>。因為 <code>isSpecial</code> 為 true，所以 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 就會把 <code>special</code> 類應用於此 <code>&lt;div&gt;</code> 上。</p><p translation-origin=\"off\">On the element you'd like to style, add <code>[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]</code> and set it equal to an expression.\nIn this case, <code>isSpecial</code> is a boolean set to <code>true</code> in <code>app.component.ts</code>.\nBecause <code>isSpecial</code> is true, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> applies the class of <code>special</code> to the <code>&lt;div&gt;</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\">\n&lt;!-- toggle the \"special\" class on/off with a property --&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\"&gt;This div is special&lt;/div&gt;\n\n</code-example>\n<h3 id=\"using-ngclass-with-a-method\" translation-result=\"on\">將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與方法一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#將-ngclass-與方法一起使用\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with a method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#using-ngclass-with-a-method\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">要將 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 與方法一起使用，請將方法新增到元件類中。在下面的範例中，<code>setCurrentClasses()</code> 使用一個物件來設定屬性 <code>currentClasses</code>，該物件根據另外三個元件屬性為 <code>true</code> 或 <code>false</code> 來新增或刪除三個 CSS 類別。</p><p translation-origin=\"off\">To use <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> with a method, add the method to the component class.\nIn the following example, <code>setCurrentClasses()</code> sets the property <code>currentClasses</code> with an object that adds or removes three classes based on the <code>true</code> or <code>false</code> state of three other component properties.</p>\n\n<p translation-result=\"on\">該物件的每個鍵（key）都是一個 CSS 類別名稱。如果鍵為 <code>true</code>，則 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 新增該類別。如果鍵為 <code>false</code>，則 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 刪除該類別。</p><p translation-origin=\"off\">Each key of the object is a CSS class name.\nIf a key is <code>true</code>, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> adds the class.\nIf a key is <code>false</code>, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> removes the class.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\">\ncurrentClasses: Record&lt;string, boolean&gt; = {};\n/* . . . */\nsetCurrentClasses() {\n  // CSS classes: added/removed per current state of component properties\n  this.currentClasses =  {\n    saveable: this.canSave,\n    modified: !this.isUnchanged,\n    special:  this.isSpecial\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在範本中，把 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 屬性繫結到 <code>currentClasses</code>，根據它來設定此元素的 CSS 類：</p><p translation-origin=\"off\">In the template, add the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> to set the element's classes:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\"&gt;This div is initially saveable, unchanged, and special.&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">在這個例子中，Angular 會在初始化以及發生更改的情況下應用這些類別。完整的範例會在 <code>ngOnInit()</code> 中進行初始化以及透過單擊按鈕更改相關屬性時呼叫 <code>setCurrentClasses()</code>。這些步驟對於實現 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 不是必需的。有關更多資訊，請參見<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p><p translation-origin=\"off\">For this use case, Angular applies the classes on initialization and in case of changes.\nThe full example calls <code>setCurrentClasses()</code> initially with <code>ngOnInit()</code> and when the dependent properties change through a button click.\nThese steps are not necessary to implement <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.\nFor more information, see the <live-example></live-example> <code>app.component.ts</code> and <code>app.component.html</code>.</p>\n\n<p><a id=\"ngstyle\"></a></p>\n<h2 id=\"setting-inline-styles-with-ngstyle\" translation-result=\"on\">用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 設定內聯樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngstyle-設定內聯樣式\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Setting inline styles with <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> 根據元件的狀態同時設定多個內聯樣式。</p><p translation-origin=\"off\">Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set multiple inline styles simultaneously, based on the state of the component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">要使用 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>，請向元件類新增一個方法。</p><p translation-origin=\"off\">To use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>, add a method to the component class.</p>\n\n<p translation-result=\"on\">在下面的例子中，<code>setCurrentStyles()</code> 方法基於該元件另外三個屬性的狀態，用一個定義了三個樣式的物件設定了 <code>currentStyles</code> 屬性。</p><p translation-origin=\"off\">In the following example, <code>setCurrentStyles()</code> sets the property <code>currentStyles</code> with an object that defines three styles, based on the state of three other component properties.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\">\ncurrentStyles: Record&lt;string, string&gt; = {};\n/* . . . */\nsetCurrentStyles() {\n  // CSS styles: set per current state of component properties\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要設定元素的樣式，請將 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 屬性繫結到 <code>currentStyles</code>。</p><p translation-origin=\"off\">To set the element's styles, add an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\"&gt;\n  This div is initially italic, normal weight, and extra large (24px).\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">在這個例子中，Angular 會在初始化以及發生更改的情況下應用這些類別。完整的範例會在 <code>ngOnInit()</code> 中進行初始化以及透過單擊按鈕更改相關屬性時呼叫 <code>setCurrentStyles()</code>。不過，這些步驟對於實現 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 不是必需的。有關更多資訊，請參見<live-example></live-example>中的 <code>app.component.ts</code> 和 <code>app.component.html</code>。</p><p translation-origin=\"off\">For this use case, Angular applies the styles upon initialization and in case of changes.\nTo do this, the full example calls <code>setCurrentStyles()</code> initially with <code>ngOnInit()</code> and when the dependent properties change through a button click.\nHowever, these steps are not necessary to implement <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> on its own.\nSee the <live-example></live-example> <code>app.component.ts</code> and <code>app.component.html</code> for this optional implementation.</p>\n\n<p><a id=\"ngModel\"></a></p>\n<h2 id=\"displaying-and-updating-properties-with-ngmodel\" translation-result=\"on\">用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 顯示和更新屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngmodel-顯示和更新屬性\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Displaying and updating properties with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令顯示資料屬性，並在使用者進行更改時更新該屬性。</p><p translation-origin=\"off\">Use the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive to display a data property and update that property when the user makes changes.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">匯入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，並將其新增到 NgModule 的 <code>imports</code> 列表中。</p><p translation-origin=\"off\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>  and add it to the NgModule's <code>imports</code> list.</p>\n\n<code-example header=\"src/app/app.module.ts (FormsModule import)\" path=\"built-in-directives/src/app/app.module.ts\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &lt;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  /* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &lt;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n  /* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 HTML 的 <code>&lt;form&gt;</code> 元素上新增 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 繫結，並將其設定為等於此屬性，這裡是 <code>name</code>。</p><p translation-origin=\"off\">Add an <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> binding on an HTML <code>&lt;form&gt;</code> element and set it equal to the property, here <code>name</code>.</p>\n\n<code-example header=\"src/app/app.component.html (NgModel example)\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\">\n&lt;label for=\"example-ngModel\"&gt;[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&lt;/label&gt;\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\"&gt;\n\n</code-example>\n<p translation-result=\"on\">此 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 語法只能設定資料繫結屬性。</p><p translation-origin=\"off\">This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only set a data-bound property.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">要自訂配置，你可以編寫可展開的表單，該表單將屬性繫結和事件繫結分開。使用<a href=\"guide/property-binding\">屬性繫結</a>來設定屬性，並使用<a href=\"guide/event-binding\">事件繫結</a>來響應更改。以下範例將 <code>&lt;input&gt;</code> 值更改為大寫：</p><p translation-origin=\"off\">To customize your configuration, write the expanded form, which separates the property and event binding.\nUse <a href=\"guide/property-binding\">property binding</a> to set the property and <a href=\"guide/event-binding\">event binding</a> to respond to changes.\nThe following example changes the <code>&lt;input&gt;</code> value to uppercase:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\">\n&lt;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\"&gt;\n\n</code-example>\n<p translation-result=\"on\">這裡是所有這些變體的動畫，包括這個大寫轉換的版本：</p><p translation-origin=\"off\">Here are all variations in action, including the uppercase version:</p>\n\n<div class=\"lightbox\">\n<img alt=\"NgModel variations\" src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" width=\"540\" height=\"264\">\n</div>\n<h3 id=\"ngmodel-and-value-accessors\" translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和值存取器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-和值存取器\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 指令適用於<a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>支援的元素。Angular 為所有基本 HTML 表單元素提供了<em>值存取器。</em>有關更多資訊，請參見<a href=\"guide/forms\">Forms</a>。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive works for an element supported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements.\nFor more information, see <a href=\"guide/forms\">Forms</a>.</p>\n\n<p translation-result=\"on\">要將 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 應用於非表單型內建元素或第三方自訂元件，必須編寫一個值存取器。有關更多資訊，請參見 <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a> 上的 API 文件。</p><p translation-origin=\"off\">To apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form built-in element or a third-party custom component, you have to write a value accessor.\nFor more information, see the API documentation on <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">編寫 Angular 元件時，如果根據 Angular 的<a href=\"guide/two-way-binding#how-two-way-binding-works\">雙向繫結語法</a>命名 value 和 event 屬性，則不需要用值存取器（ControlValueAccessor）或 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>。</p><p translation-origin=\"off\">When you write an Angular component, you don't need a value accessor or <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> if you  name the value and event properties according to Angular's <a href=\"guide/two-way-binding#how-two-way-binding-works\">two-way binding syntax</a>.</p>\n\n</div>\n<p><a id=\"structural-directives\"></a></p>\n<h2 id=\"built-in-structural-directives\" translation-result=\"on\">內建結構型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Built-in structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">結構型指令的職責是 HTML 佈局。它們塑造或重塑 DOM 的<em>結構</em>，這通常是透過新增、移除和操縱它們所附加到的宿主元素來實現的。</p><p translation-origin=\"off\">Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.</p>\n\n<p translation-result=\"on\">本節會介紹最常見的內建結構型指令：</p><p translation-origin=\"off\">This section introduces the most common built-in structural directives:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">常見的內建結構型指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Common built-in structural directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">有條件地從範本建立或銷燬子檢視。</nt-wrapper><nt-wrapper translation-origin=\"off\">Conditionally creates or disposes of subviews from the template.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為列表中的每個條目重複渲染一個節點。</nt-wrapper><nt-wrapper translation-origin=\"off\">Repeat a node for each item in a list.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一組在備用檢視之間切換的指令。</nt-wrapper><nt-wrapper translation-origin=\"off\">A set of directives that switch among alternative views.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/structural-directives\">結構型指令</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n<p><a id=\"ngIf\"></a></p>\n<h2 id=\"adding-or-removing-an-element-with-ngif\" translation-result=\"on\">用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 新增或刪除元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngif-新增或刪除元素\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Adding or removing an element with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#adding-or-removing-an-element-with-ngif\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以將 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 指令應用於宿主元素來新增或刪除元素。</p><p translation-origin=\"off\">Add or remove an element by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to a host element.</p>\n\n<p translation-result=\"on\">如果 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 為 <code>false</code>，則 Angular 將從 DOM 中移除一個元素及其後代。然後，Angular 會銷燬其元件，從而釋放記憶體和資源。</p><p translation-origin=\"off\">When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes an element and its descendants from the DOM.\nAngular then disposes of their components, which frees up memory and resources.</p>\n\n<p translation-result=\"on\">要新增或刪除元素，請在以下範例 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 繫結到條件表示式，比如 <code>isActive</code>。</p><p translation-origin=\"off\">To add or remove an element, bind <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to a condition expression such as <code>isActive</code> in the following example.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\">\n&lt;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p translation-result=\"on\">當 <code>isActive</code> 表示式返回真值時，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會把 <code>ItemDetailComponent</code> 新增到 DOM 中。當表示式為假值時，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會從 DOM 中刪除 <code>ItemDetailComponent</code> 並銷燬該元件及其所有子元件。</p><p translation-origin=\"off\">When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the <code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code> from the DOM and disposes of the component and all of its subcomponents.</p>\n\n<p translation-result=\"on\">關於 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 和 <code>NgIfElse</code> 的更多資訊，請參見<a href=\"api/common/NgIf\">NgIf API 文件</a>。</p><p translation-origin=\"off\">For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgIfElse</code>, see the <a href=\"api/common/NgIf\">NgIf API documentation</a>.</p>\n\n<h3 id=\"guarding-against-null\" translation-result=\"on\">防止 <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guarding-against-null\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Guarding against <code>null</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guarding-against-null\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">預設情況下，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 會阻止顯示已繫結到空值的元素。</p><p translation-origin=\"off\">By default, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> prevents display of an element bound to a null value.</p>\n\n<p translation-result=\"on\">要使用 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 保護 <code>&lt;div&gt;</code>，請將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> 新增到此 <code>&lt;div&gt;</code>。在下面的例子中，<code>currentCustomer</code> 名字出現了，是因為確實存在一個 <code>currentCustomer</code>。</p><p translation-origin=\"off\">To use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> to guard a <code>&lt;div&gt;</code>, add <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"yourProperty\"</code> to the <code>&lt;div&gt;</code>.\nIn the following example, the <code>currentCustomer</code> name appears because there is a <code>currentCustomer</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\"&gt;Hello, {{currentCustomer.name}}&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">但是，如果該屬性為 <code>null</code>，則 Angular 就不會顯示 <code>&lt;div&gt;</code>。在這個例子中，Angular 就不會顯示 <code>nullCustomer</code>，因為它為 <code>null</code>。</p><p translation-origin=\"off\">However, if the property is <code>null</code>, Angular does not display the <code>&lt;div&gt;</code>.\nIn this example, Angular does not display the <code>nullCustomer</code> because it is <code>null</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\"&gt;Hello, &lt;span&gt;{{nullCustomer}}&lt;/span&gt;&lt;/div&gt;\n\n</code-example>\n<p><a id=\"ngFor\"></a></p>\n<h2 id=\"listing-items-with-ngfor\" translation-result=\"on\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 條目列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-條目列表\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Listing items with <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#listing-items-with-ngfor\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 來指令顯示條目列表。</p><p translation-origin=\"off\">Use the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive to present a list of items.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">定義一個 HTML 塊，該塊會決定 Angular 如何渲染單個條目。</p><p translation-origin=\"off\">Define a block of HTML that determines how Angular renders a single item.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要列出你的條目，請把一個簡寫形式 <code>let item of items</code> 賦值給 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。</p><p translation-origin=\"off\">To list your items, assign the shorthand <code>let item of items</code> to <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.</p>\n\n</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">字串 <code>\"let item of items\"</code> 會指示 Angular 執行以下操作：</p><p translation-origin=\"off\">The string <code>\"let item of items\"</code> instructs Angular to do the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">將 <code>items</code> 中的每個條目儲存在區域性迴圈變數 <code>item</code> 中</p><p translation-origin=\"off\">Store each item in the <code>items</code> array in the local <code>item</code> looping variable</p>\n\n</li>\n<li>\n<p translation-result=\"on\">讓每個條目都可用於每次迭代時的範本 HTML 中</p><p translation-origin=\"off\">Make each item available to the templated HTML for each iteration</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將 <code>\"let item of items\"</code> 轉換為環繞宿主元素的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></p><p translation-origin=\"off\">Translate <code>\"let item of items\"</code> into an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> around the host element</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對列表中的每個 <code>item</code> 複寫這個 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code></p><p translation-origin=\"off\">Repeat the <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> for each <code>item</code> in the list</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">欲知詳情，參閱<a href=\"guide/structural-directives\">結構型指令</a>中的<a href=\"guide/structural-directives#shorthand\">結構型指令的簡寫形式</a>部分。</p><p translation-origin=\"off\">For more information see the <a href=\"guide/structural-directives#shorthand\">Structural directive shorthand</a> section of <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n\n<h3 id=\"repeating-a-component-view\" translation-result=\"on\">複寫元件檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-a-component-view\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Repeating a component view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-a-component-view\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要複寫某個元件元素，請將 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 應用於其選擇器。在以下範例中，選擇器為 <code>&lt;app-item-detail&gt;</code>。</p><p translation-origin=\"off\">To repeat a component element, apply <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to the selector.\nIn the following example, the selector is <code>&lt;app-item-detail&gt;</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\">\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p translation-result=\"on\">你可以在以下位置參考範本輸入變數，比如 <code>item</code>：</p><p translation-origin=\"off\">Reference a template input variable, such as <code>item</code>, in the following locations:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的宿主元素中</p><p translation-origin=\"off\">Within the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> host element</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在宿主元素的後代中，用以存取條目的屬性</p><p translation-origin=\"off\">Within the host element descendants to access the item's properties</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">以下範例首先在插值中參考 <code>item</code>，然後將它透過繫結傳遞給 <code>&lt;app-item-detail&gt;</code> 元件的 <code>item</code> 屬性。</p><p translation-origin=\"off\">The following example references <code>item</code> first in an interpolation and then passes in a binding to the <code>item</code> property of the <code>&lt;app-item-detail&gt;</code> component.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n&lt;!-- . . . --&gt;\n&lt;app-item-detail *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n</code-example>\n<p translation-result=\"on\">有關範本輸入變數的更多資訊，請參見<a href=\"guide/structural-directives#shorthand\">結構型指令簡寫形式</a>。</p><p translation-origin=\"off\">For more information about template input variables, see <a href=\"guide/structural-directives#shorthand\">Structural directive shorthand</a>.</p>\n\n<h3 id=\"getting-the-index-of-ngfor\" translation-result=\"on\">獲取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#獲取-ngfor-的-index\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Getting the <code>index</code> of <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#getting-the-index-of-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以獲取 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>index</code>，並在範本中使用它。</p><p translation-origin=\"off\">Get the <code>index</code> of <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> in a template input variable and use it in the template.</p>\n\n<p translation-result=\"on\">在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中，新增一個分號和 <code>let i=index</code> 簡寫形式。下面的例子中把 <code>index</code> 取到一個名為 <code>i</code> 的變數中，並將其與條目名稱一起顯示。</p><p translation-origin=\"off\">In the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>, add a semicolon and <code>let i=index</code> to the shorthand.\nThe following example gets the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\"&gt;{{i + 1}} - {{item.name}}&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 指令上下文的 <code>index</code> 屬性在每次迭代中都會返回該條目的從零開始的索引號。</p><p translation-origin=\"off\">The index property of the <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> directive context returns the zero-based index of the item in each iteration.</p>\n\n<p translation-result=\"on\">Angular 會將此指令轉換為 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>，然後反覆使用此範本為列表中的每個 <code>item</code> 建立一組新的元素和繫結。有關簡寫形式的更多資訊，請參見<a href=\"guide/structural-directives#shorthand\">《結構型指令》</a>指南。</p><p translation-origin=\"off\">Angular translates this instruction into an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>item</code>\nin the list.\nFor more information about shorthand, see the <a href=\"guide/structural-directives#shorthand\">Structural Directives</a> guide.</p>\n\n<h2 id=\"repeating-elements-when-a-condition-is-true\" translation-result=\"on\">當條件為真時複寫元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-elements-when-a-condition-is-true\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Repeating elements when a condition is true<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#repeating-elements-when-a-condition-is-true\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要在特定條件為真時重複某個 HTML 塊，請將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 放在包裹此 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 元素的容器元素上。</p><p translation-origin=\"off\">To repeat a block of HTML when a particular condition is true, put the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> on a container element that wraps an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> element.</p>\n\n<p translation-result=\"on\">有關更多資訊，參閱<a href=\"guide/structural-directives#one-per-element\">每個元素只能有一個結構型指令</a>。</p><p translation-origin=\"off\">For more information see <a href=\"guide/structural-directives#one-per-element\">one structural directive per element</a>.</p>\n\n<p><a id=\"ngfor-with-trackby\"></a></p>\n<h3 id=\"tracking-items-with-ngfor-trackby\" translation-result=\"on\">用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 追蹤條目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngfor-的-trackby-追蹤條目\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Tracking items with <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#tracking-items-with-ngfor-trackby\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過追蹤對條目列表的更改，可以減少應用程式對伺服器的呼叫次數。使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 的 <code>trackBy</code> 屬性，Angular 只能更改和重新渲染已更改的條目，而不必重新載入整個條目列表。</p><p translation-origin=\"off\">Reduce the number of calls your application makes to the server by tracking changes to an item list.\nWith the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> <code>trackBy</code> property, Angular can change and re-render only those items that have changed, rather than reloading the entire list of items.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">向該元件新增一個方法，該方法返回 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> 應該追蹤的值。這個例子中，該值是英雄的 <code>id</code>。如果瀏覽器已經渲染過此 <code>id</code>，Angular 就會追蹤它，而不會重新向伺服器查詢相同的 <code>id</code>。</p><p translation-origin=\"off\">Add a method to the component that returns the value <code><a href=\"api/common/NgFor\" class=\"code-anchor\">NgFor</a></code> should track.\nIn this example, the value to track is the item's <code>id</code>.\nIf the browser has already rendered <code>id</code>, Angular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\">\ntrackByItems(index: number, item: Item): number { return item.id; }\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在簡寫表示式中，將 <code>trackBy</code> 設定為 <code>trackByItems()</code> 方法。</p><p translation-origin=\"off\">In the shorthand expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\"&gt;\n  ({{item.id}}) {{item.name}}\n&lt;/div&gt;\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\"><strong>更改這些 ID</strong> 會使用新的 <code>item.id</code> 建立新的條目。在下面的 <code>trackBy</code> 效果示範中，<strong>Reset items</strong> 會建立一些具有和以前相同的 <code>item.id</code> 的新條目。</p><p translation-origin=\"off\"><strong>Change ids</strong> creates new items with new <code>item.id</code>s.\nIn the following illustration of the <code>trackBy</code> effect, <strong>Reset items</strong> creates new items with the same <code>item.id</code>s.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">如果沒有 <code>trackBy</code>，這些按鈕都會觸發完全的 DOM 元素替換。</p><p translation-origin=\"off\">With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">有了 <code>trackBy</code>，則只有修改了 <code>id</code> 的按鈕才會觸發元素替換。</p><p translation-origin=\"off\">With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"Animation of trackBy\" src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" width=\"492\" height=\"442\">\n</div>\n<p><a id=\"ngcontainer\"></a></p>\n<h2 id=\"hosting-a-directive-without-a-dom-element\" translation-result=\"on\">為沒有 DOM 元素的指令安排宿主<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#hosting-a-directive-without-a-dom-element\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Hosting a directive without a DOM element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#hosting-a-directive-without-a-dom-element\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 是一個分組元素，它不會干擾樣式或佈局，因為 Angular 不會將其放置在 DOM 中。</p><p translation-origin=\"off\">The Angular <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.</p>\n\n<p translation-result=\"on\">當沒有單個元素承載指令時，可以使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>。</p><p translation-origin=\"off\">Use <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> when there's no single element to host the directive.</p>\n\n<p translation-result=\"on\">這是使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 的條件化段落。</p><p translation-origin=\"off\">Here's a conditional paragraph using <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>.</p>\n\n<code-example header=\"src/app/app.component.html (ngif-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"ngif-ngcontainer\">\n&lt;p&gt;\n  I turned the corner\n  &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n    and saw {{hero.name}}. I waved\n  &lt;/ng-container&gt;\n  and continued on my way.\n&lt;/p&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer paragraph with proper style\" src=\"generated/images/guide/structural-directives/good-paragraph.png\" width=\"509\" height=\"15\">\n</div>\n<ol>\n<li>\n<p translation-result=\"on\">從 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 中匯入 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p><p translation-origin=\"off\">Import the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive from <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 新增到相關 Angular 模組的 imports 部分。</p><p translation-origin=\"off\">Add <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the imports section of the relevant Angular module.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要有條件地排除 <code>&lt;option&gt;</code>，請將 <code>&lt;option&gt;</code> 包裹在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 中。</p><p translation-origin=\"off\">To conditionally exclude an <code>&lt;option&gt;</code>, wrap the <code>&lt;option&gt;</code> in an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code>.</p>\n\n<code-example header=\"src/app/app.component.html (select-ngcontainer)\" path=\"structural-directives/src/app/app.component.html\" region=\"select-ngcontainer\">\n&lt;div&gt;\n  Pick your favorite hero\n  (&lt;label&gt;&lt;input type=\"checkbox\" checked (change)=\"showSad = !showSad\"&gt;show sad&lt;/label&gt;)\n&lt;/div&gt;\n&lt;select [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero\"&gt;\n  &lt;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let h of heroes\"&gt;\n    &lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSad || h.emotion !== 'sad'\"&gt;\n      &lt;option [ngValue]=\"h\"&gt;{{h.name}} ({{h.emotion}})&lt;/option&gt;\n    &lt;/ng-container&gt;\n  &lt;/ng-container&gt;\n&lt;/select&gt;\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"ngcontainer options work properly\" src=\"generated/images/guide/structural-directives/select-ngcontainer-anim.gif\" width=\"312\" height=\"100\">\n</div>\n</li>\n</ol>\n<p><a id=\"ngSwitch\"></a></p>\n<h2 id=\"switching-cases-with-ngswitch\" translation-result=\"on\">用 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#用-ngswitch\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Switching cases with <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#switching-cases-with-ngswitch\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">就像 JavaScript 的 <code>switch</code> 陳述式一樣。<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 會根據切換條件顯示幾個可能的元素中的一個。Angular 只會將選定的元素放入 DOM。</p><p translation-origin=\"off\">Like the JavaScript <code>switch</code> statement, <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n\n<!--todo: API Flagged -->\n<p translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 是一組指令（共三個）：</p><p translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is a set of three directives:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 指令</nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個屬性型指令，會更改其伴生指令的行為。</nt-wrapper><nt-wrapper translation-origin=\"off\">An attribute directive that changes the behavior of its companion directives.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當其繫結值等於開關值時將其元素新增到 DOM 中，而在其不等於開關值時將其繫結值移除。</nt-wrapper><nt-wrapper translation-origin=\"off\">Structural directive that adds its element to the DOM when its bound value equals the switch value and removes its bound value when it doesn't equal the switch value.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當沒有選中的 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> 時，將其宿主元素新增到 DOM 中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Structural directive that adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<ol>\n<li>\n<p translation-result=\"on\">在每個元素（比如 <code>&lt;div&gt;</code>）上，把 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 繫結到一個返回開關值的表示式（比如 <code>feature</code>）。儘管這個例子中 <code>feature</code> 值是字串，但此開關值可以是任何型別。</p><p translation-origin=\"off\">On an element, such as a <code>&lt;div&gt;</code>, add <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> bound to an expression that returns the switch value, such as <code>feature</code>.\nThough the <code>feature</code> value in this example is a string, the switch value can be of any type.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將各個分支元素繫結到 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>。</p><p translation-origin=\"off\">Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> on the elements for the cases.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\">\n&lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\"&gt;\n  &lt;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\"&gt;&lt;/app-stout-item&gt;\n  &lt;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\"&gt;&lt;/app-device-item&gt;\n  &lt;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\"&gt;&lt;/app-lost-item&gt;\n  &lt;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\"&gt;&lt;/app-best-item&gt;\n&lt;!-- . . . --&gt;\n  &lt;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\"&gt;&lt;/app-unknown-item&gt;\n&lt;/div&gt;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在父元件中，定義 <code>currentItem</code> 以便可以在 <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> 表示式中使用它。</p><p translation-origin=\"off\">In the parent component, define <code>currentItem</code>, to use it in the <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code> expression.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"built-in-directives/src/app/app.component.ts\" region=\"item\">\ncurrentItem!: Item;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在每個子元件中，新增一個<a href=\"guide/inputs-outputs#input\" title=\"輸入屬性\">輸入屬性</a> <code>item</code>，該屬性會繫結到父元件的 <code>currentItem</code>。以下兩個片段顯示了父元件和其中一個子元件。其他子元件與 <code>StoutItemComponent</code> 中的相同。</p><p translation-origin=\"off\">In each child component, add an <code>item</code> <a href=\"guide/inputs-outputs#input\" title=\"Input property\">input property</a> which is bound to the <code>currentItem</code> of the parent component.\nThe following two snippets show the parent component and one of the child components.\nThe other child components are identical to <code>StoutItemComponent</code>.</p>\n\n<code-example header=\"In each child component, here StoutItemComponent\" path=\"built-in-directives/src/app/item-switch.component.ts\" region=\"input\">\nexport class StoutItemComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item!: Item;\n}\n\n</code-example>\n<div class=\"lightbox\">\n<img alt=\"Animation of NgSwitch\" src=\"generated/images/guide/built-in-directives/ngswitch.gif\" width=\"370\" height=\"256\">\n</div>\n</li>\n</ol>\n<p translation-result=\"on\">Switch 指令也同樣適用於內建 HTML 元素和 Web Component。比如，你可以像下面的例子中一樣把 <code>&lt;app-best-item&gt;</code> 分支替換為 <code>&lt;div&gt;</code>。</p><p translation-origin=\"off\">Switch directives also work with built-in HTML elements and web components.\nFor example, you could replace the <code>&lt;app-best-item&gt;</code> switch case with a <code>&lt;div&gt;</code> as follows.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\">\n&lt;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"&gt; Are you as bright as {{currentItem.name}}?&lt;/div&gt;\n\n</code-example>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有關如何建構自己的自訂指令的資訊，請參見<a href=\"guide/attribute-directives\">“屬性型指令”</a>和<a href=\"guide/structural-directives\">“結構型指令”</a>。</p><p translation-origin=\"off\">For information on how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/example-apps-list\n - guide/glossary\n - guide/structural-directives\n - guide/template-overview\n - guide/template-reference-variables\n - guide/template-syntax\n - guide/two-way-binding\n - guide/understanding-angular-overview\n - guide/understanding-template-expr-overview\n - guide/upgrade\n - guide/what-is-angular\n - tutorial/first-app/first-app-lesson-08\n - tutorial/tour-of-heroes/toh-pt2\n-->\n<!-- links from this doc:\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Input\n - api/core/NgModule\n - api/core/ng-container\n - api/core/ng-template\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/attribute-directives\n - guide/built-in-directives#adding-and-removing-classes-with-ngclass\n - guide/built-in-directives#adding-or-removing-an-element-with-ngif\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#getting-the-index-of-ngfor\n - guide/built-in-directives#guarding-against-null\n - guide/built-in-directives#hosting-a-directive-without-a-dom-element\n - guide/built-in-directives#listing-items-with-ngfor\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngfor-條目列表\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngmodel-和值存取器\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#repeating-a-component-view\n - guide/built-in-directives#repeating-elements-when-a-condition-is-true\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/built-in-directives#tracking-items-with-ngfor-trackby\n - guide/built-in-directives#using-ngclass-with-a-method\n - guide/built-in-directives#using-ngclass-with-an-expression\n - guide/built-in-directives#whats-next\n - guide/built-in-directives#下一步呢\n - guide/built-in-directives#為沒有-dom-元素的指令安排宿主\n - guide/built-in-directives#內建屬性型指令\n - guide/built-in-directives#內建指令\n - guide/built-in-directives#內建結構型指令\n - guide/built-in-directives#複寫元件檢視\n - guide/built-in-directives#將-ngclass-與方法一起使用\n - guide/built-in-directives#將-ngclass-與表示式一起使用\n - guide/built-in-directives#當條件為真時複寫元素\n - guide/built-in-directives#用-ngclass-新增和刪除類\n - guide/built-in-directives#用-ngfor-的-trackby-追蹤條目\n - guide/built-in-directives#用-ngif-新增或刪除元素\n - guide/built-in-directives#用-ngmodel-顯示和更新屬性\n - guide/built-in-directives#用-ngstyle-設定內聯樣式\n - guide/built-in-directives#用-ngswitch\n - guide/built-in-directives#獲取-ngfor-的-index\n - guide/built-in-directives#防止-null\n - guide/class-binding\n - guide/component-overview\n - guide/event-binding\n - guide/forms\n - guide/inputs-outputs#input\n - guide/property-binding\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#one-per-element\n - guide/structural-directives#shorthand\n - guide/two-way-binding#how-two-way-binding-works\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/built-in-directives.md?message=docs%3A%20請簡述你的修改...\n-->"}