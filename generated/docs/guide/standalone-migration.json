{"id":"guide/standalone-migration","title":"Migrate an existing Angular project to standalone","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/standalone-migration.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"migrate-an-existing-angular-project-to-standalone\" translation-result=\"on\">將現有的 Angular 專案遷移到獨立專案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Migrate an existing Angular project to standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">從版本 15.2.0 開始，Angular 提供了一個<a href=\"guide/schematics\">原理圖</a>來幫助專案作者將現有專案轉換為<a href=\"guide/standalone-components\">新的獨立 API</a>。該原理圖旨在自動轉換儘可能多的程式碼，但可能需要專案作者進行一些手動修復。使用以下命令執行原理圖：</p><p translation-origin=\"off\">As of version 15.2.0, Angular offers a <a href=\"guide/schematics\">schematic</a> to help project authors convert existing projects to <a href=\"guide/standalone-components\">the new standalone APIs</a>. The schematic aims to transform as much code as possible automatically, but it may require some manual fixes by the project author. Run the schematic with the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate @angular/core:standalone\n\n</code-example>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在使用本原理圖之前，請確保專案：</p><p translation-origin=\"off\">Before using the schematic, please ensure that the project:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用的是 Angular 15.2.0 或更高版本。</p><p translation-origin=\"off\">Is using Angular 15.2.0 or later.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建構沒有任何編譯錯誤。</p><p translation-origin=\"off\">Builds without any compilation errors.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在乾淨的 Git 分支上，所有工作都已儲存。</p><p translation-origin=\"off\">Is on a clean Git branch and all work is saved.</p>\n\n</li>\n</ol>\n<h2 id=\"schematic-options\" translation-result=\"on\">原理圖選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#schematic-options\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Schematic options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#schematic-options\"><i class=\"material-icons\">link</i></a></h2>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">選項</nt-wrapper><nt-wrapper translation-origin=\"off\">Option</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>mode</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要執行的轉換。有關可用選項的詳細資訊，請參閱下面的<a href=\"guide/standalone-migration#migration-modes\">遷移模式</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">The transformation to perform. See <a href=\"guide/standalone-migration#migration-modes\">Migration modes</a> below for details on the available options.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於專案根目錄的遷移路徑。你可以使用此選項以增量方式遷移專案的各個部分。</nt-wrapper><nt-wrapper translation-origin=\"off\">The path to migrate, relative to the project root. You can use this option to migrate sections of your project incrementally.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"migrations-steps\" translation-result=\"on\">遷移步驟<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrations-steps\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Migrations steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migrations-steps\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">遷移過程由三個步驟組成。你必須多次執行它並手動檢查專案是否能按預期建構和執行。</p><p translation-origin=\"off\">The migration process is composed of three steps. You'll have to run it multiple times and check manually that the project builds and behaves as expected.</p>\n\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">注意</header><header ng-should-translate=\"\" translation-origin=\"off\">Note</header>\n\n<p translation-result=\"on\">雖然腳手架可以自動更新大部分程式碼，但有些極端情況還是需要開發人員進行干預。你應該為在每個遷移步驟之後進行手動修復做好準備。此外，腳手架產生的新程式碼也可能與你的程式碼格式規則不匹配。</p><p translation-origin=\"off\">While the schematic can automatically update most code, some edge cases require developer intervention.\nYou should plan to apply manual fixes after each step of the migration. Additionally, the new code generated by the schematic may not match your code's formatting rules.</p>\n\n</div>\n<p translation-result=\"on\">按照下面列出的順序執行遷移，驗證你的程式碼在每個步驟之間建構和執行：</p><p translation-origin=\"off\">Run the migration in the order listed below, verifying that your code builds and runs between each step:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">執行 <code>ng g @angular/core:standalone</code> 並選擇 “Convert all components, directives and pipes to standalone”</p><p translation-origin=\"off\">Run <code>ng g @angular/core:standalone</code> and select \"Convert all components, directives and pipes to standalone\"</p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行 <code>ng g @angular/core:standalone</code> 並選擇 “Remove unnecessary NgModule classes”</p><p translation-origin=\"off\">Run <code>ng g @angular/core:standalone</code> and select \"Remove unnecessary NgModule classes\"</p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行 <code>ng g @angular/core:standalone</code> 並選擇 “Bootstrap the project using standalone APIs”</p><p translation-origin=\"off\">Run <code>ng g @angular/core:standalone</code> and select \"Bootstrap the project using standalone APIs\"</p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行任何靜態分析（lint）和格式檢查，修復任何故障，並提交結果</p><p translation-origin=\"off\">Run any linting and formatting checks, fix any failures, and commit the result</p>\n\n</li>\n</ol>\n<h2 id=\"after-the-migration\" translation-result=\"on\">遷移後<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#after-the-migration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">After the migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#after-the-migration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">恭喜，你的應用程式已轉換為獨立應用程式 🎉。這些是你現在可能想要採取的一些可選的後續步驟：</p><p translation-origin=\"off\">Congratulations, your application has been converted to standalone 🎉. These are some optional follow-up steps you may want to take now:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">查詢並刪除任何剩餘的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 宣告：由於<a href=\"guide/standalone-migration#remove-unnecessary-ngmodules\">“刪除不必要的 NgModule”步驟</a>不能自動刪除所有模組，你可能必須手動刪除剩餘的宣告。</p><p translation-origin=\"off\">Find and remove any remaining <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> declarations: since the <a href=\"guide/standalone-migration#remove-unnecessary-ngmodules\">\"Remove unnecessary NgModules\" step</a> cannot remove all modules automatically, you may have to remove the remaining declarations manually.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行專案的單元測試並修復所有故障。</p><p translation-origin=\"off\">Run the project's unit tests and fix any failures.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果專案使用了自動格式化，則執行所有程式碼格式化程式。</p><p translation-origin=\"off\">Run any code formatters, if the project uses automatic formatting.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在你的專案中執行任何靜態分析器（linter）並修復新警告。一些靜態分析器支援 <code>--fix</code> 標誌，可以自動解決一些警告。</p><p translation-origin=\"off\">Run any linters in your project and fix new warnings. Some linters support a <code>--fix</code> flag that may resolve so warnings automatically.</p>\n\n</li>\n</ul>\n<h2 id=\"migration-modes\" translation-result=\"on\">遷移模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migration-modes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Migration modes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#migration-modes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">遷移有以下幾個步驟：</p><p translation-origin=\"off\">The migration has the following modes:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">將宣告轉換為獨立的。</p><p translation-origin=\"off\">Convert declarations to standalone.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">移除不必要的 NgModule。</p><p translation-origin=\"off\">Remove unnecessary NgModules.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">切換到獨立的引導啟動 API。</p><p translation-origin=\"off\">Switch to standalone bootstrapping API.\nYou should run these migrations in the order given.</p>\n\n</li>\n</ol>\n<p>你應該按照給定的順序執行這些遷移。</p>\n<h3 id=\"convert-declarations-to-standalone\" translation-result=\"on\">將宣告轉換為獨立的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#convert-declarations-to-standalone\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Convert declarations to standalone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#convert-declarations-to-standalone\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在這種模式下，遷移透過設定 <code>standalone: true</code> 並將依賴項新增到它們的 <code>imports</code> 陣列來將所有元件、指令和管道轉換為獨立的。</p><p translation-origin=\"off\">In this mode, the migration converts all components, directives and pipes to standalone by setting <code>standalone: true</code> and adding dependencies to their <code>imports</code> array.</p>\n\n<div class=\"callout is-helpful\">\n<p translation-result=\"on\">在此步驟中，該原理圖會忽略在此過程中引導元件的 NgModules，因為它們很可能是由 <code>bootstrapModule</code> 使用的根模組，而不是相容獨立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。該原理圖會自動將這些宣告轉換為<a href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\">\"獨立引導 API\"</a> 步驟的一部分。</p><p translation-origin=\"off\">The schematic ignores NgModules which bootstrap a component during this step because they are likely root modules used by <code>bootstrapModule</code> rather than the standalone-compatible <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>. The schematic converts these declarations automatically as a part of the <a href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\">\"Switch to standalone bootstrapping API\"</a> step.</p>\n\n</div>\n<p translation-result=\"on\"><strong>之前：</strong></p><p translation-origin=\"off\"><strong>Before:</strong></p>\n\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>],\n  declarations: [GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<p translation-result=\"on\"><strong>之後：</strong></p><p translation-origin=\"off\"><strong>After:</strong></p>\n\n<code-example language=\"typescript\">\n// shared.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [<a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>, GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}\n</code-example>\n<code-example language=\"typescript\">\n// greeter.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'greeter',\n  template: '&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showGreeting\"&gt;Hello&lt;/div&gt;',\n  standalone: true,\n  imports: [<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a>]\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}\n</code-example>\n<h3 id=\"remove-unnecessary-ngmodules\" translation-result=\"on\">移除不必要的 NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#remove-unnecessary-ngmodules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Remove unnecessary NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#remove-unnecessary-ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在將所有宣告都轉換為獨立聲明後，就可以安全地刪除許多 NgModule 了。此步驟會刪除這類模組宣告和儘可能多的相應參考。如果遷移無法自動刪除參考，它就會留下以下 TODO 註釋，以便你可以手動刪除 NgModule：</p><p translation-origin=\"off\">After converting all declarations to standalone, many NgModules can be safely removed. This step deletes such module declarations and as many corresponding references as possible. If the migration cannot delete a reference automatically, it leaves the following TODO comment so that you can delete the NgModule manually:</p>\n\n<code-example language=\"typescript\">\n/* TODO(standalone-migration): clean up removed <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> reference manually */\n</code-example>\n<p translation-result=\"on\">如果該模組滿足以下條件，則遷移器就認為該模組可以安全刪除了：</p><p translation-origin=\"off\">The migration considers a module safe to remove if that module:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">沒有 <code>declarations</code>。</p><p translation-origin=\"off\">Has no <code>declarations</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">沒有 <code>providers</code>。</p><p translation-origin=\"off\">Has no <code>providers</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">沒有 <code>bootstrap</code> 元件。</p><p translation-origin=\"off\">Has no <code>bootstrap</code> components.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">沒有參考 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 符號或無法刪除的模組的 <code>imports</code>。</p><p translation-origin=\"off\">Has no <code>imports</code> that reference a <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> symbol or a module that can't be removed.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">沒有類成員。空建構函式將被忽略。</p><p translation-origin=\"off\">Has no class members. Empty constructors are ignored.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><strong>之前：</strong></p><p translation-origin=\"off\"><strong>Before:</strong></p>\n\n<code-example language=\"typescript\">\n// importer.module.ts\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [FooComponent, BarPipe],\n  exports: [FooComponent, BarPipe]\n})\nexport class ImporterModule {}\n</code-example>\n<p translation-result=\"on\"><strong>之後：</strong></p><p translation-origin=\"off\"><strong>After:</strong></p>\n\n<code-example language=\"typescript\">\n// importer.module.ts\n// Does not exist!\n</code-example>\n<h3 id=\"switch-to-standalone-bootstrapping-api\" translation-result=\"on\">切換到獨立的引導 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Switch to standalone bootstrapping API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#switch-to-standalone-bootstrapping-api\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此步驟將 <code>bootstrapModule</code> 的任何用法轉換為新的、基於獨立的 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>。它還會將根元件切換為 <code>standalone: true</code> 並刪除根 NgModule。如果根模組有任何 <code>providers</code> 或 <code>imports</code>，遷移會嘗試將盡可能多的配置複製到新的載入程式呼叫中。</p><p translation-origin=\"off\">This step converts any usages of  <code>bootstrapModule</code> to the new, standalone-based <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>. It also switches the root component to <code>standalone: true</code> and deletes the root NgModule. If the root module has any <code>providers</code> or <code>imports</code>, the migration attempts to copy as much of this configuration as possible into the new bootstrap call.</p>\n\n<p translation-result=\"on\"><strong>之前：</strong></p><p translation-origin=\"off\"><strong>Before:</strong></p>\n\n<code-example language=\"typescript\">\n// ./app/app.module.ts\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello' })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a> } from '@angular/platform-browser';\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser/platformBrowser\" class=\"code-anchor\">platformBrowser</a>().bootstrapModule(AppModule).catch(e =&gt; console.error(e));\n</code-example>\n<p translation-result=\"on\"><strong>之後：</strong></p><p translation-origin=\"off\"><strong>After:</strong></p>\n\n<code-example language=\"typescript\">\n// ./app/app.module.ts\n// Does not exist!\n</code-example>\n<code-example language=\"typescript\">\n// ./app/app.component.ts\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ selector: 'app', template: 'hello', standalone: true })\nexport class AppComponent {}\n</code-example>\n<code-example language=\"typescript\">\n// ./main.ts\nimport { <a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\n\n<a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a>(AppComponent).catch(e =&gt; console.error(e));\n</code-example>\n<h2 id=\"common-problems\" translation-result=\"on\">常見問題<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#common-problems\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Common problems<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#common-problems\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一些可能阻止原理圖正常工作的常見問題包括：</p><p translation-origin=\"off\">Some common problems that may prevent the schematic from working correctly include:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">編譯錯誤 —— 如果專案有編譯錯誤，Angular 就無法正確分析和遷移它。</p><p translation-origin=\"off\">Compilation errors - if the project has compilation errors, Angular cannot analyze and migrate it correctly.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">檔案未包含在 tsconfig 中 —— 原理圖透過分析專案的 <code>tsconfig.json</code> 檔案來確定要遷移的檔案。該原理圖不會包括任何未被 tsconfig 捕獲的檔案。</p><p translation-origin=\"off\">Files not included in a tsconfig - the schematic determines which files to migrate by analyzing your project's <code>tsconfig.json</code> files. The schematic excludes any files not captured by a tsconfig.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">無法靜態分析的程式碼 —— 原理圖使用靜態分析來理解你的程式碼並確定在哪裡進行更改。遷移可能會跳過任何包含在建構時無法靜態分析的元資料的類別。</p><p translation-origin=\"off\">Code that cannot be statically analyzed - the schematic uses static analysis to understand your code and determine where to make changes. The migration may skip any classes with metadata that cannot be statically analyzed at build time.</p>\n\n</li>\n</ul>\n<h2 id=\"limitations\" translation-result=\"on\">限制<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#limitations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Limitations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/standalone-migration#limitations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">由於遷移的規模和複雜性，有一些情況是原理圖無法處理的：</p><p translation-origin=\"off\">Due to the size and complexity of the migration, there are some cases that the schematic cannot handle:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">因為單元測試不是預先（AoT）編譯的，所以在單元測試中往元件的 <code>imports</code> 中新增類可能不完全正確。</p><p translation-origin=\"off\">Because unit tests are not ahead-of-time (AoT) compiled, <code>imports</code> added to components in unit tests might not be entirely correct.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">該原理圖依賴於對 Angular API 的直接呼叫。原理圖無法識別圍繞 Angular API 的自訂包裝器。例如，如果你在那裡定義了一個自訂的 <code>customConfigureTestModule</code> 函式來包裝 <code>TestBed.configureTestingModule</code>，它宣告的元件可能無法被識別。</p><p translation-origin=\"off\">The schematic relies on direct calls to Angular APIs. The schematic cannot recognize custom wrappers around Angular APIs. For example, if there you define a custom <code>customConfigureTestModule</code> function that wraps <code>TestBed.configureTestingModule</code>, components it declares may not be recognized.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：2/15/2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/Component\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/platform-browser/bootstrapApplication\n - api/platform-browser/platformBrowser\n - guide/schematics\n - guide/standalone-components\n - guide/standalone-migration#after-the-migration\n - guide/standalone-migration#common-problems\n - guide/standalone-migration#convert-declarations-to-standalone\n - guide/standalone-migration#limitations\n - guide/standalone-migration#migrate-an-existing-angular-project-to-standalone\n - guide/standalone-migration#migration-modes\n - guide/standalone-migration#migrations-steps\n - guide/standalone-migration#prerequisites\n - guide/standalone-migration#remove-unnecessary-ngmodules\n - guide/standalone-migration#schematic-options\n - guide/standalone-migration#switch-to-standalone-bootstrapping-api\n - guide/standalone-migration#切換到獨立的引導-api\n - guide/standalone-migration#前提條件\n - guide/standalone-migration#原理圖選項\n - guide/standalone-migration#將宣告轉換為獨立的\n - guide/standalone-migration#將現有的-angular-專案遷移到獨立專案\n - guide/standalone-migration#常見問題\n - guide/standalone-migration#移除不必要的-ngmodule\n - guide/standalone-migration#遷移後\n - guide/standalone-migration#遷移模式\n - guide/standalone-migration#遷移步驟\n - guide/standalone-migration#限制\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/standalone-migration.md?message=docs%3A%20請簡述你的修改...\n-->"}