{"id":"guide/upgrade-setup","title":"Setup for upgrading from AngularJS","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/upgrade-setup.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"setup-for-upgrading-from-angularjs\" translation-result=\"on\">準備從 AngularJS 升級<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Setup for upgrading from AngularJS<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#setup-for-upgrading-from-angularjs\"><i class=\"material-icons\">link</i></a></h1>\n\n<!--todo: Question: Can we remove this file and instead direct readers to https://github.com/angular/quickstart/blob/master/README.md -->\n<div class=\"alert is-critical\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n本指南<strong>僅僅</strong>適用於<a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">從 AngularJS 升級</a>和<a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">注重效能的升級</a>。\n本指南中提到的升級指南使用的是<a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">已棄用的快速上手 Github 儲存庫</a>，它是在 Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a> 推出之前建立的。</p><p translation-origin=\"off\"><strong>AUDIENCE</strong>: <br>\nUse this guide <strong>only</strong> in the context of  <a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">Upgrading from AngularJS</a> or <a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">Upgrading for Performance</a>.\nThose Upgrade guides refer to this Setup guide for information about using the <a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">deprecated QuickStart GitHub repository</a>, which was created prior to the current Angular <a href=\"cli\" title=\"CLI Overview\">CLI</a>.</p>\n\n<p translation-result=\"on\"><strong>對於所有其它場景</strong>，請參閱<a href=\"guide/setup-local\" title=\"Setting up for Local Development\">建立本地開發環境</a>中的步驟。</p><p translation-origin=\"off\"><strong>For all other scenarios</strong>, see the current instructions in <a href=\"guide/setup-local\" title=\"Setting up for Local Development\">Setting up the Local Environment and Workspace</a>.</p>\n\n</div>\n<!--\nThe <live-example name=quickstart>QuickStart live-coding</live-example> example is an Angular *playground*.\nThere are also some differences from a local app, to simplify that live-coding experience.\nIn particular, the QuickStart live-coding example shows just the AppComponent file; it creates the equivalent of app.module.ts and main.ts internally for the playground only.\n-->\n<p translation-result=\"on\">本指南講的是如何在你自己的機器上進行本地化開發。利用 <a href=\"https://github.com/angular/quickstart\" title=\"安裝 github 《快速上手》庫\">github 上的<strong>《快速上手》種子</strong></a>在你的電腦上搭建一個新專案是很快很容易的。</p><p translation-origin=\"off\">This guide describes how to develop locally on your own machine.\nSetting up a new project on your machine is quick and easy with the <a href=\"https://github.com/angular/quickstart\" title=\"Install the github QuickStart repo\">QuickStart seed on GitHub</a>.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">確保你已經安裝好了 <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® 和 npm</a>。</p><p translation-origin=\"off\">Make sure you have <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js® and npm installed</a>.</p>\n\n<p><a id=\"clone\"></a></p>\n<h2 id=\"clone\" translation-result=\"on\">複製<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#clone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">執行下列命令來執行<em>複製並啟動</em>步驟。</p><p translation-origin=\"off\">Perform the <em>clone-to-launch</em> steps with these terminal commands.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ngit clone https://github.com/angular/quickstart.git quickstart\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"download\"></a></p>\n<h2 id=\"download\" translation-result=\"on\">下載<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Download<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#download\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"下載《快速上手》種子庫\">下載《快速上手》種子</a> 並解壓到你的專案目錄中。然後執行下面的命令完成剩餘步驟。</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">Download the QuickStart seed</a> and unzip it into your project folder.\nThen perform the remaining steps with these terminal commands.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ncd quickstart\nnpm install\n\n</code-example>\n<p><a id=\"non-essential\"></a></p>\n<h2 id=\"delete-non-essential-files-optional\" translation-result=\"on\">刪除<em>非必需</em>檔案（可選）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Delete <em>non-essential</em> files (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以快速刪除一些涉及到測試和維護快速開始版本庫的 <em>非必需</em> 檔案（<strong><em>包括所有 git 相關的檔案</em></strong>如 <code>.git</code> 資料夾和 <code>.gitignore</code>！）。</p><p translation-origin=\"off\">You can quickly delete the <em>non-essential</em> files that concern testing and QuickStart repository maintenance (<strong><em>including all git-related artifacts</em></strong> such as the <code>.git</code> folder and <code>.gitignore</code>).</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">請只在開始時執行此刪除操作，以防你自己的測試和 git 檔案被意外刪除！。</p><p translation-origin=\"off\">Do this only in the beginning to avoid accidentally deleting your own tests and git setup.</p>\n\n</div>\n<p translation-result=\"on\">在專案目錄下開啟一個終端視窗，並根據你的作業系統執行以下命令：</p><p translation-origin=\"off\">Open a terminal window in the project folder and enter the following commands for your environment:</p>\n\n<h3 id=\"macos--mac-os-x-bash\">macOS / Mac OS X (bash)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#macos--mac-os-x-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nxargs rm -rf &lt; non-essential-files.osx.txt\nrm src/app/*.spec*.ts\nrm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example format=\"shell\" language=\"shell\">\n\nfor /f %i in (non-essential-files.txt) do del %i /F /S /Q\nrd .git /s /q\nrd e2e /s /q\n\n</code-example>\n<h2 id=\"update-dependency-versions\" translation-result=\"on\">更新依賴版本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#update-dependency-versions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Update dependency versions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#update-dependency-versions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">由於不推薦使用快速入門儲存庫（它已不再更新），所以你需要一些額外的步驟來使用最新的 Angular。</p><p translation-origin=\"off\">Since the quickstart repository is deprecated, it is no longer updated and you need some additional steps to use the latest Angular.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">刪除過時的 <code>@angular/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 套件（全都來自 <code>package.json &gt; dependencies</code> 和 <code>src/systemjs.config.js &gt; SystemJS.config() &gt; map</code>）。</p><p translation-origin=\"off\">Remove the obsolete <code>@angular/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package (both from <code>package.json &gt; dependencies</code> and <code>src/systemjs.config.js &gt; SystemJS.config() &gt; map</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過執行以下命令來安裝最新版本的 Angular 框架包：</p><p translation-origin=\"off\">Install the latest versions of the Angular framework packages by running:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save @angular/common@latest @angular/compiler@latest @angular/core@latest @angular/forms@latest @angular/platform-browser@latest @angular/platform-browser-dynamic@latest @angular/router@latest\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">透過執行以下命令安裝 Angular 用到的其它套件的最新版本（RxJS、TypeScript、Zone.js）：</p><p translation-origin=\"off\">Install the latest versions of other packages used by Angular (RxJS, TypeScript, Zone.js) by running:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save rxjs@latest zone.js@latest\nnpm install --save-dev typescript@latest\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">安裝 <code>systemjs-plugin-babel</code> 套件。稍後它將用於使用 SystemJS 載入 ES2015 格式的 Angular 框架檔案。</p><p translation-origin=\"off\">Install the <code>systemjs-plugin-babel</code> package.\nThis will later be used to load the Angular framework files, which are in ES2015 format, using SystemJS.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save systemjs-plugin-babel@latest\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">為了能正確載入最新的 Angular 框架套件（ES2015 格式），請替換 <code>src/systemjs.config.js</code> 中的相關條目：</p><p translation-origin=\"off\">In order to be able to load the latest Angular framework packages (in ES2015 format) correctly, replace the relevant entries in <code>src/systemjs.config.js</code>:</p>\n\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"angular-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    '@angular/core': 'npm:@angular/core/fesm2022/core.mjs',\n    '@angular/common': 'npm:@angular/common/fesm2022/common.mjs',\n    '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>': 'npm:@angular/common/fesm2022/http.mjs',\n    '@angular/compiler': 'npm:@angular/compiler/fesm2022/compiler.mjs',\n    '@angular/platform-browser': 'npm:@angular/platform-browser/fesm2022/platform-browser.mjs',\n    '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/fesm2022/platform-browser-dynamic.mjs',\n    '@angular/router': 'npm:@angular/router/fesm2022/router.mjs',\n    '@angular/router/upgrade': 'npm:@angular/router/fesm2022/upgrade.mjs',\n    '@angular/forms': 'npm:@angular/forms/fesm2022/forms.mjs',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">為了能夠正確載入最新的 RxJS 套件，請替換 <code>src/systemjs.config.js</code> 中的相關條目：</p><p translation-origin=\"off\">In order to be able to load the latest RxJS package correctly, replace the relevant entries in <code>src/systemjs.config.js</code>:</p>\n\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"rxjs-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'rxjs': 'npm:rxjs/dist/cjs',\n    'rxjs/operators': 'npm:rxjs/dist/cjs/operators',\n    /* . . . */\n  },\n  /* . . . */\n  packages: {\n    /* . . . */\n    'rxjs': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    'rxjs/operators': {\n      defaultExtension: 'js',\n      format: 'cjs',\n      main: 'index.js'\n    },\n    /* . . . */\n  }\n});\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">為了能夠載入 <code>tslib</code> 套件（這是由 TypeScript 轉譯後的檔案所必需的），請將以下條目新增到 <code>src/systemjs.config.js</code>：</p><p translation-origin=\"off\">In order to be able to load the <code>tslib</code> package (which is required for files transpiled by TypeScript), add the following entry to <code>src/systemjs.config.js</code>:</p>\n\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"tslib-paths\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'tslib': 'npm:tslib/tslib.js',\n    /* . . . */\n  },\n  /* . . . */\n});\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">為了使 SystemJS 能夠正確載入 ES2015 Angular 檔案，請將以下條目新增到 <code>src/systemjs.config.js</code>：</p><p translation-origin=\"off\">In order for SystemJS to be able to load the ES2015 Angular files correctly, add the following entries to <code>src/systemjs.config.js</code>:</p>\n\n<code-example format=\"javascript\" language=\"javascript\" path=\"upgrade-phonecat-2-hybrid/systemjs.config.1.js\" region=\"plugin-babel\">\nSystem.config({\n  /* . . . */\n  map: {\n    /* . . . */\n    'plugin-babel': 'npm:systemjs-plugin-babel/plugin-babel.js',\n    'systemjs-babel-build': 'npm:systemjs-plugin-babel/systemjs-babel-browser.js'\n  },\n\n  transpiler: 'plugin-babel',\n  /* . . . */\n  packages: {\n    /* . . . */\n    'meta': {\n      '*.mjs': {\n        babelOptions: {\n          es2015: false\n        }\n      }\n    }\n  }\n});\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">最後，為了防止依賴項的 TypeScript 型別檢查錯誤，請將以下條目新增到 <code>src/tsconfig.json</code>：</p><p translation-origin=\"off\">Finally, in order to prevent TypeScript typecheck errors for dependencies, add the following entry to <code>src/tsconfig.json</code>:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    // …\n  }\n}\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">有了這些，你現在就可以執行 <code>npm start</code> 並建構和啟動應用程式了。建構後，應用程式將自動在新的瀏覽器選項卡中開啟，並在你更改原始碼時自動重新載入。</p><p translation-origin=\"off\">With that, you can now run <code>npm start</code> and have the application built and served.\nOnce built, the application will be automatically opened in a new browser tab and it will be automatically reloaded when you make changes to the source code.</p>\n\n<p><a id=\"seed\"></a></p>\n<h2 id=\"whats-in-the-quickstart-seed\" translation-result=\"on\">《快速上手》種子庫裡都有什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's in the QuickStart seed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>《快速上手》種子</strong> 提供了一個基本的《快速上手》遊樂場應用，以及進行本地開發的其它必要檔案。所以，你電腦裡的專案目錄中有<em>更多檔案</em>，其中的大部分你都會<a href=\"guide/file-structure\">在稍後學到</a>。</p><p translation-origin=\"off\">The <strong>QuickStart seed</strong> provides a basic QuickStart playground application and other files necessary for local development.\nConsequently, there are many files in the project folder on your machine, most of which you can <a href=\"guide/file-structure\">learn about later</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>提醒</strong>：“快速上手”種子專案是在 Angular CLI 之前建立的，因此這裡講的會和 Angular CLI 建立的應用有一些差異。</p><p translation-origin=\"off\"><strong>Reminder:</strong> The \"QuickStart seed\" example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</p>\n\n</div>\n<p><a id=\"app-files\"></a></p>\n<p translation-result=\"on\">注意 <code>/src</code> 目錄中以下三個 TypeScript （<code>.ts</code>） 檔案：</p><p translation-origin=\"off\">Focus on the following three TypeScript (<code>.ts</code>) files in the <code>/src</code> folder.</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n  </div>\n</div>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: '&lt;h1&gt;Hello {{name}}&lt;/h1&gt;'\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">所有指南和烹飪書都至少有<em>這幾個核心檔案</em>。每個檔案都有獨特的用途，並且隨著應用的成長各自獨立演變。</p><p translation-origin=\"off\">All guides and cookbooks have <em>at least these core files</em>.\nEach file has a distinct purpose and evolves independently as the application grows.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目錄之外的檔案為建構、部署和測試 app 相關的檔案，他們只包括配置檔案和外部依賴。</p><p translation-origin=\"off\">Files outside <code>src/</code> concern building, deploying, and testing your application.\nThey include configuration files and external dependencies.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目錄下的檔案才“屬於”你的 app。除非明確指出，否則課程中新增的 TypeScript，HTML 和 CSS 檔案都在 <code>src/</code> 目錄下，大多數在 <code>src/app</code> 目錄中。</p><p translation-origin=\"off\">Files inside <code>src/</code> \"belong\" to your application.\nAdd new Typescript, HTML and CSS files inside the <code>src/</code> directory, most of them inside <code>src/app</code>, unless told to do otherwise.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目錄檔案詳情如下：</p><p translation-origin=\"off\">The following are all in <code>src/</code></p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">File</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">Purpose</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">app/app.component.ts</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義與《快速上手》遊樂場同樣的 <code>AppComponent</code>。它是<strong>根</strong>元件，隨著應用的演變，它將變成一顆巢狀(Nesting)元件樹。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the same <code>AppComponent</code> as the one in the QuickStart playground. It is the <strong>root</strong> component of what will become a tree of nested components as the application evolves.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">app/app.module.ts</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義 <code>AppModule</code>，<a href=\"guide/bootstrapping\" title=\"AppModule: 根模組\">根模組</a>為 Angular 描述如何組裝應用。目前，它只聲明瞭 <code>AppComponent</code>。不久，它將宣告更多元件。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines <code>AppModule</code>, the  <a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">root module</a> that tells Angular how to assemble the application. When initially created, it declares only the <code>AppComponent</code>. Over time, you add more components to declare.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">main.ts</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使<a href=\"guide/glossary#jit\">即時 （JIT） 編譯器</a>用編譯應用並且在瀏覽器中<a href=\"guide/bootstrapping\" title=\"啟動應用\">啟動</a>並執行應用。對於大多數專案的開發，這都是合理的選擇。而且它是在像 Stackblitz 這樣的<em>線上程式設計</em>環境中執行例子的唯一選擇。你將在本文件中學習其它編譯和開發選擇。</nt-wrapper><nt-wrapper translation-origin=\"off\">Compiles the application with the <a href=\"guide/glossary#jit\">JIT compiler</a> and <a href=\"guide/bootstrapping\">bootstraps</a> the application's main module (<code>AppModule</code>) to run in the browser. The JIT compiler is a reasonable choice during the development of most projects and it's the only viable choice for a sample running in a <em>live-coding</em> environment such as Stackblitz. Alternative <a href=\"guide/aot-compiler\">compilation</a>, <a href=\"guide/build\">build</a>, and <a href=\"guide/deployment\">deployment</a> options are available.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"appendix-test-using-fakeasyncwaitforasync\" translation-result=\"on\">附錄：使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 進行測試<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#附錄使用-fakeasyncwaitforasync-進行測試\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Appendix: Test using <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 或 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>()</code> 輔助函式來執行單元測試（詳情參閱<a href=\"guide/testing-components-scenarios#fake-async\">測試指南</a>），就要在測試的準備檔案中匯入 <code>zone.js/testing</code>。</p><p translation-origin=\"off\">If you use the <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> or <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> helper functions to run unit tests (for details, read the <a href=\"guide/testing-components-scenarios#fake-async\">Testing guide</a>), you need to import <code>zone.js/testing</code> in your test setup file.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果你是用 <code>Angular/CLI</code> 建立的專案，那麼它已經在 <code>src/test.ts</code> 中匯入過了。</p><p translation-origin=\"off\">If you create project with <code>Angular/CLI</code>, it is already imported in <code>src/test.ts</code>.</p>\n\n</div>\n<p translation-result=\"on\">在以前版本的 <code>Angular</code> 中，下列檔案曾被匯入或新增到 html 檔案中：</p><p translation-origin=\"off\">And in the earlier versions of <code>Angular</code>, the following files were imported or added in your html file:</p>\n\n<code-example format=\"html\" language=\"html\">\n\nimport 'zone.js/plugins/long-stack-trace-zone';\nimport 'zone.js/plugins/proxy';\nimport 'zone.js/plugins/sync-test';\nimport 'zone.js/plugins/jasmine-patch';\nimport 'zone.js/plugins/async-test';\nimport 'zone.js/plugins/fake-async-test';\n\n</code-example>\n<p translation-result=\"on\">你仍然可以分別匯入這些檔案，不過匯入順序很重要，你必須在 <code>sync-test</code>、<code>async-test</code>、<code>fake-async-test</code> 和 <code>jasmine-patch</code> 之前匯入 <code>proxy</code>。還要注意在 <code>jasmine-patch</code> 之前匯入 <code>sync-test</code>。所以，建議你只匯入 <code>zone-testing</code> 而不要分別載入那些檔案。</p><p translation-origin=\"off\">You can still load those files separately, but the order is important, you must import <code>proxy</code> before <code>sync-test</code>, <code>async-test</code>, <code>fake-async-test</code> and <code>jasmine-patch</code>.\nAnd you also need to import <code>sync-test</code> before <code>jasmine-patch</code>, so it is recommended to just import <code>zone-testing</code> instead of loading those separated files.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/http\n - api/core/Component\n - api/core/NgModule\n - api/core/testing/fakeAsync\n - api/core/testing/waitForAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/aot-compiler\n - guide/bootstrapping\n - guide/build\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/setup-local\n - guide/setup-local#prerequisites\n - guide/testing-components-scenarios#fake-async\n - guide/upgrade\n - guide/upgrade-performance\n - guide/upgrade-setup#appendix-test-using-fakeasyncwaitforasync\n - guide/upgrade-setup#clone\n - guide/upgrade-setup#delete-non-essential-files-optional\n - guide/upgrade-setup#download\n - guide/upgrade-setup#macos--mac-os-x-bash\n - guide/upgrade-setup#prerequisites\n - guide/upgrade-setup#setup-for-upgrading-from-angularjs\n - guide/upgrade-setup#update-dependency-versions\n - guide/upgrade-setup#whats-in-the-quickstart-seed\n - guide/upgrade-setup#windows\n - guide/upgrade-setup#下載\n - guide/upgrade-setup#複製\n - guide/upgrade-setup#準備從-angularjs-升級\n - guide/upgrade-setup#刪除非必需檔案可選\n - guide/upgrade-setup#前提條件\n - guide/upgrade-setup#快速上手種子庫裡都有什麼\n - guide/upgrade-setup#更新依賴版本\n - guide/upgrade-setup#附錄使用-fakeasyncwaitforasync-進行測試\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/upgrade-setup.md?message=docs%3A%20請簡述你的修改...\n-->"}