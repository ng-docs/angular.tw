{"id":"guide/lazy-loading-ngmodules","title":"Lazy-loading feature modules","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/lazy-loading-ngmodules.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"lazy-loading-feature-modules\" translation-result=\"on\">延遲載入特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Lazy-loading feature modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">預設情況下，NgModule 都是急性載入的。意思是它會在應用載入時儘快載入，所有模組都是如此，無論是否立即要用。對於帶有很多路由的大型應用，考慮使用延遲載入 —— 一種按需載入 NgModule 的模式。延遲載入可以減小初始套件的尺寸，從而減少載入時間。</p><p translation-origin=\"off\">By default, NgModules are eagerly loaded. This means that as soon as the application loads, so do all the NgModules, whether they are immediately necessary or not.\nFor large applications with lots of routes, consider lazy loading —a design pattern that loads NgModules as needed.\nLazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果需要本頁描述的具有兩個延遲載入模組的範例應用，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the final sample application with two lazy-loaded modules that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<p><a id=\"lazy-loading\"></a></p>\n<h2 id=\"lazy-loading-basics\" translation-result=\"on\">延遲載入入門<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-basics\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Lazy loading basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-basics\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節會介紹配置延遲載入路由的基本過程。\n想要一個分步的範例，參閱本頁的<a href=\"guide/lazy-loading-ngmodules#step-by-step\">分步設定</a>部分。</p><p translation-origin=\"off\">This section introduces the basic procedure for configuring a lazy-loaded route.\nFor a step-by-step example, see the <a href=\"guide/lazy-loading-ngmodules#step-by-step\">step-by-step setup</a> section on this page.</p>\n\n<p translation-result=\"on\">要延遲載入 Angular 模組，請在 <code>AppRoutingModule</code> <code>routes</code> 中使用 <code>loadChildren</code> 代替 <code>component</code> 進行配置，程式碼如下。</p><p translation-origin=\"off\">To lazy load Angular modules, use <code>loadChildren</code> (instead of <code>component</code>) in your <code>AppRoutingModule</code> <code>routes</code> configuration as follows.</p>\n\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'items',\n    loadChildren: () =&gt; import('./items/items.module').then(m =&gt; m.ItemsModule)\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">在延遲載入模組的路由模組中，新增一個指向該元件的路由。</p><p translation-origin=\"off\">In the lazy-loaded module's routing module, add a route for the component.</p>\n\n<code-example header=\"Routing module for lazy loaded module (excerpt)\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: ItemsComponent\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">還要確保從 <code>AppModule</code> 中移除了 <code>ItemsModule</code>。想要一個關於延遲載入模組的分步操作指南，請繼續檢視本頁的後續章節。</p><p translation-origin=\"off\">Also be sure to remove the <code>ItemsModule</code> from the <code>AppModule</code>.\nFor step-by-step instructions on lazy loading modules, continue with the following sections of this page.</p>\n\n<p><a id=\"step-by-step\"></a></p>\n<h2 id=\"step-by-step-setup\" translation-result=\"on\">分步設定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#step-by-step-setup\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Step-by-step setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#step-by-step-setup\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">建立延遲載入的特性模組需要兩個主要步驟：</p><p translation-origin=\"off\">Setting up a lazy-loaded feature module requires two main steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用 <code>--route</code> 標誌，用 Angular CLI 建立特性模組。</p><p translation-origin=\"off\">Create the feature module with the Angular CLI, using the <code>--route</code> flag.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">配置相關路由。</p><p translation-origin=\"off\">Configure the routes.</p>\n\n</li>\n</ol>\n<h3 id=\"set-up-an-application\" translation-result=\"on\">建立應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-application\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Set up an application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-application\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你還沒有應用，可以遵循下面的步驟使用 Angular CLI 建立一個。如果已經有了，可以直接跳到 <a href=\"guide/lazy-loading-ngmodules#config-routes\">配置路由</a>部分。</p><p translation-origin=\"off\">If you don't already have an application, follow the following steps to create one with the Angular CLI.\nIf you already have an application, skip to <a href=\"guide/lazy-loading-ngmodules#config-routes\">Configure the routes</a>.</p>\n\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p translation-result=\"on\">輸入下列命令，其中的 <code>customer-app</code> 表示你的應用名稱。</p><p translation-origin=\"off\">Enter the following command where <code>customer-app</code> is the name of your app:</p>\n\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<code-example format=\"shell\" language=\"shell\">\n\nng new customer-app --routing\n\n</code-example>\n<p translation-result=\"on\">這會建立一個名叫 <code>customer-app</code> 的應用，而 <code>--routing</code> 標識生成了一個名叫 <code>app-routing.module.ts</code> 的檔案.它是你建立延遲載入的特性模組時所必須的。輸入命令 <code>cd customer-app</code> 進入該專案。</p><p translation-origin=\"off\">This creates an application called <code>customer-app</code> and the <code>--routing</code> flag generates a file called <code>app-routing.module.ts</code>. This is one of the files you need for setting up lazy loading for your feature module.\nNavigate into the project by issuing the command <code>cd customer-app</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>--routing</code> 選項需要 Angular/CLI 8.1 或更高版本。請參閱<a href=\"guide/updating\">保持最新</a>。</p><p translation-origin=\"off\">The <code>--routing</code> option requires Angular CLI version 8.1 or higher.\nSee <a href=\"guide/updating\">Keeping Up to Date</a>.</p>\n\n</div>\n<h3 id=\"create-a-feature-module-with-routing\" translation-result=\"on\">建立一個帶路由的特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Create a feature module with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">接下來，你將需要一個包含路由的目標元件的特性模組。要建立它，在命令列工具中輸入如下命令，其中 <code>customers</code> 是特性模組的名稱。載入 <code>customers</code> 特性模組的路徑也是 <code>customers</code>，因為它是透過 <code>--route</code> 選項指定的：</p><p translation-origin=\"off\">Next, you need a feature module with a component to route to.\nTo make one, enter the following command in the command line tool, where <code>customers</code> is the name of the feature module.\nThe path for loading the <code>customers</code> feature modules is also <code>customers</code> because it is specified with the <code>--route</code> option:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module customers --route customers --module app.module\n\n</code-example>\n<p translation-result=\"on\">這將建立一個 <code>customers</code> 目錄，在其 <code>customers.module.ts</code> 檔案中定義了新的可延遲載入模組 <code>CustomersModule</code>。該命令會自動在新特性模組中宣告 <code>CustomersComponent</code>。</p><p translation-origin=\"off\">This creates a <code>customers</code> directory having the new lazy-loadable feature module <code>CustomersModule</code> defined in the <code>customers.module.ts</code> file and the routing module <code>CustomersRoutingModule</code> defined in the <code>customers-routing.module.ts</code> file.\nThe command automatically declares the <code>CustomersComponent</code> and imports <code>CustomersRoutingModule</code> inside the new feature module.</p>\n\n<p translation-result=\"on\">因為這個新模組想要延遲載入，所以該命令<strong>不會</strong>在應用的根模組 <code>app.module.ts</code> 中新增對新特性模組的參考。相反，它將宣告的路由 <code>customers</code> 新增到以 <code>--module</code> 選項指定的模組中宣告的 <code>routes</code> 陣列中。</p><p translation-origin=\"off\">Because the new module is meant to be lazy-loaded, the command does <strong>not</strong> add a reference to it in the application's root module file, <code>app.module.ts</code>.\nInstead, it adds the declared route, <code>customers</code> to the <code>routes</code> array declared in the module provided as the <code>--module</code> option.</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">注意，延遲載入語法使用 <code>loadChildren</code>，其後是一個使用瀏覽器內建的 <code>import('...')</code> 語法進行動態匯入的函式。其匯入路徑是到當前模組的相對路徑。</p><p translation-origin=\"off\">Notice that the lazy-loading syntax uses <code>loadChildren</code> followed by a function that uses the browser's built-in <code>import('...')</code> syntax for dynamic imports.\nThe import path is the relative path to the module.</p>\n\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">基於字串的延遲載入</header><header ng-should-translate=\"\" translation-origin=\"off\">String-based lazy loading</header>\n\n<p translation-result=\"on\">在 Angular 版本 8 中，<code>loadChildren</code> 路由規範的字串語法<a href=\"guide/deprecations#loadchildren-string-syntax\">已棄用</a>，建議改用 <code>import()</code> 語法。你可以透過在 <code>tsconfig</code> 檔案中包含延遲載入的路由來選擇使用基於字串的延遲載入（<code>loadChildren: './path/to/module#Module'</code>），這樣它就會在編譯時包含延遲載入的檔案。</p><p translation-origin=\"off\">In Angular version 8, the string syntax for the <code>loadChildren</code> route specification <a href=\"guide/deprecations#loadchildren-string-syntax\">was deprecated</a> in favor of the <code>import()</code> syntax.\nYou can opt into using string-based lazy loading (<code>loadChildren: './path/to/module#Module'</code>) by including the lazy-loaded routes in your <code>tsconfig</code> file, which includes the lazy-loaded files in the compilation.</p>\n\n<p translation-result=\"on\">預設情況下，會用 Angular CLI 產生專案，這些專案將更嚴格地包含旨在與 <code>import()</code> 語法一起使用的檔案。</p><p translation-origin=\"off\">By default the Angular CLI generates projects with stricter file inclusions intended to be used with the <code>import()</code> syntax.</p>\n\n</div>\n<h3 id=\"add-another-feature-module\" translation-result=\"on\">新增另一個特性模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add another feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用同樣的命令建立第二個帶路由的延遲載入特性模組及其樁元件。</p><p translation-origin=\"off\">Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module orders --route orders --module app.module\n\n</code-example>\n<p translation-result=\"on\">這將建立一個名為 <code>orders</code> 的新目錄，其中包含 <code>OrdersModule</code> 和 <code>OrdersRoutingModule</code> 以及新的 <code>OrdersComponent</code> 原始檔。使用 <code>--route</code> 選項指定的 <code>orders</code> 路由，用延遲載入語法新增到了 <code>app-routing.module.ts</code> 檔案內的 <code>routes</code> 陣列中。</p><p translation-origin=\"off\">This creates a new directory called <code>orders</code> containing the <code>OrdersModule</code> and <code>OrdersRoutingModule</code>, along with the new <code>OrdersComponent</code> source files.\nThe <code>orders</code> route, specified with the <code>--route</code> option, is added to the <code>routes</code> array inside the <code>app-routing.module.ts</code> file, using the lazy-loading syntax.</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"routes-customers-orders\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  }\n];\n\n</code-example>\n<h3 id=\"set-up-the-ui\" translation-result=\"on\">建立 UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Set up the UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">雖然你也可以在位址列中輸入 URL，不過導航 UI 會更好用，也更常見。把 <code>app.component.html</code> 中的佔位指令碼替換成一個自訂的導航，以便你在瀏覽器中能在模組之間導航。</p><p translation-origin=\"off\">Though you can type the URL into the address bar, a navigation UI is straightforward for the user and more common.\nReplace the default placeholder markup in <code>app.component.html</code> with a custom nav, so you can navigate to your modules in the browser:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\">\n&lt;h1&gt;\n  {{title}}\n&lt;/h1&gt;\n\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\"&gt;Customers&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\"&gt;Orders&lt;/button&gt;\n&lt;button type=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\"&gt;Home&lt;/button&gt;\n\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n\n\n</code-example>\n<p translation-result=\"on\">要想在瀏覽器中看到你的應用，就在命令列工具視窗中輸入下列命令：</p><p translation-origin=\"off\">To see your application in the browser so far, enter the following command in the command line tool window:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng serve\n\n</code-example>\n<!-- vale Angular.Google_WordListWarnings = NO -->\n<p translation-result=\"on\">然後，跳轉到 <code>localhost:4200</code>，這時你應該看到 \"customer-app\" 和三個按鈕。</p><p translation-origin=\"off\">Then go to <code>localhost:4200</code> where you should see \"customer-app\" and three buttons.</p>\n\n<!-- vale Angular.Google_WordListWarnings = YES -->\n<div class=\"lightbox\">\n<img alt=\"three buttons in the browser\" src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\">\n</div>\n<p translation-result=\"on\">這些按鈕生效了，因為 Angular CLI 會自動將特性模組的路由新增到 <code>app-routing.module.ts</code> 中的 <code>routes</code> 陣列中。</p><p translation-origin=\"off\">These buttons work, because the Angular CLI automatically added the routes to the feature modules to the <code>routes</code> array in <code>app-routing.module.ts</code>.</p>\n\n<p><a id=\"config-routes\"></a></p>\n<h3 id=\"imports-and-route-configuration\" translation-result=\"on\">匯入與路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Imports and route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular CLI 會將每個特性模組自動新增到應用級的路由對映表中。透過新增預設路由來最終完成這些步驟。在 <code>app-routing.module.ts</code> 檔案中，使用如下命令更新 <code>routes</code> 陣列：</p><p translation-origin=\"off\">The Angular CLI automatically added each feature module to the routes map at the application level.\nFinish this off by adding the default route.\nIn the <code>app-routing.module.ts</code> file, update the <code>routes</code> array with the following:</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" id=\"app-routing.module.ts\" region=\"const-routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: () =&gt; import('./customers/customers.module').then(m =&gt; m.CustomersModule)\n  },\n  {\n    path: 'orders',\n    loadChildren: () =&gt; import('./orders/orders.module').then(m =&gt; m.OrdersModule)\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">前兩個路徑是到 <code>CustomersModule</code> 和 <code>OrdersModule</code> 的路由。最後一個條目則定義了預設路由。空路徑匹配所有不匹配先前路徑的內容。</p><p translation-origin=\"off\">The first two paths are the routes to the <code>CustomersModule</code> and the <code>OrdersModule</code>.\nThe final entry defines a default route.\nThe empty path matches everything that doesn't match an earlier path.</p>\n\n<h3 id=\"inside-the-feature-module\" translation-result=\"on\">特性模組內部<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Inside the feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">接下來，仔細看看 <code>customers.module.ts</code> 檔案。如果你使用的是 Angular CLI，並按照此頁面中的步驟進行操作，則無需在此處執行任何操作。</p><p translation-origin=\"off\">Next, take a look at the <code>customers.module.ts</code> file.\nIf you're using the Angular CLI and following the steps outlined in this page, you don't have to do anything here.</p>\n\n<code-example header=\"src/app/customers/customers.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" id=\"customers.module.ts\" region=\"customers-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersComponent } from './customers.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomersComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p translation-result=\"on\"><code>customers.module.ts</code> 檔案匯入了 <code>customers-routing.module.ts</code> 和 <code>customers.component.ts</code> 檔案。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 陣列中列出了 <code>CustomersRoutingModule</code>，讓 <code>CustomersModule</code> 可以存取它自己的路由模組。<code>CustomersComponent</code> 位於 <code>declarations</code> 陣列中，這意味著 <code>CustomersComponent</code> 屬於 <code>CustomersModule</code>。</p><p translation-origin=\"off\">The <code>customers.module.ts</code> file imports the <code>customers-routing.module.ts</code> and <code>customers.component.ts</code> files.\n<code>CustomersRoutingModule</code> is listed in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array giving <code>CustomersModule</code> access to its own routing module.\n<code>CustomersComponent</code> is in the <code>declarations</code> array, which means <code>CustomersComponent</code> belongs to the <code>CustomersModule</code>.</p>\n\n<p translation-result=\"on\">然後，<code>app-routing.module.ts</code> 會使用 JavaScript 的動態匯入功能來匯入特性模組 <code>customers.module.ts</code>。</p><p translation-origin=\"off\">The <code>app-routing.module.ts</code> then imports the feature module, <code>customers.module.ts</code> using JavaScript's dynamic import.</p>\n\n<p translation-result=\"on\">專屬於特性模組的路由定義檔案 <code>customers-routing.module.ts</code> 將匯入在 <code>customers.component.ts</code> 檔案中定義的自有特性元件，以及其它 JavaScript 匯入陳述式。然後將空路徑對映到 <code>CustomersComponent</code>。</p><p translation-origin=\"off\">The feature-specific route definition file <code>customers-routing.module.ts</code> imports its own feature component defined in the <code>customers.component.ts</code> file, along with the other JavaScript import statements.\nIt then maps the empty path to the <code>CustomersComponent</code>.</p>\n\n<code-example header=\"src/app/customers/customers-routing.module.ts\" path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" id=\"customers-routing.module.ts\" region=\"customers-routing-module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomersComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p translation-result=\"on\">這裡的 <code>path</code> 設定為空字串，因為 <code>AppRoutingModule</code> 中的路徑已經設定為 <code>customers</code>，因此，<code>CustomersRoutingModule</code> 中的此路由已經位於 <code>customers</code> 這個上下文中。此路由模組中的每個路由都是其子路由。</p><p translation-origin=\"off\">The <code>path</code> here is set to an empty string because the path in <code>AppRoutingModule</code> is already set to <code>customers</code>, so this route in the <code>CustomersRoutingModule</code>, is already within the <code>customers</code> context.\nEvery route in this routing module is a child route.</p>\n\n<p translation-result=\"on\">另一個特性模組中路由模組的配置也類似。</p><p translation-origin=\"off\">The other feature module's routing module is configured similarly.</p>\n\n<code-example header=\"src/app/orders/orders-routing.module.ts (excerpt)\" path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" id=\"orders-routing.module.ts\" region=\"orders-routing-module-detail\">\nimport { OrdersComponent } from './orders.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrdersComponent\n  }\n];\n\n</code-example>\n<h3 id=\"verify-lazy-loading\" translation-result=\"on\">確認它工作正常<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#verify-lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Verify lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#verify-lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可以使用 Chrome 開發者工具來驗證一下這些模組真的是延遲載入的。在 Chrome 中，按 <code>Cmd+Option+i</code>（Mac）或 <code>Ctrl+Shift+j</code>（PC），並選中 <code>Network</code> 頁標籤。</p><p translation-origin=\"off\">You can verify that a module is indeed being lazy loaded with the Chrome developer tools.\nIn Chrome, open the developer tools by pressing <code>Cmd+Option+i</code> on a Mac or <code>Ctrl+Shift+j</code> on a PC and go to the Network Tab.</p>\n\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\">\n</div>\n<p translation-result=\"on\">點選 Orders 或 Customers 按鈕。如果你看到某個 chunk 檔案出現了，就表示一切就緒，特性模組被延遲載入成功了。Orders 和 Customers 都應該出現一次 chunk，並且它們各自只應該出現一次。</p><p translation-origin=\"off\">Click on the Orders or Customers button.\nIf you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded.\nA chunk should appear for Orders and for Customers but only appears once for each.</p>\n\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\">\n</div>\n<p translation-result=\"on\">要想再次檢視它或測試修改後的行為，只要點選 Network 頁左上放的 <code>清除</code> 圖示即可。</p><p translation-origin=\"off\">To see it again, or to test after making changes, click the circle with a line through it in the upper left of the Network Tab:</p>\n\n<div class=\"lightbox\">\n<img alt=\"lazy loaded modules diagram\" src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\">\n</div>\n<p translation-result=\"on\">然後，使用 <code>Cmd+r</code>（Mac）或 <code>Ctrl+r</code>（PC）重新載入頁面。</p><p translation-origin=\"off\">Then reload with <code>Cmd+r</code> or <code>Ctrl+r</code>, depending on your platform.</p>\n\n<h2 id=\"forroot-and-forchild\" translation-result=\"on\"><code>forRoot()</code> 與 <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\"><code>forRoot()</code> and <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能已經注意到了，Angular CLI 會把 <code>RouterModule.forRoot(routes)</code> 新增到 <code>AppRoutingModule</code> 的 <code>imports</code> 陣列中。這會讓 Angular 知道 <code>AppRoutingModule</code> 是一個路由模組，而 <code>forRoot()</code> 表示這是一個根路由模組。它會配置你傳入的所有路由、讓你能存取路由器指令並註冊 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。<code>forRoot()</code> 在應用中只應該使用一次，也就是這個 <code>AppRoutingModule</code> 中。</p><p translation-origin=\"off\">You might have noticed that the Angular CLI adds <code>RouterModule.forRoot(routes)</code> to the <code>AppRoutingModule</code> <code>imports</code> array.\nThis lets Angular know that the <code>AppRoutingModule</code> is a routing module and <code>forRoot()</code> specifies that this is the root routing module.\nIt configures all the routes you pass to it, gives you access to the router directives, and registers the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> service.\nUse <code>forRoot()</code> only once in the application, inside the <code>AppRoutingModule</code>.</p>\n\n<p translation-result=\"on\">Angular CLI 還會把 <code>RouterModule.forChild(routes)</code> 新增到各個特性模組中。這種方式下 Angular 就會知道這個路由列表只負責提供額外的路由並且其設計意圖是作為特性模組使用。你可以在多個模組中使用 <code>forChild()</code>。</p><p translation-origin=\"off\">The Angular CLI also adds <code>RouterModule.forChild(routes)</code> to feature routing modules.\nThis way, Angular knows that the route list is only responsible for providing extra routes and is intended for feature modules.\nYou can use <code>forChild()</code> in multiple modules.</p>\n\n<p translation-result=\"on\"><code>forRoot()</code> 方法為路由器管理<em>全域性的</em>注入器配置。<code>forChild()</code> 方法中沒有注入器配置，只有像 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 這樣的指令。欲知詳情，參閱<a href=\"guide/singleton-services\">單例服務</a>章的 <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> 模式</a>小節。</p><p translation-origin=\"off\">The <code>forRoot()</code> method takes care of the <em>global</em> injector configuration for the Router.\nThe <code>forChild()</code> method has no injector configuration.\nIt uses directives such as <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> and <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.\nFor more information, see the <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> pattern</a> section of the <a href=\"guide/singleton-services\">Singleton Services</a> guide.</p>\n\n<p><a id=\"preloading\"></a></p>\n<h2 id=\"preloading\" translation-result=\"on\">預載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Preloading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">預載入透過在後台載入部分應用來改進使用者體驗。你可以預載入模組、獨立元件或元件資料。</p><p translation-origin=\"off\">Preloading improves UX by loading parts of your application in the background.\nYou can preload modules, standalone components or component data. </p>\n\n<h3 id=\"preloading-modules-and-standalone-components\" translation-result=\"on\">預載入模組和預載入獨立元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Preloading modules and standalone components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">預載入模組和預載入獨立元件透過在後台載入部分應用來改善使用者體驗。這樣一來，使用者在啟用路由時就無需等待下載這些元素。</p><p translation-origin=\"off\">Preloading modules and standalone components improves UX by loading parts of your application in the background. By doing this, users don't have to wait for the elements to download when they activate a route.</p>\n\n<p translation-result=\"on\">要啟用所有延遲載入模組和獨立元件的預載入，請從 Angular <code>router</code> 匯入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌。</p><p translation-origin=\"off\">To enable preloading of all lazy loaded modules and standalone components, import the <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> token from the Angular <code>router</code>.</p>\n\n<h3 id=\"module-based-application\" translation-result=\"on\">基於模組的應用程式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#module-based-application\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Module based application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#module-based-application\"><i class=\"material-icons\">link</i></a></h3>\n\n<p>要啟用所有延遲載入模組的預載入，請從 Angular 的 <code>router</code> 匯入 <code><a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a></code> 令牌。</p>\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nimport { <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a> } from '@angular/router';\n\n</code-example>\n<p translation-result=\"on\">還是在 <code>AppRoutingModule</code> 中，透過 <code>forRoot()</code> 指定你的預載入策略。</p><p translation-origin=\"off\">Still in the <code>AppRoutingModule</code>, specify your preloading strategy in <code>forRoot()</code>.</p>\n\n<code-example header=\"AppRoutingModule (excerpt)\">\n\nRouterModule.forRoot(\n  appRoutes,\n  {\n    preloadingStrategy: <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>\n  }\n)\n\n</code-example>\n<h3 id=\"standalone-application\" translation-result=\"on\">獨立應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#standalone-application\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Standalone application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#standalone-application\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">對於獨立應用程式，請透過將 <code><a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a></code> 新增到 <code>app.config.ts</code> 檔案中的 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 的<code><a href=\"api/router/RouterFeatures\" class=\"code-anchor\">RouterFeatures</a></code> 引數中來配置預載入策略。</p><p translation-origin=\"off\">For standalone applications configure preloading strategies by adding <code><a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a></code> to  <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code>s RouterFeatures in <code>app.config.ts</code></p>\n\n<code-example header=\"`app.config.ts`\">\n\nimport { <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> } from '@angular/core';\nimport {\n  <a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>,\n  <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>\n  <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>,\n} from '@angular/router';\n\nimport { routes } from './app.routes';\n\nexport const appConfig: <a href=\"api/core/ApplicationConfig\" class=\"code-anchor\">ApplicationConfig</a> = {\n  providers: [\n    <a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a>(\n      routes,\n      <a href=\"api/router/withPreloading\" class=\"code-anchor\">withPreloading</a>(<a href=\"api/router/PreloadAllModules\" class=\"code-anchor\">PreloadAllModules</a>)\n    ),\n  ],\n};\n\n</code-example>\n<h3 id=\"preloading-component-data\" translation-result=\"on\">預載入元件資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-component-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Preloading component data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#preloading-component-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要預載入元件資料，可以用 <code>resolver</code> 守衛。解析器透過阻止頁面載入來改進使用者體驗，直到顯示頁面時的全部必要資料都可用。</p><p translation-origin=\"off\">To preload component data, use a <code>resolver</code>.\nResolvers improve UX by blocking the page load until all necessary data is available to fully display the page.</p>\n\n<h4 id=\"resolvers\" translation-result=\"on\">解析器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#resolvers\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Resolvers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#resolvers\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">建立一個解析器服務。透過 Angular CLI，建立服務的命令如下：</p><p translation-origin=\"off\">Create a resolver service.\nWith the Angular CLI, the command to create a service is as follows:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service &lt;service-name&gt;\n\n</code-example>\n<p translation-result=\"on\">在新建立的服務中，實現由 <code>@angular/router</code> 套件提供的 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 介面：</p><p translation-origin=\"off\">In the newly created service, implement the <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> interface provided by the <code>@angular/router</code> package:</p>\n\n<code-example header=\"Resolver service (excerpt)\">\n\nimport { <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a> } from '@angular/router';\n\n…\n\n/* An interface that represents your data model */\nexport interface Crisis {\n  id: number;\n  name: string;\n}\n\nexport class CrisisDetailResolverService implements <a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;Crisis&gt; {\n  resolve(route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {\n    // your logic goes here\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">把這個解析器匯入此模組的路由模組。</p><p translation-origin=\"off\">Import this resolver into your module's routing module.</p>\n\n<code-example header=\"Feature module's routing module (excerpt)\">\n\nimport { CrisisDetailResolverService } from './crisis-detail-resolver.service';\n\n</code-example>\n<p translation-result=\"on\">在元件的 <code>route</code> 配置中新增一個 <code>resolve</code> 物件。</p><p translation-origin=\"off\">Add a <code>resolve</code> object to the component's <code>route</code> configuration.</p>\n\n<code-example header=\"Feature module's routing module (excerpt)\">\n\n{\n  path: '/your-path',\n  component: YourComponent,\n  resolve: {\n    crisis: CrisisDetailResolverService\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">在此元件的建構函式中，注入一個 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 例項，它可以表示當前路由。</p><p translation-origin=\"off\">In the component's constructor, inject an instance of the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> class that represents the current route.</p>\n\n<code-example header=\"Component's constructor (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n}\n\n</code-example>\n<p translation-result=\"on\">使用注入進來的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 類例項來存取與指定路由關聯的 <code>data</code> 值。</p><p translation-origin=\"off\">Use the injected instance of the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> class to access <code>data</code> associated with a given route.</p>\n\n<code-example header=\"Component's ngOnInit lifecycle hook (excerpt)\">\n\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({ … })\nclass YourComponent {\n  constructor(private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>) {}\n\n  ngOnInit() {\n    this.route.data\n      .subscribe(data =&gt; {\n        const crisis: Crisis = data.crisis;\n        // …\n      });\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">關於工作範例的更多資訊，請參閱<a href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\">路由課程的預載入部分</a>。</p><p translation-origin=\"off\">For more information with a working example, see the <a href=\"guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\">routing tutorial section on preloading</a>.</p>\n\n<h2 id=\"troubleshooting-lazy-loading-modules\" translation-result=\"on\">對延遲載入模組進行故障排除<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Troubleshooting lazy-loading modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">延遲載入模組時常見的錯誤之一，就是在應用程式中的多個位置匯入通用模組。可以先用 Angular CLI 產生模組幷包括 <code>--route route-name</code> 引數，來測試這種情況，其中 <code>route-name</code> 是模組的名稱。接下來，建立不帶 <code>--route</code> 引數的模組。如果你呼叫 <code>ng generate module</code> 時帶上了 <code>--route</code> 引數，就會返回一個錯誤，否則它便可以正確執行，這樣一來你就可能會在多個位置匯入相同的模組。</p><p translation-origin=\"off\">A common error when lazy-loading modules is importing common modules in multiple places within an application.\nTest for this condition by first generating the module using the Angular CLI and including the <code>--route route-name</code> parameter, where <code>route-name</code> is the name of your module.\nNext, create the module without the <code>--route</code> parameter.\nIf <code>ng generate module</code> with the <code>--route</code> parameter returns an error, but runs correctly without it, you might have imported the same module in multiple places.</p>\n\n<p translation-result=\"on\">請記住，許多常見的 Angular 模組都應該匯入應用的基礎模組中。</p><p translation-origin=\"off\">Remember, many common Angular modules should be imported at the base of your application.</p>\n\n<p translation-result=\"on\">有關 Angular 模組的更多資訊，請參見 <a href=\"guide/ngmodules\">NgModules</a>。</p><p translation-origin=\"off\">For more information on Angular Modules, see <a href=\"guide/ngmodules\">NgModules</a>.</p>\n\n<h2 id=\"more-on-ngmodules-and-routing\" translation-result=\"on\">更多關於 NgModule 和路由的知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on NgModules and routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You might also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/router\">路由與導航</a></p><p translation-origin=\"off\"><a href=\"guide/router\">Routing and Navigation</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/providers\">服務提供者</a></p><p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/module-types\">特性模組的分類</a></p><p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://web.dev/route-level-code-splitting-in-angular/\">Angular 中的路由級程式碼拆分</a></p><p translation-origin=\"off\"><a href=\"https://web.dev/route-level-code-splitting-in-angular\">Route-level code-splitting in Angular</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://web.dev/route-preloading-in-angular/\">Angular 中的路由預載入策略</a></p><p translation-origin=\"off\"><a href=\"https://web.dev/route-preloading-in-angular\">Route preloading strategies in Angular</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：5/7/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/router\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/ApplicationConfig\n - api/core/Component\n - api/core/NgModule\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/PreloadAllModules\n - api/router/Resolve\n - api/router/Router\n - api/router/RouterFeatures\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/provideRouter\n - api/router/withPreloading\n - guide/deprecations#loadchildren-string-syntax\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#forroot-與-forchild\n - guide/lazy-loading-ngmodules#imports-and-route-configuration\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-basics\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#module-based-application\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#preloading\n - guide/lazy-loading-ngmodules#preloading-component-data\n - guide/lazy-loading-ngmodules#preloading-modules-and-standalone-components\n - guide/lazy-loading-ngmodules#resolvers\n - guide/lazy-loading-ngmodules#set-up-an-application\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/lazy-loading-ngmodules#standalone-application\n - guide/lazy-loading-ngmodules#step-by-step\n - guide/lazy-loading-ngmodules#step-by-step-setup\n - guide/lazy-loading-ngmodules#troubleshooting-lazy-loading-modules\n - guide/lazy-loading-ngmodules#verify-lazy-loading\n - guide/lazy-loading-ngmodules#分步設定\n - guide/lazy-loading-ngmodules#建立一個帶路由的特性模組\n - guide/lazy-loading-ngmodules#基於模組的應用程式\n - guide/lazy-loading-ngmodules#對延遲載入模組進行故障排除\n - guide/lazy-loading-ngmodules#匯入與路由配置\n - guide/lazy-loading-ngmodules#建立-ui\n - guide/lazy-loading-ngmodules#建立應用\n - guide/lazy-loading-ngmodules#延遲載入入門\n - guide/lazy-loading-ngmodules#延遲載入特性模組\n - guide/lazy-loading-ngmodules#更多關於-ngmodule-和路由的知識\n - guide/lazy-loading-ngmodules#新增另一個特性模組\n - guide/lazy-loading-ngmodules#特性模組內部\n - guide/lazy-loading-ngmodules#獨立應用\n - guide/lazy-loading-ngmodules#確認它工作正常\n - guide/lazy-loading-ngmodules#解析器\n - guide/lazy-loading-ngmodules#預載入\n - guide/lazy-loading-ngmodules#預載入模組和預載入獨立元件\n - guide/lazy-loading-ngmodules#預載入元件資料\n - guide/module-types\n - guide/ngmodules\n - guide/providers\n - guide/router\n - guide/router-tutorial-toh#preloading-background-loading-of-feature-areas\n - guide/singleton-services\n - guide/singleton-services#forRoot\n - guide/updating\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/lazy-loading-ngmodules.md?message=docs%3A%20請簡述你的修改...\n - https://web.dev/route-level-code-splitting-in-angular\n - https://web.dev/route-level-code-splitting-in-angular/\n - https://web.dev/route-preloading-in-angular\n - https://web.dev/route-preloading-in-angular/\n-->"}