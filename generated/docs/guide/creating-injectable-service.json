{"id":"guide/creating-injectable-service","title":"Creating an injectable service","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/creating-injectable-service.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"creating-an-injectable-service\" translation-result=\"on\">建立可注入服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Creating an injectable service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">服務是一個很寬泛的類別，它包含應用程式需要的任何值、功能或特性。服務通常是具有狹窄、明確定義的目標的類別。元件是一種可以使用 DI 的類別。</p><p translation-origin=\"off\">Service is a broad category encompassing any value, function, or feature that an application needs. A service is typically a class with a narrow, well-defined purpose. A component is one type of class that can use DI.</p>\n\n<p translation-result=\"on\">Angular 將元件與服務區分開來，是為了提高模組化程度和可複用性。透過將元件中與檢視相關的特性與其他型別的處理分離開，可以讓你的元件類更加精簡高效。</p><p translation-origin=\"off\">Angular distinguishes components from services to increase modularity and reusability. By separating a component's view-related features from other kinds of processing, you can make your component classes lean and efficient.</p>\n\n<p translation-result=\"on\">理想情況下，元件的工作就是提供使用者體驗，並無其它職責。元件應該表達用於資料繫結的屬性和方法，以在檢視（由範本渲染）和應用邏輯（通常包括某個模型的一些概念）之間進行居中協調。</p><p translation-origin=\"off\">Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a model).</p>\n\n<p translation-result=\"on\">元件可以將某些任務委託給服務，例如從伺服器獲取資料、驗證使用者輸入或直接把日誌記錄到控制檯。透過在可注入服務類中定義這樣的處理任務，你可以讓這些任務可用於任何元件。你還可以透過在不同的情況下注入同一個服務的不同提供者來讓你的應用程式適應更多場景。</p><p translation-origin=\"off\">A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an injectable service class, you make those tasks available to any component. You can also make your application more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</p>\n\n<p translation-result=\"on\">Angular 不會強制執行這些原則。Angular 只是讓你可以輕鬆地將應用邏輯分解為服務，並透過 DI 讓這些服務可用在元件中，從而幫助你遵循這些原則。</p><p translation-origin=\"off\">Angular does not enforce these principles. Angular helps you follow these principles by making it easy to factor your application logic into services and make those services available to components through DI.</p>\n\n<h2 id=\"service-examples\" translation-result=\"on\">服務範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#service-examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Service examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是一個服務類別的範例，用於把日誌記錄到瀏覽器的控制檯：。</p><p translation-origin=\"off\">Here's an example of a service class that logs to the browser console.</p>\n\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p translation-result=\"on\">服務也可以依賴其它服務。比如，這裡的 <code>HeroService</code> 就依賴於 <code>Logger</code> 服務，它還用 <code>BackendService</code> 來獲取英雄資料。<code>BackendService</code> 還可能再轉而依賴 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務來從伺服器非同步獲取英雄列表。</p><p translation-origin=\"off\">Services can depend on other services.\nFor example, here's a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes.\nThat service in turn might depend on the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service to fetch heroes asynchronously from a server.</p>\n\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"creating-an-injectable-service-1\" translation-result=\"on\">建立可注入的服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service-1\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Creating an injectable service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#creating-an-injectable-service-1\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 提供了一個命令來建立新服務。在以下範例中，你會為應用程式新增新服務，該應用是之前使用 <code>ng new</code> 命令建立的。</p><p translation-origin=\"off\">Angular CLI provides a command to create a new service. In the following example, you add a new service to your application, which was created earlier with the <code>ng new</code> command. </p>\n\n<p translation-result=\"on\">要在 <code>src/app/heroes</code> 資料夾中產生新的 <code>HeroService</code> 類，請按照以下步驟操作：</p><p translation-origin=\"off\">To generate a new <code>HeroService</code> class in the <code>src/app/heroes</code> folder, follow these steps: </p>\n\n<ol>\n<li>\n<p translation-result=\"on\">執行此 <a href=\"cli\">Angular CLI</a> 命令：</p><p translation-origin=\"off\">Run this <a href=\"cli\">Angular CLI</a> command:</p>\n\n</li>\n</ol>\n<code-example language=\"sh\">\nng generate service heroes/hero\n</code-example>\n<p translation-result=\"on\">下列命令會建立預設的 <code>HeroService</code>。</p><p translation-origin=\"off\">This command creates the following default <code>HeroService</code>.</p>\n\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.0.ts\" header=\"src/app/heroes/hero.service.ts (CLI-generated)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器指出 Angular 可以在 DI 體系中使用此類別。元資料 <code>providedIn: 'root'</code> 表示 <code>HeroService</code> 在整個應用程式中都是可見的。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator specifies that Angular can use this class in the DI system.\nThe metadata, <code>providedIn: 'root'</code>, means that the <code>HeroService</code> is visible throughout the application.</p>\n\n<ol start=\"2\">\n<li>\n<p translation-result=\"on\">新增一個 <code>getHeroes()</code> 方法，該方法會返回來自 <code>mock.heroes.ts</code> 的英雄列表，以獲取英雄的模擬資料：</p><p translation-origin=\"off\">Add a <code>getHeroes()</code> method that returns the heroes from <code>mock.heroes.ts</code> to get the hero mock data:</p>\n\n</li>\n</ol>\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.3.ts\" header=\"src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-example>\n<p translation-result=\"on\">為了清晰和可維護性，建議你在單獨的檔案中定義元件和服務。</p><p translation-origin=\"off\">For clarity and maintainability, it is recommended that you define components and services in separate files.</p>\n\n<h2 id=\"injecting-services\" translation-result=\"on\">注入服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Injecting services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要將服務作為依賴項注入到元件中，你可以使用元件的 <code>constructor()</code>，併為建構函式新增一個該依賴型別的引數。以下範例會在 <code>HeroListComponent</code> 建構函式中指定 <code>HeroService</code>。這裡 <code>heroService</code> 的型別是 <code>HeroService</code>。Angular 會將 <code>HeroService</code> 識別為依賴項，因為該類以前用 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 裝飾器標記過。</p><p translation-origin=\"off\">To inject a service as a dependency into a component, you can use component's <code>constructor()</code> and supply a constructor argument with the dependency type. The following example specifies the <code>HeroService</code> in the <code>HeroListComponent</code> constructor. The type of the <code>heroService</code> is <code>HeroService</code>. Angular recognizes the <code>HeroService</code> as a dependency, since that class was previously annotated with the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator.</p>\n\n<code-example header=\"src/app/heroes/hero-list.component (constructor signature)\" path=\"dependency-injection/src/app/heroes/hero-list.component.ts\" region=\"ctor-signature\">\nconstructor(heroService: HeroService)\n\n</code-example>\n<h2 id=\"injecting-services-in-other-services\" translation-result=\"on\">在其他服務中注入服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Injecting services in other services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#injecting-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當某個服務依賴於另一個服務時，請遵循與注入元件相同的模式。在這裡，<code>HeroService</code> 要依靠 <code>Logger</code> 服務來報告其活動。</p><p translation-origin=\"off\">When a service depends on another service, follow the same pattern as injecting into a component.\nIn the following example <code>HeroService</code> depends on a <code>Logger</code> service to report its activities.</p>\n\n<p translation-result=\"on\">首先，匯入 <code>Logger</code> 服務。接下來，透過指定 <code>private logger: Logger</code>，在 <code>HeroService</code> 的 <code>constructor()</code> 中注入 <code>Logger</code> 服務。</p><p translation-origin=\"off\">First, import the <code>Logger</code> service. Next, inject the <code>Logger</code> service in the <code>HeroService</code> <code>constructor()</code> by specifying <code>private logger: Logger</code>.</p>\n\n<p translation-result=\"on\">在這裡，<code>constructor()</code> 指定了 <code>Logger</code> 的型別，並把 <code>Logger</code> 的例項儲存在名叫 <code>logger</code> 的私有欄位中。</p><p translation-origin=\"off\">Here, the <code>constructor()</code> specifies a type of <code>Logger</code> and stores the instance of <code>Logger</code> in a private field called <code>logger</code>.</p>\n\n<p translation-result=\"on\">下列程式碼具有 <code>Logger</code> 服務和兩個版本的 <code>HeroService</code>。<code>HeroService</code> 的第一個版本不依賴於 <code>Logger</code> 服務。修改後的第二個版本依賴於 <code>Logger</code> 服務。</p><p translation-origin=\"off\">The following code tabs feature the <code>Logger</code> service and two versions of <code>HeroService</code>. The first version of <code>HeroService</code> does not depend on the <code>Logger</code> service. The revised second version does depend on <code>Logger</code> service.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/hero.service (v2)\" path=\"dependency-injection/src/app/heroes/hero.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private logger: Logger) {  }\n\n  getHeroes() {\n    this.logger.log('Getting heroes ...');\n    return HEROES;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/hero.service (v1)\" path=\"dependency-injection/src/app/heroes/hero.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/logger.service\" path=\"dependency-injection/src/app/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string) {\n    this.logs.push(message);\n    console.log(message);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">在這個例子中，<code>getHeroes()</code> 方法在獲取英雄時就會藉助 <code>Logger</code> 記錄一條訊息。</p><p translation-origin=\"off\">In this example, the <code>getHeroes()</code> method uses the <code>Logger</code> service by logging a message when fetching heroes.</p>\n\n<h2 id=\"whats-next\" translation-result=\"on\">下一步呢？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/creating-injectable-service#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-providers\">如何在 DI 中配置依賴項</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-providers\">How to configure dependencies in DI</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-providers#configuring-dependency-providers\">如何使用 <code>InjectionTokens</code> 提供和注入服務/類之外的值</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-providers#configuring-dependency-providers\">How to use <code>InjectionTokens</code> to provide and inject values other than services/classes</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-in-action\">依賴注入實戰</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-in-action\">Dependency Injection in Action</a></p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：8/2/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/dependency-injection-overview\n - tutorial/first-app/first-app-lesson-09\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/core/Injectable\n - cli\n - guide/creating-injectable-service#creating-an-injectable-service\n - guide/creating-injectable-service#creating-an-injectable-service-1\n - guide/creating-injectable-service#injecting-services\n - guide/creating-injectable-service#injecting-services-in-other-services\n - guide/creating-injectable-service#service-examples\n - guide/creating-injectable-service#whats-next\n - guide/creating-injectable-service#下一步呢\n - guide/creating-injectable-service#建立可注入服務\n - guide/creating-injectable-service#建立可注入的服務\n - guide/creating-injectable-service#在其他服務中注入服務\n - guide/creating-injectable-service#服務範例\n - guide/creating-injectable-service#注入服務\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/dependency-injection-providers#configuring-dependency-providers\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/creating-injectable-service.md?message=docs%3A%20請簡述你的修改...\n-->"}