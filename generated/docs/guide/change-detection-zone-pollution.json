{"id":"guide/change-detection-zone-pollution","title":"Resolving zone pollution","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/change-detection-zone-pollution.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"resolving-zone-pollution\" translation-result=\"on\">解決區域（Zone）汙染<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#resolving-zone-pollution\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Resolving zone pollution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#resolving-zone-pollution\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><strong>Zone.js</strong>是一種訊號機制，Angular 用它來檢測應用程式狀態何時可能已更改。它捕獲非同步操作，比如 <code>setTimeout</code>、網路請求和事件偵聽器。Angular 會根據來自 Zone.js 的訊號安排變更檢測</p><p translation-origin=\"off\"><strong>Zone.js</strong> is a signaling mechanism that Angular uses to detect when an application state might have changed. It captures asynchronous operations like <code>setTimeout</code>, network requests, and event listeners. Angular schedules change detection based on signals from Zone.js.</p>\n\n<p translation-result=\"on\">在某些情況下，已安排的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\">任務</a>或<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\">微任務</a>不會對資料模型進行任何更改，這使得執行變更檢測變得不必要。常見的例子是：</p><p translation-origin=\"off\">In some cases scheduled <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\">tasks</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\">microtasks</a> don’t make any changes in the data model, which makes running change detection unnecessary. Common examples are:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>requestAnimationFrame</code> 、 <code>setTimeout</code> 或 <code>setInterval</code></p><p translation-origin=\"off\"><code>requestAnimationFrame</code>, <code>setTimeout</code> or <code>setInterval</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">第三方庫的任務或微任務排程</p><p translation-origin=\"off\">Task or microtask scheduling by third-party libraries</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">本節介紹如何識別此類條件，以及如何在 Angular 區域外執行程式碼以避免不必要的變更檢測呼叫。</p><p translation-origin=\"off\">This section covers how to identify such conditions, and how to run code outside the Angular zone to avoid unnecessary change detection calls.</p>\n\n<h2 id=\"identifying-unnecessary-change-detection-calls\" translation-result=\"on\">識別不必要的變更檢測呼叫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Identifying unnecessary change detection calls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以用 Angular DevTools 檢測不必要的變更檢測呼叫。它們通常在分析器的時間線中顯示為連續的條形，其源為 <code>setTimeout</code>、<code>setInterval</code>、<code>requestAnimationFrame</code> 或事件處理程式。當你在應用程式中對這些 API 的呼叫有限時，變更檢測呼叫通常是由第三方庫引起的。</p><p translation-origin=\"off\">You can detect unnecessary change detection calls using Angular DevTools. Often they appear as consecutive bars in the profiler’s timeline with source <code>setTimeout</code>, <code>setInterval</code>, <code>requestAnimationFrame</code>, or an event handler. When you have limited calls within your application of these APIs, the change detection invocation is usually caused by a third-party library.</p>\n\n<div class=\"lightbox\">\n  <img alt=\"Angular DevTools profiler preview showing Zone pollution\" src=\"generated/images/guide/change-detection/zone-pollution.png\" width=\"1600\" height=\"480\">\n</div>\n<p translation-result=\"on\">在上圖中，有一系列由與元素關聯的事件處理程式觸發的變更檢測呼叫。這是使用第三方非原生 Angular 元件時的常見挑戰，這些元件不會更改 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 的預設行為。</p><p translation-origin=\"off\">In the image above, there is a series of change detection calls triggered by event handlers associated with an element. That’s a common challenge when using third-party, non-native Angular components, which do not alter the default behavior of <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code>.</p>\n\n<h2 id=\"run-tasks-outside-ngzone\" translation-result=\"on\">在 <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code> 之外執行任務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#在-ngzone-之外執行任務\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Run tasks outside <code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/change-detection-zone-pollution#run-tasks-outside-ngzone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在這種情況下，你可以指示 Angular 避免使用<a href=\"/guide/zone\">NgZone</a>為給定程式碼段排程的任務呼叫變更檢測。</p><p translation-origin=\"off\">In such cases, you can instruct Angular to avoid calling change detection for tasks scheduled by a given piece of code using <a href=\"/guide/zone\">NgZone</a>.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() =&gt; setInterval(pollForUpdates), 500);\n  }\n}\n</code-example>\n<p translation-result=\"on\">上面的程式碼段告訴 Angular 要在 Angular Zone 之外執行 <code>setInterval</code> 呼叫，並在 <code>pollForUpdates</code> 執行之後跳過執行變更檢測。</p><p translation-origin=\"off\">The preceding snippet instructs Angular to call <code>setInterval</code> outside the Angular Zone and skip running change detection after <code>pollForUpdates</code> runs.</p>\n\n<p translation-result=\"on\">第三方庫通常會觸發不必要的變更檢測週期，因為它們在創作時並沒有考慮到 Zone.js。透過呼叫 Angular 區域外的函式庫 API 來避免這些額外的週期：</p><p translation-origin=\"off\">Third-party libraries commonly trigger unnecessary change detection cycles because they weren't authored with Zone.js in mind. Avoid these extra cycles by calling library APIs outside the Angular zone:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport * as Plotly from 'plotly.js-dist-min';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>(...)\nclass AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(private ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>) {}\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() =&gt; {\n      Plotly.newPlot('chart', data);\n    });\n  }\n}\n</code-example>\n<p translation-result=\"on\">在 <code>runOutsideAngular</code> 中執行 <code>Plotly.newPlot('chart', data);</code> 會告訴框架它不應該在執行此初始化邏輯安排的這些任務之後執行變更檢測。</p><p translation-origin=\"off\">Running <code>Plotly.newPlot('chart', data);</code> within <code>runOutsideAngular</code> instructs the framework that it shouldn’t run change detection after the execution of tasks scheduled by the initialization logic.</p>\n\n<p translation-result=\"on\">比如，如果 <code>Plotly.newPlot('chart', data)</code> 將事件偵聽器新增到 DOM 元素，則 Angular 將不會在執行其處理程式之後執行變更檢測。</p><p translation-origin=\"off\">For example, if <code>Plotly.newPlot('chart', data)</code> adds event listeners to a DOM element, Angular does not run change detection after the execution of their handlers.</p>\n\n\n  <div class=\"reviewed\">最後複查時間：5/4/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/zone\n - api/core/Component\n - api/core/NgZone\n - api/core/OnInit\n - guide/change-detection-zone-pollution#identifying-unnecessary-change-detection-calls\n - guide/change-detection-zone-pollution#resolving-zone-pollution\n - guide/change-detection-zone-pollution#run-tasks-outside-ngzone\n - guide/change-detection-zone-pollution#在-ngzone-之外執行任務\n - guide/change-detection-zone-pollution#解決區域zone汙染\n - guide/change-detection-zone-pollution#識別不必要的變更檢測呼叫\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#microtasks\n - https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide#tasks\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/change-detection-zone-pollution.md?message=docs%3A%20請簡述你的修改...\n-->"}