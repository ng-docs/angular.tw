{"id":"guide/build","title":"Building and serving Angular apps","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/build.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"building-and-serving-angular-apps\" translation-result=\"on\">建構並執行 Angular 應用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#building-and-serving-angular-apps\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Building and serving Angular apps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#building-and-serving-angular-apps\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本文討論的是 Angular 專案中與建構有關的配置項。</p><p translation-origin=\"off\">This page discusses build-specific configuration options for Angular projects.</p>\n\n<p><a id=\"app-environments\"></a></p>\n<h2 id=\"configuring-application-environments\" translation-result=\"on\">配置應用環境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-application-environments\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuring application environments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-application-environments\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以為專案定義不同的命名建構配置，例如 <code>development</code> 和 <code>staging</code>，具有不同的預設值。</p><p translation-origin=\"off\">You can define different named build configurations for your project, such as <code>development</code> and <code>staging</code>, with different defaults.</p>\n\n<p translation-result=\"on\">每個命名配置項都可以具有某些選項的預設值，並應用於各種<a href=\"guide/glossary#target\">建構目標</a>，比如 <code>build</code>、<code>serve</code> 和 <code>test</code>。<a href=\"cli\">Angular CLI</a> 的 <code>build</code>、<code>serve</code> 和 <code>test</code> 命令可以為不同的目標環境，把檔案替換成合適的版本。</p><p translation-origin=\"off\">Each named configuration can have defaults for any of the options that apply to the various <a href=\"guide/glossary#target\">builder targets</a>, such as <code>build</code>, <code>serve</code>, and <code>test</code>.\nThe <a href=\"cli\">Angular CLI</a> <code>build</code>, <code>serve</code>, and <code>test</code> commands can then replace files with appropriate versions for your intended target environment.</p>\n\n<h3 id=\"configure-environment-specific-defaults\" translation-result=\"on\">配置針對特定環境的預設值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-environment-specific-defaults\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configure environment-specific defaults<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-environment-specific-defaults\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 Angular CLI，首先執行此處顯示的<a href=\"cli/generate#environments-command\">產生環境命令</a>以建立 <code>src/environments/</code> 目錄並將專案配置為使用這些檔案。</p><p translation-origin=\"off\">Using the Angular CLI, start by running the <a href=\"cli/generate#environments-command\">generate environments command</a> shown here to create the <code>src/environments/</code> directory and configure the project to use these files.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate environments\n\n</code-example>\n<p translation-result=\"on\">專案的 <code>src/environments/</code> 目錄包含基本配置檔案 <code>environment.ts</code>，它提供 <code>production</code> 的配置，即預設環境。你可以在特定於目標的配置檔案中覆蓋其他環境的預設值，例如 <code>development</code> 和 <code>staging</code>。</p><p translation-origin=\"off\">The project's <code>src/environments/</code> directory contains the base configuration file, <code>environment.ts</code>, which provides configuration for <code>production</code>, the default environment.\nYou can override default values for additional environments, such as <code>development</code> and <code>staging</code>, in target-specific configuration files.</p>\n\n<p translation-result=\"on\">比如：</p><p translation-origin=\"off\">For example:</p>\n\n<div class=\"filetree\">\n    <div class=\"file\">\n        myProject/src/environments\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          environment.ts\n        </div>\n        <div class=\"file\">\n          environment.development.ts\n        </div>\n        <div class=\"file\">\n          environment.staging.ts\n        </div>\n    </div>\n</div>\n<p translation-result=\"on\">基礎環境 <code>environment.ts</code> 包含了預設的環境設定。比如：</p><p translation-origin=\"off\">The base file <code>environment.ts</code>, contains the default environment settings.\nFor example:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: true\n};\n\n</code-example>\n<p translation-result=\"on\">當沒有指定環境時，<code>build</code> 命令就會用它作為建構目標。你可以新增其它變數，可以用該環境物件附加屬性的形式，也可以用獨立物件的形式。比如：以下內容將會把一個變數新增到預設環境中：</p><p translation-origin=\"off\">The <code>build</code> command uses this as the build target when no environment is specified.\nYou can add further variables, either as additional properties on the environment object, or as separate objects.\nFor example, the following adds a default for a variable to the default environment:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: true,\n  apiUrl: 'http://my-prod-url'\n};\n\n</code-example>\n<p translation-result=\"on\">你可以新增特定於目標的配置檔案，例如 <code>environment.development.ts</code>。以下內容為開發建構目標設定了預設值：</p><p translation-origin=\"off\">You can add target-specific configuration files, such as <code>environment.development.ts</code>.\nThe following content sets default values for the development build target:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://my-api-url'\n};\n\n</code-example>\n<h3 id=\"using-environment-specific-variables-in-your-app\" translation-result=\"on\">在應用中使用針對特定環境的變數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-environment-specific-variables-in-your-app\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using environment-specific variables in your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-environment-specific-variables-in-your-app\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下應用程式結構可以為 <code>development</code> 和 <code>staging</code> 環境配置建構目標：</p><p translation-origin=\"off\">The following application structure configures build targets for <code>development</code> and <code>staging</code> environments:</p>\n\n<div class=\"filetree\">\n    <div class=\"file\">\n        src\n    </div>\n    <div class=\"children\">\n        <div class=\"file\">\n          app\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              app.component.html\n            </div>\n            <div class=\"file\">\n              app.component.ts\n            </div>\n        </div>\n        <div class=\"file\">\n          environments\n        </div>\n        <div class=\"children\">\n            <div class=\"file\">\n              environment.ts\n            </div>\n            <div class=\"file\">\n              environment.development.ts\n            </div>\n            <div class=\"file\">\n              environment.staging.ts\n            </div>\n        </div>\n    </div>\n</div>\n<p translation-result=\"on\">要使用已定義的配置環境，元件必須匯入原始版的環境檔案：</p><p translation-origin=\"off\">To use the environment configurations you have defined, your components must import the original environments file:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nimport { environment } from './../environments/environment';\n\n</code-example>\n<p translation-result=\"on\">這會確保 <code>build</code> 和 <code>serve</code> 命令能找到針對特定目標的配置。</p><p translation-origin=\"off\">This ensures that the build and serve commands can find the configurations for specific build targets.</p>\n\n<p translation-result=\"on\">元件檔案（<code>app.component.ts</code>）中的下列程式碼可以使用該配置檔案中定義的環境變數。</p><p translation-origin=\"off\">The following code in the component file (<code>app.component.ts</code>) uses an environment variable defined in the configuration files.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n  import { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n  import { environment } from './../environments/environment';\n\n  @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n  })\n  export class AppComponent {\n    constructor() {\n      console.log(environment.production); // Logs false for development environment\n    }\n\n    title = 'app works!';\n  }\n\n</code-example>\n<p><a id=\"file-replacement\"></a></p>\n<h2 id=\"configure-target-specific-file-replacements\" translation-result=\"on\">配置針對特定目標的檔案替換規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-target-specific-file-replacements\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configure target-specific file replacements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configure-target-specific-file-replacements\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">CLI 的主配置檔案 <code>angular.json</code> 中的每個建構目標下都包含了一個 <code>fileReplacements</code> 區段。這能讓你把 TypeScript 程式中的任何檔案替換為針對特定目標的版本。當建構目標需要包含針對特定環境（比如生產或預生產）的程式碼或變數時，這非常有用。</p><p translation-origin=\"off\">The main CLI configuration file, <code>angular.json</code>, contains a <code>fileReplacements</code> section in the configuration for each build target, which lets you replace any file in the TypeScript program with a target-specific version of that file.\nThis is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</p>\n\n<p translation-result=\"on\">預設情況下不會替換任何檔案。你可以為特定的建構目標新增檔案替換規則。比如：</p><p translation-origin=\"off\">By default no files are replaced.\nYou can add file replacements for specific build targets.\nFor example:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n  \"configurations\": {\n    \"development\": {\n      \"fileReplacements\": [\n          {\n            \"replace\": \"src/environments/environment.ts\",\n            \"with\": \"src/environments/environment.development.ts\"\n          }\n        ],\n        …\n\n</code-example>\n<p translation-result=\"on\">這意味著當你使用 <code>ng build --configuration development</code> 建構開發配置時，<code>src/environments/environment.ts</code> 檔案將替換為特定於目標的版本 <code>src/environments/environment.development.ts</code>。</p><p translation-origin=\"off\">This means that when you build your development configuration with <code>ng build --configuration development</code>, the <code>src/environments/environment.ts</code> file is replaced with the target-specific version of the file, <code>src/environments/environment.development.ts</code>.</p>\n\n<p translation-result=\"on\">你還可以按需新增更多配置檔案。要想新增預生產環境，把 <code>src/environments/environment.ts</code> 複製為 <code>src/environments/environment.staging.ts</code>，然後在 <code>angular.json</code> 中新增 <code>staging</code> 配置：</p><p translation-origin=\"off\">You can add additional configurations as required.\nTo add a staging environment, create a copy of <code>src/environments/environment.ts</code> called <code>src/environments/environment.staging.ts</code>, then add a <code>staging</code> configuration to <code>angular.json</code>:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n  \"configurations\": {\n    \"development\": { … },\n    \"production\": { … },\n    \"staging\": {\n      \"fileReplacements\": [\n        {\n          \"replace\": \"src/environments/environment.ts\",\n          \"with\": \"src/environments/environment.staging.ts\"\n        }\n      ]\n    }\n  }\n\n</code-example>\n<p translation-result=\"on\">你還可以往目標環境中新增更多配置項。你的建構目標支援的任何選項都可以在建構目標配置中進行覆蓋。</p><p translation-origin=\"off\">You can add more configuration options to this target environment as well.\nAny option that your build supports can be overridden in a build target configuration.</p>\n\n<p translation-result=\"on\">要想使用預生產環境（staging）的配置進行建構，請執行下列命令：</p><p translation-origin=\"off\">To build using the staging configuration, run the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build --configuration=staging\n\n</code-example>\n<p translation-result=\"on\">如果將其新增到 <code>angular.json</code> 的 \"serve:configurations\" 區段，你還可以配置 <code>serve</code> 命令來使用 目標建構配置：</p><p translation-origin=\"off\">You can also configure the <code>serve</code> command to use the targeted build configuration if you add it to the \"serve:configurations\" section of <code>angular.json</code>:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-project-name:build\"\n    },\n    \"configurations\": {\n      \"development\": {\n        \"browserTarget\": \"your-project-name:build:development\"\n      },\n      \"production\": {\n        \"browserTarget\": \"your-project-name:build:production\"\n      },\n      \"staging\": {\n        \"browserTarget\": \"your-project-name:build:staging\"\n      }\n    }\n  },\n\n</code-example>\n<p><a id=\"size-budgets\"></a>\n<a id=\"configure-size-budgets\"></a></p>\n<h2 id=\"configuring-size-budgets\" translation-result=\"on\">配置檔案大小預算<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-size-budgets\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuring size budgets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-size-budgets\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當應用的功能不斷增長時，其檔案大小也會同步增長。CLI 允許你透過配置項來限制檔案大小，以確保應用的各個部分都處於你定義的大小範圍內。</p><p translation-origin=\"off\">As applications grow in functionality, they also grow in size.\nThe CLI lets you set size thresholds in your configuration to ensure that parts of your application stay within size boundaries that you define.</p>\n\n<p translation-result=\"on\">你可以在 CLI 配置檔案 <code>angular.json</code> 的 <code>budgets</code> 區段為每個<a href=\"guide/build#app-environments\">所配置的環境</a>定義這些大小範圍。</p><p translation-origin=\"off\">Define your size boundaries in the CLI configuration file, <code>angular.json</code>, in a <code>budgets</code> section for each <a href=\"guide/build#app-environments\">configured environment</a>.</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  …\n  \"configurations\": {\n    \"production\": {\n      …\n      \"budgets\": []\n    }\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">你可以為整個應用指定大小範圍，也可以為特定部分。每個條目會為一種特定的型別配置大小範圍。用下列各式來指定大小的值：</p><p translation-origin=\"off\">You can specify size budgets for the entire app, and for particular parts.\nEach budget entry configures a budget of a given type.\nSpecify size values in the following formats:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">大小值</nt-wrapper><nt-wrapper translation-origin=\"off\">Size value</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>123</code> 或 <code>123b</code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code>123</code> or <code>123b</code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">大小（以位元組為單位）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Size in bytes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>123kb</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">大小（以千位元組為單位）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Size in kilobytes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>123mb</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">大小（以 MB 為單位）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Size in megabytes.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>12%</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於基線（baseline）大小的百分比大小。（不能用作 baseline 的值。）</nt-wrapper><nt-wrapper translation-origin=\"off\">Percentage of size relative to baseline. (Not valid for baseline values.)</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">如果配置了大小範圍，建構系統就會在發現應用的某個部分達到或超過了你設定的大小範圍時發出警告或報錯。</p><p translation-origin=\"off\">When you configure a budget, the build system warns or reports an error when a given part of the application reaches or exceeds a boundary size that you set.</p>\n\n<p translation-result=\"on\">每個範圍條目是一個 JSON 物件，它具有下列屬性：</p><p translation-origin=\"off\">Each budget entry is a JSON object with the following properties:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Property</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">值</nt-wrapper><nt-wrapper translation-origin=\"off\">Value</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\">The type of budget. One of: <table> <thead> <tr> <th> Value </th> <th> Details </th> </tr> </thead> <tbody> <tr> <td> <code>bundle</code> </td> <td> The size of a specific bundle. </td> </tr> <tr> <td> <code>initial</code> </td> <td> The size of JavaScript needed for bootstrapping the application. Defaults to warning at 500kb and erroring at 1mb. </td> </tr> <tr> <td> <code>allScript</code> </td> <td> The size of all scripts. </td> </tr> <tr> <td> <code>all</code> </td> <td> The size of the entire application. </td> </tr> <tr> <td> <code>anyComponentStyle</code> </td> <td> This size of any one component stylesheet. Defaults to warning at 2kb and erroring at 4kb. </td> </tr> <tr> <td> <code>anyScript</code> </td> <td> The size of any one script. </td> </tr> <tr> <td> <code>any</code> </td> <td> The size of any file. </td> </tr> </tbody> </table></td>\n</tr>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">名稱</nt-wrapper><nt-wrapper translation-origin=\"off\">name</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">套件的名稱（對於 <code>type=bundle</code> ）。</nt-wrapper><nt-wrapper translation-origin=\"off\">The name of the bundle (for <code>type=bundle</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">baseline</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個表示基準大小的絕對值，用做比例值的基數。</nt-wrapper><nt-wrapper translation-origin=\"off\">The baseline size for comparison.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">maximumWarning</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當大小超過基線的這個閾值百分比時給出警告。</nt-wrapper><nt-wrapper translation-origin=\"off\">The maximum threshold for warning relative to the baseline.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">maximumError</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當大小超過基線的這個閾值百分比時報錯。</nt-wrapper><nt-wrapper translation-origin=\"off\">The maximum threshold for error relative to the baseline.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">minimumWarning</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當大小小於基線的這個閾值百分比時給出警告。</nt-wrapper><nt-wrapper translation-origin=\"off\">The minimum threshold for warning relative to the baseline.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">minimumError</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於基線的最小誤差閾值。</nt-wrapper><nt-wrapper translation-origin=\"off\">The minimum threshold for error relative to the baseline.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">warning</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於基線的警告閾值（最小值和最大值）。</nt-wrapper><nt-wrapper translation-origin=\"off\">The threshold for warning relative to the baseline (min &amp; max).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">error</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於基線的誤差閾值（最小值和最大值）。</nt-wrapper><nt-wrapper translation-origin=\"off\">The threshold for error relative to the baseline (min &amp; max).</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"commonjs \"></a></p>\n<h2 id=\"configuring-commonjs-dependencies\" translation-result=\"on\">配置 CommonJS 依賴項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-commonjs-dependencies\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuring CommonJS dependencies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-commonjs-dependencies\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">建議你避免在 Angular 應用程式中依賴 CommonJS 模組。依賴 CommonJS 模組可能會阻止捆綁器和壓縮器最佳化此應用，導致捆綁套件體積變大。建議你在整個應用程式中使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\">ECMAScript 模組</a>。更多資訊，請參見 <a href=\"https://web.dev/commonjs-larger-bundles\">為何 CommonJS 讓捆綁套件變大了</a>。</p><p translation-origin=\"off\">It is recommended that you avoid depending on CommonJS modules in your Angular applications.\nDepending on CommonJS modules can prevent bundlers and minifiers from optimizing your application, which results in larger bundle sizes.\nInstead, it is recommended that you use <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\">ECMAScript modules</a> in your entire application.\nFor more information, see <a href=\"https://web.dev/commonjs-larger-bundles\">How CommonJS is making your bundles larger</a>.</p>\n\n</div>\n<p translation-result=\"on\">如果 Angular CLI 檢測到你的瀏覽器端應用依賴了 CommonJS 模組，就會發出警告。要禁用這些警告，你可以把這些 CommonJS 模組的名字新增到 <code>angular.json</code> 檔案的 <code>build</code> 區的 <code>allowedCommonJsDependencies</code> 選項中。</p><p translation-origin=\"off\">The Angular CLI outputs warnings if it detects that your browser application depends on CommonJS modules.\nTo disable these warnings, add the CommonJS module name to <code>allowedCommonJsDependencies</code> option in the <code>build</code> options located in <code>angular.json</code> file.</p>\n\n<code-example language=\"json\">\n\n\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n     \"allowedCommonJsDependencies\": [\n        \"lodash\"\n     ]\n     …\n   }\n   …\n},\n\n</code-example>\n<p><a id=\"browser-compat\"></a></p>\n<h2 id=\"configuring-browser-compatibility\" translation-result=\"on\">配置瀏覽器相容性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-browser-compatibility\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Configuring browser compatibility<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#configuring-browser-compatibility\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 使用 <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> 來確保對不同瀏覽器版本的相容性。\n<a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> 用於為 CSS 新增供應商字首，而 <a href=\"https://babeljs.io/docs/en/babel-preset-env\">@babel/preset-env</a> 用於進行 JavaScript 語法轉換。</p><p translation-origin=\"off\">The Angular CLI uses <a href=\"https://github.com/browserslist/browserslist\">Browserslist</a> to ensure compatibility with different browser versions. <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> is used for CSS vendor prefixing and <a href=\"https://babeljs.io/docs/en/babel-preset-env\">@babel/preset-env</a> for JavaScript syntax transformations.</p>\n\n<p translation-result=\"on\">在內部，Angular CLI 使用如下 <code>browserslist</code> 配置，以匹配 Angular <a href=\"guide/browser-support\">所支援的瀏覽器</a>。</p><p translation-origin=\"off\">Internally, the Angular CLI uses the below <code>browserslist</code> configuration which matches the <a href=\"guide/browser-support\">browsers that are supported</a> by Angular.</p>\n\n  <code-example format=\"none\" language=\"text\">\n  last 2 Chrome versions\n  last 1 Firefox version\n  last 2 Edge major versions\n  last 2 Safari major versions\n  last 2 iOS major versions\n  Firefox ESR\n  </code-example>\n<p translation-result=\"on\">要覆蓋內部配置，請執行 <a href=\"cli/generate#config-command\"><code>ng generate config browserslist</code></a>，它會在專案目錄中產生一個 <code>.browserslistrc</code> 配置檔案。</p><p translation-origin=\"off\">To override the internal configuration, run <a href=\"cli/generate#config-command\"><code>ng generate config browserslist</code></a>, which generates a <code>.browserslistrc</code> configuration file in the the project directory.</p>\n\n<p translation-result=\"on\">有關如何以特定瀏覽器和版本為目標的更多範例，請參閱<a href=\"https://github.com/browserslist/browserslist\">browserslist 儲存庫</a>。</p><p translation-origin=\"off\">See the <a href=\"https://github.com/browserslist/browserslist\">browserslist repository</a> for more examples of how to target specific browsers and versions.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">使用 <a href=\"https://browsersl.ist\">browsersl.ist</a> 顯示與 <code>browserslist</code> 查詢相容的瀏覽器。</p><p translation-origin=\"off\">Use <a href=\"https://browsersl.ist\">browsersl.ist</a> to display compatible browsers for a <code>browserslist</code> query.</p>\n\n</div>\n<p><a id=\"proxy\"></a></p>\n<h2 id=\"proxying-to-a-backend-server\" translation-result=\"on\">代理到後端伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxying-to-a-backend-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Proxying to a backend server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxying-to-a-backend-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用 <code>webpack</code> 開發伺服器中的<a href=\"https://webpack.js.org/configuration/dev-server/#devserver-proxy\">代理支援</a>來把特定的 URL 轉發給後端伺服器，只要傳入 <code>--proxy-config</code> 選項就可以了。\n比如，要把所有到 <code>http://localhost:4200/api</code> 的呼叫都轉給執行在 <code>http://localhost:3000/api</code> 上的伺服器，可採取如下步驟。</p><p translation-origin=\"off\">Use the <a href=\"https://webpack.js.org/configuration/dev-server/#devserverproxy\">proxying support</a> in the <code>webpack</code> development server to divert certain URLs to a backend server, by passing a file to the <code>--proxy-config</code> build option.\nFor example, to divert all calls for <code>http://localhost:4200/api</code> to a server running on <code>http://localhost:3000/api</code>, take the following steps.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在專案的 <code>src/</code> 目錄下建立一個 <code>proxy.conf.json</code> 檔案。</p><p translation-origin=\"off\">Create a file <code>proxy.conf.json</code> in your project's <code>src/</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">往這個新的代理配置檔案中新增如下內容：</p><p translation-origin=\"off\">Add the following content to the new proxy file:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 CLI 配置檔案 <code>angular.json</code> 中為 <code>serve</code> 目標新增 <code>proxyConfig</code> 選項：</p><p translation-origin=\"off\">In the CLI configuration file, <code>angular.json</code>, add the <code>proxyConfig</code> option to the <code>serve</code> target:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n  …\n  \"architect\": {\n    \"serve\": {\n      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"browserTarget\": \"your-application-name:build\",\n        \"proxyConfig\": \"src/proxy.conf.json\"\n      },\n…\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要使用這個代理選項啟動開發伺服器，請執行 <code>ng serve</code> 命令。</p><p translation-origin=\"off\">To run the development server with this proxy configuration, call <code>ng serve</code>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">可以編輯這個代理配置檔案，以新增配置項，下面是一些例子。要檢視所有選項的詳細說明，參閱 <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-proxy\">webpack DevServer 文件</a>。</p><p translation-origin=\"off\">Edit the proxy configuration file to add configuration options; following are some examples.\nFor a description of all options, see <a href=\"https://webpack.js.org/configuration/dev-server/#devserverproxy\">webpack DevServer documentation</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">注意：<br>\n如果你編輯了代理配置檔案，必須重新啟動 <code>ng serve</code> 處理序才能使更改生效。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nIf you edit the proxy configuration file, you must relaunch the <code>ng serve</code> process to make your changes effective.</p>\n\n</div>\n<h3 id=\"rewrite-the-url-path\" translation-result=\"on\">重寫 URL 路徑<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#rewrite-the-url-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Rewrite the URL path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#rewrite-the-url-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>pathRewrite</code> 代理配置項能讓你在執行時重寫 URL 路徑。比如，可以在代理配置中指定如下的 <code>pathRewrite</code> 值，以移除路徑末尾的 \"api\" 部分。</p><p translation-origin=\"off\">The <code>pathRewrite</code> proxy configuration option lets you rewrite the URL path at run time.\nFor example, specify the following <code>pathRewrite</code> value to the proxy configuration to remove \"api\" from the end of a path.</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">如果你要存取的後端不在 <code>localhost</code> 上，還要設定 <code>changeOrigin</code> 選項。比如：</p><p translation-origin=\"off\">If you need to access a backend that is not on <code>localhost</code>, set the <code>changeOrigin</code> option as well.\nFor example:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://npmjs.org\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"changeOrigin\": true\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">要想了解你的代理是否在如預期般工作，可以設定 <code>logLevel</code> 選項。比如：</p><p translation-origin=\"off\">To help determine whether your proxy is working as intended, set the <code>logLevel</code> option.\nFor example:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false,\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    },\n    \"logLevel\": \"debug\"\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">代理的有效日誌級別是 <code>info</code>（預設值）、<code>debug</code>、<code>warn</code>、<code>error</code> 和 <code>silent</code>。</p><p translation-origin=\"off\">Proxy log levels are <code>info</code> (the default), <code>debug</code>, <code>warn</code>, <code>error</code>, and <code>silent</code>.</p>\n\n<h3 id=\"proxy-multiple-entries\" translation-result=\"on\">代理多個條目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxy-multiple-entries\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Proxy multiple entries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#proxy-multiple-entries\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過用 JavaScript 定義此配置，你還可以把多個條目代理到同一個目標。</p><p translation-origin=\"off\">You can proxy multiple entries to the same target by defining the configuration in JavaScript.</p>\n\n<p translation-result=\"on\">將代理配置檔案設定為 <code>proxy.conf.mjs</code> （而不是 <code>proxy.conf.json</code> ），並按照以下範例指定配置檔案。</p><p translation-origin=\"off\">Set the proxy configuration file to <code>proxy.conf.mjs</code> (instead of <code>proxy.conf.json</code>), and specify configuration files as in the following example.</p>\n\n<code-example format=\"javascript\" language=\"javascript\">\n\nexport default [\n  {\n    context: [\n        '/my',\n        '/many',\n        '/endpoints',\n        '/i',\n        '/need',\n        '/to',\n        '/proxy'\n    ],\n    target: 'http://localhost:3000',\n    secure: false\n  }\n];\n\n</code-example>\n<p translation-result=\"on\">在 CLI 配置檔案 <code>angular.json</code> 中，指向 JavaScript 配置檔案：</p><p translation-origin=\"off\">In the CLI configuration file, <code>angular.json</code>, point to the JavaScript proxy configuration file:</p>\n\n<code-example format=\"json\" language=\"json\">\n\n…\n\"architect\": {\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"your-application-name:build\",\n      \"proxyConfig\": \"src/proxy.conf.mjs\"\n    },\n…\n\n</code-example>\n<h3 id=\"bypass-the-proxy\" translation-result=\"on\">繞過代理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#bypass-the-proxy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Bypass the proxy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#bypass-the-proxy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你需要根據情況繞過此代理，或在發出請求前先動態修改一下，可以新增 <code>bypass</code> 選項，就像下例的 JavaScript 所示。</p><p translation-origin=\"off\">If you need to optionally bypass the proxy, or dynamically change the request before it's sent, add the bypass option, as shown in this JavaScript example.</p>\n\n<code-example format=\"javascript\" language=\"javascript\">\n\nexport default {\n  '/api/proxy': {\n    \"target\": 'http://localhost:3000',\n    \"secure\": false,\n    \"bypass\": function (req, res, proxyOptions) {\n        if (req.headers.accept.includes('html')) {\n            console.log('Skipping proxy for <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> request.');\n            return '/index.html';\n        }\n        req.headers['X-Custom-Header'] = 'yes';\n    }\n  }\n};\n\n</code-example>\n<h3 id=\"using-corporate-proxy\" translation-result=\"on\">使用公司代理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-corporate-proxy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using corporate proxy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/build#using-corporate-proxy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你在某個公司代理之後，此後端就無法直接代理到區域網之外的任何 URL。這種情況下，你可以把這個後端代理配置為，藉助 agent 透過你的公司代理轉發此呼叫：</p><p translation-origin=\"off\">If you work behind a corporate proxy, the backend cannot directly proxy calls to any URL outside your local network.\nIn this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install --save-dev https-proxy-agent\n\n</code-example>\n<p translation-result=\"on\">如果你定義了環境變數 <code>http_proxy</code> 或 <code>HTTP_PROXY</code>，當執行 <code>npm start</code> 時，就會自動新增一個 agent 來透過你的企業代理轉發網路呼叫。</p><p translation-origin=\"off\">When you define an environment variable <code>http_proxy</code> or <code>HTTP_PROXY</code>, an agent is automatically added to pass calls through your corporate proxy when running <code>npm start</code>.</p>\n\n<p translation-result=\"on\">請在 JavaScript 配置檔案中使用如下內容。</p><p translation-origin=\"off\">Use the following content in the JavaScript configuration file.</p>\n\n<code-example format=\"javascript\" language=\"javascript\">\n\nimport HttpsProxyAgent from 'https-proxy-agent';\n\nconst proxyConfig = [{\n  context: '/api',\n  target: 'http://your-remote-server.com:3000',\n  secure: false\n}];\n\nexport default (proxyConfig) =&gt; {\n  const proxyServer = process.env.http_proxy || process.env.HTTP_PROXY;\n  if (proxyServer) {\n    const agent = new HttpsProxyAgent(proxyServer);\n    console.log('Using corporate proxy server: ' + proxyServer);\n\n    for (const entry of proxyConfig) {\n      entry.agent = agent;\n    }\n  }\n\n  return proxyConfig;\n};\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：1/17/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/architecture-next-steps\n - guide/i18n-common-merge\n - guide/npm-packages\n - guide/strict-mode\n - guide/upgrade-setup\n - guide/workspace-config\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/core/Component\n - cli\n - cli/generate#config-command\n - cli/generate#environments-command\n - guide/browser-support\n - guide/build#app-environments\n - guide/build#building-and-serving-angular-apps\n - guide/build#bypass-the-proxy\n - guide/build#configure-environment-specific-defaults\n - guide/build#configure-target-specific-file-replacements\n - guide/build#configuring-application-environments\n - guide/build#configuring-browser-compatibility\n - guide/build#configuring-commonjs-dependencies\n - guide/build#configuring-size-budgets\n - guide/build#proxy-multiple-entries\n - guide/build#proxying-to-a-backend-server\n - guide/build#rewrite-the-url-path\n - guide/build#using-corporate-proxy\n - guide/build#using-environment-specific-variables-in-your-app\n - guide/build#代理到後端伺服器\n - guide/build#代理多個條目\n - guide/build#使用公司代理\n - guide/build#在應用中使用針對特定環境的變數\n - guide/build#建構並執行-angular-應用\n - guide/build#繞過代理\n - guide/build#配置-commonjs-依賴項\n - guide/build#配置應用環境\n - guide/build#配置檔案大小預算\n - guide/build#配置瀏覽器相容性\n - guide/build#配置針對特定環境的預設值\n - guide/build#配置針對特定目標的檔案替換規則\n - guide/build#重寫-url-路徑\n - guide/glossary#target\n - https://babeljs.io/docs/en/babel-preset-env\n - https://browsersl.ist\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import\n - https://github.com/browserslist/browserslist\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/build.md?message=docs%3A%20請簡述你的修改...\n - https://github.com/postcss/autoprefixer\n - https://web.dev/commonjs-larger-bundles\n - https://webpack.js.org/configuration/dev-server/#devserver-proxy\n - https://webpack.js.org/configuration/dev-server/#devserverproxy\n-->"}