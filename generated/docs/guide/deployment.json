{"id":"guide/deployment","title":"Deployment","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/deployment.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"deployment\" translation-result=\"on\">部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Deployment<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">當你準備把 Angular 應用部署到遠端伺服器上時，有很多可選的部署方式。</p><p translation-origin=\"off\">When you are ready to deploy your Angular application to a remote server, you have various options for deployment.</p>\n\n<p><a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a></p>\n<h2 id=\"simple-deployment-options\" translation-result=\"on\">最簡單的部署選項<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simple-deployment-options\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Simple deployment options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simple-deployment-options\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在完整部署應用之前，你可以先臨時用一種技術來測試流程、建構配置和部署行為。</p><p translation-origin=\"off\">Before fully deploying your application, you can test the process, build configuration, and deployed behavior by using one of these interim techniques.</p>\n\n<h3 id=\"building-and-serving-from-disk\" translation-result=\"on\">從磁碟建構和提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-from-disk\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Building and serving from disk<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-from-disk\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在開發過程中，你通常會使用 <code>ng serve</code> 命令來藉助 <a href=\"https://webpack.js.org/guides/development/#webpack-dev-server\">webpack-dev-server</a> 在本地記憶體中建構、監控和提供服務。但是，當你打算部署它時，就必須使用 <code>ng build</code> 命令來建構應用並在其它地方部署這些建構成果。</p><p translation-origin=\"off\">During development, you typically use the <code>ng serve</code> command to build, watch, and serve the application from local memory, using <a href=\"https://webpack.js.org/guides/development/#webpack-dev-server\">webpack-dev-server</a>.\nWhen you are ready to deploy, however, you must use the <code>ng build</code> command to build the application and deploy the build artifacts elsewhere.</p>\n\n<p translation-result=\"on\"><code>ng build</code> 和 <code>ng serve</code> 在建構專案之前都會清除輸出資料夾，但只有 <code>ng build</code> 命令會把產生的建構成果寫入輸出資料夾中。</p><p translation-origin=\"off\">Both <code>ng build</code> and <code>ng serve</code> clear the output folder before they build the project, but only the <code>ng build</code> command writes the generated build artifacts to the output folder.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">預設情況下，輸出目錄是 <code>dist/project-name/</code>。要輸出到其它資料夾，就要修改 <code>angular.json</code> 中的 <code>outputPath</code>。</p><p translation-origin=\"off\">The output folder is <code>dist/project-name/</code> by default.\nTo output to a different folder, change the <code>outputPath</code> in <code>angular.json</code>.</p>\n\n</div>\n<p translation-result=\"on\">當開發臨近收尾時，讓本地 Web 伺服器使用輸出資料夾中的內容提供服務可以讓你更好地瞭解當應用部署到遠端伺服器時的行為。你需要用兩個終端才能體驗到即時重新整理的特性。</p><p translation-origin=\"off\">As you near the end of the development process, serving the contents of your output folder from a local web server can give you a better idea of how your application will behave when it is deployed to a remote server.\nYou will need two terminals to get the live-reload experience.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在第一個終端上，在<em>監控（watch）</em>模式下執行 <a href=\"cli/build\"><code>ng build</code> 命令</a>把該應用編譯進 <code>dist</code> 資料夾。</p><p translation-origin=\"off\">On the first terminal, run the <a href=\"cli/build\"><code>ng build</code> command</a> in <em>watch</em> mode to compile the application to the <code>dist</code> folder.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build --watch\n\n</code-example>\n<p translation-result=\"on\">與 <code>ng serve</code> 命令一樣，當原始檔發生變化時，就會重新產生輸出檔案。</p><p translation-origin=\"off\">Like the <code>ng serve</code> command, this regenerates output files when source files change.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在第二個終端上，安裝一個 Web 伺服器（比如 <a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>），然後使用輸出資料夾中的內容執行它。比如：</p><p translation-origin=\"off\">On the second terminal, install a web server (such as <a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>), and run it against the output folder.\nFor example:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nlite-server --baseDir=\"dist/project-name\"\n\n</code-example>\n<p translation-result=\"on\">每當輸出了新檔案時，伺服器就會自動重新整理你的瀏覽器。</p><p translation-origin=\"off\">The server will automatically reload your browser when new files are output.</p>\n\n</li>\n</ul>\n<div class=\"alert is-critical\">\n<p translation-result=\"on\">該方法只能用於開發和測試，在部署應用時，它不受支援，也不是安全的方式。</p><p translation-origin=\"off\">This method is for development and testing only, and is not a supported or secure way of deploying an application.</p>\n\n</div>\n<h3 id=\"automatic-deployment-with-the-cli\" translation-result=\"on\">使用 CLI 進行自動部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#automatic-deployment-with-the-cli\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Automatic deployment with the CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#automatic-deployment-with-the-cli\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular CLI 命令 <code>ng deploy</code>（在版本 8.3.0 中引入）執行與你的專案關聯的 <code>deploy</code> <a href=\"guide/cli-builder\">CLI 建構器</a>。有許多第三方建構器實現了到不同平台的部署功能。你可以透過執行 <code>ng add [package name]</code> 把它們中的任何一個新增到專案中。</p><p translation-origin=\"off\">The Angular CLI command <code>ng deploy</code> (introduced in version 8.3.0) executes the <code>deploy</code> <a href=\"guide/cli-builder\">CLI builder</a> associated with your project.\nA number of third-party builders implement deployment capabilities to different platforms.\nYou can add any of them to your project by running <code>ng add [package name]</code>.</p>\n\n<p translation-result=\"on\">新增具有部署功能的程式套件時，它將為所選專案自動更新自動更新工作區配置（<code>angular.json</code> 檔案）中的 <code>deploy</code> 部分。然後，你就可以使用 <code>ng deploy</code> 命令來部署該專案了。</p><p translation-origin=\"off\">When you add a package with deployment capability, it'll automatically update your workspace configuration (<code>angular.json</code> file) with a <code>deploy</code> section for the selected project.\nYou can then use the <code>ng deploy</code> command to deploy that project.</p>\n\n<p translation-result=\"on\">比如，以下命令將專案自動部署到 Firebase。</p><p translation-origin=\"off\">For example, the following command automatically deploys a project to Firebase.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng add @angular/fire\nng deploy\n\n</code-example>\n<p translation-result=\"on\">該命令是互動式的。在這種情況下，你必須擁有或建立 Firebase 帳戶，並使用該帳戶進行身份驗證。該命令提示你選擇要部署的 Firebase 專案。</p><p translation-origin=\"off\">The command is interactive.\nIn this case, you must have or create a Firebase account, and authenticate using that account.\nThe command prompts you to select a Firebase project for deployment</p>\n\n<p translation-result=\"on\">該命令會建構你的應用，並將生產環境的資產檔案上傳到 Firebase。</p><p translation-origin=\"off\">The command builds your application and uploads the production assets to Firebase.</p>\n\n<p translation-result=\"on\">在下表中，你可以找到實現了到不同平台部署功能的軟體包列表。每個軟體套件的 <code>deploy</code> 命令可能需要不同的命令列選項。你可以透過以下與套件名稱相關的連結來閱讀更多內容：</p><p translation-origin=\"off\">In the table below, you can find a list of packages which implement deployment functionality to different platforms.\nThe <code>deploy</code> command for each package may require different command line options.\nYou can read more by following the links associated with the package names below:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">部署到</nt-wrapper><nt-wrapper translation-origin=\"off\">Deployment to</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">套件</nt-wrapper><nt-wrapper translation-origin=\"off\">Package</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase 託管</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></nt-wrapper></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@angular/fire\"><code>@angular/fire</code></a></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"https://vercel.com/solutions/angular\">Vercel</a></td>\n<td align=\"left\"><a href=\"https://github.com/vercel/vercel/tree/main/examples/angular\"><code>vercel init angular</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.netlify.com\">Netlify</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/@netlify-builder/deploy\"><code>@netlify-builder/deploy</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"https://pages.github.com\">GitHub 頁面</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://pages.github.com\">GitHub pages</a></nt-wrapper></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/angular-cli-ghpages\"><code>angular-cli-ghpages</code></a></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"https://npmjs.com\">NPM</a></td>\n<td align=\"left\"><a href=\"https://npmjs.org/package/ngx-deploy-npm\"><code>ngx-deploy-npm</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\">亞馬遜雲 S3</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\">Amazon Cloud S3</a></nt-wrapper></td>\n<td align=\"left\"><a href=\"https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\"><code>@jefiozie/ngx-aws-deploy</code></a></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">如果要部署到自己管理的伺服器上，或者缺少針對你喜歡的雲平台的建構器，則可以建立支援你使用 <code>ng deploy</code> 命令的建構器，或者通讀本指南以瞭解如何手動部署應用程式。</p><p translation-origin=\"off\">If you're deploying to a self-managed server or there's no builder for your favorite cloud platform, you can either create a builder that allows you to use the <code>ng deploy</code> command, or read through this guide to learn how to manually deploy your application.</p>\n\n<h3 id=\"basic-deployment-to-a-remote-server\" translation-result=\"on\">最簡化的部署方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#basic-deployment-to-a-remote-server\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Basic deployment to a remote server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#basic-deployment-to-a-remote-server\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">最簡化的部署方式就是為開發環境建構，並把其輸出複製到 Web 伺服器上。</p><p translation-origin=\"off\">For the simplest deployment, create a production build and copy the output directory to a web server.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">使用開發環境進行建構</p><p translation-origin=\"off\">Start with the production build:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把輸出目錄（預設為 <code>dist/</code>）下的<em>每個檔案</em>都複製到到伺服器上的某個目錄下。</p><p translation-origin=\"off\">Copy <em>everything</em> within the output folder (<code>dist/project-name/</code> by default) to a folder on the server.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">配置伺服器，讓缺失的檔案都重新導向到 <code>index.html</code> 上。\n欲知詳情，參閱<a href=\"guide/deployment#fallback\">稍後</a>的伺服器端重新導向部分。</p><p translation-origin=\"off\">Configure the server to redirect requests for missing files to <code>index.html</code>.\nLearn more about server-side redirects <a href=\"guide/deployment#fallback\">below</a>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">這是對應用進行生產環境部署的最簡方式。</p><p translation-origin=\"off\">This is the simplest production-ready deployment of your application.</p>\n\n<p><a id=\"deploy-to-github\"></a></p>\n<h3 id=\"deploy-to-github-pages\" translation-result=\"on\">部署到 GitHub Pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deploy to GitHub Pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要將 Angular 應用程式部署到 <a href=\"https://help.github.com/articles/what-is-github-pages\">GitHub Pages</a>，請遵循以下步驟：</p><p translation-origin=\"off\">To deploy your Angular application to <a href=\"https://help.github.com/articles/what-is-github-pages\">GitHub Pages</a>, complete the following steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為你的專案<a href=\"https://help.github.com/articles/create-a-repo\">建立一個 GitHub Pages 儲存庫</a>。</p><p translation-origin=\"off\"><a href=\"https://help.github.com/articles/create-a-repo\">Create a GitHub repository</a> for your project.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過新增指定你在上一步中建立的 GitHub 儲存庫的遠端地址，來在本地專案中配置 <code>git</code>。建立儲存庫時，GitHub 已提供了這些命令，以便你可以在命令提示符下複製和貼上它們。儘管 GitHub 會為你填上某些特定於專案的設定，但這些命令應該類似於以下形式：</p><p translation-origin=\"off\">Configure <code>git</code> in your local project by adding a remote that specifies the GitHub repository you created in previous step.\nGitHub provides these commands when you create the repository so that you can copy and paste them at your command prompt.\nThe commands should be similar to the following, though GitHub fills in your project-specific settings for you:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ngit remote add origin https://github.com/your-username/your-project-name.git\ngit branch -M main\ngit push -u origin main\n\n</code-example>\n<p translation-result=\"on\">當你從 GitHub 貼上這些命令時，它們會自動執行。</p><p translation-origin=\"off\">When you paste these commands from GitHub, they run automatically.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立並簽出一個名為 <code>gh-pages</code> 的 <code>git</code> 分支。</p><p translation-origin=\"off\">Create and check out a <code>git</code> branch named <code>gh-pages</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ngit checkout -b gh-pages\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">藉助 Angular CLI 命令 <a href=\"cli/build\"><code>ng build</code></a>和以下選項，使用 Github 專案名稱建構應用。這裡的 <code>your_project_name</code> 是你在步驟 1 中為 GitHub 儲存庫提供的專案的名稱。</p><p translation-origin=\"off\">Build your project using the GitHub project name, with the Angular CLI command <a href=\"cli/build\"><code>ng build</code></a> and the following options, where <code>your_project_name</code> is the name of the project that you gave the GitHub repository in step 1.</p>\n\n<p translation-result=\"on\">確保在專案名稱的兩邊都包含有斜槓，如 <code>/your_project_name/</code> 的斜槓。</p><p translation-origin=\"off\">Be sure to include the slashes on either side of your project name as in <code>/your_project_name/</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build --output-path docs --base-href /your_project_name/\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">當建構完成時，把 <code>docs/index.html</code> 複製為 <code>docs/404.html</code>。</p><p translation-origin=\"off\">When the build is complete, make a copy of <code>docs/index.html</code> and name it <code>docs/404.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的更改，並推送。</p><p translation-origin=\"off\">Commit your changes and push.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 GitHub 專案頁面上，轉到 Settings 並向下滾動到 GitHub Pages 部分，以配置<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">要從 docs 資料夾釋出</a>的站點。</p><p translation-origin=\"off\">On the GitHub project page, go to Settings and select the Pages option from the left sidebar to configure the site to <a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">publish from the docs folder</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">單擊儲存。</p><p translation-origin=\"off\">Click Save.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">單擊 GitHub Pages 區頂部的 “GitHub Pages” 連結，以檢視已部署的應用程式。連結的格式為 <code>https://&lt;user_name&gt;.github.io/&lt;project_name&gt;</code>。</p><p translation-origin=\"off\">Click on the GitHub Pages link at the top of the GitHub Pages section to see your deployed application.\nThe format of the link is <code>https://&lt;user_name&gt;.github.io/&lt;project_name&gt;</code>.</p>\n\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">參閱 <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>，這個包用到了全部這些特性，還提供了一些額外功能。</p><p translation-origin=\"off\">Check out <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>, a full-featured package that does all this for you and has extra functionality.</p>\n\n</div>\n<p><a id=\"server-configuration\"></a></p>\n<h2 id=\"server-configuration\" translation-result=\"on\">伺服器端配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Server configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">這一節涵蓋了你可能對伺服器或準備部署到伺服器的檔案要做的那些修改。</p><p translation-origin=\"off\">This section covers changes you may have to make to the server or to files deployed on the server.</p>\n\n<p><a id=\"fallback\"></a></p>\n<h3 id=\"routed-apps-must-fall-back-to-indexhtml\" translation-result=\"on\">帶路由的應用必須以 <code>index.html</code> 作為後備頁面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fall-back-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Routed apps must fall back to <code>index.html</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fall-back-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 應用很適合用簡單的靜態 HTML 伺服器提供服務。\n你不需要伺服器端引擎來動態合成應用頁面，因為 Angular 會在客戶端完成這件事。</p><p translation-origin=\"off\">Angular applications are perfect candidates for serving with a simple static HTML server.\nYou don't need a server-side engine to dynamically compose application pages because\nAngular does that on the client-side.</p>\n\n<p translation-result=\"on\">如果該應用使用 Angular 路由器，你就必須配置伺服器，讓它對不存在的檔案返回應用的宿主頁（<code>index.html</code>）。</p><p translation-origin=\"off\">If the application uses the Angular router, you must configure the server to return the application's host page (<code>index.html</code>) when asked for a file that it does not have.</p>\n\n<p><a id=\"deep-link\"></a></p>\n<p translation-result=\"on\">帶路由的應用應該支援“深連結”。\n所謂<em>深連結</em>就是指一個 URL，它用於指定到應用內某個元件的路徑。\n比如，<code>http://www.mysite.com/heroes/42</code> 就是一個到英雄詳情頁面的<em>深連結</em>，用於顯示 <code>id: 42</code> 的英雄。</p><p translation-origin=\"off\">A routed application should support \"deep links\".\nA <em>deep link</em> is a URL that specifies a path to a component inside the application.\nFor example, <code>http://www.mysite.com/heroes/42</code> is a <em>deep link</em> to the hero detail page that displays the hero with <code>id: 42</code>.</p>\n\n<p translation-result=\"on\">當用戶從執行中的客戶端應用導航到這個 URL 時，這沒問題。\nAngular 路由器會攔截這個 URL，並且把它路由到正確的頁面。</p><p translation-origin=\"off\">There is no issue when the user navigates to that URL from within a running client.\nThe Angular router interprets the URL and routes to that page and hero.</p>\n\n<p translation-result=\"on\">但是，當從郵件中點選連結或在瀏覽器位址列中輸入它或僅僅在英雄詳情頁重新整理下瀏覽器時，所有這些操作都是由瀏覽器本身處理的，在應用的控制範圍之外。\n瀏覽器會直接向伺服器請求那個 URL，路由器沒機會插手。</p><p translation-origin=\"off\">But clicking a link in an email, entering it in the browser address bar, or merely refreshing the browser while on the hero detail page —all of these actions are handled by the browser itself, <em>outside</em> the running application.\nThe browser makes a direct request to the server for that URL, bypassing the router.</p>\n\n<p translation-result=\"on\">靜態伺服器會在收到對 <code>http://www.mysite.com/</code> 的請求時返回 <code>index.html</code>，但是會拒絕對 <code>http://www.mysite.com/heroes/42</code> 的請求，\n並返回一個 <code>404 - Not Found</code> 錯誤，除非，它被配置成了返回 <code>index.html</code>。</p><p translation-origin=\"off\">A static server routinely returns <code>index.html</code> when it receives a request for <code>http://www.mysite.com/</code>.\nBut it rejects <code>http://www.mysite.com/heroes/42</code> and returns a <code>404 - Not Found</code> error <em>unless</em> it is configured to return <code>index.html</code> instead.</p>\n\n<h4 id=\"fallback-configuration-examples\" translation-result=\"on\">後備頁面配置範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Fallback configuration examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">沒有一種配置可以適用於所有伺服器。\n後面這些部分會描述對常見伺服器的配置方式。\n這個列表雖然不夠詳盡，但可以為你提供一個良好的起點。</p><p translation-origin=\"off\">There is no single configuration that works for every server.\nThe following sections describe configurations for some of the most popular servers.\nThe list is by no means exhaustive, but should provide you with a good starting point.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">伺服器</nt-wrapper><nt-wrapper translation-origin=\"off\">Servers</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳細資訊</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"https://httpd.apache.org\">Apache</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">如圖所示，向 <code>.htaccess</code> 檔案新增<a href=\"https://httpd.apache.org/docs/current/mod/mod_rewrite.html\">重寫規則</a>（<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess\">ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess</a>）：<code-example format=\"apache\" language=\"apache\"> RewriteEngine On \n&nbsp; # If an existing asset or directory is requested go to it as it is \n&nbsp; RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR] \n&nbsp; RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d \n&nbsp; RewriteRule ^ - [L] \n \n&nbsp; # If the requested resource doesn't exist, use index.html \n&nbsp; RewriteRule ^ /index.html </code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Add a <a href=\"https://httpd.apache.org/docs/current/mod/mod_rewrite.html\">rewrite rule</a> to the <code>.htaccess</code> file as shown (<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess\">ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess</a>): <code-example format=\"apache\" language=\"apache\"> RewriteEngine On \n&nbsp; # If an existing asset or directory is requested go to it as it is \n&nbsp; RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR] \n&nbsp; RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d \n&nbsp; RewriteRule ^ - [L] \n \n&nbsp; # If the requested resource doesn't exist, use index.html \n&nbsp; RewriteRule ^ /index.html </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"https://nginx.org\">Nginx</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 <code>try_files</code>，如<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">前端控制器模式 Web 應用程式</a>中所述，修改為提供 <code>index.html</code>：<code-example format=\"nginx\" language=\"nginx\"> try_files $uri $uri/ /index.html; </code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Use <code>try_files</code>, as described in <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Front Controller Pattern Web Apps</a>, modified to serve <code>index.html</code>: <code-example format=\"nginx\" language=\"nginx\"> try_files $uri $uri/ /index.html; </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"https://www.ruby-lang.org\">Ruby</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用（<a href=\"http://sinatrarb.com\">sinatra</a>）和配置伺服器 <code>server.rb</code> 的基本 Ruby 檔案建立一個 Ruby 伺服器：<code-example format=\"ruby\" language=\"ruby\"> require 'sinatra' \n \n# Folder structure \n# . \n# -- server.rb \n# -- public \n# &nbsp;&nbsp; |-- project-name \n# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |-- index.html \n \nget '/' do \n&nbsp; folderDir = settings.public_folder + '/project-name'  # ng build output folder \n&nbsp; send_file File.join(folderDir, 'index.html') \nend </code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Create a Ruby server using (<a href=\"http://sinatrarb.com\">sinatra</a>) with a basic Ruby file that configures the server <code>server.rb</code>: <code-example format=\"ruby\" language=\"ruby\"> require 'sinatra' \n \n# Folder structure \n# . \n# -- server.rb \n# -- public \n# &nbsp;&nbsp; |-- project-name \n# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |-- index.html \n \nget '/' do \n&nbsp; folderDir = settings.public_folder + '/project-name'  # ng build output folder \n&nbsp; send_file File.join(folderDir, 'index.html') \nend </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"https://www.iis.net\">IIS</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">向 <code>web.config</code> 新增重寫規則，類似於<a href=\"https://stackoverflow.com/a/26152011\">此處</a>顯示的規則：<code-example format=\"xml\" language=\"xml\"> &lt;system.webServer&gt; \n&nbsp; &lt;rewrite&gt; \n&nbsp;&nbsp;&nbsp; &lt;rules&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\"&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;match url=\".*\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;conditions logicalGrouping=\"MatchAll\"&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/conditions&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;action type=\"Rewrite\" url=\"/index.html\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/rule&gt; \n&nbsp;&nbsp;&nbsp; &lt;/rules&gt; \n&nbsp; &lt;/rewrite&gt; \n&lt;/system.webServer&gt; </code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Add a rewrite rule to <code>web.config</code>, similar to the one shown <a href=\"https://stackoverflow.com/a/26152011\">here</a>: <code-example format=\"xml\" language=\"xml\"> &lt;system.webServer&gt; \n&nbsp; &lt;rewrite&gt; \n&nbsp;&nbsp;&nbsp; &lt;rules&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\"&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;match url=\".*\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;conditions logicalGrouping=\"MatchAll\"&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/conditions&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;action type=\"Rewrite\" url=\"/index.html\" /&gt; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/rule&gt; \n&nbsp;&nbsp;&nbsp; &lt;/rules&gt; \n&nbsp; &lt;/rewrite&gt; \n&lt;/system.webServer&gt; </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"https://pages.github.com\">GitHub 頁面</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://pages.github.com\">GitHub Pages</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">你不能<a href=\"https://github.com/isaacs/github/issues/408\">直接配置</a> GitHub Pages 伺服器，但可以新增 404 頁面。將 <code>index.html</code> 複製到 <code>404.html</code> 中。它仍將作為 404 響應提供，但瀏覽器將處理該頁面並正確載入應用程式。<a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">從 main 上的 <code>docs</code> 提供服務</a>並<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">建立一個 <code>.nojekyll</code> 檔案</a>也是一個好主意</nt-wrapper><nt-wrapper translation-origin=\"off\">You can't <a href=\"https://github.com/isaacs/github/issues/408\">directly configure</a> the GitHub Pages server, but you can add a 404 page. Copy <code>index.html</code> into <code>404.html</code>. It will still be served as the 404 response, but the browser will process that page and load the application properly. It's also a good idea to <a href=\"https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">serve from <code>docs</code> on main</a> and to <a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">create a <code>.nojekyll</code> file</a></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase 託管</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"https://firebase.google.com/docs/hosting\">Firebase hosting</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">新增<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">重寫規則</a>。<code-example language=\"json\"> \"rewrites\": [ { \n&nbsp; \"source\": \"**\", \n&nbsp; \"destination\": \"/index.html\" \n} ] </code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Add a <a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">rewrite rule</a>. <code-example language=\"json\"> \"rewrites\": [ { \n&nbsp; \"source\": \"**\", \n&nbsp; \"destination\": \"/index.html\" \n} ] </code-example></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"mime\"></a></p>\n<h3 id=\"configuring-correct-mime-type-for-javascript-assets\" translation-result=\"on\">為 JavaScript 資產配置正確的 MIME 型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#configuring-correct-mime-type-for-javascript-assets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configuring correct MIME-type for JavaScript assets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#configuring-correct-mime-type-for-javascript-assets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你的所有應用程式 JavaScript 檔案都必須由伺服器提供出來，並將 <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code> 標頭</a>設定為 <code>text/javascript</code> 或其他<a href=\"https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\">與 JavaScript 相容的 MIME-type</a>。</p><p translation-origin=\"off\">All of your application JavaScript files must be served by the server with the <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code> header</a> set to <code>text/javascript</code> or another <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\">JavaScript-compatible MIME-type</a>.</p>\n\n<p translation-result=\"on\">預設情況下，大多數伺服器和託管服務已經這樣做了。</p><p translation-origin=\"off\">Most servers and hosting services already do this by default.</p>\n\n<p translation-result=\"on\">如果伺服器為 JavaScript 檔案配置了錯誤的 MIME 型別，將導致應用程式無法啟動並出現以下錯誤：</p><p translation-origin=\"off\">Server with misconfigured mime-type for JavaScript files will cause an application to fail to start with the following error:</p>\n\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nFailed to load module script: The server responded with a non-JavaScript MIME type of \"text/plain\". Strict MIME type checking is enforced for module scripts per HTML spec.\n\n</code-example>\n<p translation-result=\"on\">如果是這種情況，你將需要檢查你的伺服器配置並將其重新配置為使用 <code>Content-Type: text/javascript</code> 來提供 <code>.js</code> 檔案。有關如何執行此操作的說明，參閱伺服器手冊。</p><p translation-origin=\"off\">If this is the case, you will need to check your server configuration and reconfigure it to serve <code>.js</code> files with <code>Content-Type: text/javascript</code>.\nSee your server's manual for instructions on how to do this.</p>\n\n<p><a id=\"cors\"></a></p>\n<h3 id=\"requesting-services-from-a-different-server-cors\" translation-result=\"on\">請求來自另一個伺服器的服務（CORS）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Requesting services from a different server (CORS)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 開發者在向與該應用的宿主伺服器不同域的伺服器發起請求時，可能會遇到一種<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\"><em>跨域資源共享</em></a>錯誤。\n瀏覽器會阻止該請求，除非得到那臺伺服器的明確許可。</p><p translation-origin=\"off\">Angular developers may encounter a <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\"><em>cross-origin resource sharing</em></a> error when making a service request (typically a data service request) to a server other than the application's own host server.\nBrowsers forbid such requests unless the server permits them explicitly.</p>\n\n<p translation-result=\"on\">客戶端應用對這種錯誤無能為力。\n伺服器必須配置成可以接受來自該應用的請求。\n要了解如何對特定的伺服器開啟 CORS，參閱 <a href=\"https://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>。</p><p translation-origin=\"off\">There isn't anything the client application can do about these errors.\nThe server must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at <a href=\"https://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>.</p>\n\n<p><a id=\"optimize\"></a></p>\n<h2 id=\"production-optimizations\" translation-result=\"on\">為生產環境最佳化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Production optimizations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>production</code> 配置項指定如下最佳化特性。</p><p translation-origin=\"off\">The <code>production</code> configuration engages the following build optimization features.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性</nt-wrapper><nt-wrapper translation-origin=\"off\">Features</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳細資訊</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/aot-compiler\">預先（AOT）編譯</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/aot-compiler\">Ahead-of-Time (AOT) Compilation</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">預編譯 Angular 的元件範本。</nt-wrapper><nt-wrapper translation-origin=\"off\">Pre-compiles Angular component templates.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deployment#prod-mode\">生產模式</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deployment#prod-mode\">Production mode</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為獲得最佳的執行時效能而最佳化此應用。</nt-wrapper><nt-wrapper translation-origin=\"off\">Optimizes the application for the best runtime performance</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">打套件</nt-wrapper><nt-wrapper translation-origin=\"off\">Bundling</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把你的多個應用於庫檔案拼接到少量套件（bundle）中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Concatenates your many application and library files into a few bundles.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">縮小</nt-wrapper><nt-wrapper translation-origin=\"off\">Minification</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">刪除多餘的空格、註釋和可選標記。</nt-wrapper><nt-wrapper translation-origin=\"off\">Removes excess whitespace, comments, and optional tokens.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">醜化</nt-wrapper><nt-wrapper translation-origin=\"off\">Uglification</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">重寫程式碼，使用簡短的、不容易理解的變數名和函式名。</nt-wrapper><nt-wrapper translation-origin=\"off\">Rewrites code to use short, cryptic variable and function names.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">死程式碼消除</nt-wrapper><nt-wrapper translation-origin=\"off\">Dead code elimination</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">刪除未參考過的模組和很多未用到的程式碼。</nt-wrapper><nt-wrapper translation-origin=\"off\">Removes unreferenced modules and much unused code.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">要了解關於 CLI 建構選項及其作用的更多知識，參閱 <a href=\"cli/build\"><code>ng build</code></a>。</p><p translation-origin=\"off\">See <a href=\"cli/build\"><code>ng build</code></a> for more about CLI build options and what they do.</p>\n\n<p><a id=\"prod-mode\"></a></p>\n<h3 id=\"production-mode-at-runtime\" translation-result=\"on\">執行時的生產模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-mode-at-runtime\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Production mode at runtime<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-mode-at-runtime\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當你使用 <code>ng serve</code> 在本地執行應用程式時，Angular 會在執行時使用開發模式配置。執行時的開發模式支援額外的安全檢查、更詳細的錯誤訊息和除錯實用程式，例如<a href=\"errors/NG0100\">檢查後表示式更改</a>檢測。Angular 在瀏覽器控制檯輸出一條訊息，表明開發模式已啟用。</p><p translation-origin=\"off\">When you run an application locally using <code>ng serve</code>, Angular uses the development mode configuration\nat runtime. The development mode at runtime enables extra safety checks, more detailed error messages\nand debugging utilities, such as the <a href=\"errors/NG0100\">expression-changed-after-checked</a> detection. Angular outputs\na message in the browser console to indicate that the development mode is enabled.</p>\n\n<p translation-result=\"on\">這些額外的檢查在開發過程中很有幫助，但它們需要捆綁套件中的額外程式碼，這在生產中是不可取的。為確保對包大小沒有影響，建構最佳化器在生產模式下建構時從套件中刪除僅用於開發的程式碼。</p><p translation-origin=\"off\">Those extra checks are helpful during the development, but they require an extra code in a bundle, which is\nundesirable in production. To ensure that there are no implications on the bundle size, the build optimizer\nremoves the development-only code from the bundle when building in production mode.</p>\n\n<p translation-result=\"on\">使用生產配置建構應用程式時會自動啟用 Angular 的執行時生產模式。</p><p translation-origin=\"off\">Building your application with the production configuration automatically enables Angular's runtime production mode.</p>\n\n<p><a id=\"lazy-loading\"></a></p>\n<h3 id=\"lazy-loading\" translation-result=\"on\">延遲載入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過只加載應用啟動時絕對必須的那些模組，你可以極大縮短應用啟動的時間。</p><p translation-origin=\"off\">You can dramatically reduce launch time by only loading the application modules that absolutely must be present when the application starts.</p>\n\n<p translation-result=\"on\">可以配置 Angular 的路由器，來推遲所有其它模組（及其相關程式碼）的載入時機，方法有<a href=\"guide/router-tutorial-toh#preloading\" title=\"Preloading\">一直等到應用啟動完畢</a>，或者當用到時才按需<a href=\"guide/router#lazy-loading\" title=\"Lazy loading\"><em>延遲載入</em></a>。</p><p translation-origin=\"off\">Configure the Angular Router to defer loading of all other modules (and their associated code), either by <a href=\"guide/router-tutorial-toh#preloading\" title=\"Preloading\">waiting until the app has launched</a> or by <a href=\"guide/router#lazy-loading\" title=\"Lazy loading\"><em>lazy loading</em></a> them on demand.</p>\n\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">不要急性（eagerly）匯入來自延遲載入模組中的任何東西</header><header ng-should-translate=\"\" translation-origin=\"off\">Don't eagerly import something from a lazy-loaded module</header>\n\n<p translation-result=\"on\">如果要延遲載入某個模組，就要小心別在應用啟動時要急性載入的模組（比如根模組 <code>AppModule</code>）中匯入它。\n如果那麼做，該模組就會立刻載入起來。</p><p translation-origin=\"off\">If you mean to lazy-load a module, be careful not to import it in a file that's eagerly loaded when the application starts (such as the root <code>AppModule</code>).\nIf you do that, the module will be loaded immediately.</p>\n\n<p translation-result=\"on\">配置打包方式時必須考慮延遲載入。\n因為預設情況下延遲載入的模組沒有在 JavaScript 中匯入過，因此打包器預設會排除它們。\n打包器不認識路由器配置，也就不能為延遲載入的模組建立獨立的套件。\n你必須手動建立這些套件。</p><p translation-origin=\"off\">The bundling configuration must take lazy loading into consideration.\nBecause lazy-loaded modules aren't imported in JavaScript, bundlers exclude them by default.\nBundlers don't know about the router configuration and can't create separate bundles for lazy-loaded modules.\nYou would have to create these bundles manually.</p>\n\n<p translation-result=\"on\">CLI 會執行 <a href=\"https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\">Angular Ahead-of-Time Webpack 外掛</a>，它會自動識別出延遲載入的 <code>NgModules</code>，併為它們建立獨立的套件。</p><p translation-origin=\"off\">The CLI runs the <a href=\"https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\">Angular Ahead-of-Time Webpack Plugin</a> which automatically recognizes lazy-loaded <code>NgModules</code> and creates separate bundles for them.</p>\n\n</div>\n<p><a id=\"measure\"></a></p>\n<h3 id=\"measure-performance\" translation-result=\"on\">測量效能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Measure performance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你對哪些東西拖慢了應用有更加清晰、精確的瞭解，就可以更好地決定最佳化什麼以及如何最佳化。\n慢的原因可能和你所想的不一樣。\n你可能花費了大量的時間和金錢來最佳化一些實際上無關緊要的東西，甚至可能讓應用變得更慢。\n你應該測量應用在執行環境中的實際行為，這才是最重要的。</p><p translation-origin=\"off\">You can make better decisions about what to optimize and how when you have a clear and accurate understanding of what's making the application slow.\nThe cause may not be what you think it is.\nYou can waste a lot of time and money optimizing something that has no tangible benefit or even makes the application slower.\nYou should measure the application's actual behavior when running in the environments that are important to you.</p>\n\n<p translation-result=\"on\"><a href=\"https://developer.chrome.com/docs/devtools/network/reference\" title=\"Chrome DevTools 網路效能\">Chrome DevTools 的網路和效能頁</a>是你開始學習如何測量效能的好地方。</p><p translation-origin=\"off\">The <a href=\"https://developer.chrome.com/docs/devtools/network/reference\" title=\"Chrome DevTools Network Performance\">Chrome DevTools Network Performance page</a> is a good place to start learning about measuring performance.</p>\n\n<p translation-result=\"on\"><a href=\"https://www.webpagetest.org\">WebPageTest</a>工具是另一個不錯的選擇，它還能幫你驗證這次部署是否成功。</p><p translation-origin=\"off\">The <a href=\"https://www.webpagetest.org\">WebPageTest</a> tool is another good choice that can also help verify that your deployment was successful.</p>\n\n<p><a id=\"inspect-bundle\"></a></p>\n<h3 id=\"inspect-the-bundles\" translation-result=\"on\">檢查釋出套件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Inspect the bundles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> 工具可以幫你在生產環境建構之後探查 JavaScript 套件。</p><p translation-origin=\"off\">The <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> tool is a great way to inspect the generated JavaScript bundles after a production build.</p>\n\n<p translation-result=\"on\">安裝 <code>source-map-explorer</code>：</p><p translation-origin=\"off\">Install <code>source-map-explorer</code>:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install source-map-explorer --save-dev\n\n</code-example>\n<p translation-result=\"on\">為生產環境建構應用，包括原始碼對映表（source map）</p><p translation-origin=\"off\">Build your application for production <em>including the source maps</em></p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build --source-map\n\n</code-example>\n<p translation-result=\"on\">在 <code>dist/</code> 目錄下列出產生的套件。</p><p translation-origin=\"off\">List the generated bundles in the <code>dist/project-name/</code> folder.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nls dist/project-name/*.js\n\n</code-example>\n<p translation-result=\"on\">執行瀏覽器來產生其中一個套件的圖形化表示。\n下面的例子展示了 <code>main</code> 套件的圖表。</p><p translation-origin=\"off\">Run the explorer to generate a graphical representation of one of the bundles.\nThe following example displays the graph for the <em>main</em> bundle.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnode_modules/.bin/source-map-explorer dist/project-name/main*\n\n</code-example>\n<p translation-result=\"on\"><code>source-map-explorer</code> 會分析與套件一起產生的 source map，並畫出所有依賴的地圖，精確展示哪些類包含在哪個套件中。</p><p translation-origin=\"off\">The <code>source-map-explorer</code> analyzes the source map generated with the bundle and draws a map of all dependencies, showing exactly which classes are included in the bundle.</p>\n\n<p translation-result=\"on\">下面是範例應用 <code>cli-quickstart</code> 中 <code>main</code> 套件的輸出。</p><p translation-origin=\"off\">Here's the output for the <em>main</em> bundle of an example application called <code>cli-quickstart</code>.</p>\n\n<div class=\"lightbox\">\n<img alt=\"quickstart sourcemap explorer\" src=\"generated/images/guide/deployment/quickstart-sourcemap-explorer.png\" width=\"767\" height=\"401\">\n</div>\n<p><a id=\"base-tag\"></a></p>\n<h2 id=\"the-base-tag\" translation-result=\"on\"><code>base</code> 標籤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The <code>base</code> tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">HTML 的 <a href=\"guide/router\"><code>&lt;base href=\"...\" /&gt;</code></a> 標籤指定了用於解析靜態檔案（如圖片、指令碼和樣式表）相對地址的基地址。\n比如，對於 <code>&lt;base href=\"/my/app/\"&gt;</code>，瀏覽器就會把 <code>some/place/foo.jpg</code> 這樣的 URL 解析成到 <code>my/app/some/place/foo.jpg</code> 的請求。\n在導航期間，Angular 路由器使用 <em>base href</em> 作為到元件範本檔案和模組檔案的基地址。</p><p translation-origin=\"off\">The HTML <a href=\"guide/router\"><code>&lt;base href=\"...\" /&gt;</code></a> specifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets.\nFor example, given the <code>&lt;base href=\"/my/app/\"&gt;</code>, the browser resolves a URL such as <code>some/place/foo.jpg</code> into a server request for <code>my/app/some/place/foo.jpg</code>.\nDuring navigation, the Angular router uses the <em>base href</em> as the base path to component, template, and module files.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">另請參閱 <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>。</p><p translation-origin=\"off\">See also the <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><code>APP_BASE_HREF</code></a> alternative.</p>\n\n</div>\n<p translation-result=\"on\">在開發期間，你通常會在存有 <code>index.html</code> 的目錄下啟動開發伺服器。\n那就是根目錄，你要在 <code>index.html</code> 的頂部附近新增 <code>&lt;base href=\"/\"&gt;</code>，因為 <code>/</code> 就是該應用的根路徑。</p><p translation-origin=\"off\">In development, you typically start the server in the folder that holds <code>index.html</code>.\nThat's the root folder and you'd add <code>&lt;base href=\"/\"&gt;</code> near the top of <code>index.html</code> because <code>/</code> is the root of the application.</p>\n\n<p translation-result=\"on\">但是在共享或生產伺服器上，你可能會在子目錄下啟動伺服器。\n比如，當前應用的載入地址可能類似於 <code>http://www.mysite.com/my/app</code>，這裡的子目錄就是 <code>my/app/</code>。所以你就要往伺服器端版本的 <code>index.html</code> 中新增 <code>&lt;base href=\"/my/app/\"&gt;</code>。</p><p translation-origin=\"off\">But on the shared or production server, you might serve the application from a subfolder.\nFor example, when the URL to load the application is something like <code>http://www.mysite.com/my/app</code>, the subfolder is <code>my/app/</code> and you should add <code>&lt;base href=\"/my/app/\"&gt;</code> to the server version of the <code>index.html</code>.</p>\n\n<p translation-result=\"on\">這裡如果不配置 <code>base</code> 標籤，應用就會失敗，並在瀏覽器的控制檯中為缺失的檔案顯示一個 <code>404 - Not Found</code> 錯誤。看看它<em>試圖</em>從哪裡去查詢那些檔案，並據此調整 base 標籤。</p><p translation-origin=\"off\">When the <code>base</code> tag is mis-configured, the application fails to load and the browser console displays <code>404 - Not Found</code> errors for the missing files.\nLook at where it <em>tried</em> to find those files and adjust the base tag appropriately.</p>\n\n<p><a id=\"deploy-url\"></a></p>\n<h2 id=\"the-deploy-url\" translation-result=\"on\">部署 url（<code>deploy-url</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-deploy-url\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The <code>deploy</code> url<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-deploy-url\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一個命令列選項，用於指定在<em>編譯</em>時解析圖片、指令碼和樣式表等資產（assets）的相對 URL 的基礎路徑。比如：<code>ng build --deploy-url /my/assets</code>。</p><p translation-origin=\"off\">A command line option used to specify the base path for resolving relative URLs for assets such as images, scripts, and style sheets at <em>compile</em> time.\nFor example: <code>ng build --deploy-url /my/assets</code>.</p>\n\n<p translation-result=\"on\"><code>deploy url</code> 和 <code>base href</code> 這兩個定義的作用有所重疊。</p><p translation-origin=\"off\">The effects of defining a <code>deploy url</code> and <code>base href</code> can overlap.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">兩者都可用於初始指令碼、樣式表、惰性指令碼和 css 資源。</p><p translation-origin=\"off\">Both can be used for initial scripts, stylesheets, lazy scripts, and css resources.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">但是，定義 <code>base href</code> 有一些獨有的作用。</p><p translation-origin=\"off\">However, defining a <code>base href</code> has a few unique effects.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">定義 <code>base href</code> 可用於定位相對路徑範本（HTML）資產和針對相對路徑的 fetch/XMLHttpRequests。</p><p translation-origin=\"off\">Defining a <code>base href</code> can be used for locating relative template (HTML) assets, and relative fetch/XMLHttpRequests.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><code>base href</code> 也可用於定義 Angular 路由器的預設基地址（參閱<a href=\"api/common/APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>）。需要進行更復雜設定的使用者可能需要在應用程式中手動配置 <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> 令牌。（比如，應用程式路由基地址是 <code>/</code>，但各種資產、指令碼等都在 <code>/assets/</code> 下）。</p><p translation-origin=\"off\">The <code>base href</code> can also be used to define the Angular router's default base (see <a href=\"api/common/APP_BASE_HREF\"><code>APP_BASE_HREF</code></a>).\nUsers with more complicated setups may need to manually configure the <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> token within the application (for example, application routing base is <code>/</code> but<code>assets/scripts/etc.</code> are at <code>/assets/</code>).</p>\n\n<p translation-result=\"on\">與可以只在一個地方定義的 <code>base href</code> 不同，<code>deploy url</code> 需要在建構時硬編碼到應用程式中。這意味著指定 <code>deploy url</code> 會降低建構速度，但這是使用在整個應用程式中嵌入自己的選項的代價。這也是為什麼說 <code>base href</code> 通常是更好的選擇。</p><p translation-origin=\"off\">Unlike the <code>base href</code> which can be defined in a single place, the <code>deploy url</code> needs to be hard-coded into an application at build time.\nThis means specifying a <code>deploy url</code> will decrease build speed, but this is the unfortunate cost of using an option that embeds itself throughout an application.\nThat is why a <code>base href</code> is generally the better option.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/deprecations\n - guide/i18n-common-deploy\n - guide/npm-packages\n - guide/upgrade-setup\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/common/APP_BASE_HREF\n - api/router/Routes\n - cli/build\n - errors/NG0100\n - guide/aot-compiler\n - guide/cli-builder\n - guide/deployment#automatic-deployment-with-the-cli\n - guide/deployment#base-標籤\n - guide/deployment#basic-deployment-to-a-remote-server\n - guide/deployment#building-and-serving-from-disk\n - guide/deployment#configuring-correct-mime-type-for-javascript-assets\n - guide/deployment#deploy-to-github-pages\n - guide/deployment#deployment\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#prod-mode\n - guide/deployment#production-mode-at-runtime\n - guide/deployment#production-optimizations\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fall-back-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simple-deployment-options\n - guide/deployment#the-base-tag\n - guide/deployment#the-deploy-url\n - guide/deployment#為-javascript-資產配置正確的-mime-型別\n - guide/deployment#為生產環境最佳化\n - guide/deployment#從磁碟建構和提供服務\n - guide/deployment#使用-cli-進行自動部署\n - guide/deployment#後備頁面配置範例\n - guide/deployment#帶路由的應用必須以-indexhtml-作為後備頁面\n - guide/deployment#延遲載入\n - guide/deployment#最簡化的部署方式\n - guide/deployment#最簡單的部署選項\n - guide/deployment#伺服器端配置\n - guide/deployment#檢查釋出包\n - guide/deployment#測量效能\n - guide/deployment#請求來自另一個伺服器的服務cors\n - guide/deployment#執行時的生產模式\n - guide/deployment#部署\n - guide/deployment#部署-urldeploy-url\n - guide/deployment#部署到-github-pages\n - guide/router\n - guide/router#lazy-loading\n - guide/router-tutorial-toh#preloading\n - http://sinatrarb.com\n - https://aws.amazon.com/s3/?nc2=h_ql_prod_st_s3\n - https://developer.chrome.com/docs/devtools/network/reference\n - https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript\n - https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type\n - https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://enable-cors.org/server.html\n - https://firebase.google.com/docs/hosting\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular-buch/angular-cli-ghpages\n - https://github.com/angular/angular-cli/tree/main/packages/ngtools/webpack\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/deployment.md?message=docs%3A%20請簡述你的修改...\n - https://github.com/vercel/vercel/tree/main/examples/angular\n - https://help.github.com/articles/create-a-repo\n - https://help.github.com/articles/what-is-github-pages\n - https://httpd.apache.org\n - https://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - https://nginx.org\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess\n - https://npmjs.com\n - https://npmjs.org/package/@angular/fire\n - https://npmjs.org/package/@netlify-builder/deploy\n - https://npmjs.org/package/angular-cli-ghpages\n - https://npmjs.org/package/ngx-deploy-npm\n - https://pages.github.com\n - https://stackoverflow.com/a/26152011\n - https://vercel.com/solutions/angular\n - https://webpack.js.org/guides/development/#webpack-dev-server\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net\n - https://www.netlify.com\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.npmjs.com/package/@jefiozie/ngx-aws-deploy\n - https://www.ruby-lang.org\n - https://www.webpagetest.org\n-->"}