{"id":"guide/architecture-services","title":"Introduction to services and dependency injection","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-services.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-services-and-dependency-injection\" translation-result=\"on\">服務與依賴注入簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Introduction to services and dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#introduction-to-services-and-dependency-injection\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><em>服務</em>是一個廣義的概念，它包括應用所需的任何值、函式或特性。狹義的服務是一個明確定義了用途的類別。它應該做一些具體的事，並做好。</p><p translation-origin=\"off\"><em>Service</em> is a broad category encompassing any value, function, or feature that an application needs.\nA service is typically a class with a narrow, well-defined purpose.\nIt should do something specific and do it well.</p>\n\n<p translation-result=\"on\">Angular 把元件和服務區分開，以提高模組性和複用性。</p><p translation-origin=\"off\">Angular distinguishes components from services to increase modularity and reusability.</p>\n\n<p translation-result=\"on\">理想情況下，元件的工作只管使用者體驗，而不用顧及其它。它應該提供用於資料繫結的屬性和方法，以便作為檢視和應用邏輯的中介者。檢視就是範本所渲染的東西，而程式邏輯就是用於承載模型概念的東西。</p><p translation-origin=\"off\">Ideally, a component's job is to enable only the user experience.\nA component should present properties and methods for data binding to mediate between the view and the application logic. The view is what the template renders and the application logic is what includes the notion of a <em>model</em>.</p>\n\n<p translation-result=\"on\">元件應該使用服務來完成那些不涉及檢視或應用邏輯的任務。服務很擅長諸如從伺服器獲取資料、驗證使用者輸入或直接把日誌寫入控制檯之類別的任務。透過把各種處理任務定義到可注入的服務類中，你可以讓它被任何元件使用。透過在不同的環境中注入同一種服務的不同提供者，你還可以讓你的應用更具適應性。</p><p translation-origin=\"off\">A component should use services for tasks that don't involve the view or application logic. Services are good for tasks such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an <em>injectable service class</em>, you make those tasks available to any component.\nYou can also make your application more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</p>\n\n<p translation-result=\"on\">Angular 不會<em>強迫</em>你遵循這些原則。Angular 只會透過<em>依賴注入</em>來幫你更容易地將應用邏輯分解為服務。在 Angular 中，<em>依賴注入</em>會令這些服務可用於各個元件中。</p><p translation-origin=\"off\">Angular doesn't <em>enforce</em> these principles.\nInstead, Angular helps you <em>follow</em> these principles by making it easy to factor your application logic into services. In Angular, <em>dependency injection</em> makes those services available to components.</p>\n\n<h2 id=\"service-examples\" translation-result=\"on\">服務範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Service examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#service-examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是一個服務類別的範例，用於把日誌記錄到瀏覽器的控制檯：</p><p translation-origin=\"off\">Here's an example of a service class that logs to the browser console.</p>\n\n<code-example header=\"src/app/logger.service.ts (class)\" path=\"architecture/src/app/logger.service.ts\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p translation-result=\"on\">服務也可以依賴其它服務。比如，這裡的 <code>HeroService</code> 就依賴於 <code>Logger</code> 服務，它還用 <code>BackendService</code> 來獲取英雄資料。<code>BackendService</code> 還可能再轉而依賴 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務來從伺服器非同步獲取英雄列表。</p><p translation-origin=\"off\">Services can depend on other services.\nFor example, here's a <code>HeroService</code> that depends on the <code>Logger</code> service, and also uses <code>BackendService</code> to get heroes.\nThat service in turn might depend on the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service to fetch heroes asynchronously from a server.</p>\n\n<code-example header=\"src/app/hero.service.ts (class)\" path=\"architecture/src/app/hero.service.ts\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<h2 id=\"dependency-injection-di\" translation-result=\"on\">依賴注入（dependency injection）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/dependency-injection.png\" width=\"200\" height=\"90\">\n</div>\n<p translation-result=\"on\">DI 是 Angular 框架的一部分，用於在任何地方給新建的元件提供服務和其它資源。Angular 提供了把某個服務<em>注入</em>到元件中的能力，以便那個元件得以存取該服務類別。</p><p translation-origin=\"off\">Dependency injection (DI) is the part of the Angular framework that provides components with access to services and other resources.\nAngular provides the ability for you to <em>inject</em> a service into a component to give that component access to the service.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器把一個類別定義為 Angular 中的服務，並且允許 Angular 把它作為<em>依賴</em>注入到元件中。\n類似的，<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器會標記出某個元件、類、管道或 NgModule 具有對某個服務的依賴。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator defines a class as a service in Angular and allows Angular to inject it into a component as a <em>dependency</em>.\nLikewise, the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator indicates that a component, class, pipe, or NgModule <em>has</em> a dependency on a service.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><em>注入器</em>是主要的機制。Angular 會在啟動過程中為你建立全應用級注入器以及所需的其它注入器。你不用自己建立注入器。</p><p translation-origin=\"off\">The <em>injector</em> is the main mechanism.\nAngular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed.\nYou don't have to create injectors.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">該注入器會建立依賴、維護一個<em>容器</em>來管理這些依賴，並儘可能複用它們。</p><p translation-origin=\"off\">An injector creates dependencies and maintains a <em>container</em> of dependency instances that it reuses, if possible.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>提供者</em>是一個物件，用來告訴注入器應該如何獲取或建立依賴</p><p translation-origin=\"off\">A <em>provider</em> is an object that tells an injector how to obtain or create a dependency</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你的應用中所需的任何依賴，都必須使用該應用的注入器來註冊一個提供者，以便注入器可以使用這個提供者來建立新例項。對於服務，該提供者通常就是服務類本身。</p><p translation-origin=\"off\">For any dependency that you need in your app, you must register a provider with the application's injector, so that the injector can use the provider to create new instances.\nFor a service, the provider is typically the service class itself.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">依賴不一定是服務 —— 它還可能是函式或值。</p><p translation-origin=\"off\">A dependency doesn't have to be a service —it could be a function, for example, or a value.</p>\n\n</div>\n<p translation-result=\"on\">當 Angular 建立元件類別的新例項時，它會透過檢視該元件類別的建構函式，來決定該元件依賴哪些服務或其它依賴項。比如 <code>HeroListComponent</code> 的建構函式中需要 <code>HeroService</code>：</p><p translation-origin=\"off\">When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types.\nFor example, the constructor of <code>HeroListComponent</code> needs <code>HeroService</code>.</p>\n\n<code-example header=\"src/app/hero-list.component.ts (constructor)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p translation-result=\"on\">當 Angular 發現某個元件依賴某個服務時，它會首先檢查是否該注入器中已經有了那個服務的任何現有例項。如果所請求的服務尚不存在，注入器就會使用以前註冊的服務提供者來製作一個，並把它加入注入器中，然後把該服務返回給 Angular。</p><p translation-origin=\"off\">When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service.\nIf a requested service instance doesn't yet exist, the injector makes one using the registered provider and adds it to the injector before returning the service to Angular.</p>\n\n<p translation-result=\"on\">當所有請求的服務已解析並返回時，Angular 可以用這些服務例項為引數，呼叫該元件的建構函式。</p><p translation-origin=\"off\">When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</p>\n\n<p translation-result=\"on\"><code>HeroService</code> 的注入過程如下所示：</p><p translation-origin=\"off\">The process of <code>HeroService</code> injection looks something like this.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Service\" class=\"left\" src=\"generated/images/guide/architecture/injector-injects.png\" width=\"479\" height=\"218\">\n</div>\n<h3 id=\"providing-services\" translation-result=\"on\">提供服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Providing services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-services#providing-services\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">對於要用到的任何服務，你必須至少註冊一個<em>提供者</em>。服務可以在自己的元資料中把自己註冊為提供者，這樣可以讓自己隨處可用。或者，你也可以為特定的模組或元件註冊提供者。要註冊提供者，就要在服務的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器中提供它的元資料，或者在 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 或 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 的元資料中。</p><p translation-origin=\"off\">You must register at least one <em>provider</em> of any service you are going to use.\nThe provider can be part of the service's own metadata, making that service available everywhere, or you can register providers with specific modules or components.\nYou register providers in the metadata of the service (in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator), or in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> or <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">預設情況下，Angular CLI 的 <a href=\"cli/generate\"><code>ng generate service</code></a> 命令會在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器中提供元資料來把它註冊到根注入器中。本課程就用這種方法註冊了 HeroService 的提供者：</p><p translation-origin=\"off\">By default, the Angular CLI command <a href=\"cli/generate\"><code>ng generate service</code></a> registers a provider with the root injector for your service by including provider metadata in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.\nThe tutorial uses this method to register the provider of HeroService class definition.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n providedIn: 'root',\n})\n\n</code-example>\n<p translation-result=\"on\">當你在根一級提供服務時，Angular 會為 HeroService 建立一個單一的共享例項，並且把它注入到任何想要它的類中。這種在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊提供者的方式還讓 Angular 能夠透過移除那些從未被用過的服務來最佳化大小。</p><p translation-origin=\"off\">When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code>\nand injects it into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata also allows Angular to optimize an app\nby removing the service from the compiled application if it isn't used, a process known as <em>tree-shaking</em>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當你使用<a href=\"guide/architecture-modules\">特定的 NgModule</a> 註冊提供者時，該服務的同一個例項將會對該 NgModule 中的所有元件可用。要想在這一層註冊，請用 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 裝飾器中的 <code>providers</code> 屬性：</p><p translation-origin=\"off\">When you register a provider with a <a href=\"guide/architecture-modules\">specific NgModule</a>, the same instance of a service is available to all components in that NgModule.\nTo register at this level, use the <code>providers</code> property of the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> decorator.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  providers: [\n  BackendService,\n  Logger\n ],\n …\n})\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">當你在元件級註冊提供者時，你會為該元件的每一個新例項提供該服務的一個新例項。要在元件級註冊，就要在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元資料的 <code>providers</code> 屬性中註冊服務提供者。</p><p translation-origin=\"off\">When you register a provider at the component level, you get a new instance of the service with each new instance of that component.\nAt the component level, register a service provider in the <code>providers</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata.</p>\n\n<code-example header=\"src/app/hero-list.component.ts (component providers)\" path=\"architecture/src/app/hero-list.component.ts\" region=\"providers\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\n\n</code-example>\n</li>\n</ul>\n<p translation-result=\"on\">要了解更多細節，參閱<a href=\"guide/dependency-injection\">依賴注入</a>一節。</p><p translation-origin=\"off\">For more detailed information, see the <a href=\"guide/dependency-injection\">Dependency Injection</a> section.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core/Injectable\n - errors/NG0201\n - guide/architecture\n - guide/architecture-modules\n - guide/creating-libraries\n - guide/glossary\n - guide/hierarchical-dependency-injection\n - guide/lightweight-injection-tokens\n - start/start-data\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - cli/generate\n - guide/architecture-modules\n - guide/architecture-services#dependency-injection-di\n - guide/architecture-services#introduction-to-services-and-dependency-injection\n - guide/architecture-services#providing-services\n - guide/architecture-services#service-examples\n - guide/architecture-services#依賴注入dependency-injection\n - guide/architecture-services#提供服務\n - guide/architecture-services#服務與依賴注入簡介\n - guide/architecture-services#服務範例\n - guide/dependency-injection\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-services.md?message=docs%3A%20請簡述你的修改...\n-->"}