{"id":"guide/template-expression-operators","title":"Template expression operators","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-expression-operators.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"template-expression-operators\" translation-result=\"on\">範本表示式運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Template expression operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"callout is-critical\">\n<header ng-should-translate=\"\" translation-result=\"on\">已標記為歸檔</header><header ng-should-translate=\"\" translation-origin=\"off\">Marked for archiving</header>\n\n<p translation-result=\"on\">為確保你擁有最佳的體驗，本主題已標記為存檔，直到我們確定其清楚地傳達了最準確的資訊為止。</p><p translation-origin=\"off\">To ensure that you have the best experience possible, this topic is marked for archiving until we determine that it clearly conveys the most accurate information possible.</p>\n\n<p translation-result=\"on\">同時，下列主題可能會有所幫助：<a href=\"guide/hierarchical-dependency-injection\">多級注入器</a>。</p><p translation-origin=\"off\">In the meantime, this topic might be helpful: <a href=\"guide/hierarchical-dependency-injection\">Hierarchical injectors</a>.</p>\n\n<p translation-result=\"on\">如果你認為不應將此內容存檔，請提交 <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub 問題</a>。</p><p translation-origin=\"off\">If you think this content should not be archived, please file a <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub issue</a>.</p>\n\n</div>\n<p translation-result=\"on\">Angular 範本表達語言採用了 JavaScript 語法的子集，併為特定情況添加了一些特殊的運算子。</p><p translation-origin=\"off\">The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有關包含本指南中程式碼片段的有效範例，請參見<live-example></live-example></p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<p><a id=\"non-null-assertion-operator\"></a></p>\n<h2 id=\"the-non-null-assertion-operator-\" translation-result=\"on\">非空斷言運算子（<code>!</code>）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator-\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The non-null assertion operator (<code>!</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator-\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 TypeScript 的 <code>--strictNullChecks</code> 標誌時，可以防止型別檢查器使用 Angular 的非空斷言運算子 <code>!</code>。</p><p translation-origin=\"off\">When you use TypeScript's <code>--strictNullChecks</code> flag, you can prevent the type checker from throwing an error with Angular's non-null assertion operator, <code>!</code>.</p>\n\n<p translation-result=\"on\">Angular 非空斷言運算子使 TypeScript 型別檢查器暫停對特定屬性表示式的 <code>null</code> 和 <code>undefined</code> 的嚴格檢查。</p><p translation-origin=\"off\">The Angular non-null assertion operator causes the TypeScript type checker to suspend strict <code>null</code> and <code>undefined</code> checks for a specific property expression.</p>\n\n<p translation-result=\"on\">比如，你可以斷言 <code>item</code> 也是已定義的。</p><p translation-origin=\"off\">For example, you can assert that <code>item</code> properties are also defined.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\">\n&lt;!-- Assert color is defined, even if according to the `Item` type it could be undefined. --&gt;\n&lt;p&gt;The item's color is: {{item.color!.toUpperCase()}}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">通常，你要確保任何屬性繫結都不為 <code>null</code> 或 <code>undefined</code>。但是，在某些情況下，這種狀態是可以接受的。對於這些情況，可以使用 Angular 的非空斷言運算子來防止 TypeScript 報告某個屬性為 <code>null</code> 或 <code>undefined</code>。</p><p translation-origin=\"off\">Often, you want to make sure that any property bindings aren't <code>null</code> or <code>undefined</code>.\nHowever, there are situations in which such states are acceptable.\nFor those situations, you can use Angular's non-null assertion operator to prevent TypeScript from reporting that a property is <code>null</code> or <code>undefined</code>.</p>\n\n<p translation-result=\"on\">非空斷言運算子 <code>!</code> 是可選的，除非你要啟用嚴格的空檢查。</p><p translation-origin=\"off\">The non-null assertion operator, <code>!</code>, is optional unless you turn on strict null checks.</p>\n\n<p translation-result=\"on\">有關更多資訊，請參見 TypeScript 的<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"TypeScript 中嚴格的 null 檢查\">嚴格空檢查</a>。</p><p translation-origin=\"off\">For more information, see TypeScript's <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a>.</p>\n\n<p><a id=\"any-type-cast-function\"></a></p>\n<h2 id=\"the-any-type-cast-function\" translation-result=\"on\"><code>$any()</code> 型別轉換函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The <code>$any()</code> type cast function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有時，繫結表示式會在 <a href=\"guide/aot-compiler\">AOT 編譯</a>期間觸發型別錯誤，並且不可能或很難完全指定型別。要使此錯誤靜音，可以使用 <code>$any()</code> 強制轉換函式把表示式強制轉換為 <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 型別</a>，如下例所示：</p><p translation-origin=\"off\">Sometimes a binding expression triggers a type error during <a href=\"guide/aot-compiler\">AOT compilation</a> and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the <code>$any()</code> cast function to cast\nthe expression to the <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> type</a> as in the following example:</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\">\n&lt;p&gt;The item's undeclared best by date is: {{$any(item).bestByDate}}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\">使用 <code>$any()</code> 可以防止 TypeScript 報告 <code>bestByDate</code> 不是 <code>item</code> 物件成員的錯誤。</p><p translation-origin=\"off\">Using <code>$any()</code> prevents TypeScript from reporting that <code>bestByDate</code> is not a member of the <code>item</code> object.</p>\n\n<p translation-result=\"on\"><code>$any()</code> 強制轉換函式也可以與 <code>this</code> 一起使用，以允許存取元件的未宣告成員。</p><p translation-origin=\"off\">The <code>$any()</code> cast function also works with <code>this</code> to allow access to undeclared members of the component.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\">\n&lt;p&gt;The item's undeclared best by date is: {{$any(this).bestByDate}}&lt;/p&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>$any()</code> 強制轉換函式可在繫結表示式中任何進行方法呼叫的地方使用。</p><p translation-origin=\"off\">The <code>$any()</code> cast function works anywhere in a binding expression where a method call is valid.</p>\n\n<p translation-result=\"on\">還要注意 <code>$any()</code> 隻影響型別。產生的程式碼中沒有此方法呼叫；<code>$any()</code> 函式完全被編譯掉了。</p><p translation-origin=\"off\">Also note that <code>$any()</code> only affects the typing. There is no method call in the generated code; the <code>$any()</code> function is entirely compiled away.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/binding-overview\n - guide/example-apps-list\n - guide/template-syntax\n - guide/template-typecheck\n - guide/understanding-template-expr-overview\n-->\n<!-- links from this doc:\n - guide/aot-compiler\n - guide/hierarchical-dependency-injection\n - guide/template-expression-operators#any-型別轉換函式\n - guide/template-expression-operators#template-expression-operators\n - guide/template-expression-operators#the-any-type-cast-function\n - guide/template-expression-operators#the-non-null-assertion-operator-\n - guide/template-expression-operators#範本表示式運算子\n - guide/template-expression-operators#非空斷言運算子\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - https://github.com/angular/angular/issues/new?template=3-docs-bug.md\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/template-expression-operators.md?message=docs%3A%20請簡述你的修改...\n - https://www.typescriptlang.org/docs/handbook/basic-types.html#any\n-->"}