{"id":"guide/ajs-quick-reference","title":"AngularJS to Angular concepts: Quick reference","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"angularjs-to-angular-concepts-quick-reference\" translation-result=\"on\">關於 AngularJS 與 Angular 概念的快速參考<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">AngularJS to Angular concepts: Quick reference<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><em>Angular</em>是現在和未來的 Angular 名稱。</p><p translation-origin=\"off\"><em>Angular</em> is the name for the Angular of today and tomorrow.</p>\n\n<p translation-result=\"on\"><em>AngularJS</em>是 Angular 的所有 v1.x 版本的名稱。</p><p translation-origin=\"off\"><em>AngularJS</em> is the name for all v1.x versions of Angular.</p>\n\n<p translation-result=\"on\">本章提供了一個快速的參考指南，指出一些常用的 AngularJS 語法及其在 Angular 中的等價物。</p><p translation-origin=\"off\">This guide helps you transition from AngularJS to Angular\nby mapping AngularJS syntax to the corresponding Angular syntax.</p>\n\n<p translation-result=\"on\"><strong>參閱 <live-example name=\"ajs-quick-reference\"></live-example> 以學習 Angular 語法</strong></p><p translation-origin=\"off\"><strong>See the Angular syntax in this <live-example name=\"ajs-quick-reference\"></live-example></strong>.</p>\n\n<h2 id=\"template-basics\" translation-result=\"on\">範本基礎<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-basics\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">範本是 Angular 應用中的門面部分，它是用 HTML 寫的。下表中是一些 AngularJS 中的關鍵範本特性及其在 Angular 中的等價語法。</p><p translation-origin=\"off\">Templates are the user-facing part of an Angular application and are written in HTML.\nThe following table lists some of the key AngularJS template features with their corresponding Angular template syntax.</p>\n\n<h3 id=\"bindings--interpolation--bindings--interpolation\" translation-result=\"on\">繫結/插值 → 繫結/插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Bindings / interpolation → bindings / interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結/插值</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> Your favorite hero is: {{vm.favoriteHero}} </code-example>在 AngularJS 中，花括號中的表示式表示單向繫結。這會將元素的值繫結到與此範本關聯的控制器中的屬性。<br>使用 <code>controller as</code> 語法時，繫結要以控制器別名（<code>vm</code> 或 <code>$ctrl</code>）為字首，因為你必須特定於此來源。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bindings/interpolation</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> Your favorite hero is: {{vm.favoriteHero}} </code-example> In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template. <br> When using the <code>controller as</code> syntax, the binding is prefixed with the controller alias (<code>vm</code> or <code>$ctrl</code>) because you have to be specific about the source.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結/插值</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example>在 Angular 中，花括號中的範本表示式仍然表示單向繫結。這會將元素的值繫結到元件的屬性。繫結的上下文是隱含的，並且始終是與其關聯的元件，因此它不需要參考變數。<br>有關更多資訊，請參閱<a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">插值</a>指南。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bindings/interpolation</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"interpolation\">\nYour favorite hero is: {{favoriteHero}}\n\n</code-example> In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable. <br> For more information, see the <a href=\"guide/interpolation\" title=\"Text interpolation | Angular\">Interpolation</a> guide.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"filters--pipes\" translation-result=\"on\">過濾器/管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Filters → pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">過濾器</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} \n &lt;/td&gt; </code-example>要過濾 AngularJS 範本中的輸出，請使用管道 (<code>|</code>) 字元和一個或多個過濾器。<br>此範例將 <code>title</code> 屬性過濾為大寫。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Filters</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} \n &lt;/td&gt; </code-example> To filter output in AngularJS templates, use the pipe (<code>|</code>) character and one or more filters. <br> This example filters the <code>title</code> property to uppercase.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">管道</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&lt;/td&gt;\n\n</code-example>在 Angular 中，你可以用管道 (<code>|</code>) 字元來過濾輸出，但現在它們改名為<strong>管道</strong>。AngularJS 的許多（但不是全部）內建過濾器都是 Angular 中的內建管道。<br>有關更多資訊，請參閱<a href=\"guide/ajs-quick-reference#filters--pipes\" title=\"Filters/pipes - AngularJS to Angular concepts: Quick reference | Angular\">過濾器/管道</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Pipes</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"uppercase\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&lt;/td&gt;\n\n</code-example> In Angular you use similar syntax with the pipe (<code>|</code>) character to filter output, but now you call them <strong>pipes</strong>. Many (but not all) of the built-in filters from AngularJS are built-in pipes in Angular. <br> For more information, see <a href=\"guide/ajs-quick-reference#filters--pipes\" title=\"Filters/pipes - AngularJS to Angular concepts: Quick reference | Angular\">Filters/pipes</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"local-variables--input-variables\" translation-result=\"on\">區域變數 → 輸入變數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables--input-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Local variables → input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#local-variables--input-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">區域變數</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in vm.movies\"&gt; \n&nbsp; &lt;td&gt; \n&nbsp;&nbsp;&nbsp; {{movie.title}} \n&nbsp; &lt;/td&gt; \n&lt;/tr&gt; </code-example>在這裡，<code>movie</code> 是使用者定義的區域變數。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Local variables</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in vm.movies\"&gt; \n&nbsp; &lt;td&gt; \n&nbsp;&nbsp;&nbsp; {{movie.title}} \n&nbsp; &lt;/td&gt; \n&lt;/tr&gt; </code-example> Here, <code>movie</code> is a user-defined local variable.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">輸入變數</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n  &lt;td&gt;{{movie.title}}&lt;/td&gt;\n&lt;/tr&gt;\n\n</code-example>Angular 具有使用 <code>let</code> 關鍵字顯式定義的真正的範本輸入變數。<br>有關更多資訊，請參閱<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">結構型指令</a>的<a href=\"guide/structural-directives#structural-directive-shorthand\" title=\"Structural directive shorthand - Writing structural directives | Angular\">結構型指令簡寫法</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Input variables</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"local\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n  &lt;td&gt;{{movie.title}}&lt;/td&gt;\n&lt;/tr&gt;\n\n</code-example> Angular has true template input variables that are explicitly defined using the <code>let</code> keyword. <br> For more information, see the <a href=\"guide/structural-directives#structural-directive-shorthand\" title=\"Structural directive shorthand - Writing structural directives | Angular\">Structural directive shorthand</a> section of <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"template-directives\" translation-result=\"on\">範本指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Template directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#template-directives\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">AngularJS 為範本提供了七十多個內建指令。\n在 Angular 中，它們很多都已經不需要了，因為 Angular 有了一個更加強大、快捷的繫結系統。\n下面是一些 AngularJS 中的關鍵指令及其在 Angular 中的等價物。</p><p translation-origin=\"off\">AngularJS provides more than seventy built-in directives for templates.\nMany of them are not needed in Angular because of its more capable and expressive binding system.\nThe following are some of the key AngularJS built-in directives and their equivalents in Angular.</p>\n\n<h3 id=\"ng-app--bootstrapping\" translation-result=\"on\"><code>ng-app</code> → 引導<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app--bootstrapping\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-app</code> → bootstrapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-app--bootstrapping\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-app</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;body ng-app=\"movieHunter\"&gt; </code-example>應用程式啟動過程稱為<strong>引導</strong>。<br>雖然你也可以在程式碼中引導 AngularJS 應用程式，但許多應用程式會使用 <code>ng-app</code> 指令以宣告式進行引導，併為其提供應用程式模組的名稱 ( <code>movieHunter</code> )。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-app</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;body ng-app=\"movieHunter\"&gt; </code-example> The application startup process is called <strong>bootstrapping</strong>. <br> Although you can bootstrap an AngularJS application in code, many applications bootstrap declaratively with the <code>ng-app</code> directive, giving it the name of the module (<code>movieHunter</code>) of the application.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">引導</header><code-example header=\"main.ts\" format=\"typescript\" hidecopy=\"\" language=\"typescript\" path=\"ajs-quick-reference/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-example><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" header=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>Angular 沒有 bootstrap 指令。要在程式碼中啟動應用程式，請在 <code>app.module.ts</code> 中顯式引導應用程式的根模組 ( <code>AppModule</code> ) 並在 <code>main.ts</code> 中顯式引導應用程式的根元件 ( <code>AppComponent</code> )。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bootstrapping</header> <code-example header=\"main.ts\" format=\"typescript\" hidecopy=\"\" language=\"typescript\" path=\"ajs-quick-reference/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));\n\n\n</code-example> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\" header=\"app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example> Angular does not have a bootstrap directive. To launch the application in code, explicitly bootstrap the root module (<code>AppModule</code>) of the application in <code>main.ts</code> and the root component (<code>AppComponent</code>) of the application in <code>app.module.ts</code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-class--ngclass\"><code>ng-class</code> → <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-class--ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-class</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-class=\"{active: isActive}\"&gt; \n &lt;div ng-class=\"{active: isActive, shazam: isImportant}\"&gt; </code-example>在 AngularJS 中，<code>ng-class</code> 指令會根據表示式包含/排除 CSS 類別。該表示式通常是一個鍵值物件，每個鍵都定義為一個 CSS 類別名稱，其值是為可估算為布林值的範本表示式。<br>在第一個範例中，如果 <code>isActive</code> 為 true，則將 <code>active</code> 類應用於此元素。<br>你可以指定多個類，如第二個範例所示。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-class</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-class=\"{active: isActive}\"&gt; \n &lt;div ng-class=\"{active: isActive, shazam: isImportant}\"&gt; </code-example> In AngularJS, the <code>ng-class</code> directive includes/excludes CSS classes based on an expression. The expression is often a key-value object, with key defined as a CSS class name, and value as a template expression that evaluates to a Boolean. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\"&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\"&gt;\n&lt;div [class.active]=\"isActive\"&gt;\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 指令的工作方式類似。它基於表示式包含/排除 CSS 類別。<br>在第一個範例中，如果 <code>isActive</code> 為 true，則將 <code>active</code> 類應用於元素。<br>你可以指定多個類，如第二個範例所示。<br>Angular 還具有<strong>類繫結</strong>，這是新增或刪除單個類別的好方法，如第三個範例所示。<br>有關更多資訊，請參閱<a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">屬性、類和樣式繫結</a>頁面。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngClass\">\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive}\"&gt;\n&lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive,\n                 'shazam': isImportant}\"&gt;\n&lt;div [class.active]=\"isActive\"&gt;\n\n</code-example> In Angular, the <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> directive works similarly. It includes/excludes CSS classes based on an expression. <br> In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true. <br> You can specify multiple classes, as shown in the second example. <br> Angular also has <strong>class binding</strong>, which is a good way to add or remove a single class, as shown in the third example. <br> For more information see <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute, class, and style bindings</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-click--bind-to-the-click-event\" translation-result=\"on\"><code>ng-click</code> → 繫結到 <code>click</code> 事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click--bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-click</code> → Bind to the <code>click</code> event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-click--bind-to-the-click-event\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-click</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;button ng-click=\"vm.toggleImage()\"&gt; \n &lt;button ng-click=\"vm.toggleImage($event)\"&gt; </code-example>在 AngularJS 中，<code>ng-click</code> 指令允許你指定單擊元素時的自訂行為。<br>在第一個範例中，當用戶單擊按鈕時，會執行 <code>vm</code> <code>controller as</code> 別名參考的控制器中的 <code>toggleImage()</code> 方法。<br>第二個範例示範了傳入 <code>$event</code> 物件，該物件會向控制器提供有關事件的詳細資訊。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-click</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;button ng-click=\"vm.toggleImage()\"&gt; \n &lt;button ng-click=\"vm.toggleImage($event)\"&gt; </code-example> In AngularJS, the <code>ng-click</code> directive allows you to specify custom behavior when an element is clicked. <br> In the first example, when the user clicks the button, the <code>toggleImage()</code> method in the controller referenced by the <code>vm</code> <code>controller as</code> alias is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the controller.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結到<code>click</code>事件</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&lt;button type=\"button\" (click)=\"toggleImage()\"&gt;\n&lt;button type=\"button\" (click)=\"toggleImage($event)\"&gt;\n\n</code-example>Angular 中不存在 AngularJS 基於事件的指令。相反，它使用<strong>事件繫結</strong>來定義從範本檢視到元件的單向繫結。<br>對於事件繫結，請在括號中定義目標事件的名稱，並在等號的右側指定一個範本陳述式，用引號引起來。然後，Angular 為目標事件設定一個事件處理程式。引發事件時，處理程式會執行範本陳述式。<br>在第一個範例中，當用戶單擊按鈕時，會執行關聯元件中的 <code>toggleImage()</code> 方法。<br>第二個範例示範了傳入 <code>$event</code> 物件，該物件會向元件提供有關事件的詳細資訊。<br>有關 DOM 事件的列表，請參閱<a href=\"https://developer.mozilla.org/docs/Web/Events\" title=\"Event reference | MDN\">事件參考手冊</a>。<br>有關更多資訊，請參閱<a href=\"guide/event-binding\" title=\"Event binding | Angular\">事件繫結</a>頁面。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bind to the <code>click</code> event</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"event-binding\">\n&lt;button type=\"button\" (click)=\"toggleImage()\"&gt;\n&lt;button type=\"button\" (click)=\"toggleImage($event)\"&gt;\n\n</code-example> AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using <strong>event binding</strong>. <br> For event binding, define the name of the target event within parenthesis and specify a template statement, in quotes, to the right of the equals. Angular then sets up an event handler for the target event. When the event is raised, the handler executes the template statement. <br> In the first example, when a user clicks the button, the <code>toggleImage()</code> method in the associated component is executed. <br> The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the component. <br> For a list of DOM events, see <a href=\"https://developer.mozilla.org/docs/Web/Events\" title=\"Event reference | MDN\">Event reference</a>. <br> For more information, see the <a href=\"guide/event-binding\" title=\"Event binding | Angular\">Event binding</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-controller--component-decorator\" translation-result=\"on\"><code>ng-controller</code> → 元件裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller--component-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-controller</code> → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-controller--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-controller</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-controller=\"MovieListCtrl as vm\"&gt; </code-example>在 AngularJS 中，<code>ng-controller</code> 指令會將控制器附加到檢視。使用 <code>ng-controller</code>（或將控制器定義為路由的一部分）將檢視繫結到與該檢視關聯的控制器程式碼。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-controller</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-controller=\"MovieListCtrl as vm\"&gt; </code-example> In AngularJS, the <code>ng-controller</code> directive attaches a controller to the view. Using the <code>ng-controller</code>, or defining the controller as part of the routing, ties the view to the controller code associated with that view.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">元件裝飾器</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example>在 Angular 中，範本不需要再指定其關聯的控制器。相反，元件將其關聯的範本指定為元件類裝飾器的一部分。<br>有關更多資訊，請參閱<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">架構概覽</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator. <br> For more information, see <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Architecture Overview</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-hide--bind-to-the-hidden-property\" translation-result=\"on\"><code>ng-hide</code> → 繫結到 <code>hidden</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-hide</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-hide</code></header>在 AngularJS 中，<code>ng-hide</code> 指令會根據表示式顯示或隱藏關聯的 HTML 元素。有關更多資訊，請參閱<a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-hide</code></header> In AngularJS, the <code>ng-hide</code> directive shows or hides the associated HTML element based on an expression. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結到<code>hidden</code>屬性</header>在 Angular 中，你使用屬性繫結；Angular 沒有內建的<em>hide</em>指令。有關更多資訊，請參閱<a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bind to the <code>hidden</code> property</header> In Angular, you use property binding. Angular does not have a built-in <em>hide</em> directive. For more information, see <a href=\"guide/ajs-quick-reference#template-directives\" title=\"Template directives - AngularJS to Angular concepts: Quick reference | Angular\">ng-show</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-href--bind-to-the-href-property\" translation-result=\"on\"><code>ng-href</code> → 繫結到 <code>href</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href--bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-href</code> → Bind to the <code>href</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-href--bind-to-the-href-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-href</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;a ng-href=\"{{ angularDocsUrl }}\"&gt; \n &nbsp; Angular Docs \n &lt;/a&gt; </code-example><code>ng-href</code> 指令允許 AngularJS 預處理 <code>href</code> 屬性。在瀏覽器從 URL 獲取之前，<code>ng-href</code> 可以用適當的 URL 替換繫結表示式。<br>在 AngularJS 中，<code>ng-href</code> 通常用於作為導航的一部分啟用路由。<br><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;a ng-href=\"#{{ moviesHash }}\"&gt; \n&nbsp; Movies \n&lt;/a&gt; </code-example>Angular 中路由的處理方式不同。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-href</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;a ng-href=\"{{ angularDocsUrl }}\"&gt; \n &nbsp; Angular Docs \n &lt;/a&gt; </code-example> The <code>ng-href</code> directive allows AngularJS to preprocess the <code>href</code> property. <code>ng-href</code> can replace the binding expression with the appropriate URL before the browser fetches from that URL. <br> In AngularJS, the <code>ng-href</code> is often used to activate a route as part of navigation. <br> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;a ng-href=\"#{{ moviesHash }}\"&gt; \n&nbsp; Movies \n&lt;/a&gt; </code-example> Routing is handled differently in Angular.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結到<code>href</code>屬性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&lt;a [href]=\"angularDocsUrl\"&gt;Angular Docs&lt;/a&gt;\n\n</code-example>Angular 使用屬性繫結；Angular 沒有內建的<em>href</em>指令。將元素的 <code>href</code> 屬性放在方括號中，並將其設定為帶引號的範本表示式。有關更多資訊，請參閱<a href=\"guide/property-binding\" title=\"Property binding | Angular\">屬性繫結</a>頁面。在 Angular 中，<code>href</code> 不再用於路由。路由使用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>，如下例所示。<code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\"&gt;Movies&lt;/a&gt;\n\n</code-example>有關路由的更多資訊，請參閱<a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">路由和導航</a>頁面中的<a href=\"guide/router#defining-a-basic-route\" title=\"Defining a basic route - Common Routing Tasks | Angular\">定義基本路由</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bind to the <code>href</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"href\">\n&lt;a [href]=\"angularDocsUrl\"&gt;Angular Docs&lt;/a&gt;\n\n</code-example> Angular uses property binding. Angular does not have a built-in <em>href</em> directive. Place the <code>href</code> property of the element in square brackets and set it to a quoted template expression. For more information see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page. In Angular, <code>href</code> is no longer used for routing. Routing uses <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>, as shown in the following example. <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"router-link\">\n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"['/movies']\"&gt;Movies&lt;/a&gt;\n\n</code-example> For more information on routing, see <a href=\"guide/router#defining-a-basic-route\" title=\"Defining a basic route - Common Routing Tasks | Angular\">Defining a basic route</a> in the <a href=\"guide/router\" title=\"Common Routing Tasks | Angular\">Routing &amp; Navigation</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-if--ngif\"><code>ng-if</code> → <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-if--ngif\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-if</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;table ng-if=\"movies.length\"&gt; </code-example>在 AngularJS 中，<code>ng-if</code> 指令會根據表示式刪除或重新建立 DOM 的一部分。如果表示式為 false，則從 DOM 中刪除該元素。<br>在此範例中，除非 <code>movies</code> 陣列的長度大於零，否則 <code>&lt;table&gt;</code> 元素會從 DOM 中刪除。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-if</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;table ng-if=\"movies.length\"&gt; </code-example> In AngularJS, the <code>ng-if</code> directive removes or recreates a section of the DOM, based on an expression. If the expression is false, the element is removed from the DOM. <br> In this example, the <code>&lt;table&gt;</code> element is removed from the DOM unless the <code>movies</code> array has a length greater than zero.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&lt;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\"&gt;\n\n</code-example>Angular 中的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令與 AngularJS 中的 <code>ng-if</code> 指令相同。它根據表示式刪除或重新建立 DOM 的一部分。<br>在此範例中，除非 <code>movies</code> 陣列具有長度，否則 <code>&lt;table&gt;</code> 元素會從 DOM 中刪除。<br>在此範例中，需要 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 之前的 ( <code>*</code> )。有關更多資訊，請參閱<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">結構指令</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngIf\">\n&lt;table *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"movies.length\"&gt;\n\n</code-example> The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive in Angular works the same as the <code>ng-if</code> directive in AngularJS. It removes or recreates a section of the DOM based on an expression. <br> In this example, the <code>&lt;table&gt;</code> element is removed from the DOM unless the <code>movies</code> array has a length. <br> The (<code>*</code>) before <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is required in this example. For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-model--ngmodel\"><code>ng-model</code> → <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-model--ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-model</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;input ng-model=\"vm.favoriteHero\" /&gt; </code-example>在 AngularJS 中，<code>ng-model</code> 指令將表單控制項繫結到控制器中與範本關聯的屬性。這提供了<strong>雙向繫結</strong>，任何更改都會讓檢視與模型保持同步。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-model</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;input ng-model=\"vm.favoriteHero\" /&gt; </code-example> In AngularJS, the <code>ng-model</code> directive binds a form control to a property in the controller associated with the template. This provides <strong>two-way binding</strong> whereby changes result in the value in the view and the model being synchronized.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" /&gt;\n\n</code-example>在 Angular 中，<strong>雙向繫結</strong>由 <code>[()]</code> 表示，形象的稱之為“盒子裡的香蕉”。此語法是一種快捷方式：<ul><li>從元件到檢視的屬性繫結</li><li>從檢視到元件的事件繫結</li></ul>，從而提供了雙向繫結。<br>有關使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的雙向繫結的更多資訊，請參閱<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">內建指令</a>的<a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">使用 <code>ngModel</code> 顯示和更新屬性</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngModel\">\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"favoriteHero\" /&gt;\n\n</code-example> In Angular, <strong>two-way binding</strong> is indicated by <code>[()]</code>, descriptively referred to as a \"banana in a box.\" This syntax is a shortcut for defining both:<ul><li>property binding, from the component to the view</li><li>event binding, from the view to the component</li></ul> thereby providing two-way binding. <br> For more information on two-way binding with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, see the <a href=\"guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\" title=\"Displaying and updating properties with ngModel - Built-in directives | Angular\">Displaying and updating properties with <code>ngModel</code></a> section of <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-repeat--ngfor\"><code>ng-repeat</code> → <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-repeat--ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-repeat</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in vm.movies\"&gt; </code-example>在 AngularJS 中，<code>ng-repeat</code> 指令為指定集合中的每個條目複寫關聯的 DOM 元素。<br>在此範例中，錶行 ( <code>&lt;tr&gt;</code> ) 元素會為電影集合中的每個電影物件複寫。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-repeat</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in vm.movies\"&gt; </code-example> In AngularJS, the <code>ng-repeat</code> directive repeats the associated DOM element for each item in the specified collection. <br> In this example, the table row (<code>&lt;tr&gt;</code>) element repeats for each movie object in the collection of movies.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n\n</code-example>Angular 中的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 指令類似於 AngularJS 中的 <code>ng-repeat</code> 指令。它為指定集合中的每個條目重複關聯的 DOM 元素。更準確地說，它將定義的元素（在此範例中為 <code>&lt;tr&gt;</code>）及其內容轉換為範本，並使用該範本為列表中的每個條目例項化一個檢視。<br>請注意其他語法區別：<ul><li><code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 之前的 ( <code>*</code> ) 是必需的</li><li><code>let</code> 關鍵字將 <code>movie</code> 標識為輸入變數</li><li>列表介詞是 <code>of</code>，而不是 <code>in</code>。</li></ul>有關更多資訊，請參閱<a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">結構指令</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngFor\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies\"&gt;\n\n</code-example> The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> directive in Angular is like the <code>ng-repeat</code> directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (<code>&lt;tr&gt;</code> in this example) and its contents into a template and uses that template to instantiate a view for each item in the list. <br> Notice the other syntax differences: <ul><li>The (<code>*</code>) before <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> is required</li><li>The <code>let</code> keyword identifies <code>movie</code> as an input variable</li><li>The list preposition is <code>of</code>, not <code>in</code></li></ul>For more information, see <a href=\"guide/structural-directives\" title=\"Writing structural directives | Angular\">Structural Directives</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-show--bind-to-the-hidden-property\" translation-result=\"on\"><code>ng-show</code> → 繫結到 <code>hidden</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-show</code> → Bind to the <code>hidden</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-show</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;h3 ng-show=\"vm.favoriteHero\"&gt; \n &nbsp; Your favorite hero is: {{vm.favoriteHero}} \n &lt;/h3&gt; </code-example>在 AngularJS 中，<code>ng-show</code> 指令會根據表示式顯示或隱藏關聯的 DOM 元素。<br>在此範例中，如果 <code>favoriteHero</code> 變數為真值，則會顯示 <code>&lt;div&gt;</code> 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-show</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;h3 ng-show=\"vm.favoriteHero\"&gt; \n &nbsp; Your favorite hero is: {{vm.favoriteHero}} \n &lt;/h3&gt; </code-example> In AngularJS, the <code>ng-show</code> directive shows or hides the associated DOM element, based on an expression. <br> In this example, the <code>&lt;div&gt;</code> element is shown if the <code>favoriteHero</code> variable is truthy.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結到<code>hidden</code>屬性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&lt;h3 [hidden]=\"!favoriteHero\"&gt;\n  Your favorite hero is: {{favoriteHero}}\n&lt;/h3&gt;\n\n</code-example>Angular 使用屬性繫結；Angular 沒有內建的<em>show</em>指令。要隱藏和顯示元素，請繫結到 HTML 的 <code>hidden</code> 屬性。<br>要有條件地顯示一個元素，可以使用元素的 <code>hidden</code> 屬性。也就是將元素的 <code>hidden</code> 屬性放在方括號中，並將其設定為帶引號的範本表示式，該表示式的值為<em>show</em>的<em>相反</em>。<br>在此範例中，如果 <code>favoriteHero</code> 變數不是真值，則 <code>&lt;div&gt;</code> 元素會被隱藏。<br>有關屬性繫結的更多資訊，請參閱<a href=\"guide/property-binding\" title=\"Property binding | Angular\">屬性繫結</a>頁面。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bind to the <code>hidden</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"hidden\">\n&lt;h3 [hidden]=\"!favoriteHero\"&gt;\n  Your favorite hero is: {{favoriteHero}}\n&lt;/h3&gt;\n\n</code-example> Angular uses property binding. Angular has no built-in <em>show</em> directive. For hiding and showing elements, bind to the HTML <code>hidden</code> property. <br> To conditionally display an element the <code>hidden</code> property of the element can be used. Place the <code>hidden</code> property in square brackets and set it to a quoted template expression that evaluates to the <em>opposite</em> of <em>show</em>. <br> In this example, the <code>&lt;div&gt;</code> element is hidden if the <code>favoriteHero</code> variable is not truthy. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-src--bind-to-the-src-property\" translation-result=\"on\"><code>ng-src</code> → 繫結到 <code>src</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src--bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>ng-src</code> → Bind to the <code>src</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-src--bind-to-the-src-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-src</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ng-src=\"{{movie.imageurl}}\"&gt; </code-example><code>ng-src</code> 指令允許 AngularJS 預處理 <code>src</code> 屬性。在瀏覽器從 URL 獲取之前，它可以用適當的 URL 替換繫結表示式。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-src</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> ng-src=\"{{movie.imageurl}}\"&gt; </code-example> The <code>ng-src</code> directive allows AngularJS to preprocess the <code>src</code> property. This replaces the binding expression with the appropriate URL before the browser fetches from that URL.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">繫結到<code>src</code>屬性</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"movie.imageurl\" [alt]=\"movie.title\"&gt;\n\n</code-example>Angular 使用屬性繫結；Angular 沒有內建的<em>src</em>指令。將 <code>src</code> 屬性放在方括號中，並將其設定為帶引號的範本表示式。<br>有關屬性繫結的更多資訊，請參閱<a href=\"guide/property-binding\" title=\"Property binding | Angular\">屬性繫結</a>頁面。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Bind to the <code>src</code> property</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"src\">\n&lt;<a href=\"api/common/NgOptimizedImage\" class=\"code-anchor\">img</a> [src]=\"movie.imageurl\" [alt]=\"movie.title\"&gt;\n\n</code-example> Angular uses property binding. Angular has no built-in <em>src</em> directive. Place the <code>src</code> property in square brackets and set it to a quoted template expression. <br> For more information on property binding, see the <a href=\"guide/property-binding\" title=\"Property binding | Angular\">Property binding</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-style--ngstyle\"><code>ng-style</code> → <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-style--ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-style</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-style=\"{color: colorPreference}\"&gt; </code-example>在 AngularJS 中，<code>ng-style</code> 指令會根據表示式在 HTML 元素上設定 CSS 樣式。該表示式通常是一個鍵值控制物件：<ul><li>物件的每個鍵都定義為 CSS 屬性</li><li>每個值都定義為一個表示式，可以估算為控制何時應用該風格的值。</li></ul>在此範例中，<code>color</code> 樣式設定成了 <code>colorPreference</code> 變數的當前值。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-style</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-style=\"{color: colorPreference}\"&gt; </code-example> In AngularJS, the <code>ng-style</code> directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with: <ul><li> each key of the object defined as a CSS property</li><li>each value defined as an expression that evaluates to a value appropriate for the style</li></ul> In the example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\"&gt;\n&lt;div [style.color]=\"colorPreference\"&gt;\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的工作方式類似。它根據表示式在 HTML 元素上設定 CSS 樣式。<br>在第一個範例中，<code>color</code> 風格設定為 <code>colorPreference</code> 變數的當前值。<br>Angular 還具有<strong>樣式繫結</strong>，這是設定單個樣式的好方法。這在第二個範例中顯示。<br>有關樣式繫結的更多資訊，請參閱<a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">屬性繫結</a>頁面的<a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">樣式繫結</a>部分。<br>有關 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 指令的更多資訊，請參閱<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">內建指令</a>頁面的<a href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\" title=\"Setting inline styles with NgStyle - Built-in directives | Angular\">NgStyle</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"ngStyle\">\n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'color': colorPreference}\"&gt;\n&lt;div [style.color]=\"colorPreference\"&gt;\n\n</code-example> In Angular, the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive works similarly. It sets a CSS style on an HTML element based on an expression. <br> In the first example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable. <br> Angular also has <strong>style binding</strong>, which is good way to set a single style. This is shown in the second example. <br> For more information on style binding, see the <a href=\"guide/class-binding\" title=\"Class and style binding | Angular\">Style binding</a> section of the <a href=\"guide/attribute-binding\" title=\"Attribute, class, and style bindings | Angular\">Attribute binding</a> page. <br> For more information on the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> directive, see the <a href=\"guide/built-in-directives#setting-inline-styles-with-ngstyle\" title=\"Setting inline styles with NgStyle - Built-in directives | Angular\">NgStyle</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"ng-switch--ngswitch\"><code>ng-switch</code> → <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#ng-switch--ngswitch\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>ng-switch</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-switch=\"vm.favoriteHero &amp;&amp; vm.checkMovieHero(vm.favoriteHero)\"&gt; \n &nbsp; &lt;div ng-switch-when=\"true\"&gt; \n &nbsp; &nbsp; Excellent choice. \n &nbsp; &lt;/div&gt; \n &nbsp; &lt;div ng-switch-when=\"false\"&gt; \n &nbsp; &nbsp; No movie, sorry. \n &nbsp; &lt;/div&gt; \n &nbsp; &lt;div ng-switch-default&gt; \n &nbsp; &nbsp; Please enter your favorite hero. \n &nbsp; &lt;/div&gt; \n &lt;/div&gt; </code-example>在 AngularJS 中，<code>ng-switch</code> 指令透過根據表示式的當前值選擇範本之一來切換元素的內容。<br>在此範例中，如果未設定 <code>favoriteHero</code>，則範本會顯示“Please enter your favorite hero.”。如果設定了 <code>favoriteHero</code>，它會透過呼叫控制器方法來檢查電影英雄。如果該方法返回 <code>true</code>，則範本會顯示“Excellent choice!”。如果該方法返回 <code>false</code>，則範本會顯示“No movie, sorry!”。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>ng-switch</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;div ng-switch=\"vm.favoriteHero &amp;&amp; vm.checkMovieHero(vm.favoriteHero)\"&gt; \n &nbsp; &lt;div ng-switch-when=\"true\"&gt; \n &nbsp; &nbsp; Excellent choice. \n &nbsp; &lt;/div&gt; \n &nbsp; &lt;div ng-switch-when=\"false\"&gt; \n &nbsp; &nbsp; No movie, sorry. \n &nbsp; &lt;/div&gt; \n &nbsp; &lt;div ng-switch-default&gt; \n &nbsp; &nbsp; Please enter your favorite hero. \n &nbsp; &lt;/div&gt; \n &lt;/div&gt; </code-example> In AngularJS, the <code>ng-switch</code> directive swaps the contents of an element by selecting one of the templates based on the current value of an expression. <br> In this example, if <code>favoriteHero</code> is not set, the template displays \"Please enter …\". If <code>favoriteHero</code> is set, it checks the movie hero by calling a controller method. If that method returns <code>true</code>, the template displays \"Excellent choice!\". If that methods returns <code>false</code>, the template displays \"No movie, sorry!\".</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&lt;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &amp;&amp;\n               checkMovieHero(favoriteHero)\"&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"&gt;\n    Excellent choice!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"&gt;\n    No movie, sorry!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt;\n    Please enter your favorite hero.\n  &lt;/p&gt;\n&lt;/span&gt;\n\n</code-example>在 Angular 中，<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 指令的工作方式類似。它顯示一個元素，其 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 與當前的 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 表示式值匹配。<br>在此範例中，如果未設定 <code>favoriteHero</code>，則 <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> 的值為 <code>null</code>，並且 <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 顯示“Please enter …”。如果設定了 <code>favoriteHero</code>，應用程式會透過呼叫元件方法來檢查電影英雄。如果該方法返回 <code>true</code>，則應用程式會選擇 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> 並顯示：“Excellent choice!”如果該方法返回 <code>false</code>，則應用程式會選擇 <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> 並顯示：“No movie, sorry!”<br>在此範例中，需要 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> 和 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> 之前的 ( <code>*</code> )。<br>有關更多資訊，請參閱<a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">內建指令</a>頁面<a href=\"guide/built-in-directives#switching-cases-with-ngswitch\" title=\"Switching cases with NgSwitch - Built-in directives | Angular\">的 NgSwitch 指令</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.html\" region=\"ngSwitch\">\n&lt;span [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"favoriteHero &amp;&amp;\n               checkMovieHero(favoriteHero)\"&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"&gt;\n    Excellent choice!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"&gt;\n    No movie, sorry!\n  &lt;/p&gt;\n  &lt;p *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt;\n    Please enter your favorite hero.\n  &lt;/p&gt;\n&lt;/span&gt;\n\n</code-example> In Angular, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> directive works similarly. It displays an element whose <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> matches the current <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> expression value. <br> In this example, if <code>favoriteHero</code> is not set, the <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> value is <code>null</code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> displays, \"Please enter your favorite hero.\" If <code>favoriteHero</code> is set, the application checks the movie hero by calling a component method. If that method returns <code>true</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"true\"</code> and displays: \"Excellent choice!\" If that methods returns <code>false</code>, the application selects <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"false\"</code> and displays: \"No movie, sorry!\" <br> The (<code>*</code>) before <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code> is required in this example. <br> For more information, see <a href=\"guide/built-in-directives#switching-cases-with-ngswitch\" title=\"Switching cases with NgSwitch - Built-in directives | Angular\">The NgSwitch directives</a> section of the <a href=\"guide/built-in-directives\" title=\"Built-in directives | Angular\">Built-in directives</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"filters--pipes-1\" translation-result=\"on\">過濾器/管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes-1\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Filters / pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filters--pipes-1\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 中的<strong>管道</strong>為範本提供了格式化和資料轉換功能，類似於 AngularJS 中的<strong>過濾器</strong>。\nAngularJS 中的很多內建過濾器在 Angular 中都有對應的管道。\n要了解管道的更多資訊，參閱<a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>。</p><p translation-origin=\"off\">Angular <strong>pipes</strong> provide formatting and transformation for data in the template, like AngularJS <strong>filters</strong>.\nMany of the built-in filters in AngularJS have corresponding pipes in Angular.\nFor more information on pipes, see <a href=\"guide/pipes\" title=\"Transforming Data Using Pipes | Angular\">Pipes</a>.</p>\n\n<h3 id=\"currency--currency\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> → <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#currency--currency\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}} \n &lt;/td&gt; </code-example>將數字格式化為貨幣。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>}} \n &lt;/td&gt; </code-example> Formats a number as currency.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&lt;td&gt;{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&lt;/td&gt;\n\n</code-example>儘管某些引數發生了更改，但 Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> 管道是相似的。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"currency\">\n&lt;td&gt;{{movie.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'USD':true}}&lt;/td&gt;\n\n</code-example> The Angular <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> pipe is similar although some of the parameters have changed.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"date--date\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> → <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#date--date\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}} \n &lt;/td&gt; </code-example>根據請求的格式將日期格式化為字串。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}} \n &lt;/td&gt; </code-example> Formats a date to a string based on the requested format.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&lt;td&gt;{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&lt;/td&gt;\n\n</code-example>Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道是類似的。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"date\">\n&lt;td&gt;{{movie.releaseDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>}}&lt;/td&gt;\n\n</code-example> The Angular <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe is similar.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"filter--none\" translation-result=\"on\"><code>filter</code> → 無<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter--none\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>filter</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#filter--none\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>filter</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"&gt; </code-example>根據過濾條件從定義的集合中選擇專案的子集。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>filter</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"&gt; </code-example> Selects a subset of items from the defined collection, based on the filter criteria.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">無</header>出於效能原因，Angular 中不存在可類比的管道。請在元件中進行所有過濾。如果你在多個範本中需要相同的過濾程式碼，請考慮建構自訂管道。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">none</header> For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"json--json\"><code>json</code> → <code>json</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#json--json\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>json</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;pre&gt; \n &nbsp; {{movie | json}} \n &lt;/pre&gt; </code-example>將 JavaScript 物件轉換為 JSON 字串。這對於除錯很有用。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>json</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;pre&gt; \n &nbsp; {{movie | json}} \n &lt;/pre&gt; </code-example> Converts a JavaScript object into a JSON string. This is useful for debugging.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>json</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&lt;pre&gt;{{movie | json}}&lt;/pre&gt;\n\n</code-example>Angular <a href=\"api/common/JsonPipe\" title=\"JsonPipe | @angular/common - API | Angular\"><code>json</code></a>管道做同樣的事情。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>json</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"json\">\n&lt;pre&gt;{{movie | json}}&lt;/pre&gt;\n\n</code-example> The Angular <a href=\"api/common/JsonPipe\" title=\"JsonPipe | @angular/common - API | Angular\"><code>json</code></a> pipe does the same thing.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"limitto--slice\"><code>limitTo</code> → <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#limitto--slice\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>limitTo</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | limitTo:2:0\"&gt; </code-example>從開始索引 <code>0</code> 處開始（可選）的集合中選擇最多第一個引數 <code>2</code> 的條目。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>limitTo</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | limitTo:2:0\"&gt; </code-example> Selects up to the first parameter <code>2</code> number of items from the collection starting optionally at the beginning index <code>0</code>.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\"&gt;\n\n</code-example><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> 做同樣的事情，但<em>引數的順序是相反</em>的，與 JavaScript <code>Slice</code> 方法保持一致。第一個引數是起始索引，第二個是限長。與在 AngularJS 中一樣，在元件中對此操作進行編碼可以提高效能。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"slice\">\n&lt;tr *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let movie of movies | <a href=\"api/common/SlicePipe\" class=\"code-anchor\">slice</a>:0:2\"&gt;\n\n</code-example> The <code><a href=\"api/common/SlicePipe\" class=\"code-anchor\">SlicePipe</a></code> does the same thing but the <em>order of the parameters is reversed</em>, in keeping with the JavaScript <code>Slice</code> method. The first parameter is the starting index and the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"lowercase--lowercase\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> → <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#lowercase--lowercase\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}} \n &lt;/td&gt; </code-example>將字串轉換為小寫。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}} \n &lt;/td&gt; </code-example> Converts the string to lowercase.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&lt;/td&gt;\n\n</code-example>Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> 管道做同樣的事情。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"lowercase\">\n&lt;td&gt;{{movie.title | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&lt;/td&gt;\n\n</code-example> The Angular <code><a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a></code> pipe does the same thing.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"number--number\"><code>number</code> → <code>number</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#number--number\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>number</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.starRating | number}} \n &lt;/td&gt; </code-example>將數字格式化為文字。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>number</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;td&gt; \n &nbsp; {{movie.starRating | number}} \n &lt;/td&gt; </code-example> Formats a number as text.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>number</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&lt;td&gt;{{movie.starRating | number}}&lt;/td&gt;\n&lt;td&gt;{{movie.starRating | number:'1.1-2'}}&lt;/td&gt;\n&lt;td&gt;{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&lt;/td&gt;\n\n</code-example>Angular <a href=\"api/common/DecimalPipe\" title=\"DecimalPipe | @angular/common - API | Angular\"><code>number</code></a>管道是類似的。它在定義小數位時提供了更多特性，如上面的第二個範例所示。<br>Angular 還有一個 <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> 管道，它將數字格式化為本地百分比，如第三個範例所示。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>number</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.component.html\" region=\"number\">\n&lt;td&gt;{{movie.starRating | number}}&lt;/td&gt;\n&lt;td&gt;{{movie.starRating | number:'1.1-2'}}&lt;/td&gt;\n&lt;td&gt;{{movie.approvalRating | <a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a>: '1.0-2'}}&lt;/td&gt;\n\n</code-example> The Angular <a href=\"api/common/DecimalPipe\" title=\"DecimalPipe | @angular/common - API | Angular\"><code>number</code></a> pipe is similar. It provides more capabilities when defining the decimal places, as shown in the preceding second example. <br> Angular also has a <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">percent</a></code> pipe, which formats a number as a local percentage as shown in the third example.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"orderby--none\" translation-result=\"on\"><code>orderBy</code> → 無<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby--none\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>orderBy</code> → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#orderby--none\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>orderBy</code></header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"&gt; </code-example>按表示式指定的順序顯示集合。在此範例中，電影標題會按 <code>movieList</code> 的順序。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>orderBy</code></header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"&gt; </code-example> Displays the collection in the order specified by the expression. In this example, the movie title orders the <code>movieList</code>.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">無</header>出於效能原因，Angular 中不存在可類比的管道。相反，請使用元件程式碼對結果進行排序或排序。如果你需要在多個範本中使用相同的排序或排序程式碼，請考慮建構自訂管道。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">none</header> For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"modules--controllers--components\" translation-result=\"on\">模組/控制器/元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#modules--controllers--components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Modules / controllers / components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#modules--controllers--components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">無論在 AngularJS 還是 Angular 中，“模組”都會幫你把應用拆分成一些內聚的功能塊。</p><p translation-origin=\"off\">In both AngularJS and Angular, modules help you organize your application into cohesive blocks of features.</p>\n\n<p translation-result=\"on\">在 AngularJS 中，你要在<strong>控制器</strong>中寫程式碼，來為檢視提供模型和方法。在 Angular 中，你要建立<strong>元件</strong>。</p><p translation-origin=\"off\">In AngularJS, you write the code that provides the model and the methods for the view in a <strong>controller</strong>.\nIn Angular, you build a <strong>component</strong>.</p>\n\n<p translation-result=\"on\">因為很多 AngularJS 的程式碼是用 JavaScript 寫的，所以在 AngularJS 列顯示的是 JavaScript 程式碼，而 Angular 列顯示的是 TypeScript 程式碼。</p><p translation-origin=\"off\">Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column.\nThe Angular code is shown using TypeScript.</p>\n\n<h3 id=\"immediately-invoked-function-expression-iife--none\" translation-result=\"on\">即刻呼叫函式表示式（IIFE） → 無<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Immediately invoked function expression (IIFE) → none<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">IIFE</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> ( \n&nbsp; function () { \n&nbsp;&nbsp;&nbsp; … \n&nbsp; }() \n); </code-example>在 AngularJS 中，IIFE 會圍繞控制器程式碼，以將其排除在全域名稱空間之外。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">IIFE</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> ( \n&nbsp; function () { \n&nbsp;&nbsp;&nbsp; … \n&nbsp; }() \n); </code-example> In AngularJS, an IIFE around controller code keeps it out of the global namespace.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">無</header>這在 Angular 中不是問題，因為 ES 2015 模組會為你處理名稱空間。<br>有關模組的更多資訊，請參閱<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a>的<a href=\"guide/architecture#modules\" title=\"Modules - Introduction to Angular concepts | Angular\">模組</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">none</header> This is a nonissue in Angular because ES 2015 modules handle the namespace for you. <br> For more information on modules, see the <a href=\"guide/architecture#modules\" title=\"Modules - Introduction to Angular concepts | Angular\">Modules</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"angular-modules--ngmodules\" translation-result=\"on\">Angular 模組 → <code>NgModules</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-modules--ngmodules\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Angular modules → <code>NgModules</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#angular-modules--ngmodules\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">Angular 模組</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n&nbsp; \"movieHunter\", \n&nbsp; [ \n&nbsp;&nbsp;&nbsp; \"ngRoute\" \n&nbsp; ] \n); </code-example>在 AngularJS 中，Angular 模組會追蹤控制器、服務和其他程式碼。第二個引數定義此模組依賴的其他模組的列表。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Angular modules</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n&nbsp; \"movieHunter\", \n&nbsp; [ \n&nbsp;&nbsp;&nbsp; \"ngRoute\" \n&nbsp; ] \n); </code-example> In AngularJS, an Angular module keeps track of controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>NgModules</code></header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>使用 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器定義的 NgModules 具有相同的目的：<ul><li><code>imports</code>：指定此模組依賴的其他模組的列表</li><li><code>declaration</code> : 追蹤你的元件、管道和指令。</li></ul>有關模組的更多資訊，請參閱<a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>NgModules</code></header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example> NgModules, defined with the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator, serve the same purpose: <ul> <li><code>imports</code>: specifies the list of other modules that this module depends upon</li> <li><code>declaration</code>: keeps track of your components, pipes, and directives.</li> </ul> For more information on modules, see <a href=\"guide/ngmodules\" title=\"NgModules | Angular\">NgModules</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"controller-registration--component-decorator\" translation-result=\"on\">控制器註冊 → 元件裝飾器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration--component-decorator\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Controller registration → component decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-registration--component-decorator\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">控制器註冊</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n&nbsp; \"movieHunter\" \n) .controller( \n&nbsp; \"MovieListCtrl\", \n&nbsp; [ \n&nbsp;&nbsp;&nbsp; \"movieService\", \n&nbsp;&nbsp;&nbsp; MovieListCtrl \n&nbsp; ] \n); </code-example>AngularJS 在每個控制器中都有程式碼，可以查詢適當的 Angular 模組並將控制器註冊到該模組。<br>第一個引數是控制器名稱。第二個引數定義注入此控制器的所有依賴項的字串名稱，以及對控制器函式的參考。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Controller registration</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> angular .module( \n&nbsp; \"movieHunter\" \n) .controller( \n&nbsp; \"MovieListCtrl\", \n&nbsp; [ \n&nbsp;&nbsp;&nbsp; \"movieService\", \n&nbsp;&nbsp;&nbsp; MovieListCtrl \n&nbsp; ] \n); </code-example> AngularJS has code in each controller that looks up an appropriate Angular module and registers the controller with that module. <br> The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">元件裝飾器</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example>Angular 向元件類添加了一個裝飾器，以提供任何所需的元資料。<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器宣告類是元件，並提供有關該元件的元資料，例如其選擇器（或標籤）和範本。<br>這就是你將範本與元件類中定義的邏輯關聯起來的方式。<br>有關更多資訊，請參閱<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a>頁面的<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">元件</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Component decorator</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: [ './movie-list.component.css' ],\n})\n\n</code-example> Angular adds a decorator to the component class to provide any required metadata. The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator declares that the class is a component and provides metadata about that component such as its selector, or tag, and its template. <br> This is how you associate a template with logic, which is defined in the component class. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"controller-function--component-class\" translation-result=\"on\">控制器函式 → 元件類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function--component-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Controller function → component class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#controller-function--component-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">Controller 函式</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> function MovieListCtrl(movieService) { \n } </code-example>在 AngularJS 中，你在控制器函式中為模型和方法編寫程式碼。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Controller function</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> function MovieListCtrl(movieService) { \n } </code-example> In AngularJS, you write the code for the model and methods in a controller function.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">元件類</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example>在 Angular 中，你建立一個元件類來包含資料模型和控制方法。使用 TypeScript <code>export</code> 關鍵字來匯出類，以便可以將此元件匯入 NgModules。<br>有關更多資訊，請參閱<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a>頁面的<a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">元件</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Component class</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"class\">\nexport class MovieListComponent {\n}\n\n</code-example> In Angular, you create a component class to contain the data model and control methods. Use the TypeScript <code>export</code> keyword to export the class so that the component can be imported into NgModules. <br> For more information, see the <a href=\"guide/architecture#components\" title=\"Components - Introduction to Angular concepts | Angular\">Components</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a> page.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"dependency-injection--dependency-injection\" translation-result=\"on\">依賴注入 → 依賴注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection--dependency-injection\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Dependency injection → dependency injection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#dependency-injection--dependency-injection\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">依賴注入</header><code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> MovieListCtrl.$inject = [ \n&nbsp; 'MovieService' \n]; \nfunction MovieListCtrl(movieService) { \n} </code-example>在 AngularJS 中，你將任何依賴項作為控制器函式引數傳入。此範例注入 <code>MovieService</code>。<br>為了防止最小化時出現問題，請顯式告訴 Angular 它應該在第一個引數中注入一個 <code>MovieService</code> 例項。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Dependency injection</header> <code-example hidecopy=\"\" format=\"typescript\" language=\"typescript\"> MovieListCtrl.$inject = [ \n&nbsp; 'MovieService' \n]; \nfunction MovieListCtrl(movieService) { \n} </code-example> In AngularJS, you pass in any dependencies as controller function arguments. This example injects a <code>MovieService</code>. <br> To guard against minification problems, tell Angular explicitly that it should inject an instance of the <code>MovieService</code> in the first parameter.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\">依賴注入</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example>在 Angular 中，你將依賴項作為引數傳遞給元件類建構函式。此範例注入 <code>MovieService</code>。第一個引數的 TypeScript 型別告訴 Angular 要注入什麼，即使是在縮小之後。<br>有關更多資訊，請參閱<a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">架構概覽</a>的<a href=\"guide/architecture#services-and-dependency-injection\" title=\"Services and dependency injection - Introduction to Angular concepts | Angular\">依賴注入</a>部分。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\">Dependency injection</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"di\">\nconstructor(movieService: MovieService) {\n}\n\n</code-example> In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a <code>MovieService</code>. The TypeScript type of the first parameter tells Angular what to inject, even after minification. <br> For more information, see the <a href=\"guide/architecture#services-and-dependency-injection\" title=\"Services and dependency injection - Introduction to Angular concepts | Angular\">Dependency injection</a> section of the <a href=\"guide/architecture\" title=\"Introduction to Angular concepts | Angular\">Architecture Overview</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"style-sheets\" translation-result=\"on\">樣式表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Style sheets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#style-sheets\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">樣式表讓你的應用程式看起來更漂亮。\n在 AngularJS 中，你要為整個應用程式指定樣式表。\n隨著應用程式的不斷成長，為各個部分指定的樣式會被合併，導致無法預計的後果。\n在 Angular 中，你仍然要為整個應用程式定義樣式，不過現在也可以把樣式表封裝在特定的元件中。</p><p translation-origin=\"off\">Style sheets give your application a nice look.\nIn AngularJS, you specify the style sheets for your entire application.\nAs the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results.\nIn Angular, you can still define style sheets for your entire application.\nNow you can also encapsulate a style sheet within a specific component.</p>\n\n<h3 id=\"link-tag--styles-configuration-or-styleurls\" translation-result=\"on\"><code>Link</code> 標籤 → <code>styles</code> 配置或 <code>styleUrls</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>Link</code> tag → <code>styles</code> configuration or <code>styleUrls</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">AngularJS</th>\n<th align=\"left\">Angular</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>Link</code>標籤</header><code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;link href=\"styles.css\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rel=\"stylesheet\" /&gt; </code-example>AngularJS 使用 <code>index.html</code> 檔案 head 中的 <code>link</code> 標籤來定義應用程式的樣式。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>Link</code> tag</header> <code-example hidecopy=\"\" format=\"html\" language=\"html\"> &lt;link href=\"styles.css\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rel=\"stylesheet\" /&gt; </code-example> AngularJS, uses a <code>link</code> tag in the head section of the <code>index.html</code> file to define the styles for the application.</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><header ng-should-translate=\"\"><code>styles</code>配置</header><code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example>使用 Angular CLI，你可以在 <code>angular.json</code> 檔案中配置你的全域樣式。你可以將副檔名重新命名為 <code>.scss</code> 以使用 sass。<br><br><header ng-should-translate=\"\"><code>styleUrls</code></header>在 Angular 中，你可以用 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元資料的 style 或 <code>styleUrls</code> 屬性來為特定元件定義 <code>styles</code> 表。<br><code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example>這允許你為不會洩漏到應用程式其他部分的單個元件設定適當的樣式。</nt-wrapper><nt-wrapper translation-origin=\"off\"><header ng-should-translate=\"\"><code>styles</code> configuration</header> <code-example hidecopy=\"\" path=\"ajs-quick-reference/.angular-cli.1.json\" region=\"styles\">\n\"styles\": [\n  \"styles.css\"\n],\n\n</code-example> With the Angular CLI, you can configure your global styles in the <code>angular.json</code> file. You can rename the extension to <code>.scss</code> to use sass. <br><br> <header ng-should-translate=\"\"><code>styleUrls</code></header> In Angular, you can use the <code>styles</code> or <code>styleUrls</code> property of the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata to define a style sheet for a particular component. <br> <code-example hidecopy=\"\" path=\"ajs-quick-reference/src/app/movie-list.component.ts\" region=\"style-url\">\nstyleUrls: [ './movie-list.component.css' ],\n\n</code-example> This allows you to set appropriate styles for individual components that do not leak into other parts of the application.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgOptimizedImage\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLink\n - guide/ajs-quick-reference#angular-modules--ngmodules\n - guide/ajs-quick-reference#angular-模組--ngmodules\n - guide/ajs-quick-reference#angularjs-to-angular-concepts-quick-reference\n - guide/ajs-quick-reference#bindings--interpolation--bindings--interpolation\n - guide/ajs-quick-reference#controller-function--component-class\n - guide/ajs-quick-reference#controller-registration--component-decorator\n - guide/ajs-quick-reference#currency--currency\n - guide/ajs-quick-reference#date--date\n - guide/ajs-quick-reference#dependency-injection--dependency-injection\n - guide/ajs-quick-reference#filter--none\n - guide/ajs-quick-reference#filter--無\n - guide/ajs-quick-reference#filters--pipes\n - guide/ajs-quick-reference#filters--pipes-1\n - guide/ajs-quick-reference#immediately-invoked-function-expression-iife--none\n - guide/ajs-quick-reference#json--json\n - guide/ajs-quick-reference#limitto--slice\n - guide/ajs-quick-reference#link-tag--styles-configuration-or-styleurls\n - guide/ajs-quick-reference#link-標籤--styles-配置或-styleurls\n - guide/ajs-quick-reference#local-variables--input-variables\n - guide/ajs-quick-reference#lowercase--lowercase\n - guide/ajs-quick-reference#modules--controllers--components\n - guide/ajs-quick-reference#ng-app--bootstrapping\n - guide/ajs-quick-reference#ng-app--引導\n - guide/ajs-quick-reference#ng-class--ngclass\n - guide/ajs-quick-reference#ng-click--bind-to-the-click-event\n - guide/ajs-quick-reference#ng-click--繫結到-click-事件\n - guide/ajs-quick-reference#ng-controller--component-decorator\n - guide/ajs-quick-reference#ng-controller--元件裝飾器\n - guide/ajs-quick-reference#ng-hide--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-hide--繫結到-hidden-屬性\n - guide/ajs-quick-reference#ng-href--bind-to-the-href-property\n - guide/ajs-quick-reference#ng-href--繫結到-href-屬性\n - guide/ajs-quick-reference#ng-if--ngif\n - guide/ajs-quick-reference#ng-model--ngmodel\n - guide/ajs-quick-reference#ng-repeat--ngfor\n - guide/ajs-quick-reference#ng-show--bind-to-the-hidden-property\n - guide/ajs-quick-reference#ng-show--繫結到-hidden-屬性\n - guide/ajs-quick-reference#ng-src--bind-to-the-src-property\n - guide/ajs-quick-reference#ng-src--繫結到-src-屬性\n - guide/ajs-quick-reference#ng-style--ngstyle\n - guide/ajs-quick-reference#ng-switch--ngswitch\n - guide/ajs-quick-reference#number--number\n - guide/ajs-quick-reference#orderby--none\n - guide/ajs-quick-reference#orderby--無\n - guide/ajs-quick-reference#style-sheets\n - guide/ajs-quick-reference#template-basics\n - guide/ajs-quick-reference#template-directives\n - guide/ajs-quick-reference#依賴注入--依賴注入\n - guide/ajs-quick-reference#關於-angularjs-與-angular-概念的快速參考\n - guide/ajs-quick-reference#即刻呼叫函式表示式iife--無\n - guide/ajs-quick-reference#區域變數--輸入變數\n - guide/ajs-quick-reference#控制器函式--元件類\n - guide/ajs-quick-reference#控制器註冊--元件裝飾器\n - guide/ajs-quick-reference#樣式表\n - guide/ajs-quick-reference#模組控制器元件\n - guide/ajs-quick-reference#範本基礎\n - guide/ajs-quick-reference#範本指令\n - guide/ajs-quick-reference#繫結插值--繫結插值\n - guide/ajs-quick-reference#過濾器管道\n - guide/ajs-quick-reference#過濾器管道-1\n - guide/architecture\n - guide/architecture#components\n - guide/architecture#modules\n - guide/architecture#services-and-dependency-injection\n - guide/attribute-binding\n - guide/built-in-directives\n - guide/built-in-directives#displaying-and-updating-properties-with-ngmodel\n - guide/built-in-directives#setting-inline-styles-with-ngstyle\n - guide/built-in-directives#switching-cases-with-ngswitch\n - guide/class-binding\n - guide/event-binding\n - guide/interpolation\n - guide/ngmodules\n - guide/pipes\n - guide/property-binding\n - guide/router\n - guide/router#defining-a-basic-route\n - guide/structural-directives\n - guide/structural-directives#structural-directive-shorthand\n - https://developer.mozilla.org/docs/Web/Events\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/ajs-quick-reference.md?message=docs%3A%20請簡述你的修改...\n-->"}