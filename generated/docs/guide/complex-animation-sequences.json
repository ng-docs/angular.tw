{"id":"guide/complex-animation-sequences","title":"Complex animation sequences","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/complex-animation-sequences.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"complex-animation-sequences\" translation-result=\"on\">複雜動畫序列<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#complex-animation-sequences\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Complex animation sequences<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#complex-animation-sequences\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">對下列概念有基本的理解：</p><p translation-origin=\"off\">A basic understanding of the following concepts:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫簡介</a></p><p translation-origin=\"off\"><a href=\"guide/animations\">Introduction to Angular animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/transition-and-triggers\">過渡與觸發器</a></p><p translation-origin=\"off\"><a href=\"guide/transition-and-triggers\">Transition and triggers</a></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">到目前為止，我們已經學過了單個 HTML 元素的簡單動畫。Angular 還允許你在進入和離開頁面時播放 \"動畫協調序列\"，比如當整個網格或元素列表進入或離開頁面時，多個條目的動畫之間需要彼此協調時間。你可以選擇並行執行多個動畫，或者按順序逐個執行離散動畫。</p><p translation-origin=\"off\">So far, we've learned simple animations of single HTML elements.\nAngular also lets you animate coordinated sequences, such as an entire grid or list of elements as they enter and leave a page.\nYou can choose to run multiple animations in parallel, or run discrete animations sequentially, one following another.</p>\n\n<p translation-result=\"on\">用來控制複雜動畫序列的函式如下：</p><p translation-origin=\"off\">The functions that control complex animation sequences are:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">函式</nt-wrapper><nt-wrapper translation-origin=\"off\">Functions</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於查詢一個或多個內部 HTML 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Finds one or more inner HTML elements.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於為多元素動畫應用級聯延遲。</nt-wrapper><nt-wrapper translation-origin=\"off\">Applies a cascading delay to animations for multiple elements.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/animations/group\"><code>group()</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於並行執行多個動畫步驟。</nt-wrapper><nt-wrapper translation-origin=\"off\">Runs multiple animation steps in parallel.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於逐個順序執行多個動畫步驟。</nt-wrapper><nt-wrapper translation-origin=\"off\">Runs animation steps one after another.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"complex-sequence\"></a></p>\n<h2 id=\"the-query-function\" translation-result=\"on\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#query-函式\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">The <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#the-query-function\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">大多數複雜動畫都依賴 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 函式來查詢子元素並對其應用動畫，基本的例子是：</p><p translation-origin=\"off\">Most complex animations rely on the <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> function to find child elements and apply animations to them, basic examples of such are:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">例子</nt-wrapper><nt-wrapper translation-origin=\"off\">Examples</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 後跟 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> followed by <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於查詢簡單的 HTML 元素並直接對它們應用動畫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Used to query simple HTML elements and directly apply animations to them.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 後跟 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> followed by <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於查詢子元素，這些元素本身就應用了動畫元資料並觸發這樣的動畫（否則將被當前/父元素的動畫阻止）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Used to query child elements, which themselves have animations metadata applied to them and trigger such animation (which would be otherwise be blocked by the current/parent element's animation).</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 的第一個引數是一個 <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">css 選擇器</a>字串，它還可以包含以下 Angular 特定的標記：</p><p translation-origin=\"off\">The first argument of <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> is a <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\">css selector</a> string which can also contain the following Angular-specific tokens:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">標記</nt-wrapper><nt-wrapper translation-origin=\"off\">Tokens</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper><code>:enter</code> <br> <code>:leave</code></nt-wrapper><nt-wrapper><code>:enter</code><br><code>:leave</code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於進入/離開元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">For entering/leaving elements.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>:animating</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">對於當前正在播放動畫的元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">For elements currently animating.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@*</code> <br> <code>@triggerName</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">對於具有任何（或特定）觸發器的元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">For elements with any—or a specific—trigger.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>:self</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">動畫元素本身。</nt-wrapper><nt-wrapper translation-origin=\"off\">The animating element itself.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">進入和離開元素</header><header ng-should-translate=\"\" translation-origin=\"off\">Entering and Leaving Elements</header>\n\n<p translation-result=\"on\">並非所有子元素都會實際上被認為是進入/離開；有時，這可能是違反直覺和令人困惑的。有關更多資訊，參閱 <a href=\"api/animations/query#entering-and-leaving-elements\">query api 的文件</a>。</p><p translation-origin=\"off\">Not all child elements are actually considered as entering/leaving; this can, at times, be counterintuitive and confusing. Please see the <a href=\"api/animations/query#entering-and-leaving-elements\">query api docs</a> for more information.</p>\n\n<p translation-result=\"on\">你還可以在 Querying 選項卡下的動畫即時範例（在動畫<a href=\"guide/animations#about-this-guide\">介紹部分介紹</a>）中看到這方面的插圖。</p><p translation-origin=\"off\">You can also see an illustration of this in the animations live example (introduced in the animations <a href=\"guide/animations#about-this-guide\">introduction section</a>) under the Querying tab.</p>\n\n</div>\n<h2 id=\"animate-multiple-elements-using-query-and-stagger-functions\" translation-result=\"on\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code>（交錯）函式執行多元素動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#使用-query-和-stagger交錯函式執行多元素動畫\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animate multiple elements using <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> and <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animate-multiple-elements-using-query-and-stagger-functions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">透過 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 查詢子元素後，<code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 函式允許你定義每個查詢的動畫項之間的時間間隙，從而為元素之間延遲設定動畫。</p><p translation-origin=\"off\">After having queried child elements via <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code>, the <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> function lets you define a timing gap between each queried item that is animated and thus animates elements with a delay between them.</p>\n\n<p translation-result=\"on\">下面的例子示範瞭如何使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 函式對依次新增的英雄列表從上到下播放動畫（有少許延遲）。</p><p translation-origin=\"off\">The following example demonstrates how to use the <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> and <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> functions to animate a list (of heroes) adding each in sequence, with a slight delay, from top to bottom.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 查閱正在進入或離開頁面的任意元素。該查詢會找出那些符合某種特定標準的元素</p><p translation-origin=\"off\">Use <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> to look for an element entering the page that meets certain criteria</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對每個元素，使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 為其設定初始樣式。使其變得透明，並使用 <code>transform</code> 將其移出位置，以便它能滑入後就位。</p><p translation-origin=\"off\">For each of these elements, use <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> to set the same initial style for the element.\nMake it transparent and use <code>transform</code> to move it out of position so that it can slide into place.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 來在每個動畫之間延遲 30 毫秒</p><p translation-origin=\"off\">Use <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> to delay each animation by 30 milliseconds</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對螢幕上的每個元素，根據一條自訂緩動曲線播放 0.5 秒的動畫，同時將其淡入，而且逐步取消以前的位移效果</p><p translation-origin=\"off\">Animate each element on screen for 0.5 seconds using a custom-defined easing curve, simultaneously fading it in and un-transforming it</p>\n\n</li>\n</ul>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"page-animations\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('pageAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('.hero', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({opacity: 0, transform: 'translateY(-100px)'}),\n        <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(30, [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('500ms cubic-bezier(0.35, 0, 0.25, 1)',\n          <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, transform: 'none' }))\n        ])\n      ])\n    ])\n  ]),\n\n</code-example>\n<h2 id=\"parallel-animation-using-group-function\" translation-result=\"on\">使用 <code>group()</code> 函式播放並行動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#parallel-animation-using-group-function\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Parallel animation using <code>group()</code> function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#parallel-animation-using-group-function\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你已經瞭解瞭如何在兩個連續的動畫之間新增延遲。不過你可能還想配置一些並行的動畫。比如，你可能希望為同一個元素的兩個 CSS 屬性設定動畫，但要為每個屬性使用不同的 <code>easing</code> 函式。這時，你可以使用動畫函式 <a href=\"api/animations/group\"><code>group()</code></a>。</p><p translation-origin=\"off\">You've seen how to add a delay between each successive animation.\nBut you might also want to configure animations that happen in parallel.\nFor example, you might want to animate two CSS properties of the same element but use a different <code>easing</code> function for each one.\nFor this, you can use the animation <a href=\"api/animations/group\"><code>group()</code></a> function.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n<a href=\"api/animations/group\"><code>group()</code></a>函式用於對動畫<em>步驟</em>進行分組，而不是針對動畫元素。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe <a href=\"api/animations/group\"><code>group()</code></a> function is used to group animation <em>steps</em>, rather than animated elements.</p>\n\n</div>\n<p translation-result=\"on\">在下面的例子中，對 <code>:enter</code> 和 <code>:leave</code> 使用分組，可以配置兩種不同的時序。它們會同時作用於同一個元素，但彼此獨立執行。</p><p translation-origin=\"off\">The following example uses <a href=\"api/animations/group\"><code>group()</code></a>s on both <code>:enter</code> and <code>:leave</code> for two different timing configurations, thus applying two independent animations to the same element in parallel.</p>\n\n<code-example header=\"src/app/hero-list-groups.component.ts (excerpt)\" path=\"animations/src/app/hero-list-groups.component.ts\" region=\"animationdef\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      width: '*',\n      transform: 'translateX(0)', opacity: 1\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ width: 10, transform: 'translateX(50px)', opacity: 0 }),\n      group([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.1s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(0)',\n          width: '*'\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 1\n        }))\n      ])\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n      group([\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          transform: 'translateX(50px)',\n          width: 10\n        })),\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.3s 0.2s ease', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          opacity: 0\n        }))\n      ])\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"sequential-vs-parallel-animations\" translation-result=\"on\">順序動畫與平行動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#sequential-vs-parallel-animations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Sequential vs. parallel animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#sequential-vs-parallel-animations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">複雜動畫中可以同時發生很多事情。但是當你要建立一個需要讓幾個子動畫逐個執行的動畫時，該怎麼辦呢？以前我們使用 <a href=\"api/animations/group\"><code>group()</code></a> 來同時並行執行多個動畫。</p><p translation-origin=\"off\">Complex animations can have many things happening at once.\nBut what if you want to create an animation involving several animations happening one after the other? Earlier you used <a href=\"api/animations/group\"><code>group()</code></a> to run multiple animations all at the same time, in parallel.</p>\n\n<p translation-result=\"on\">第二個名叫 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 的函式會讓你一個接一個地執行這些動畫。在 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 中，這些動畫步驟由 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 或 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 的函式呼叫組成。</p><p translation-origin=\"off\">A second function called <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> lets you run those same animations one after the other.\nWithin <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code>, the animation steps consist of either <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> or <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> function calls.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 用來立即應用所指定的樣式資料。</p><p translation-origin=\"off\">Use <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> to apply the provided styling data immediately.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 用來在一定的時間間隔內應用樣式資料。</p><p translation-origin=\"off\">Use <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> to apply styling data over a given time interval.</p>\n\n</li>\n</ul>\n<h2 id=\"filter-animation-example\" translation-result=\"on\">過濾器動畫範例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#filter-animation-example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Filter animation example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#filter-animation-example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">來看看範例應用中的另一個動畫。在 Filter/Stagger 頁，往 <strong>Search Heroes</strong> 文字框中輸入一些文字，比如 <code>Magnet</code> 或 <code>tornado</code>。</p><p translation-origin=\"off\">Take a look at another animation on the live example page.\nUnder the Filter/Stagger tab, enter some text into the <strong>Search Heroes</strong> text box, such as <code>Magnet</code> or <code>tornado</code>.</p>\n\n<p translation-result=\"on\">過濾器會在你輸入時即時工作。每當你鍵入一個新字母時，就會有一些元素離開頁面，並且過濾條件也會逐漸變得更加嚴格。相反，當你刪除過濾器中的每個字母時，英雄列表也會逐漸重新進入頁面中。</p><p translation-origin=\"off\">The filter works in real time as you type.\nElements leave the page as you type each new letter and the filter gets progressively stricter.\nThe heroes list gradually re-enters the page as you delete each letter in the filter box.</p>\n\n<p translation-result=\"on\">HTML 範本中包含一個名叫 <code>filterAnimation</code> 的觸發器。</p><p translation-origin=\"off\">The HTML template contains a trigger called <code>filterAnimation</code>.</p>\n\n<code-example header=\"src/app/hero-list-page.component.html\" path=\"animations/src/app/hero-list-page.component.html\" region=\"filter-animations\">\n&lt;label for=\"search\"&gt;Search heroes: &lt;/label&gt;\n&lt;input type=\"text\" id=\"search\" #criteria\n       (input)=\"updateCriteria(criteria.value)\"\n       placeholder=\"Search heroes\"&gt;\n\n&lt;ul class=\"heroes\" [@filterAnimation]=\"heroesTotal\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"hero\"&gt;\n    &lt;div class=\"inner\"&gt;\n      &lt;span class=\"badge\"&gt;{{ hero.id }}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{ hero.name }}&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">該元件裝飾器中的 <code>filterAnimation</code> 包含三個過渡。</p><p translation-origin=\"off\">The <code>filterAnimation</code> in the component's decorator contains three transitions.</p>\n\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"filter-animations\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('filterAnimation', [\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter, * =&gt; 0, * =&gt; -1', []),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':increment', [\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 }),\n          <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n            <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, width: '*' })),\n          ]),\n        ], { optional: true })\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':decrement', [\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n            <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 })),\n          ]),\n        ])\n      ]),\n    ]),\n  ]\n})\nexport class HeroListPageComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroesTotal = -1;\n\n  get heroes() { return this._heroes; }\n  private _heroes: Hero[] = [];\n\n  ngOnInit() {\n    this._heroes = HEROES;\n  }\n\n  updateCriteria(criteria: string) {\n    criteria = criteria ? criteria.trim() : '';\n\n    this._heroes = HEROES.filter(hero =&gt; hero.name.toLowerCase().includes(criteria.toLowerCase()));\n    const newTotal = this.heroes.length;\n\n    if (this.heroesTotal !== newTotal) {\n      this.heroesTotal = newTotal;\n    } else if (!criteria) {\n      this.heroesTotal = -1;\n    }\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">這個例子中的程式碼包含下列任務：</p><p translation-origin=\"off\">The code in this example performs the following tasks:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">當用戶首次開啟或導航到此頁面時，跳過所有動畫（該動畫會壓扁已經存在的內容，因此它只會作用於那些已經存在於 DOM 中的元素）</p><p translation-origin=\"off\">Skips animations when the user first opens or navigates to this page (the filter animation narrows what is already there, so it only works on elements that already exist in the DOM)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">根據搜尋框中的值過濾英雄</p><p translation-origin=\"off\">Filters heroes based on the search input's value</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">對於每次匹配：</p><p translation-origin=\"off\">For each change:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">透過將元素的不透明度和寬度設定為 0 來隱藏正在離開 DOM 的元素</p><p translation-origin=\"off\">Hides an element leaving the DOM by setting its opacity and width to 0</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對正在進入 DOM 的元素，播放一個 300 毫秒的動畫。在動畫期間，該元素採用其預設寬度和不透明度。</p><p translation-origin=\"off\">Animates an element entering the DOM over 300 milliseconds.\nDuring the animation, the element assumes its default width and opacity.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果有多個匹配的元素正在進入或離開 DOM，則從頁面頂部的元素開始對每個元素進行交錯（stagger），每個元素之間的延遲為 50 毫秒</p><p translation-origin=\"off\">If there are multiple elements entering or leaving the DOM, staggers each animation starting at the top of the page, with a 50-millisecond delay between each element</p>\n\n</li>\n</ul>\n<h2 id=\"animating-the-items-of-a-reordering-list\" translation-result=\"on\">在重新排序列表的條目時設定動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animating-the-items-of-a-reordering-list\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animating the items of a reordering list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animating-the-items-of-a-reordering-list\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">儘管 Angular 開箱即用的支援 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列表項動畫，但如果只是它們的順序變化了，就無法支援。因為 Angular 會忘記哪個元素是哪個元素，從而導致這些動畫被破壞。幫助 Angular 追蹤此類元素的唯一方法是將 <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code> 分配給 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 指令。這可確保 Angular 始終知道哪個元素是哪個，從而允許它始終將正確的動畫應用於正確的元素。</p><p translation-origin=\"off\">Although Angular animates correctly <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> list items out of the box, it will not be able to do so if their ordering changes.\nThis is because it will lose track of which element is which, resulting in broken animations.\nThe only way to help Angular keep track of such elements is by assigning a <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code> to the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive.\nThis makes sure that Angular always knows which element is which, thus allowing it to apply the correct animations to the correct elements all the time.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>重要</strong>：<br>\n如果你需要為 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列表的條目設定動畫，並且此類條目的順序有可能在執行時更改，請始終使用 <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code>。</p><p translation-origin=\"off\"><strong>IMPORTANT</strong>: <br>\nIf you need to animate the items of an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> list and there is a possibility that the order of such items will change during runtime, always use a <code><a href=\"api/core/TrackByFunction\" class=\"code-anchor\">TrackByFunction</a></code>.</p>\n\n</div>\n<h2 id=\"animations-and-component-view-encapsulation\" translation-result=\"on\">動畫和元件檢視封裝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animations-and-component-view-encapsulation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animations and Component View Encapsulation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animations-and-component-view-encapsulation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 動畫基於元件的 DOM 結構，不會直接考慮<a href=\"/guide/view-encapsulation\">檢視封裝</a>，這意味著使用 <code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> 的元件的行為方式與使用 <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> （ <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 行為方式不同，我們將很快討論） .</p><p translation-origin=\"off\">Angular animations are based on the components DOM structure and do not directly take <a href=\"/guide/view-encapsulation\">View Encapsulation</a> into account, this means that components using <code><a href=\"api/core/ViewEncapsulation#Emulated\" class=\"code-anchor\">ViewEncapsulation.Emulated</a></code> behave exactly as if they were using <code><a href=\"api/core/ViewEncapsulation#None\" class=\"code-anchor\">ViewEncapsulation.None</a></code> (<code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> behaves differently as we'll discuss shortly).</p>\n\n<p translation-result=\"on\">例如，如果要在使用模擬（emulated）檢視封裝的元件樹的最上層元件中應用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 函式（你還會在動畫指南的其餘部分看到更多此類函式），則這樣的查詢將能夠識別（並播放動畫）此樹的任何深度上的 DOM 元素。</p><p translation-origin=\"off\">For example if the <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> function (which you'll see more of in the rest of the Animations guide) were to be applied at the top of a tree of components using the emulated view encapsulation, such query would be able to identify (and thus animate) DOM elements on any depth of the tree.</p>\n\n<p translation-result=\"on\">另一方面，<code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> 會透過在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a> 元素中“隱藏” DOM 元素來更改元件的 DOM 結構。此類 DOM 操作就會阻礙某些動畫實現的正常工作，因為它只能工作在簡單的 DOM 結構上，並沒有考慮 <code>ShadowRoot</code> 元素。因此，建議避免使用 ShadowDom 檢視封裝將動畫應用到包含元件的檢視。</p><p translation-origin=\"off\">On the other hand the <code><a href=\"api/core/ViewEncapsulation#ShadowDom\" class=\"code-anchor\">ViewEncapsulation.ShadowDom</a></code> changes the component's DOM structure by \"hiding\" DOM elements inside <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a> elements. Such DOM manipulations do prevent some of the animations implementation to work properly since it relies on simple DOM structures and doesn't take <code>ShadowRoot</code> elements into account. Therefore it is advised to avoid applying animations to views incorporating components using the ShadowDom view encapsulation.</p>\n\n<h2 id=\"animation-sequence-summary\" translation-result=\"on\">動畫序列總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animation-sequence-summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animation sequence summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#animation-sequence-summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 中這些用於多元素動畫的函式，都要從 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 開始，查找出內部元素，比如找出某個 <code>&lt;div&gt;</code> 中的所有圖片。其餘函式 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code>、<a href=\"api/animations/group\"><code>group()</code></a> 和 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 會以級聯方式或你的自訂邏輯來控制要如何應用多個動畫步驟。</p><p translation-origin=\"off\">Angular functions for animating multiple elements start with <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> to find inner elements; for example, gathering all images within a <code>&lt;div&gt;</code>.\nThe remaining functions, <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code>, <a href=\"api/animations/group\"><code>group()</code></a>, and <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code>, apply cascades or let you control how multiple animation steps are applied.</p>\n\n<h2 id=\"more-on-angular-animations\" translation-result=\"on\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on Angular animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/complex-animation-sequences#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You might also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫簡介</a></p><p translation-origin=\"off\"><a href=\"guide/animations\">Introduction to Angular animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/transition-and-triggers\">過渡與觸發器</a></p><p translation-origin=\"off\"><a href=\"guide/transition-and-triggers\">Transition and triggers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reusable-animations\">可複用動畫</a></p><p translation-origin=\"off\"><a href=\"guide/reusable-animations\">Reusable animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/route-animations\">路由過渡動畫</a></p><p translation-origin=\"off\"><a href=\"guide/route-animations\">Route transition animations</a></p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/animations\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - /guide/view-encapsulation\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/group\n - api/animations/query\n - api/animations/query#entering-and-leaving-elements\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgFor\n - api/common/NgForOf\n - api/core/Component\n - api/core/OnInit\n - api/core/TrackByFunction\n - api/core/ViewEncapsulation#Emulated\n - api/core/ViewEncapsulation#None\n - api/core/ViewEncapsulation#ShadowDom\n - guide/animations\n - guide/animations#about-this-guide\n - guide/complex-animation-sequences#animate-multiple-elements-using-query-and-stagger-functions\n - guide/complex-animation-sequences#animating-the-items-of-a-reordering-list\n - guide/complex-animation-sequences#animation-sequence-summary\n - guide/complex-animation-sequences#animations-and-component-view-encapsulation\n - guide/complex-animation-sequences#complex-animation-sequences\n - guide/complex-animation-sequences#filter-animation-example\n - guide/complex-animation-sequences#more-on-angular-animations\n - guide/complex-animation-sequences#parallel-animation-using-group-function\n - guide/complex-animation-sequences#prerequisites\n - guide/complex-animation-sequences#query-函式\n - guide/complex-animation-sequences#sequential-vs-parallel-animations\n - guide/complex-animation-sequences#the-query-function\n - guide/complex-animation-sequences#使用-group-函式播放並行動畫\n - guide/complex-animation-sequences#使用-query-和-stagger交錯函式執行多元素動畫\n - guide/complex-animation-sequences#關於-angular-動畫的更多知識\n - guide/complex-animation-sequences#前提條件\n - guide/complex-animation-sequences#動畫和元件檢視封裝\n - guide/complex-animation-sequences#動畫序列總結\n - guide/complex-animation-sequences#在重新排序列表的條目時設定動畫\n - guide/complex-animation-sequences#複雜動畫序列\n - guide/complex-animation-sequences#過濾器動畫範例\n - guide/complex-animation-sequences#順序動畫與平行動畫\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n - https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors\n - https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/complex-animation-sequences.md?message=docs%3A%20請簡述你的修改...\n-->"}