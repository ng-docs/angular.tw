{"id":"guide/transition-and-triggers","title":"Animation transitions and triggers","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/transition-and-triggers.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"animation-transitions-and-triggers\" translation-result=\"on\">動畫過渡和觸發器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-transitions-and-triggers\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Animation transitions and triggers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-transitions-and-triggers\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本章將深入講解特殊的過渡狀態，如 <code>*</code> 萬用字元和 <code>void</code>，並說明這些特殊狀態如何作用於進入或離開檢視的元素。本節還探討了多重觸發器、動畫回呼(Callback)，以及使用關鍵幀技術的序列動畫。</p><p translation-origin=\"off\">This guide goes into depth on special transition states such as the <code>*</code> wildcard and <code>void</code>. It shows how these special states are used for elements entering and leaving a view.\nThis section also explores multiple animation triggers, animation callbacks, and sequence-based animation using keyframes.</p>\n\n<h2 id=\"predefined-states-and-wildcard-matching\" translation-result=\"on\">預定義狀態與萬用字元匹配<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#predefined-states-and-wildcard-matching\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Predefined states and wildcard matching<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#predefined-states-and-wildcard-matching\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中，過渡狀態可以透過 <a href=\"api/animations/state\"><code>state()</code></a> 函式進行顯式定義，或使用預定義的 <code>*</code> 萬用字元狀態和 <code>void</code> 狀態。</p><p translation-origin=\"off\">In Angular, transition states can be defined explicitly through the <a href=\"api/animations/state\"><code>state()</code></a> function, or using the predefined <code>*</code> wildcard and <code>void</code> states.</p>\n\n<h3 id=\"wildcard-state\" translation-result=\"on\">萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#wildcard-state\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Wildcard state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#wildcard-state\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">星號 <code>*</code> 或者叫<em>萬用字元</em>可以匹配任何一個動畫狀態。它可用來定義那些不用在乎 HTML 元素的起始狀態或結束狀態的過渡動畫。</p><p translation-origin=\"off\">An asterisk <code>*</code> or <em>wildcard</em> matches any animation state.\nThis is useful for defining transitions that apply regardless of the HTML element's start or end state.</p>\n\n<p translation-result=\"on\">比如，一個 <code>open =&gt; *</code> 過渡可應用在當元素的狀態從 <code>open</code> 變成任何其它狀態時。</p><p translation-origin=\"off\">For example, a transition of <code>open =&gt; *</code> applies when the element's state changes from open to anything else.</p>\n\n<div class=\"lightbox\">\n<img alt=\"wildcard state expressions\" src=\"generated/images/guide/animations/wildcard-state-500.png\" width=\"500\" height=\"229\">\n</div>\n<p translation-result=\"on\">下面是萬用字元狀態的另一個程式碼範例，以及我們以前使用 <code>open</code> 和 <code>closed</code> 狀態的例項。但這次，對於每個狀態到狀態的轉換對，我們這次規定從任何狀態過渡到 <code>closed</code> 狀態時要花 1 秒鐘，而從任何狀態過渡到 <code>open</code> 狀態時要花 0.5 秒。</p><p translation-origin=\"off\">The following is another code sample using the wildcard state together with the previous example using the <code>open</code> and <code>closed</code> states.\nInstead of defining each state-to-state transition pair, any transition to <code>closed</code> takes 1 second, and any transition to <code>open</code> takes 0.5 seconds.</p>\n\n<p translation-result=\"on\">這讓我們可以新增新狀態，而不必把它手動包含到每個單獨的過渡中。</p><p translation-origin=\"off\">This allows the addition of new states without having to include separate transitions for each one.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard1\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n  ]),\n],\n\n</code-example>\n<p translation-result=\"on\">使用雙向箭頭語法可以指定任意方向的狀態過渡。</p><p translation-origin=\"off\">Use a double arrow syntax to specify state-to-state transitions in both directions.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-wildcard2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<h3 id=\"use-wildcard-state-with-multiple-transition-states\" translation-result=\"on\">使用帶多個過渡狀態的萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use wildcard state with multiple transition states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在這個雙態按鈕的例子中，萬用字元不是很有用，因為只有兩種可能的狀態：<code>open</code> 和 <code>closed</code>。一般而言，當一個元素可能變更為多個潛在狀態時，萬用字元狀態會更好用。如果我們的按鈕可以從 <code>open</code> 變成 <code>closed</code> 或類似 <code>inProgress</code> 的狀態，則可以使用萬用字元狀態來減少所需的編碼量。</p><p translation-origin=\"off\">In the two-state button example, the wildcard isn't that useful because there are only two possible states, <code>open</code> and <code>closed</code>.\nIn general, use wildcard states when an element has multiple potential states that it can change to.\nIf the button can change from <code>open</code> to either <code>closed</code> or something like <code>inProgress</code>, using a wildcard state could reduce the amount of coding needed.</p>\n\n<div class=\"lightbox\">\n<img alt=\"wildcard state with 3 states\" src=\"generated/images/guide/animations/wildcard-3-states.png\" width=\"600\" height=\"426\">\n</div>\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"trigger-transition\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    // ...\n    state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '200px',\n      opacity: 1,\n      backgroundColor: 'yellow'\n    })),\n    state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      height: '100px',\n      opacity: 0.8,\n      backgroundColor: 'blue'\n    })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open &lt;=&gt; closed', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n      ),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n    ]),\n\n</code-example>\n<p translation-result=\"on\">當在<em>任意</em>兩個狀態之間切換時，<code>* =&gt; *</code> 過渡都會生效。</p><p translation-origin=\"off\">The <code>* =&gt; *</code> transition applies when any change between two states takes place.</p>\n\n<p translation-result=\"on\">過渡會按照其定義的順序進行匹配。因此，你可以在 <code>* =&gt; *</code> 過渡的前面定義其它過渡。比如，定義只針對 <code>open =&gt; closed</code> 的狀態變更或動畫，而使用 <code>* =&gt; *</code> 作為匹配不上其它狀態對時的後備。</p><p translation-origin=\"off\">Transitions are matched in the order in which they are defined.\nThus, you can apply other transitions on top of the <code>* =&gt; *</code> transition.\nFor example, define style changes or animations that would apply just to <code>open =&gt; closed</code>, then use <code>* =&gt; *</code> as a fallback for state pairings that aren't otherwise called out.</p>\n\n<p translation-result=\"on\">要這麼做，只要把那些更特殊的過渡放在 <code>* =&gt; *</code> <em>前面</em>就行了。</p><p translation-origin=\"off\">To do this, list the more specific transitions <em>before</em> <code>* =&gt; *</code>.</p>\n\n<h3 id=\"use-wildcards-with-styles\" translation-result=\"on\">使用帶樣式的萬用字元狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcards-with-styles\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use wildcards with styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-wildcards-with-styles\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用帶樣式的 <code>*</code> 萬用字元來告訴動畫使用當前的狀態值，並用它進行動畫處理。萬用字元是一個後備值，如果未在觸發器中宣告動畫狀態，就會使用這個值。</p><p translation-origin=\"off\">Use the wildcard <code>*</code> with a style to tell the animation to use whatever the current style value is, and animate with that.\nWildcard is a fallback value that's used if the state being animated isn't declared within the trigger.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition4\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ('* =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('1s',\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a> ({ opacity: '*' }),\n  ),\n]),\n\n</code-example>\n<h3 id=\"void-state\" translation-result=\"on\"><code>void</code> 狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#void-state\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Void state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#void-state\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以使用 <code>void</code> 狀態來為進入或離開頁面的元素配置過渡。參閱<a href=\"guide/transition-and-triggers#enter-leave-view\">進入和離開檢視的動畫</a>。</p><p translation-origin=\"off\">Use the <code>void</code> state to configure transitions for an element that is entering or leaving a page.\nSee <a href=\"guide/transition-and-triggers#enter-leave-view\">Animating entering and leaving a view</a>.</p>\n\n<h3 id=\"combine-wildcard-and-void-states\" translation-result=\"on\">組合使用萬用字元和 <code>void</code> 狀態<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#combine-wildcard-and-void-states\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Combine wildcard and void states<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#combine-wildcard-and-void-states\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以在過渡中組合使用萬用字元和 <code>void</code> 狀態，以觸發那些進入和離開頁面的動畫：</p><p translation-origin=\"off\">Combine wildcard and void states in a transition to trigger animations that enter and leave the page:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">當元素離開檢視時，就會觸發 <code>* =&gt; void</code> 過渡，而不管它離開前處於什麼狀態</p><p translation-origin=\"off\">A transition of <code>* =&gt; void</code> applies when the element leaves a view, regardless of what state it was in before it left</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當元素進入檢視時，就會觸發 <code>void =&gt; *</code> 過渡，而不管它進入時處於什麼狀態</p><p translation-origin=\"off\">A transition of <code>void =&gt; *</code> applies when the element enters a view, regardless of what state it assumes when entering</p>\n\n</li>\n<li>\n<p translation-result=\"on\">萬用字元狀態 <code>*</code> 會匹配<em>任何</em>狀態 —— 包括 <code>void</code></p><p translation-origin=\"off\">The wildcard state <code>*</code> matches to <em>any</em> state, including <code>void</code></p>\n\n</li>\n</ul>\n<h2 id=\"animate-entering-and-leaving-a-view\" translation-result=\"on\">播放進入和離開檢視時的動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animate-entering-and-leaving-a-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animate entering and leaving a view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animate-entering-and-leaving-a-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本節介紹如何為進入和離開頁面的元素設定動畫。</p><p translation-origin=\"off\">This section shows how to animate elements entering or leaving a page.</p>\n\n<p translation-result=\"on\">新增一些新的行為：</p><p translation-origin=\"off\">Add a new behavior:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">當你把一個英雄新增到英雄列表中時，它看起來是從左側飛進頁面的</p><p translation-origin=\"off\">When you add a hero to the list of heroes, it appears to fly onto the page from the left</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當你從列表中移除一個英雄時，它看起來是從右側飛出去的</p><p translation-origin=\"off\">When you remove a hero from the list, it appears to fly out to the right</p>\n\n</li>\n</ul>\n<code-example header=\"src/app/hero-list-enter-leave.component.ts\" path=\"animations/src/app/hero-list-enter-leave.component.ts\" region=\"animationdef\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('flyInOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(0)' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('void =&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(-100%)' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100)\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(100, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ transform: 'translateX(100%)' }))\n    ])\n  ])\n]\n\n</code-example>\n<p translation-result=\"on\">在上述程式碼中，當 HTML 元素沒有附著在檢視中時，我們就會應用 <code>void</code> 狀態。</p><p translation-origin=\"off\">In the preceding code, you applied the <code>void</code> state when the HTML element isn't attached to a view.</p>\n\n<p><a id=\"enter-leave-view\"></a></p>\n<h2 id=\"aliases-enter-and-leave\" translation-result=\"on\">:enter 和 :leave 別名<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#aliases-enter-and-leave\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Aliases :enter and :leave<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#aliases-enter-and-leave\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>:enter</code> 和 <code>:leave</code> 分別是 <code>void =&gt; *</code> 和 <code>* =&gt; void</code> 的別名。這些別名供多個動畫函式使用。</p><p translation-origin=\"off\"><code>:enter</code> and <code>:leave</code> are aliases for the <code>void =&gt; *</code> and <code>* =&gt; void</code> transitions.\nThese aliases are used by several animation functions.</p>\n\n<code-example hidecopy=\"\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':enter', [ … ] );  // alias for void =&gt; *\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a> ( ':leave', [ … ] );  // alias for * =&gt; void\n\n</code-example>\n<p translation-result=\"on\">定位進入檢視的元素更難，因為它不在 DOM 中。因此，使用別名 <code>:enter</code> 和 <code>:leave</code> 來定位要從檢視中插入或刪除的 HTML 元素。</p><p translation-origin=\"off\">It's harder to target an element that is entering a view because it isn't in the DOM yet.\nUse the aliases <code>:enter</code> and <code>:leave</code> to target HTML elements that are inserted or removed from a view.</p>\n\n<h3 id=\"use-ngif-and-ngfor-with-enter-and-leave\" translation-result=\"on\">和 <code>:enter</code> 與 <code>:leave</code> 一起使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#和-enter-與-leave-一起使用-ngif-和-ngfor\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> with :enter and :leave<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當任何 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 或 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中的檢視放進頁面中時，會執行 <code>:enter</code> 過渡；當移除這些檢視時，就會執行 <code>:leave</code> 過渡。</p><p translation-origin=\"off\">The <code>:enter</code> transition runs when any <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> or <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> views are placed on the page, and <code>:leave</code> runs when those views are removed from the page.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n進入/離開行為有時會令人困惑。作為經驗法則，考慮到 Angular 新增到 DOM 的任何元素都會透過 <code>:enter</code> 轉換傳遞，但只有透過 Angular 直接從 DOM 刪除的元素會透過 <code>:leave</code> 轉換傳遞。例如，元素的檢視因為其父級正在從 DOM 中刪除而被刪除時。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nEntering/leaving behaviors can sometime be confusing.\nAs a rule of thumb consider that any element being added to the DOM by Angular passes via the <code>:enter</code> transition. Only elements being directly removed from the DOM by Angular pass via the <code>:leave</code> transition. For example, an element's view is removed from the DOM because its parent is being removed from the DOM.</p>\n\n</div>\n<p translation-result=\"on\">本例子中有一個名叫 <code>myInsertRemoveTrigger</code> 的觸發器，來表示進入和離開動畫。其 HTML 範本包含下列程式碼。</p><p translation-origin=\"off\">This example has a special trigger for the enter and leave animation called <code>myInsertRemoveTrigger</code>.\nThe HTML template contains the following code.</p>\n\n<code-example header=\"src/app/insert-remove.component.html\" path=\"animations/src/app/insert-remove.component.html\" region=\"insert-remove\">\n&lt;div @myInsertRemoveTrigger *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isShown\" class=\"insert-remove-container\"&gt;\n  &lt;p&gt;The box is inserted&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">在元件檔案中，<code>:enter</code> 過渡會將初始透明度設定為 0，然後設定動畫，當該元素已經插入檢視中之後，把這個透明度設定為 1。</p><p translation-origin=\"off\">In the component file, the <code>:enter</code> transition sets an initial opacity of 0. It then animates it to change that opacity to 1 as the element is inserted into the view.</p>\n\n<code-example header=\"src/app/insert-remove.component.ts\" path=\"animations/src/app/insert-remove.component.ts\" region=\"enter-leave-trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('myInsertRemoveTrigger', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }),\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1 })),\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':leave', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('100ms', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0 }))\n  ])\n]),\n\n</code-example>\n<p translation-result=\"on\">請注意，此範例不需要使用<a href=\"api/animations/state\"><code>state()</code></a>。</p><p translation-origin=\"off\">Note that this example doesn't need to use <a href=\"api/animations/state\"><code>state()</code></a>.</p>\n\n<h2 id=\"transition-increment-and-decrement\" translation-result=\"on\">過渡中的 <code>:increment</code> 和 <code>:decrement</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#transition-increment-and-decrement\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Transition :increment and :decrement<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#transition-increment-and-decrement\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 函式還能接受額外的選擇器值：<code>:increment</code> 和 <code>:decrement</code>。當數值增加或減小時，使用這些來啟動過渡。</p><p translation-origin=\"off\">The <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> function takes other selector values, <code>:increment</code> and <code>:decrement</code>.\nUse these to kick off a transition when a numeric value has increased or decreased in value.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n下面的例子使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 和 <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> 方法。欲知詳情，參見<a href=\"guide/complex-animation-sequences#complex-sequence\">複雜序列</a>頁。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe following example uses <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> and <code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code> methods.\nFor more information on these methods, see the <a href=\"guide/complex-animation-sequences#complex-sequence\">complex sequences</a> page.</p>\n\n</div>\n<code-example header=\"src/app/hero-list-page.component.ts\" path=\"animations/src/app/hero-list-page.component.ts\" region=\"increment\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('filterAnimation', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':enter, * =&gt; 0, * =&gt; -1', []),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':increment', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 }),\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1, width: '*' })),\n      ]),\n    ], { optional: true })\n  ]),\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>(':decrement', [\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>(50, [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0, width: 0 })),\n      ]),\n    ])\n  ]),\n]),\n\n</code-example>\n<h2 id=\"boolean-values-in-transitions\" translation-result=\"on\">過渡中的邏輯值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#boolean-values-in-transitions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Boolean values in transitions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#boolean-values-in-transitions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果某個觸發器以邏輯型的值作為繫結值，那麼就可以使用能與 <code>true</code> 和 <code>false</code> 或 <code>1</code> 和 <code>0</code> 相比較的 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 表示式來匹配這個值。</p><p translation-origin=\"off\">If a trigger contains a Boolean value as a binding value, then this value can be matched using a <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> expression that compares <code>true</code> and <code>false</code>, or <code>1</code> and <code>0</code>.</p>\n\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.2.html\" region=\"trigger-boolean\">\n&lt;div [@openClose]=\"isOpen ? true : false\" class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">在上述程式碼片段中，HTML 範本將 <code>&lt;div&gt;</code> 元素繫結到名為 <code>openClose</code> 的觸發器，其狀態表達式是 <code>isOpen</code>，可能的值為 <code>true</code> 和 <code>false</code>。這種模式可以代替建立兩個命名狀態 <code>open</code> 和 <code>close</code> 的方式。</p><p translation-origin=\"off\">In the code snippet above, the HTML template binds a <code>&lt;div&gt;</code> element to a trigger named <code>openClose</code> with a status expression of <code>isOpen</code>, and with possible values of <code>true</code> and <code>false</code>.\nThis pattern is an alternative to the practice of creating two named states like <code>open</code> and <code>close</code>.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元資料下的 <code>animations:</code> 屬性中，當該狀態求值為 <code>true</code> 時，相關 HTML 元素的高度值為萬用字元樣式 <code>*</code> 或某個預設值。在這種情況下，它會使用此元素開始動畫前的現有高度。當該元素是 \"closed\" 時，它的高度會從指定的高度運動到 0，這會讓它不可見。</p><p translation-origin=\"off\">Inside the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata under the <code>animations:</code> property, when the state evaluates to <code>true</code>, the associated HTML element's height is a wildcard style or default.\nIn this case, the animation uses whatever height the element already had before the animation started.\nWhen the element is <code>closed</code>, the element gets animated to a height of 0, which makes it invisible.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.2.ts\" region=\"trigger-boolean\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n    state('true', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    state('false', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '0px' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('false &lt;=&gt; true', <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(500))\n  ])\n],\n\n</code-example>\n<h2 id=\"multiple-animation-triggers\" translation-result=\"on\">多重動畫觸發器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#multiple-animation-triggers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Multiple animation triggers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#multiple-animation-triggers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以為元件定義多個動畫觸發器並將這些動畫觸發器附著到不同的元素上，這些元素之間的父子關係會影響動畫的執行方式和時機。</p><p translation-origin=\"off\">You can define more than one animation trigger for a component.\nAttach animation triggers to different elements, and the parent-child relationships among the elements affect how and when the animations run.</p>\n\n<h3 id=\"parent-child-animations\" translation-result=\"on\">父-子動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#parent-child-animations\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Parent-child animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#parent-child-animations\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">每次在 Angular 中觸發動畫時，父動畫始終會優先，而子動畫會被阻塞。為了執行子動畫，父動畫必須查詢出包含子動畫的每個元素，然後使用 <a href=\"api/animations/animateChild\"><code>animateChild()</code></a> 函式來執行它們。</p><p translation-origin=\"off\">Each time an animation is triggered in Angular, the parent animation always gets priority and child animations are blocked.\nFor a child animation to run, the parent animation must query each of the elements containing child animations. It then lets the animations run using the <a href=\"api/animations/animateChild\"><code>animateChild()</code></a> function.</p>\n\n<h4 id=\"disable-an-animation-on-an-html-element\" translation-result=\"on\">在某個 HTML 元素上禁用動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-an-animation-on-an-html-element\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Disable an animation on an HTML element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-an-animation-on-an-html-element\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">可以把一個名叫 <code>@.disabled</code> 的動畫控制繫結放在 HTML 元素上，以禁用該元素及其子元素上的動畫。當 <code>@.disabled</code> 繫結為 <code>true</code> 時，就會禁止渲染所有動畫。</p><p translation-origin=\"off\">A special animation control binding called <code>@.disabled</code> can be placed on an HTML element to turn off animations on that element, as well as any nested elements.\nWhen true, the <code>@.disabled</code> binding prevents all animations from rendering.</p>\n\n<p translation-result=\"on\">下面的程式碼範例展示瞭如何使用此特性。</p><p translation-origin=\"off\">The following code sample shows how to use this feature.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.4.html\" region=\"toggle-animation\">\n&lt;div [@.disabled]=\"isDisabled\"&gt;\n  &lt;div [@childAnimation]=\"isOpen ? 'open' : 'closed'\"\n    class=\"open-close-container\"&gt;\n    &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.4.ts\" region=\"toggle-animation\" language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('childAnimation', [\n      // ...\n    ]),\n  ],\n})\nexport class OpenCloseChildComponent {\n  isDisabled = false;\n  isOpen = false;\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">當 <code>@.disabled</code> 繫結為 <code>true</code> 時，<code>@childAnimation</code> 觸發器就不會啟動。</p><p translation-origin=\"off\">When the <code>@.disabled</code> binding is true, the <code>@childAnimation</code> trigger doesn't kick off.</p>\n\n<p translation-result=\"on\">當 HTML 範本中的某個元素使用 <code>@.disabled</code> 禁止了動畫時，也會同時禁止其所有內部元素的動畫。你無法有選擇的單獨禁用單個元素上的多個動畫。</p><p translation-origin=\"off\">When an element within an HTML template has animations turned off using the <code>@.disabled</code> host binding, animations are turned off on all inner elements as well.\nYou can't selectively turn off multiple animations on a single element.<!-- vale off --></p>\n\n<p translation-result=\"on\">選擇性的子動畫仍然可以用如下方式之一在已禁用的父元素上執行：</p><p translation-origin=\"off\">A selective child animations can still be run on a disabled parent in one of the following ways:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">父動畫可以使用 <a href=\"api/animations/query\"><code>query()</code></a> 函式來收集 HTML 範本中位於禁止動畫區域內部的元素。這些元素仍然可以播放動畫。</p><p translation-result=\"on\">父動畫可以使用 <a href=\"api/animations/query\"><code>query()</code></a> 函式來收集 HTML 範本中位於禁止動畫區域內部的元素。這些元素仍然可以播放動畫。</p><p translation-origin=\"off\">A parent animation can use the <a href=\"api/animations/query\"><code>query()</code></a> function to collect inner elements located in disabled areas of the HTML template.\nThose elements can still animate.</p>\n\n<!-- vale on -->\n\n<!-- vale on -->\n</li>\n<li>\n<p translation-result=\"on\">子動畫可以被父動畫查詢，並且稍後使用 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 來播放它。</p><p translation-origin=\"off\">A child animation can be queried by a parent and then later animated with the <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> function</p>\n\n</li>\n</ul>\n<h4 id=\"disable-all-animations\" translation-result=\"on\">禁用所有動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-all-animations\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Disable all animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#disable-all-animations\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要禁用 Angular 應用中的所有動畫，只要把 <code>@.disabled</code> 繫結放在最上層的 Angular 元件上即可。</p><p translation-origin=\"off\">To turn off all animations for an Angular application, place the <code>@.disabled</code> host binding on the topmost Angular component.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"toggle-app-animations\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    slideInAnimation\n  ]\n})\nexport class AppComponent {\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('@.disabled')\n  public animationsDisabled = false;\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n禁用應用級的動畫在端到端（E2E）測試中是很有用的。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nDisabling animations application-wide is useful during end-to-end (E2E) testing.</p>\n\n</div>\n<h2 id=\"animation-callbacks\" translation-result=\"on\">動畫回呼(Callback)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-callbacks\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animation callbacks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animation-callbacks\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當動畫啟動和終止時，<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式會發出一些<em>回呼(Callback)</em>。在下面的例子中，我們有一個包含 <code>openClose</code> 觸發器的元件。</p><p translation-origin=\"off\">The animation <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> function emits <em>callbacks</em> when it starts and when it finishes.\nThe following example features a component that contains an <code>openClose</code> trigger.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events1\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">在 HTML 範本中，動畫事件可以透過 <code>$event</code> 傳遞回來，比如 <code>@triggerName.start</code> 和 <code>@triggerName.done</code>，這裡的 <code>triggerName</code> 表示所使用的觸發器名字。在我們的例子中，<code>openClose</code> 觸發器將會是這樣的。</p><p translation-origin=\"off\">In the HTML template, the animation event is passed back via <code>$event</code>, as <code>@triggerName.start</code> and <code>@triggerName.done</code>, where <code>triggerName</code> is the name of the trigger being used.\nIn this example, the trigger <code>openClose</code> appears as follows.</p>\n\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.3.html\" region=\"callbacks\">\n  &lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\"\n    (@openClose.start)=\"onAnimationEvent($event)\"\n    (@openClose.done)=\"onAnimationEvent($event)\"\n    class=\"open-close-container\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">動畫回呼(Callback)的潛在用途之一，是用來覆蓋比較慢的 API 呼叫，比如查閱資料庫。比如，可以建立一個 <strong>InProgress</strong> 按鈕，讓它擁有自己的迴圈動畫，直到後端系統操作完成。</p><p translation-origin=\"off\">A potential use for animation callbacks could be to cover for a slow API call, such as a database lookup.\nFor example, an <strong>InProgress</strong> button can be set up to have its own looping animation while the backend system operation finishes.</p>\n\n<p translation-result=\"on\">在當前動畫結束時，可以呼叫另一個動畫。比如，當 API 呼叫完成時，按鈕會從 <code>inProgress</code> 狀態變成 <code>closed</code> 狀態。</p><p translation-origin=\"off\">Another animation can be called when the current animation finishes.\nFor example, the button goes from the <code>inProgress</code> state to the <code>closed</code> state when the API call is completed.</p>\n\n<p translation-result=\"on\">動畫可以影響終端使用者，讓他<em>覺得</em>操作更快 —— 雖然並沒有。</p><p translation-origin=\"off\">An animation can influence an end user to <em>perceive</em> the operation as faster, even when it is not.</p>\n\n<p translation-result=\"on\">回呼(Callback)可以作為除錯工具，比如與 <code>console.warn()</code> 結合使用，以便在瀏覽器的開發者控制檯中檢視應用的進度。下列程式碼片段為我們原始的雙態按鈕（<code>open</code> 與 <code>closed</code>）範例建立了控制檯輸出。</p><p translation-origin=\"off\">Callbacks can serve as a debugging tool, for example in conjunction with <code>console.warn()</code> to view the application's progress in a browser's Developer JavaScript Console.\nThe following code snippet creates console log output for the original example, a button with the two states of <code>open</code> and <code>closed</code>.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"events\">\nexport class OpenCloseComponent {\n  onAnimationEvent(event: <a href=\"api/animations/AnimationEvent\" class=\"code-anchor\">AnimationEvent</a>) {\n    // openClose is <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> name in this example\n    console.warn(`Animation Trigger: ${event.triggerName}`);\n\n    // phaseName is \"start\" or \"done\"\n    console.warn(`Phase: ${event.phaseName}`);\n\n    // in our example, totalTime is 1000 (number of milliseconds in a second)\n    console.warn(`Total time: ${event.totalTime}`);\n\n    // in our example, fromState is either \"open\" or \"closed\"\n    console.warn(`From: ${event.fromState}`);\n\n    // in our example, toState either \"open\" or \"closed\"\n    console.warn(`To: ${event.toState}`);\n\n    // the HTML element itself, the button in this case\n    console.warn(`Element: ${event.element}`);\n  }\n}\n\n\n</code-example>\n<p><a id=\"keyframes\"></a></p>\n<h2 id=\"keyframes\" translation-result=\"on\">關鍵幀動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Keyframes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要建立一個具有多個順序執行步驟的動畫，請使用<em>關鍵幀動畫</em>。</p><p translation-origin=\"off\">To create an animation with multiple steps run in sequence, use <em>keyframes</em>.</p>\n\n<p translation-result=\"on\">Angular 的 <code>keyframe()</code> 函式類似於 CSS 中的關鍵幀。關鍵幀允許在單個時間段內進行多種樣式更改。比如，我們的按鈕可以在單個的 2 秒時間段內多次改變顏色，而不是漸隱掉。</p><p translation-origin=\"off\">Angular's <code>keyframe()</code> function allows several style changes within a single timing segment.\nFor example, the button, instead of fading, could change color several times over a single 2-second time span.</p>\n\n<div class=\"lightbox\">\n<img alt=\"keyframes\" src=\"generated/images/guide/animations/keyframes-500.png\" width=\"500\" height=\"244\">\n</div>\n<p translation-result=\"on\">這些更改顏色的程式碼如下所示。</p><p translation-origin=\"off\">The code for this color change might look like this.</p>\n\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframes\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red' }),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'orange' })\n  ]))\n\n</code-example>\n<h3 id=\"offset\" translation-result=\"on\">偏移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#offset\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Offset<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#offset\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">關鍵幀包括一個用來定義動畫中每個樣式何時開始更改的<em>偏移（offset）</em>屬性。偏移是個 0 到 1 之間的相對值，分別標記動畫的開始和結束時間，並且只要使用了它，就要同樣應用於這個關鍵幀的每個步驟。</p><p translation-origin=\"off\">Keyframes include an <code>offset</code> that defines the point in the animation where each style change occurs.\nOffsets are relative measures from zero to one, marking the beginning and end of the animation. They should be applied to each of the keyframe steps if used at least once.</p>\n\n<p translation-result=\"on\">定義關鍵幀的偏移量是可選的。如果省略它們，就會自動分配均勻間隔的偏移。比如，三個沒有預定義偏移的關鍵幀會分別使用 0、0.5、1 作為偏移。在上面的例子中，還可以為中間的過渡指定偏移量 0.8。程式碼如下。</p><p translation-origin=\"off\">Defining offsets for keyframes is optional.\nIf you omit them, evenly spaced offsets are automatically assigned.\nFor example, three keyframes without predefined offsets receive offsets of 0, 0.5, and 1.\nSpecifying an offset of 0.8 for the middle transition in the preceding example might look like this.</p>\n\n<div class=\"lightbox\">\n<img alt=\"keyframes with offset\" src=\"generated/images/guide/animations/keyframes-offset-500.png\" width=\"500\" height=\"247\">\n</div>\n<p translation-result=\"on\">帶有指定偏移量的程式碼如下。</p><p translation-origin=\"off\">The code with offsets specified would be as follows.</p>\n\n<code-example header=\"src/app/status-slider.component.ts\" path=\"animations/src/app/status-slider.component.ts\" region=\"keyframesWithOffsets\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; active', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.8}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 1.0})\n  ])),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; inactive', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('2s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>([\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: '#754600', offset: 0}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'red', offset: 0.2}),\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ backgroundColor: 'blue', offset: 1.0})\n  ]))\n]),\n\n</code-example>\n<p translation-result=\"on\">你可以在單個動畫中組合使用 <code>duration</code>、<code>delay</code> 和 <code>easing</code> 來定義關鍵幀。</p><p translation-origin=\"off\">You can combine keyframes with <code>duration</code>, <code>delay</code>, and <code>easing</code> within a single animation.</p>\n\n<h3 id=\"keyframes-with-a-pulsation\" translation-result=\"on\">帶脈動效果的關鍵幀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-with-a-pulsation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Keyframes with a pulsation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-with-a-pulsation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過在整個動畫中定義特定偏移處的樣式，可以使用關鍵幀在動畫中建立脈動效果。</p><p translation-origin=\"off\">Use keyframes to create a pulse effect in your animations by defining styles at specific offset throughout the animation.</p>\n\n<p translation-result=\"on\">下面是使用關鍵幀建立脈動效果的例子：</p><p translation-origin=\"off\">Here's an example of using keyframes to create a pulse effect:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">原始的 <code>open</code> 和 <code>closed</code> 狀態（包括其原始的高度、顏色和透明度）會在一秒鐘內逐漸發生變化。</p><p translation-origin=\"off\">The original <code>open</code> and <code>closed</code> states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</p>\n\n</li>\n<li>\n<p translation-result=\"on\">插在中間的關鍵幀序列會導致該按鈕在一秒鐘內出現不規則的脈動。</p><p translation-origin=\"off\">A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1 second timeframe</p>\n\n</li>\n</ul>\n<div class=\"lightbox\">\n<img alt=\"keyframes with irregular pulsation\" src=\"generated/images/guide/animations/keyframes-pulsation.png\" width=\"600\" height=\"312\">\n</div>\n<p translation-result=\"on\">此動畫的程式碼片段是這樣的。</p><p translation-origin=\"off\">The code snippet for this animation might look like this.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.1.ts\" region=\"trigger\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n  state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '200px',\n    opacity: 1,\n    backgroundColor: 'yellow'\n  })),\n  state('close', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '100px',\n    opacity: 0.5,\n    backgroundColor: 'green'\n  })),\n  // ...\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; *', [\n    <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s', <a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a> ( [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.1, offset: 0.1 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.6, offset: 0.2 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 1,   offset: 0.5 }),\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ opacity: 0.2, offset: 0.7 })\n    ]))\n  ])\n])\n\n</code-example>\n<h3 id=\"animatable-properties-and-units\" translation-result=\"on\">可動的屬性與單位<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animatable-properties-and-units\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Animatable properties and units<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#animatable-properties-and-units\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 的動畫支援是基於 Web 動畫的，所以你可以動瀏覽器認為可動（animatable）的任意屬性。包括位置、大小、變形、顏色、邊框等。W3C 在 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS 過渡</a>頁也維護了一個可動屬性的列表。</p><p translation-origin=\"off\">Angular animations support builds on top of web animations, so you can animate any property that the browser considers animatable.\nThis includes positions, sizes, transforms, colors, borders, and more.\nThe W3C maintains a list of animatable properties on its <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS Transitions</a> page.</p>\n\n<p translation-result=\"on\">對於帶有數值的位置屬性，可以把值作為字串（別忘了帶引號）並使用適當的字尾來定義其單位：</p><p translation-origin=\"off\">For properties with a numeric value, define a unit by providing the value as a string, in quotes, with the appropriate suffix:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">50 畫素：<code>'50px'</code></p><p translation-origin=\"off\">50 pixels:\n<code>'50px'</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">相對字型大小：<code>'3em'</code></p><p translation-origin=\"off\">Relative font size:\n<code>'3em'</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">百分比：<code>'100%'</code></p><p translation-origin=\"off\">Percentage:\n<code>'100%'</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">你還可以用數字形式提供這個值。這種情況下，Angular 假設預設的單位是畫素（<code>px</code>）。把 50 畫素表示為 <code>50</code> 和 <code>'50px'</code> 是一樣的。</p><p translation-origin=\"off\">You can also provide the value as a number. In such cases Angular assumes a default unit of pixels, or <code>px</code>.\nExpressing 50 pixels as <code>50</code> is the same as saying <code>'50px'</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n字串形式的 <code>\"50\"</code> 是無效的。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe string <code>\"50\"</code> would instead not be considered valid).</p>\n\n</div>\n<h3 id=\"automatic-property-calculation-with-wildcards\" translation-result=\"on\">使用萬用字元自動計算屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#automatic-property-calculation-with-wildcards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Automatic property calculation with wildcards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#automatic-property-calculation-with-wildcards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">有時你在執行之前並不知道某個樣式的屬性值。比如，元素的寬度和高度通常取決於其內容和螢幕大小。在使用 CSS 動畫時，這些屬性通常會具有挑戰性（譯註：因為 CSS 動畫不支援自動確定寬高）。</p><p translation-origin=\"off\">Sometimes, the value of a dimensional style property isn't known until runtime.\nFor example, elements often have widths and heights that depend on their content or the screen size.\nThese properties are often challenging to animate using CSS.</p>\n\n<p translation-result=\"on\">這些情況下，你可以在 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 中指定萬用字元 <code>*</code> 屬性。該屬性的值是在執行期間計算的，然後把它插入到動畫中。</p><p translation-origin=\"off\">In these cases, you can use a special wildcard <code>*</code> property value under <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code>. The value of that particular style property is computed at runtime and then plugged into the animation.</p>\n\n<p translation-result=\"on\">下面的例子中有一個名叫 <code>shrinkOut</code> 的觸發器，它會在 HTML 元素離開頁面時使用。該動畫會使用它離開之前的任意高度，並從該高度動畫到 0。</p><p translation-origin=\"off\">The following example has a trigger called <code>shrinkOut</code>, used when an HTML element leaves the page.\nThe animation takes whatever height the element has before it leaves, and animates from that height to zero.</p>\n\n<code-example header=\"src/app/hero-list-auto.component.ts\" path=\"animations/src/app/hero-list-auto.component.ts\" region=\"auto-calc\">\nanimations: [\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('shrinkOut', [\n    state('in', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' })),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* =&gt; void', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: '*' }),\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>(250, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ height: 0 }))\n    ])\n  ])\n]\n\n</code-example>\n<h3 id=\"keyframes-summary\" translation-result=\"on\">關鍵幀動畫總結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-summary\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Keyframes summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#keyframes-summary\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 中的 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函式允許你在單個過渡中指定多個臨時樣式，並使用可選的 <code>offset</code> 來定義動畫中每次樣式變化的發生時機。</p><p translation-origin=\"off\">The <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> function in Angular allows you to specify multiple interim styles within a single transition. An optional <code>offset</code> can be used to define the point in the animation where each style change should occur.</p>\n\n<h2 id=\"more-on-angular-animations\" translation-result=\"on\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on Angular animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/transition-and-triggers#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You might also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫簡介</a></p><p translation-origin=\"off\"><a href=\"guide/animations\">Introduction to Angular animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></p><p translation-origin=\"off\"><a href=\"guide/complex-animation-sequences\">Complex animation sequences</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reusable-animations\">可複用動畫</a></p><p translation-origin=\"off\"><a href=\"guide/reusable-animations\">Reusable animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/route-animations\">路由過渡動畫</a></p><p translation-origin=\"off\"><a href=\"guide/route-animations\">Route transition animations</a></p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：10/11/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/common/NgFor\n - api/common/NgForOf\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations\n-->\n<!-- links from this doc:\n - api/animations/AnimationEvent\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/keyframes\n - api/animations/query\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/common/NgFor\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - guide/animations\n - guide/complex-animation-sequences\n - guide/complex-animation-sequences#complex-sequence\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers#aliases-enter-and-leave\n - guide/transition-and-triggers#animatable-properties-and-units\n - guide/transition-and-triggers#animate-entering-and-leaving-a-view\n - guide/transition-and-triggers#animation-callbacks\n - guide/transition-and-triggers#animation-transitions-and-triggers\n - guide/transition-and-triggers#automatic-property-calculation-with-wildcards\n - guide/transition-and-triggers#boolean-values-in-transitions\n - guide/transition-and-triggers#combine-wildcard-and-void-states\n - guide/transition-and-triggers#disable-all-animations\n - guide/transition-and-triggers#disable-an-animation-on-an-html-element\n - guide/transition-and-triggers#enter-leave-view\n - guide/transition-and-triggers#enter-和-leave-別名\n - guide/transition-and-triggers#keyframes\n - guide/transition-and-triggers#keyframes-summary\n - guide/transition-and-triggers#keyframes-with-a-pulsation\n - guide/transition-and-triggers#more-on-angular-animations\n - guide/transition-and-triggers#multiple-animation-triggers\n - guide/transition-and-triggers#offset\n - guide/transition-and-triggers#parent-child-animations\n - guide/transition-and-triggers#predefined-states-and-wildcard-matching\n - guide/transition-and-triggers#transition-increment-and-decrement\n - guide/transition-and-triggers#use-ngif-and-ngfor-with-enter-and-leave\n - guide/transition-and-triggers#use-wildcard-state-with-multiple-transition-states\n - guide/transition-and-triggers#use-wildcards-with-styles\n - guide/transition-and-triggers#void-state\n - guide/transition-and-triggers#void-狀態\n - guide/transition-and-triggers#wildcard-state\n - guide/transition-and-triggers#使用帶多個過渡狀態的萬用字元狀態\n - guide/transition-and-triggers#使用帶樣式的萬用字元狀態\n - guide/transition-and-triggers#使用萬用字元自動計算屬性\n - guide/transition-and-triggers#偏移\n - guide/transition-and-triggers#關於-angular-動畫的更多知識\n - guide/transition-and-triggers#關鍵幀動畫\n - guide/transition-and-triggers#關鍵幀動畫總結\n - guide/transition-and-triggers#動畫回呼(Callback)\n - guide/transition-and-triggers#動畫過渡和觸發器\n - guide/transition-and-triggers#可動的屬性與單位\n - guide/transition-and-triggers#和-enter-與-leave-一起使用-ngif-和-ngfor\n - guide/transition-and-triggers#在某個-html-元素上禁用動畫\n - guide/transition-and-triggers#多重動畫觸發器\n - guide/transition-and-triggers#帶脈動效果的關鍵幀\n - guide/transition-and-triggers#播放進入和離開檢視時的動畫\n - guide/transition-and-triggers#父-子動畫\n - guide/transition-and-triggers#禁用所有動畫\n - guide/transition-and-triggers#組合使用萬用字元和-void-狀態\n - guide/transition-and-triggers#過渡中的-increment-和-decrement\n - guide/transition-and-triggers#過渡中的邏輯值\n - guide/transition-and-triggers#萬用字元狀態\n - guide/transition-and-triggers#預定義狀態與萬用字元匹配\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/transition-and-triggers.md?message=docs%3A%20請簡述你的修改...\n - https://www.w3.org/TR/css-transitions-1\n-->"}