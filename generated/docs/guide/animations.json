{"id":"guide/animations","title":"Introduction to Angular animations","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/animations.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-angular-animations\" translation-result=\"on\">Angular 動畫簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#introduction-to-angular-animations\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Introduction to Angular animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#introduction-to-angular-animations\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">動畫用於提供運動的幻覺：HTML 元素隨著時間改變樣式。精心設計的動畫可以讓你的應用更有趣，更易用，但它們不僅僅是裝飾性的。動畫可以通過幾種方式改善你的應用和使用者體驗：</p><p translation-origin=\"off\">Animation provides the illusion of motion: HTML elements change styling over time.\nWell-designed animations can make your application more fun and straightforward to use, but they aren't just cosmetic.\nAnimations can improve your application and user experience in a number of ways:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">沒有動畫，Web 頁面的過渡就會顯得突兀、不協調</p><p translation-origin=\"off\">Without animations, web page transitions can seem abrupt and jarring</p>\n\n</li>\n<li>\n<p translation-result=\"on\">運動能極大地提升使用者體驗，因此動畫可以讓使用者察覺到應用對他們的操作做出了響應</p><p translation-origin=\"off\">Motion greatly enhances the user experience, so animations give users a chance to detect the application's response to their actions</p>\n\n</li>\n<li>\n<p translation-result=\"on\">良好的動畫可以直觀的把使用者的注意力吸引到要留意的地方</p><p translation-origin=\"off\">Good animations intuitively call the user's attention to where it is needed</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">典型的動畫會涉及多種隨時間變化的轉換。HTML 元素可以移動、變換顏色、增加或縮小、隱藏或從頁面中滑出。這些變化可以同時發生或順序發生。你可以控制每次轉換的持續時間。</p><p translation-origin=\"off\">Typically, animations involve multiple style <em>transformations</em> over time.\nAn HTML element can move, change color, grow or shrink, fade, or slide off the page.\nThese changes can occur simultaneously or sequentially. You can control the timing of each transformation.</p>\n\n<p translation-result=\"on\">Angular 的動畫系統是基於 CSS 功能建構的，這意味著你可以 \"動\" 瀏覽器認為可動的任何屬性。包括位置、大小、變形、顏色、邊框等。W3C 在它的 <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS Transitions（過渡）</a> 頁中維護了一個可動屬性的列表。</p><p translation-origin=\"off\">Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable.\nThis includes positions, sizes, transforms, colors, borders, and more.\nThe W3C maintains a list of animatable properties on its <a href=\"https://www.w3.org/TR/css-transitions-1\">CSS Transitions</a> page.</p>\n\n<h2 id=\"about-this-guide\" translation-result=\"on\">關於本指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#about-this-guide\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">About this guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#about-this-guide\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本指南覆蓋了基本的 Angular 動畫特性，讓你能開始為你的專案新增 Angular 動畫。</p><p translation-origin=\"off\">This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</p>\n\n<p translation-result=\"on\">本指南中描述的特性，以及相關的 Angular 動畫章節中描述的更多高階特性，都在一個範例 <live-example></live-example> 中進行了示範。</p><p translation-origin=\"off\">The features described in this guide —and the more advanced features described in the related Angular animations guides— are demonstrated in an example application available as a <live-example></live-example>.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本指南假設你已經能熟練建構基本的 Angular 應用，也就是下列章節中所講的那些：</p><p translation-origin=\"off\">The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"tutorial\">課程</a></p><p translation-origin=\"off\"><a href=\"tutorial\">Tutorial</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/architecture\">架構概覽</a></p><p translation-origin=\"off\"><a href=\"guide/architecture\">Architecture Overview</a></p>\n\n</li>\n</ul>\n<h2 id=\"getting-started\" translation-result=\"on\">快速上手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#getting-started\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Getting started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#getting-started\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 主要的動畫模組是 <code>@angular/animations</code> 和 <code>@angular/platform-browser</code>。當你使用 CLI 建立新專案時，這些依賴會自動新增到你的專案中。</p><p translation-origin=\"off\">The main Angular modules for animations are <code>@angular/animations</code> and <code>@angular/platform-browser</code>.\nWhen you create a new project using the CLI, these dependencies are automatically added to your project.</p>\n\n<p translation-result=\"on\">為了把 Angular 動畫新增到你的專案中，把這些與動畫相關的模組和標準的 Angular 功能一起匯入進來。</p><p translation-origin=\"off\">To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</p>\n\n<h3 id=\"step-1-enabling-the-animations-module\" translation-result=\"on\">步驟一：啟用動畫模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-1-enabling-the-animations-module\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Step 1: Enabling the animations module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-1-enabling-the-animations-module\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">匯入 <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>，它能把動畫能力引入 Angular 應用的根模組中。</p><p translation-origin=\"off\">Import <code><a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a></code>, which introduces the animation capabilities into your Angular root application module.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"animations/src/app/app.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>\n  ],\n  declarations: [ ],\n  bootstrap: [ ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n當你使用 CLI 建立應用時，應用的根模組 <code>app.module.ts</code> 位於 <code>src/app</code> 目錄下。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nWhen you use the CLI to create your app, the root application module <code>app.module.ts</code> is placed in the <code>src/app</code> folder.</p>\n\n</div>\n<h3 id=\"step-2-importing-animation-functions-into-component-files\" translation-result=\"on\">步驟二：把動畫功能匯入元件檔案中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-2-importing-animation-functions-into-component-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Step 2: Importing animation functions into component files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-2-importing-animation-functions-into-component-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你準備在元件檔案中使用特定的動畫函式，請從 <code>@angular/animations</code> 中匯入這些函式。</p><p translation-origin=\"off\">If you plan to use specific animation functions in component files, import those functions from <code>@angular/animations</code>.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a> } from '@angular/core';\nimport {\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>,\n  state,\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>,\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>,\n  // ...\n} from '@angular/animations';\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n參閱本指南末尾的<a href=\"guide/animations#animation-api-summary\">可用動畫函式彙總表</a>。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nSee a <a href=\"guide/animations#animation-api-summary\">summary of available animation functions</a> at the end of this guide.</p>\n\n</div>\n<h3 id=\"step-3-adding-the-animation-metadata-property\" translation-result=\"on\">步驟三：新增動畫的元資料屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-3-adding-the-animation-metadata-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Step 3: Adding the animation metadata property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#step-3-adding-the-animation-metadata-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在元件的 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器中，新增一個名叫 <code>animations:</code> 的元資料屬性。你可以把用來定義動畫的觸發器放進 <code>animations</code> 元資料屬性中。</p><p translation-origin=\"off\">In the component file, add a metadata property called <code>animations:</code> within the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator.\nYou put the trigger that defines an animation within the <code>animations</code> metadata property.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"decorator\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    // <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a> triggers go here\n  ]\n})\n\n</code-example>\n<h2 id=\"animating-a-transition\" translation-result=\"on\">過渡動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animating-a-transition\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animating a transition<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animating-a-transition\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">我們來做一個簡單的過渡動作，它把單個 HTML 元素從一個狀態變成另一個狀態。比如，你可以指定按鈕根據使用者的最後一個動作顯示成<strong>Open</strong>或<strong>Closed</strong>狀態。當按鈕處於 <code>open</code> 狀態時，它是可見的，並且是黃色的。當它處於 <code>closed</code> 狀態時，它是透明的，並且是藍色的。</p><p translation-origin=\"off\">Let's animate a transition that changes a single HTML element from one state to another.\nFor example, you can specify that a button displays either <strong>Open</strong> or <strong>Closed</strong> based on the user's last action.\nWhen the button is in the <code>open</code> state, it's visible and yellow.\nWhen it's the <code>closed</code> state, it's translucent and blue.</p>\n\n<p translation-result=\"on\">在 HTML 中，這些屬性都使用普通的 CSS 樣式，比如顏色（color）和透明度（opacity）。在 Angular 中，使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式來指定一組用作動畫的 CSS 樣式。可以為動畫狀態指定一組樣式，併為該狀態指定一個名字，比如 <code>open</code> 或 <code>closed</code>。</p><p translation-origin=\"off\">In HTML, these attributes are set using ordinary CSS styles such as color and opacity.\nIn Angular, use the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> function to specify a set of CSS styles for use with animations.\nCollect a set of styles in an animation state, and give the state a name, such as <code>open</code> or <code>closed</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">我們建立一個具有簡單過渡動畫的 <code>open-close</code> 元件。</p><p translation-origin=\"off\">Let's create a new <code>open-close</code> component to animate with simple transitions.</p>\n\n<p translation-result=\"on\">在終端視窗執行下列命令以產生該元件：</p><p translation-origin=\"off\">Run the following command in terminal to generate the component:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng g component open-close\n\n</code-example>\n<p translation-result=\"on\">這會在 <code>src/app/open-close.component.ts</code> 下建立此元件。</p><p translation-origin=\"off\">This will create the component at <code>src/app/open-close.component.ts</code>.</p>\n\n</div>\n<h3 id=\"animation-state-and-styles\" translation-result=\"on\">動畫狀態和樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-state-and-styles\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Animation state and styles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-state-and-styles\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函式來定義不同的狀態，供每次過渡結束時呼叫。該函式接受兩個引數：一個唯一的名字，比如 <code>open</code> 或 <code>closed</code> 和一個 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式。</p><p translation-origin=\"off\">Use Angular's <a href=\"api/animations/state\"><code>state()</code></a> function to define different states to call at the end of each transition.\nThis function takes two arguments:\nA unique name like <code>open</code> or <code>closed</code> and a <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> function.</p>\n\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式來定義一組與指定的狀態名相關的樣式。名稱裡帶中線的樣式屬性必須是<a href=\"guide/glossary#case-conventions\"><em>小駝峰</em></a> 格式的，如 <code>backgroundColor</code>，或者把它們包裹到引號裡，如 <code>'background-color'</code>。</p><p translation-origin=\"off\">Use the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> function to define a set of styles to associate with a given state name.\nYou must use <a href=\"guide/glossary#case-conventions\"><em>camelCase</em></a> for style attributes that contain dashes, such as <code>backgroundColor</code> or wrap them in quotes, such as <code>'background-color'</code>.</p>\n\n<p translation-result=\"on\">我們來看看 Angular 的 <a href=\"api/animations/state\"><code>state()</code></a> 函式如何與 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 函式聯用，來設定 CSS 樣式的屬性。\n在下面的程式碼片段中，該狀態的多個樣式屬性都是同時設定的。在 <code>open</code> 狀態中，該按鈕的高度是 200 畫素，透明度是 1，背景色是黃色。</p><p translation-origin=\"off\">Let's see how Angular's <a href=\"api/animations/state\"><code>state()</code></a> function works with the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>⁣­(⁠)</code> function to set CSS style attributes.\nIn this code snippet, multiple style attributes are set at the same time for the state.\nIn the <code>open</code> state, the button has a height of 200 pixels, an opacity of 1, and a yellow background color.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state1\">\n// ...\nstate('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '200px',\n  opacity: 1,\n  backgroundColor: 'yellow'\n})),\n\n</code-example>\n<p translation-result=\"on\">在下面這個 <code>closed</code> 狀態中，按鈕的高度是 100 畫素，透明度是 0.8，背景色是藍色。</p><p translation-origin=\"off\">In the following <code>closed</code> state, the button has a height of 100 pixels, an opacity of 0.8, and a background color of blue.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"state2\">\nstate('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n  height: '100px',\n  opacity: 0.8,\n  backgroundColor: 'blue'\n})),\n\n</code-example>\n<h3 id=\"transitions-and-timing\" translation-result=\"on\">過渡與時序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#transitions-and-timing\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Transitions and timing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#transitions-and-timing\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 Angular 中，你可以設定多個樣式而不必用動畫。不過，如果沒有進一步細化，按鈕的轉換會立即完成 —— 沒有漸隱、沒有收縮，也沒有其它的視覺化效果來指出正在發生變化。</p><p translation-origin=\"off\">In Angular, you can set multiple styles without any animation.\nHowever, without further refinement, the button instantly transforms with no fade, no shrinkage, or other visible indicator that a change is occurring.</p>\n\n<p translation-result=\"on\">要讓這些變化不那麼突兀，就要定義一個動畫<em>過渡</em>來要求這些狀態之間的變化在一段時間內發生。<code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 接受兩個引數：第一個引數接受一個表示式，它定義兩個過渡狀態之間的方向；第二個引數接受一個或一系列 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式。</p><p translation-origin=\"off\">To make the change less abrupt, you need to define an animation <em>transition</em> to specify the changes that occur between one state and another over a period of time.\nThe <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> function accepts two arguments:\nThe first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> steps.</p>\n\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式來定義長度、延遲和緩動效果，並指定一個樣式函式，以定義過渡過程中的樣式。可以用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式來為多步動畫定義 <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> 函式。這些定義放在 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式的第二個引數中。</p><p translation-origin=\"off\">Use the <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place.\nUse the <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> function to define the <code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code> function for multi-step animations.\nThese definitions are placed in the second argument of the <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> function.</p>\n\n<h4 id=\"animation-metadata-duration-delay-and-easing\" translation-result=\"on\">動畫元資料：持續時間、延遲和緩動效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-metadata-duration-delay-and-easing\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\">Animation metadata: duration, delay, and easing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-metadata-duration-delay-and-easing\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 函式（作為過渡函式的第二個引數）可以接受 <code>timings</code> 和 <code>styles</code> 引數。</p><p translation-origin=\"off\">The <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> function (second argument of the transition function) accepts the <code>timings</code> and <code>styles</code> input parameters.</p>\n\n<p translation-result=\"on\"><code>timings</code> 引數可以接受一個數字或由三部分組成的字串。</p><p translation-origin=\"off\">The <code>timings</code> parameter takes either a number or a string defined in three parts.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> (duration)\n\n</code-example>\n<p translation-result=\"on\">或者</p><p translation-origin=\"off\">or</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> ('duration delay easing')\n\n</code-example>\n<p translation-result=\"on\">第一部分 <code>duration</code>（持續時間）是必須的。這個持續時間可以表示成一個不帶引號的純數字（表示毫秒），或一個帶引號的有單位的時間（表示秒數）。比如，0.1 秒的持續時間有如下表示方式：</p><p translation-origin=\"off\">The first part, <code>duration</code>, is required.\nThe duration can be expressed in milliseconds as a number without quotes, or in seconds with quotes and a time specifier.\nFor example, a duration of a tenth of a second can be expressed as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">作為純數字，毫秒為單位：<code>100</code></p><p translation-origin=\"off\">As a plain number, in milliseconds:\n<code>100</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">作為字串，毫秒為單位：<code>'100ms'</code></p><p translation-origin=\"off\">In a string, as milliseconds:\n<code>'100ms'</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">作為字串，秒為單位：<code>'0.1s'</code></p><p translation-origin=\"off\">In a string, as seconds:\n<code>'0.1s'</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">第二個引數 <code>delay</code> 的語法和 <code>duration</code> 一樣。比如：</p><p translation-origin=\"off\">The second argument, <code>delay</code>, has the same syntax as <code>duration</code>.\nFor example:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">等待 100 毫秒，然後執行 200 毫秒錶示為：<code>'0.2s 100ms'</code></p><p translation-origin=\"off\">Wait for 100ms and then run for 200ms: <code>'0.2s 100ms'</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">第三個引數 <code>easing</code> 控制動畫在執行期間如何進行<a href=\"http://easings.net\">加速和減速</a>。比如 <code>ease-in</code> 表示動畫開始時很慢，然後逐漸加速。</p><p translation-origin=\"off\">The third argument, <code>easing</code>, controls how the animation <a href=\"https://easings.net\">accelerates and decelerates</a> during its runtime.\nFor example, <code>ease-in</code> causes the animation to begin slowly, and to pick up speed as it progresses.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">等待 100 毫秒，執行 200 毫秒。按照減速曲線運動，快速啟動並逐漸減速，直到靜止：<code>'0.2s 100ms ease-out'</code></p><p translation-origin=\"off\">Wait for 100ms, run for 200ms.\nUse a deceleration curve to start out fast and slowly decelerate to a resting point:\n<code>'0.2s 100ms ease-out'</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">執行 200 毫秒，不等待。按照標準曲線運動，開始很慢，中間加速，最後逐漸減速：<code>'0.2s ease-in-out'</code></p><p translation-origin=\"off\">Run for 200ms, with no delay.\nUse a standard curve to start slow, accelerate in the middle, and then decelerate slowly at the end:\n<code>'0.2s ease-in-out'</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">立即開始，執行 200 毫秒。按照加速曲線運動，開始很慢，最後達到全速：<code>'0.2s ease-in'</code></p><p translation-origin=\"off\">Start immediately, run for 200ms.\nUse an acceleration curve to start slow and end at full velocity:\n<code>'0.2s ease-in'</code></p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n有關緩動曲線的一般資訊，參閱 Material Design 網站上關於<a href=\"https://material.io/design/motion/speed.html#easing\">自然緩動曲線</a>的主題。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nSee the Material Design website's topic on <a href=\"https://material.io/design/motion/speed.html#easing\">Natural easing curves</a> for general information on easing curves.</p>\n\n</div>\n<p translation-result=\"on\">下面的例子提供了一個從 <code>open</code> 到 <code>closed</code> 的持續一秒的狀態過渡。</p><p translation-origin=\"off\">This example provides a state transition from <code>open</code> to <code>closed</code> with a 1-second transition between states.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition1\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n]),\n\n</code-example>\n<p translation-result=\"on\">在上面的程式碼片段中，<code>=&gt;</code> 運運算元表示單向過渡，而 <code>&lt;=&gt;</code> 表示雙向過渡。在過渡過程中，<code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 指定了過渡需要花費的時間。在這裡，從 <code>open</code> 到 <code>closed</code> 狀態的轉換要花費 1 秒中，表示成 <code>1s</code>。</p><p translation-origin=\"off\">In the preceding code snippet, the <code>=&gt;</code> operator indicates unidirectional transitions, and <code>&lt;=&gt;</code> is bidirectional.\nWithin the transition, <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> specifies how long the transition takes.\nIn this case, the state change from <code>open</code> to <code>closed</code> takes 1 second, expressed here as <code>1s</code>.</p>\n\n<p translation-result=\"on\">下面的例子添加了一個從 <code>closed</code> 到 <code>open</code> 的狀態過渡，過渡動畫持續 0.5 秒。</p><p translation-origin=\"off\">This example adds a state transition from the <code>closed</code> state to the <code>open</code> state with a 0.5-second transition animation arc.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"transition2\">\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n]),\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n在 <a href=\"api/animations/state\"><code>state</code></a> 和 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> 函式中使用樣式時有一些需要注意的地方。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nSome additional notes on using styles within <a href=\"api/animations/state\"><code>state</code></a> and <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a></code> functions.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">請用 <a href=\"api/animations/state\"><code>state()</code></a> 來定義那些每個過渡結束時的樣式，這些樣式在動畫完成後仍會保留</p><p translation-origin=\"off\">Use <a href=\"api/animations/state\"><code>state()</code></a> to define styles that are applied at the end of each transition, they persist after the animation completes</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 來定義那些中間樣式，以便在動畫過程中產生運動的錯覺</p><p translation-origin=\"off\">Use <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> to define intermediate styles, which create the illusion of motion during the animation</p>\n\n</li>\n<li>\n<p translation-result=\"on\">當禁用了動畫時，也會忽略 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中的樣式，但 <a href=\"api/animations/state\"><code>state()</code></a> 中的樣式不會。</p><p translation-origin=\"off\">When animations are disabled, <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> styles can be skipped, but <a href=\"api/animations/state\"><code>state()</code></a> styles can't</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在同一個 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 引數中包含多個狀態對：</p><p translation-origin=\"off\">Include multiple state pairs within the same <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> argument:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>( 'on =&gt; off, off =&gt; void' )\n\n</code-example>\n</li>\n</ul>\n</div>\n<h3 id=\"triggering-the-animation\" translation-result=\"on\">觸發動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#triggering-the-animation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Triggering the animation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#triggering-the-animation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">動畫需要<em>觸發器</em>，以便知道該在何時開始。<code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式會把一些狀態和過渡組合在一起，併為這個動畫命名，這樣你就可以在 HTML 範本中把它附加到想要觸發動畫的元素上了。</p><p translation-origin=\"off\">An animation requires a <em>trigger</em>, so that it knows when to start.\nThe <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式描述了監聽變化時要使用的觸發器名稱。當這個觸發器名稱所繫結的值發生了變化時，觸發器就會啟動它所定義的操作。這些操作可能是過渡，也可能是其它功能，我們稍後就會看到。</p><p translation-origin=\"off\">The <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> function describes the property name to watch for changes.\nWhen a change occurs, the trigger initiates the actions included in its definition.\nThese actions can be transitions or other functions, as we'll see later on.</p>\n\n<p translation-result=\"on\">在這個例子中，我們將把該觸發器命名為 <code>openClose</code>，並把它附加到 <code>button</code> 元素上。該觸發器描述了 <code>open</code> 和 <code>closed</code> 兩個狀態，以及兩個過渡效果的時序。</p><p translation-origin=\"off\">In this example, we'll name the trigger <code>openClose</code>, and attach it to the <code>button</code> element.\nThe trigger describes the open and closed states, and the timings for the two transitions.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n在每個 <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> 函式呼叫中，元素在任意時刻只能處於其中的一個狀態。但是，元素可以在同一時刻啟用多個觸發器。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nWithin each <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code> function call, an element can only be in one state at any given time.\nHowever, it's possible for multiple triggers to be active at once.</p>\n\n</div>\n<h3 id=\"defining-animations-and-attaching-them-to-the-html-template\" translation-result=\"on\">定義動畫，並把它們附加到 HTML 範本中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#defining-animations-and-attaching-them-to-the-html-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Defining animations and attaching them to the HTML template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#defining-animations-and-attaching-them-to-the-html-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">這些控制 HTML 元素如何運動的動畫是在元件的元資料中定義的。請在 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器的 <code>animations:</code> 屬性下用程式碼定義你要用的動畫。</p><p translation-origin=\"off\">Animations are defined in the metadata of the component that controls the HTML element to be animated.\nPut the code that defines your animations under the <code>animations:</code> property within the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator.</p>\n\n<code-example header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">為元件定義好這些動畫觸發器之後，你可以給觸發器名稱加上 <code>@</code> 字首幷包在方括號裡，來把它附加到元件範本中的元素上。然後，你可以使用 Angular 的標準屬性繫結語法（如下所示），來把這個觸發器繫結到範本表示式上。這裡的 <code>triggerName</code> 就是觸發器的名稱，而 <code>expression</code> 的求值結果是前面定義過的動畫狀態之一。</p><p translation-origin=\"off\">When you've defined an animation trigger for a component, attach it to an element in that component's template by wrapping the trigger name in brackets and preceding it with an <code>@</code> symbol.\nThen, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where <code>triggerName</code> is the name of the trigger, and <code>expression</code> evaluates to a defined animation state.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n&lt;div [@triggerName]=\"expression\"&gt;…&lt;/div&gt;;\n\n</code-example>\n<p translation-result=\"on\">當該表示式的值變成了新的狀態時，動畫就會執行或者叫觸發。</p><p translation-origin=\"off\">The animation is executed or triggered when the expression value changes to a new state.</p>\n\n<p translation-result=\"on\">下列程式碼片段把該觸發器繫結到了 <code>isOpen</code> 屬性的值上。</p><p translation-origin=\"off\">The following code snippet binds the trigger to the value of the <code>isOpen</code> property.</p>\n\n<code-example header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">在這個例子中，當 <code>isOpen</code> 表示式求值為一個已定義狀態 <code>open</code> 或 <code>closed</code> 時，就會通知 <code>openClose</code> 觸發器說狀態變化了。然後，就由 <code>openClose</code> 中的程式碼來處理狀態變更，並啟動狀態變更動畫。</p><p translation-origin=\"off\">In this example, when the <code>isOpen</code> expression evaluates to a defined state of <code>open</code> or <code>closed</code>, it notifies the trigger <code>openClose</code> of a state change.\nThen it's up to the <code>openClose</code> code to handle the state change and kick off a state change animation.</p>\n\n<p translation-result=\"on\">對於那些進入或離開頁面的元素（插入到 DOM 中或從中移除），你可以讓動畫變成有條件的。比如，在 HTML 範本中可以和 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 一起使用動畫觸發器。</p><p translation-origin=\"off\">For elements entering or leaving a page (inserted or removed from the DOM), you can make the animations conditional.\nFor example, use <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> with the animation trigger in the HTML template.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n在元件檔案中，要把用來定義動畫的觸發器設定為 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 裝飾器的 <code>animations:</code> 屬性的值。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nIn the component file, set the trigger that defines the animations as the value of the <code>animations:</code> property in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator.</p>\n\n<p translation-result=\"on\">在 HTML 範本檔案中，使用這個觸發器的名稱來把所定義的這些動畫附加到想要新增動畫的 HTML 元素上。</p><p translation-origin=\"off\">In the HTML template file, use the trigger name to attach the defined animations to the HTML element to be animated.</p>\n\n</div>\n<h3 id=\"code-review\" translation-result=\"on\">程式碼回顧<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#code-review\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#code-review\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下面是過渡動畫範例中討論過的程式碼檔案。</p><p translation-origin=\"off\">Here are the code files discussed in the transition example.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/open-close.component.ts\" path=\"animations/src/app/open-close.component.ts\" region=\"component\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-open-close',\n  animations: [\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      // ...\n      state('open', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open =&gt; closed', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('1s')\n      ]),\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('closed =&gt; open', [\n        <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.html\" path=\"animations/src/app/open-close.component.1.html\" region=\"trigger\">\n&lt;nav&gt;\n  &lt;button type=\"button\" (click)=\"toggle()\"&gt;Toggle Open/Close&lt;/button&gt;\n&lt;/nav&gt;\n\n&lt;div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\"&gt;\n  &lt;p&gt;The box is now {{ isOpen ? 'Open' : 'Closed' }}!&lt;/p&gt;\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/open-close.component.css\" path=\"animations/src/app/open-close.component.css\">\n:host {\n  display: block;\n  margin-top: 1rem;\n}\n\n.open-close-container {\n  border: 1px solid #dddddd;\n  margin-top: 1em;\n  padding: 20px 20px 0px 20px;\n  color: #000000;\n  font-weight: bold;\n  font-size: 20px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#summary\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#summary\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你已經學會了如何在兩個狀態之間新增簡單的過渡動畫，只要使用 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 和 <a href=\"api/animations/state\"><code>state()</code></a>，並使用 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 來定義時序就可以了。</p><p translation-origin=\"off\">You learned to add animation to a transition between two states, using <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> and <a href=\"api/animations/state\"><code>state()</code></a> along with <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> for the timing.</p>\n\n<p translation-result=\"on\">請到 \"動畫\" 組下學習 Angular 動畫的高階特性，不妨先從<a href=\"guide/transition-and-triggers\">過渡與觸發器</a>中講述的高階技巧開始。</p><p translation-origin=\"off\">Learn about more advanced features in Angular animations under the Animation section, beginning with advanced techniques in <a href=\"guide/transition-and-triggers\">transition and triggers</a>.</p>\n\n<p><a id=\"animation-api-summary\"></a></p>\n<h2 id=\"animations-api-summary\" translation-result=\"on\">動畫 API 小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animations-api-summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animations API summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animations-api-summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>@angular/animations</code> 模組提供的這些功能性 API 提供了一種領域特定語言（DSL），用於在 Angular 應用中建立和控制動畫效果。到 <a href=\"api/animations\">API 參考手冊</a>中檢視完整的列表以及這些核心功能、相關資料結構的詳細語法。</p><p translation-origin=\"off\">The functional API provided by the <code>@angular/animations</code> module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications.\nSee the <a href=\"api/animations\">API reference</a> for a complete listing and syntax details of the core functions and related data structures.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">函式名</nt-wrapper><nt-wrapper translation-origin=\"off\">Function name</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">用途</nt-wrapper><nt-wrapper translation-origin=\"off\">What it does</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">開始動畫，並充當所有其它動畫函式的容器。HTML 範本可以繫結到 <code>triggerName</code>。使用第一個引數來宣告唯一的觸發器名稱。要使用陣列語法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Kicks off the animation and serves as a container for all other animation function calls. HTML template binds to <code>triggerName</code>. Use the first argument to declare a unique trigger name. Uses array syntax.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義一個或多個要用於動畫中的 CSS 樣式。用於在動畫期間控制 HTML 元素的視覺外觀。要使用物件語法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines one or more CSS styles to use in animations. Controls the visual appearance of HTML elements during animations. Uses object syntax.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/animations/state\"><code>state()</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立一組有名字的 CSS 樣式，它會在成功轉換到指定的狀態時應用到元素上。該狀態可以在其它動畫函式中透過名字進行參考。</nt-wrapper><nt-wrapper translation-origin=\"off\">Creates a named set of CSS styles that should be applied on successful transition to a given state. The state can then be referenced by name within other animation functions.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定過渡的時序資訊。<code>delay</code> 和 <code>easing</code> 是可選值。其中可以包含 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies the timing information for a transition. Optional values for <code>delay</code> and <code>easing</code>. Can contain <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> calls within.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義兩個命名狀態之間的動畫序列。使用陣列語法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines the animation sequence between two named states. Uses array syntax.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/keyframes\" class=\"code-anchor\">keyframes</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">允許以特定的時間間隔對樣式進行順序更改。用於 <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code> 中。每個 <code>keyframe()</code> 中都可以包含多個 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> 呼叫。使用陣列語法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Allows a sequential change between styles within a specified time interval. Use within <code><a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>()</code>. Can include multiple <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a>()</code> calls within each <code>keyframe()</code>. Uses array syntax.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/animations/group\"><code>group()</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定要並行執行的一組動畫步驟（<em>內部動畫</em>）。該動畫只有當所有內部動畫步驟都完成之後才會繼續。用於 <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> 或 <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code> 中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies a group of animation steps (<em>inner animations</em>) to be run in parallel. Animation continues only after all inner animation steps have completed. Used within <code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code> or <code><a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>()</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">找出當前元素中的一個或多個內部 HTML 元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">Finds one or more inner HTML elements within the current element.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/sequence\" class=\"code-anchor\">sequence</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定一個動畫步驟列表，它們會逐個順序執行。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies a list of animation steps that are run sequentially, one by one.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/stagger\" class=\"code-anchor\">stagger</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">交錯安排多元素動畫的開始時間。</nt-wrapper><nt-wrapper translation-origin=\"off\">Staggers the starting time for animations for multiple elements.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">產生可在其它地方呼叫的可複用動畫。與 <code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code> 一起使用。</nt-wrapper><nt-wrapper translation-origin=\"off\">Produces a reusable animation that can be invoked from elsewhere. Used together with <code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">啟用一個可複用動畫。和 <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code> 一起使用。</nt-wrapper><nt-wrapper translation-origin=\"off\">Activates a reusable animation. Used with <code><a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>()</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">允許子元件上的動畫和父元件在同一個時間範圍（timeframe）內執行。</nt-wrapper><nt-wrapper translation-origin=\"off\">Allows animations on child components to be run within the same timeframe as the parent.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"more-on-angular-animations\" translation-result=\"on\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on Angular animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You might also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/transition-and-triggers\">過渡與觸發器</a></p><p translation-origin=\"off\"><a href=\"guide/transition-and-triggers\">Transition and triggers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></p><p translation-origin=\"off\"><a href=\"guide/complex-animation-sequences\">Complex animation sequences</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reusable-animations\">可複用動畫</a></p><p translation-origin=\"off\"><a href=\"guide/reusable-animations\">Reusable animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/route-animations\">路由過渡動畫</a></p><p translation-origin=\"off\"><a href=\"guide/route-animations\">Route transition animations</a></p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">到這個<a href=\"https://www.youtube.com/watch?v=rnTK9meY5us\">演講</a>中檢視 2017 年 11 月的 AngularConnect 大會上完整的動畫及其<a href=\"https://github.com/matsko/animationsftw.in\">原始碼</a>。</p><p translation-origin=\"off\">Check out this <a href=\"https://www.youtube.com/watch?v=rnTK9meY5us\">presentation</a>, shown at the AngularConnect conference in November 2017, and the accompanying <a href=\"https://github.com/matsko/animationsftw.in\">source code</a>.</p>\n\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - api/animations\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/platform-browser/animations/provideAnimations\n - api/platform-browser/animations/provideNoopAnimations\n - guide/architecture-next-steps\n - guide/complex-animation-sequences\n - guide/developer-guide-overview\n - guide/example-apps-list\n - guide/glossary\n - guide/npm-packages\n - guide/reusable-animations\n - guide/route-animations\n - guide/router-tutorial-toh\n - guide/transition-and-triggers\n - guide/upgrade\n - guide/what-is-angular\n-->\n<!-- links from this doc:\n - api/animations\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/keyframes\n - api/animations/query\n - api/animations/sequence\n - api/animations/stagger\n - api/animations/state\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/animations/useAnimation\n - api/common/NgIf\n - api/core/Component\n - api/core/HostBinding\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - guide/animations#about-this-guide\n - guide/animations#angular-動畫簡介\n - guide/animations#animating-a-transition\n - guide/animations#animation-api-summary\n - guide/animations#animation-metadata-duration-delay-and-easing\n - guide/animations#animation-state-and-styles\n - guide/animations#animations-api-summary\n - guide/animations#code-review\n - guide/animations#defining-animations-and-attaching-them-to-the-html-template\n - guide/animations#getting-started\n - guide/animations#introduction-to-angular-animations\n - guide/animations#more-on-angular-animations\n - guide/animations#prerequisites\n - guide/animations#step-1-enabling-the-animations-module\n - guide/animations#step-2-importing-animation-functions-into-component-files\n - guide/animations#step-3-adding-the-animation-metadata-property\n - guide/animations#summary\n - guide/animations#transitions-and-timing\n - guide/animations#triggering-the-animation\n - guide/animations#程式碼回顧\n - guide/animations#關於-angular-動畫的更多知識\n - guide/animations#關於本指南\n - guide/animations#前提條件\n - guide/animations#動畫-api-小結\n - guide/animations#動畫元資料持續時間延遲和緩動效果\n - guide/animations#動畫狀態和樣式\n - guide/animations#定義動畫並把它們附加到-html-範本中\n - guide/animations#小結\n - guide/animations#快速上手\n - guide/animations#步驟一啟用動畫模組\n - guide/animations#步驟三新增動畫的元資料屬性\n - guide/animations#步驟二把動畫功能匯入元件檔案中\n - guide/animations#觸發動畫\n - guide/animations#過渡與時序\n - guide/animations#過渡動畫\n - guide/architecture\n - guide/complex-animation-sequences\n - guide/glossary#case-conventions\n - guide/reusable-animations\n - guide/route-animations\n - guide/transition-and-triggers\n - tutorial\n - http://easings.net\n - https://easings.net\n - https://github.com/matsko/animationsftw.in\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/animations.md?message=docs%3A%20請簡述你的修改...\n - https://material.io/design/motion/speed.html#easing\n - https://www.w3.org/TR/css-transitions-1\n - https://www.youtube.com/watch?v=rnTK9meY5us\n-->"}