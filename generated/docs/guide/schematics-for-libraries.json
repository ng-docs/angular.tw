{"id":"guide/schematics-for-libraries","title":"Schematics for libraries","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/schematics-for-libraries.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"schematics-for-libraries\" translation-result=\"on\">庫的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#schematics-for-libraries\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Schematics for libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#schematics-for-libraries\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">當建立 Angular 庫時，你可以為同時為它打包進一組原理圖，並把它與 Angular CLI 整合在一起。藉助原理圖，使用者可以用 <code>ng add</code> 來安裝你這個庫的初始版本，可以用 <code>ng generate</code> 來建立你在庫中定義的一些工件，可以用 <code>ng update</code> 來調整他們的專案，以支援你在庫的新版本中引入的重大變更。</p><p translation-origin=\"off\">When you create an Angular library, you can provide and package it with schematics that integrate it with the Angular CLI.\nWith your schematics, your users can use <code>ng add</code> to install an initial version of your library,\n<code>ng generate</code> to create artifacts defined in your library, and <code>ng update</code> to adjust their project for a new version of your library that introduces breaking changes.</p>\n\n<p translation-result=\"on\">這三種原理圖都可以作為你打包進庫中的集合的一部分。</p><p translation-origin=\"off\">All three types of schematics can be part of a collection that you package with your library.</p>\n\n<p translation-result=\"on\">下載<live-example downloadonly=\"\">庫的原理圖專案</live-example>以獲取一個已完成下列步驟的例子。</p><p translation-origin=\"off\">Download the <live-example downloadonly=\"\">library schematics project</live-example> for a completed example of the following steps.</p>\n\n<h2 id=\"creating-a-schematics-collection\" translation-result=\"on\">建立一個原理圖集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Creating a schematics collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要開始一個集合，你需要建立一些原理圖檔案。下列步驟說明了如何在不修改任何專案檔案的情況下新增初始支援。</p><p translation-origin=\"off\">To start a collection, you need to create the schematic files.\nThe following steps show you how to add initial support without modifying any project files.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在庫的根資料夾中，建立一個 <code>schematics/</code> 資料夾。</p><p translation-origin=\"off\">In your library's root folder, create a <code>schematics</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>schematics/</code> 資料夾中，為你的第一個原理圖建立一個 <code>ng-add/</code> 資料夾。</p><p translation-origin=\"off\">In the <code>schematics/</code> folder, create an <code>ng-add</code> folder for your first schematic.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>schematics/</code> 資料夾的根級，建立一個 <code>collection.json</code> 檔案。</p><p translation-origin=\"off\">At the root level of the <code>schematics</code> folder, create a <code>collection.json</code> file.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">編輯 <code>collection.json</code> 檔案來定義你的集合的初始模式定義。</p><p translation-origin=\"off\">Edit the <code>collection.json</code> file to define the initial schema for your collection.</p>\n\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.1.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\"\n    }\n  }\n}\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><code>$schema</code> 路徑是相對於 Angular Devkit 集合模式定義的。</p><p translation-origin=\"off\">The <code>$schema</code> path is relative to the Angular Devkit collection schema.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>schematics</code> 物件描述了該集合中的命名原理圖。</p><p translation-origin=\"off\">The <code>schematics</code> object describes the named schematics that are part of this collection.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">第一個條目是名為 <code>ng-add</code> 的原理圖。它包含了描述，並指向執行此原理圖時要呼叫的工廠函式。</p><p translation-origin=\"off\">The first entry is for a schematic named <code>ng-add</code>.\nIt contains the description, and points to the factory function that is called when your schematic is executed.</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">在這個庫專案的 <code>package.json</code> 檔案中，新增一個 “schematics” 的條目，裡面帶有你的模式定義檔案的路徑。當 Angular CLI 執行命令時，會根據這個條目在你的集合中查詢指定名字的原理圖。</p><p translation-origin=\"off\">In your library project's <code>package.json</code> file, add a \"schematics\" entry with the path to your schema file.\nThe Angular CLI uses this entry to find named schematics in your collection when it runs commands.</p>\n\n<code-example header=\"projects/my-lib/package.json (Schematics Collection Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"collection\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"schematics\": \"./schematics/collection.json\",\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">你所建立的初始模式告訴 CLI 在哪裡可以找到支援 <code>ng add</code> 命令的原理圖。現在，你已準備好建立該原理圖了。</p><p translation-origin=\"off\">The initial schema that you have created tells the CLI where to find the schematic that supports the <code>ng add</code> command.\nNow you are ready to create that schematic.</p>\n\n<h2 id=\"providing-installation-support\" translation-result=\"on\">提供安裝支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-installation-support\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Providing installation support<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-installation-support\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>ng add</code> 命令的原理圖可以增強使用者的初始安裝過程。可以按如下步驟定義這種原理圖。</p><p translation-origin=\"off\">A schematic for the <code>ng add</code> command can enhance the initial installation process for your users.\nThe following steps define this type of schematic.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">進入 <code>&lt;lib-root&gt;/schematics/ng-add/</code> 目錄。</p><p translation-origin=\"off\">Go to the <code>&lt;lib-root&gt;/schematics/ng-add</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立主檔案 <code>index.ts</code>。</p><p translation-origin=\"off\">Create the main file, <code>index.ts</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">開啟 <code>index.ts</code> 並新增原理圖工廠函式的原始碼。</p><p translation-origin=\"off\">Open <code>index.ts</code> and add the source code for your schematic factory function.</p>\n\n<code-example header=\"projects/my-lib/schematics/ng-add/index.ts (ng-add Rule Factory)\" path=\"schematics-for-libraries/projects/my-lib/schematics/ng-add/index.ts\">\nimport { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';\nimport { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';\n\n// Just return the tree\nexport function ngAdd(): Rule {\n  return (tree: Tree, context: SchematicContext) =&gt; {\n    context.addTask(new NodePackageInstallTask());\n    return tree;\n  };\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">提供初始 <code>ng add</code> 支援所需的唯一步驟是使用 <code>SchematicContext</code> 來觸發安裝任務。該任務會藉助使用者首選的包管理器將該庫新增到宿主專案的 <code>package.json</code> 配置檔案中，並將其安裝到該專案的 <code>node_modules</code> 目錄下。</p><p translation-origin=\"off\">The only step needed to provide initial <code>ng add</code> support is to trigger an installation task using the <code>SchematicContext</code>.\nThe task uses the user's preferred package manager to add the library to the project's <code>package.json</code> configuration file, and install it in the project's <code>node_modules</code> directory.</p>\n\n<p translation-result=\"on\">在這個例子中，該函式會接收當前的 <code>Tree</code> 並返回它而不作任何修改。如果需要，也可以在安裝軟體包時進行額外的設定，比如產生檔案、更新配置、或者庫所需的任何其它初始設定。</p><p translation-origin=\"off\">In this example, the function receives the current <code>Tree</code> and returns it without any modifications.\nIf you need to, do additional setup when your package is installed, such as generating files, updating configuration, or any other initial setup your library requires.</p>\n\n<h3 id=\"define-dependency-type\" translation-result=\"on\">定義依賴型別<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-dependency-type\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Define dependency type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-dependency-type\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果該庫應該新增到 <code>dependencies</code> 中、<code>devDependencies</code> 中，或者不用儲存到專案的 <code>package.json</code> 配置檔案中，請使用 <code>ng-add</code> 的 <code>save</code> 選項進行配置</p><p translation-origin=\"off\">Use the <code>save</code> option of <code>ng-add</code> to configure if the library should be added to the <code>dependencies</code>, the <code>devDependencies</code>, or not saved at all in the project's <code>package.json</code> configuration file.</p>\n\n<code-example header=\"projects/my-lib/package.json (ng-add Reference)\" path=\"schematics-for-libraries/projects/my-lib/package.json\" region=\"ng-add\">\n\"ng-add\": {\n  \"save\": \"devDependencies\"\n},\n\n</code-example>\n<p translation-result=\"on\">可能的值有：</p><p translation-origin=\"off\">Possible values are:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">值</nt-wrapper><nt-wrapper translation-origin=\"off\">Values</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>false</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">不把此包新增到 <code>package.json</code></nt-wrapper><nt-wrapper translation-origin=\"off\">Don't add the package to <code>package.json</code></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>true</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把此包新增到 dependencies</nt-wrapper><nt-wrapper translation-origin=\"off\">Add the package to the dependencies</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>\"dependencies\"</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把此包新增到 dependencies</nt-wrapper><nt-wrapper translation-origin=\"off\">Add the package to the dependencies</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>\"devDependencies\"</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把此包新增到 devDependencies</nt-wrapper><nt-wrapper translation-origin=\"off\">Add the package to the devDependencies</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"building-your-schematics\" translation-result=\"on\">建構你的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#building-your-schematics\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Building your schematics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#building-your-schematics\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要把你的原理圖和庫打包到一起，就必須把這個庫配置成單獨建構原理圖，然後再把它們新增到釋出套件中。你必須<em>先建構庫</em>再建構原理圖，這樣才能把它們放到正確的目錄下。</p><p translation-origin=\"off\">To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle.\nYou must build your schematics <em>after</em> you build your library, so they are placed in the correct directory.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">你的函式庫需要一個自訂的 Typescript 配置檔案，裡面帶有如何把原理圖編譯進庫的釋出版的一些指令。</p><p translation-origin=\"off\">Your library needs a custom Typescript configuration file with instructions on how to compile your schematics into your distributed library</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要把這些原理圖新增到庫的釋出套件中，就要把這些指令碼新增到該庫的 <code>package.json</code> 檔案中。</p><p translation-origin=\"off\">To add the schematics to the library bundle, add scripts to the library's <code>package.json</code> file</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">假設你在 Angular 工作區中有一個函式庫專案 <code>my-lib</code>。要想告訴庫如何建構原理圖，就要在產生的 <code>tsconfig.lib.json</code> 庫配置檔案旁新增一個 <code>tsconfig.schematics.json</code> 檔案。</p><p translation-origin=\"off\">Assume you have a library project <code>my-lib</code> in your Angular workspace.\nTo tell the library how to build the schematics, add a <code>tsconfig.schematics.json</code> file next to the generated <code>tsconfig.lib.json</code> file that configures the library build.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">編輯 <code>tsconfig.schematics.json</code> 檔案，新增如下內容。</p><p translation-origin=\"off\">Edit the <code>tsconfig.schematics.json</code> file to add the following content.</p>\n\n<code-example header=\"projects/my-lib/tsconfig.schematics.json (TypeScript Config)\" path=\"schematics-for-libraries/projects/my-lib/tsconfig.schematics.json\">\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ],\n    \"declaration\": true,\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noEmitOnError\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedParameters\": true,\n    \"noUnusedLocals\": true,\n    \"rootDir\": \"schematics\",\n    \"outDir\": \"../../dist/my-lib/schematics\",\n    \"skipDefaultLibCheck\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strictNullChecks\": true,\n    \"target\": \"es6\",\n    \"types\": [\n      \"jasmine\",\n      \"node\"\n    ]\n  },\n  \"include\": [\n    \"schematics/**/*\"\n  ],\n  \"exclude\": [\n    \"schematics/*/files/**/*\"\n  ]\n}\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">選項</nt-wrapper><nt-wrapper translation-origin=\"off\">Options</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>rootDir</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指出在你的 <code>schematics/</code> 資料夾中包含要編譯的輸入檔案。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies that your <code>schematics</code> folder contains the input files to be compiled.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>outDir</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">對映到了庫的輸出目錄下。預設情況下，這是工作區根目錄下的 <code>dist/my-lib</code> 資料夾。</nt-wrapper><nt-wrapper translation-origin=\"off\">Maps to the library's output folder. By default, this is the <code>dist/my-lib</code> folder at the root of your workspace.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</li>\n<li>\n<p translation-result=\"on\">要確保你的原理圖原始檔會被編譯進庫套件中，請把下列指令碼新增到庫專案的根資料夾（<code>projects/my-lib</code>）下的 <code>package.json</code> 檔案中。</p><p translation-origin=\"off\">To make sure your schematics source files get compiled into the library bundle, add the following scripts to the <code>package.json</code> file in your library project's root folder (<code>projects/my-lib</code>).</p>\n\n<code-example header=\"projects/my-lib/package.json (Build Scripts)\" path=\"schematics-for-libraries/projects/my-lib/package.json\">\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.schematics.json\",\n    \"postbuild\": \"copyfiles schematics/*/schema.json schematics/*/files/** schematics/collection.json ../../dist/my-lib/\"\n  },\n  \"peerDependencies\": {\n    \"@angular/common\": \"^7.2.0\",\n    \"@angular/core\": \"^7.2.0\"\n  },\n  \"schematics\": \"./schematics/collection.json\",\n  \"ng-add\": {\n    \"save\": \"devDependencies\"\n  },\n  \"devDependencies\": {\n    \"copyfiles\": \"file:../../node_modules/copyfiles\",\n    \"typescript\": \"file:../../node_modules/typescript\"\n  }\n}\n\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><code>build</code> 指令碼使用自訂的 <code>tsconfig.schematics.json</code> 檔案來編譯你的原理圖。</p><p translation-origin=\"off\">The <code>build</code> script compiles your schematic using the custom <code>tsconfig.schematics.json</code> file</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>postbuild</code> 指令碼會在 <code>build</code> 指令碼完成後複製原理圖檔案。</p><p translation-origin=\"off\">The <code>postbuild</code> script copies the schematic files after the <code>build</code> script completes</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>build</code> 和 <code>postbuild</code> 指令碼都需要用到 <code>copyfiles</code> 和 <code>typescript</code> 依賴項。要安裝這些依賴項，請導航到 <code>devDependencies</code> 中定義的路徑，並在執行這些指令碼之前執行 <code>npm install</code> 命令。</p><p translation-origin=\"off\">Both the <code>build</code> and the <code>postbuild</code> scripts require the <code>copyfiles</code> and <code>typescript</code> dependencies.\nTo install the dependencies, navigate to the path defined in <code>devDependencies</code> and run <code>npm install</code> before you run the scripts.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"providing-generation-support\" translation-result=\"on\">提供產生器支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-generation-support\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Providing generation support<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#providing-generation-support\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以把一個命名原理圖新增到集合中，讓你的使用者可以使用 <code>ng generate</code> 命令來建立你在庫中定義的工件。</p><p translation-origin=\"off\">You can add a named schematic to your collection that lets your users use the <code>ng generate</code> command to create an artifact that is defined in your library.</p>\n\n<p translation-result=\"on\">我們假設你的函式庫定義了一項需要進行某些設定的服務 <code>my-service</code>。你希望使用者能夠用下面的 CLI 命令來產生它。</p><p translation-origin=\"off\">We'll assume that your library defines a service, <code>my-service</code>, that requires some setup.\nYou want your users to be able to generate it using the following CLI command.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service\n\n</code-example>\n<p translation-result=\"on\">首先，在 <code>schematics</code> 資料夾中新建一個子資料夾 <code>my-service</code>。</p><p translation-origin=\"off\">To begin, create a new subfolder, <code>my-service</code>, in the <code>schematics</code> folder.</p>\n\n<h3 id=\"configure-the-new-schematic\" translation-result=\"on\">配置新的原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#configure-the-new-schematic\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Configure the new schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#configure-the-new-schematic\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當你要把一個原理圖新增到集合中時，就必須在該集合的模式中指向它，並提供一些配置檔案來定義使用者可以傳給該命令的選項。</p><p translation-origin=\"off\">When you add a schematic to the collection, you have to point to it in the collection's schema, and provide configuration files to define options that a user can pass to the command.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">編輯一下 <code>schematics/collection.json</code> 檔案，指向新的原理圖子資料夾，並附上一個指向模式檔案的指標，該檔案將會指定新原理圖的輸入。</p><p translation-origin=\"off\">Edit the <code>schematics/collection.json</code> file to point to the new schematic subfolder, and include a pointer to a schema file that specifies inputs for the new schematic.</p>\n\n<code-example header=\"projects/my-lib/schematics/collection.json (Schematics Collection)\" path=\"schematics-for-libraries/projects/my-lib/schematics/collection.json\">\n{\n  \"$schema\": \"../../../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"ng-add\": {\n      \"description\": \"Add my library to the project.\",\n      \"factory\": \"./ng-add/index#ngAdd\"\n    },\n    \"my-service\": {\n      \"description\": \"Generate a service in the project.\",\n      \"factory\": \"./my-service/index#myService\",\n      \"schema\": \"./my-service/schema.json\"\n    }\n  }\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">進入 <code>&lt;lib-root&gt;/schematics/my-service/</code> 目錄。</p><p translation-origin=\"off\">Go to the <code>&lt;lib-root&gt;/schematics/my-service</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個 <code>schema.json</code> 檔案並定義該原理圖的可用選項。</p><p translation-origin=\"off\">Create a <code>schema.json</code> file and define the available options for the schematic.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/schema.json (Schematic JSON Schema)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.json\">\n{\n  \"$schema\": \"http://json-schema.org/schema\",\n  \"$id\": \"SchematicsMyService\",\n  \"title\": \"My Service Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"The name of the service.\",\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\",\n      \"format\": \"path\",\n      \"description\": \"The path to create the service.\",\n      \"visible\": false\n    },\n    \"project\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the project.\",\n      \"$default\": {\n        \"$source\": \"projectName\"\n      }\n    }\n   },\n  \"required\": [\n    \"name\"\n  ]\n}\n\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><em>id</em>：這個模式定義在集合中的唯一 ID。</p><p translation-origin=\"off\"><em>id</em>: A unique ID for the schema in the collection.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>title</em>：一個人類可讀的模式描述。</p><p translation-origin=\"off\"><em>title</em>: A human-readable description of the schema.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>type</em>：由這些屬性提供的型別描述符。</p><p translation-origin=\"off\"><em>type</em>: A descriptor for the type provided by the properties.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><em>properties</em>：一個定義該原理圖可用選項的物件。</p><p translation-origin=\"off\"><em>properties</em>: An object that defines the available options for the schematic.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">每個選項都會把 key 與型別、描述和一個可選的別名關聯起來。該型別定義了你所期望的值的形態，並在使用者請求你的原理圖給出用法幫助時顯示這份描述。</p><p translation-origin=\"off\">Each option associates key with a type, description, and optional alias.\nThe type defines the shape of the value you expect, and the description is displayed when the user requests usage help for your schematic.</p>\n\n<p translation-result=\"on\">關於原理圖的更多自訂選項，請參閱工作區的模式定義。</p><p translation-origin=\"off\">See the workspace schema for additional customizations for schematic options.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個 <code>schema.ts</code> 檔案，並定義一個介面，用於存放 <code>schema.json</code> 檔案中定義的各個選項的值。</p><p translation-origin=\"off\">Create a <code>schema.ts</code> file and define an interface that stores the values of the options defined in the <code>schema.json</code> file.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/schema.ts (Schematic Interface)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/schema.ts\">\nexport interface Schema {\n  // The name of the service.\n  name: string;\n\n  // The path to create the service.\n  path?: string;\n\n  // The name of the project.\n  project?: string;\n}\n\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">選項</nt-wrapper><nt-wrapper translation-origin=\"off\">Options</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">name</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">你要為建立的這個服務指定的名稱。</nt-wrapper><nt-wrapper translation-origin=\"off\">The name you want to provide for the created service.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">path</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">覆蓋為原理圖提供的路徑。預設情況下，路徑是基於當前工作目錄的。</nt-wrapper><nt-wrapper translation-origin=\"off\">Overrides the path provided to the schematic. The default path value is based on the current working directory.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">project</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">提供一個具體專案來執行原理圖。在原理圖中，如果使用者沒有給出該選項，你可以提供一個預設值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Provides a specific project to run the schematic on. In the schematic, you can provide a default if the option is not provided by the user.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"add-template-files\" translation-result=\"on\">新增範本檔案<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-template-files\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add template files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-template-files\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要把工件新增到專案中，你的原理圖就需要自己的範本檔案。原理圖範本支援特殊的語法來執行程式碼和變數替換。</p><p translation-origin=\"off\">To add artifacts to a project, your schematic needs its own template files.\nSchematic templates support special syntax to execute code and variable substitution.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>schematics/my-service/</code> 目錄下建立一個 <code>files/</code> 資料夾。</p><p translation-origin=\"off\">Create a <code>files/</code> folder inside the <code>schematics/my-service/</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個名叫 <code>__name@dasherize__.service.ts.template</code> 的檔案，它定義了一個可以用來產生檔案的範本。這裡的範本會產生一個已把 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到其建構函式中的服務。</p><p translation-origin=\"off\">Create a file named <code>__name@dasherize__.service.ts.template</code> that defines a template to use for generating files.\nThis template will generate a service that already has Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> injected into its constructor.</p>\n\n<code-example lang=\"typescript\" header=\"projects/my-lib/schematics/my-service/files/__name@dasherize__.service.ts.template (Schematic Template)\">\n\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class &lt;%= classify(name) %&gt;Service {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<ul>\n<li>\n<p translation-result=\"on\"><code>classify</code> 和 <code>dasherize</code> 方法是實用函式，你的原理圖會用它們來轉換你的範本原始碼和檔名。</p><p translation-origin=\"off\">The <code>classify</code> and <code>dasherize</code> methods are utility functions that your schematic uses to transform your source template and filename.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>name</code> 是工廠函式提供的一個屬性。它與你在模式中定義的 <code>name</code> 是一樣的。</p><p translation-origin=\"off\">The <code>name</code> is provided as a property from your factory function.\nIt is the same <code>name</code> you defined in the schema.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"add-the-factory-function\" translation-result=\"on\">添加工廠函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-the-factory-function\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add the factory function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#add-the-factory-function\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">現在，你已經有了基礎設施，可以開始定義一個 main 函式來執行要對使用者專案做的各種修改了。</p><p translation-origin=\"off\">Now that you have the infrastructure in place, you can define the main function that performs the modifications you need in the user's project.</p>\n\n<p translation-result=\"on\">Schematics 框架提供了一個檔案範本系統，它支援路徑和內容範本。系統會操作在這個輸入檔案樹（<code>Tree</code>）中載入的檔案內或路徑中定義的佔位符，用傳給 <code>Rule</code> 的值來填充它們。</p><p translation-origin=\"off\">The Schematics framework provides a file templating system, which supports both path and content templates.\nThe system operates on placeholders defined inside files or paths that loaded in the input <code>Tree</code>.\nIt fills these in using values passed into the <code>Rule</code>.</p>\n\n<p translation-result=\"on\">關於這些資料結構和語法的詳細資訊，請參閱 <a href=\"https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\">Schematics 的 README</a>。</p><p translation-origin=\"off\">For details of these data structures and syntax, see the <a href=\"https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\">Schematics README</a>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">建立主檔案 <code>index.ts</code> 併為你的原理圖工廠函式新增原始碼。</p><p translation-origin=\"off\">Create the main file <code>index.ts</code> and add the source code for your schematic factory function.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">首先，匯入你需要的原理圖定義。Schematics 框架提供了許多實用函式來建立規則或在執行原理圖時和使用規則。</p><p translation-origin=\"off\">First, import the schematics definitions you will need.\nThe Schematics framework offers many utility functions to create and use rules when running a schematic.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Imports)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schematics-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">匯入已定義的模式介面，它會為你的原理圖選項提供型別資訊。</p><p translation-origin=\"off\">Import the defined schema interface that provides the type information for your schematic's options.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"schema-imports\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要想建構 \"產生器原理圖\"，我們從一個空白的規則工廠開始。</p><p translation-origin=\"off\">To build up the generation schematic, start with an empty rule factory.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Initial Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.1.ts\" region=\"factory\">\nexport function myService(options: MyServiceSchema): Rule {\n  return (tree: Tree) =&gt; tree;\n}\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">這個規則工廠返回樹而不做任何修改。這些選項都是從 <code>ng generate</code> 命令傳過來的選項值。</p><p translation-origin=\"off\">This rule factory returns the tree without modification.\nThe options are the option values passed through from the <code>ng generate</code> command.</p>\n\n<h2 id=\"define-a-generation-rule\" translation-result=\"on\">定義一個產生器規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-a-generation-rule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Define a generation rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-a-generation-rule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你現在有了一個框架，可用來建立一些真正修改使用者程式的程式碼，以便對庫中定義的服務進行設定。</p><p translation-origin=\"off\">You now have the framework in place for creating the code that actually modifies the user's application to set it up for the service defined in your library.</p>\n\n<p translation-result=\"on\">使用者安裝過此庫的 Angular 工作區中會包含多個專案（應用和庫）。使用者可以在命令列中指定一個專案，也可以使用它的預設值。在任何一種情況下，你的程式碼都需要知道應該在哪個專案上應用此原理圖，這樣才能從該專案的配置中檢索資訊。</p><p translation-origin=\"off\">The Angular workspace where the user installed your library contains multiple projects (applications and libraries).\nThe user can specify the project on the command line, or let it default.\nIn either case, your code needs to identify the specific project to which this schematic is being applied, so that you can retrieve information from the project configuration.</p>\n\n<p translation-result=\"on\">可以使用傳給工廠函式的 <code>Tree</code> 物件來做到這一點。透過 <code>Tree</code> 的一些方法，你可以存取此工作區的完整檔案樹，以便在執行原理圖時讀寫檔案。</p><p translation-origin=\"off\">Do this using the <code>Tree</code> object that is passed in to the factory function.\nThe <code>Tree</code> methods give you access to the complete file tree in your workspace, letting you read and write files during the execution of the schematic.</p>\n\n<h3 id=\"get-the-project-configuration\" translation-result=\"on\">獲取專案配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#get-the-project-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Get the project configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#get-the-project-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">要確定目標專案，可以使用 <code>workspaces.readWorkspace</code> 方法在工作區的根目錄下讀取工作區配置檔案 <code>angular.json</code> 的內容。要想使用 <code>workspaces.readWorkspace</code>，你要先從這個 <code>Tree</code> 創建出一個 <code>workspaces.WorkspaceHost</code>。將以下程式碼新增到工廠函式中。</p><p translation-origin=\"off\">To determine the destination project, use the <code>workspaces.readWorkspace</code> method to read the contents of the workspace configuration file, <code>angular.json</code>.\nTo use <code>workspaces.readWorkspace</code> you need to create a <code>workspaces.WorkspaceHost</code> from the <code>Tree</code>.\nAdd the following code to your factory function.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Schema Import)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"workspace\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    async readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    async writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    async isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    async isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return async (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n  };\n}\n\n\n</code-example>\n<p translation-result=\"on\">一定要檢查此上下文是否存在，並丟擲相應的錯誤。</p><p translation-origin=\"off\">Be sure to check that the context exists and throw the appropriate error.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">現在你有了專案名稱，用它來檢索指定專案的配置資訊。</p><p translation-origin=\"off\">Now that you have the project name, use it to retrieve the project-specific configuration information.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"project-info\">\nconst project = (options.project != null) ? workspace.projects.get(options.project) : null;\nif (!project) {\n  throw new SchematicsException(`Invalid project name: ${options.project}`);\n}\n\nconst projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n</code-example>\n<p translation-result=\"on\">此 <code>workspace.projects</code> 物件包含指定專案的全部配置資訊。</p><p translation-origin=\"off\">The <code>workspace.projects</code> object contains all the project-specific configuration information.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>options.path</code> 決定了應用原理圖之後，要把原理圖範本檔案移動到的位置。</p><p translation-origin=\"off\">The <code>options.path</code> determines where the schematic template files are moved to once the schematic is applied.</p>\n\n<p translation-result=\"on\">原理圖模式中的 <code>path</code> 選項預設會替換為當前工作目錄。如果未定義 <code>path</code>，就使用專案配置中的 <code>sourceRoot</code> 和 <code>projectType</code> 來確定。</p><p translation-origin=\"off\">The <code>path</code> option in the schematic's schema is substituted by default with the current working directory.\nIf the <code>path</code> is not defined, use the <code>sourceRoot</code> from the project configuration along with the <code>projectType</code>.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Project Info)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"path\">\nif (options.path === undefined) {\n  options.path = `${project.sourceRoot}/${projectType}`;\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"define-the-rule\" translation-result=\"on\">定義規則<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-the-rule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Define the rule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#define-the-rule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>Rule</code> 可以使用外部範本檔案，對它們進行轉換，並使用轉換後的範本返回另一個 <code>Rule</code> 物件。可以用範本來產生原理圖所需的任意自訂檔案。</p><p translation-origin=\"off\">A <code>Rule</code> can use external template files, transform them, and return another <code>Rule</code> object with the transformed template.\nUse the templating to generate any custom files required for your schematic.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">將以下程式碼新增到工廠函式中。</p><p translation-origin=\"off\">Add the following code to your factory function.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Template transform)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"template\">\nconst templateSource = apply(url('./files'), [\n  applyTemplates({\n    classify: strings.classify,\n    dasherize: strings.dasherize,\n    name: options.name\n  }),\n  move(normalize(options.path as string))\n]);\n\n</code-example>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">方法</nt-wrapper><nt-wrapper translation-origin=\"off\">Methods</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>apply()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將多個規則應用於源並返回轉換後的源。它需要 2 個引數、一個源和一個規則陣列。</nt-wrapper><nt-wrapper translation-origin=\"off\">Applies multiple rules to a source and returns the transformed source. It takes 2 arguments, a source and an array of rules.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>url()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相對於原理圖，從檔案系統中讀取原始檔。</nt-wrapper><nt-wrapper translation-origin=\"off\">Reads source files from your filesystem, relative to the schematic.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>applyTemplates()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">接收你希望使其可用於原理圖範本和原理圖檔名的方法和屬性的引數。它返回一個 <code>Rule</code>。這是你定義 <code>classify()</code> 和 <code>dasherize()</code> 方法以及 <code>name</code> 屬性的地方。</nt-wrapper><nt-wrapper translation-origin=\"off\">Receives an argument of methods and properties you want make available to the schematic template and the schematic filenames. It returns a <code>Rule</code>. This is where you define the <code>classify()</code> and <code>dasherize()</code> methods, and the <code>name</code> property.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>classify()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">接受一個值並以標題大小寫形式返回值。例如，如果提供的名稱是 <code>my service</code>，它會作為 <code>MyService</code> 返回。</nt-wrapper><nt-wrapper translation-origin=\"off\">Takes a value and returns the value in title case. For example, if the provided name is <code>my service</code>, it is returned as <code>MyService</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>dasherize()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">接受一個值並以虛線和小寫形式返回值。例如，如果提供的名稱是 MyService，則它將作為 <code>my-service</code> 返回。</nt-wrapper><nt-wrapper translation-origin=\"off\">Takes a value and returns the value in dashed and lowercase. For example, if the provided name is MyService, it is returned as <code>my-service</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>move()</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應用原理圖時，將提供的原始檔移動到它們的目標。</nt-wrapper><nt-wrapper translation-origin=\"off\">Moves the provided source files to their destination when the schematic is applied.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</li>\n<li>\n<p translation-result=\"on\">最後，規則工廠必須返回一條規則。</p><p translation-origin=\"off\">Finally, the rule factory must return a rule.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts (Chain Rule)\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\" region=\"chain\">\nreturn chain([\n  mergeWith(templateSource)\n]);\n\n</code-example>\n<p translation-result=\"on\">該 <code>chain()</code> 方法允許你把多個規則組合到一個規則中，這樣就可以在一個原理圖中執行多個操作。這裡你只是把模板規則和原理圖要執行的程式碼合併在一起。</p><p translation-origin=\"off\">The <code>chain()</code> method lets you combine multiple rules into a single rule, so that you can perform multiple operations in a single schematic.\nHere you are only merging the template rules with any code executed by the schematic.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">請看原理圖規則函式的一個完整例子。</p><p translation-origin=\"off\">See a complete example of the following schematic rule function.</p>\n\n<code-example header=\"projects/my-lib/schematics/my-service/index.ts\" path=\"schematics-for-libraries/projects/my-lib/schematics/my-service/index.ts\">\nimport {\n  Rule, Tree, SchematicsException,\n  apply, url, applyTemplates, move,\n  chain, mergeWith\n} from '@angular-devkit/schematics';\n\nimport { strings, normalize, virtualFs, workspaces } from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    async readFile(path: string): Promise&lt;string&gt; {\n      const data = tree.read(path);\n      if (!data) {\n        throw new SchematicsException('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    async writeFile(path: string, data: string): Promise&lt;void&gt; {\n      return tree.overwrite(path, data);\n    },\n    async isDirectory(path: string): Promise&lt;boolean&gt; {\n      return !tree.exists(path) &amp;&amp; tree.getDir(path).subfiles.length &gt; 0;\n    },\n    async isFile(path: string): Promise&lt;boolean&gt; {\n      return tree.exists(path);\n    },\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return async (tree: Tree) =&gt; {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n\n    const project = (options.project != null) ? workspace.projects.get(options.project) : null;\n    if (!project) {\n      throw new SchematicsException(`Invalid project name: ${options.project}`);\n    }\n\n    const projectType = project.extensions.projectType === 'application' ? 'app' : 'lib';\n\n    if (options.path === undefined) {\n      options.path = `${project.sourceRoot}/${projectType}`;\n    }\n\n    const templateSource = apply(url('./files'), [\n      applyTemplates({\n        classify: strings.classify,\n        dasherize: strings.dasherize,\n        name: options.name\n      }),\n      move(normalize(options.path as string))\n    ]);\n\n    return chain([\n      mergeWith(templateSource)\n    ]);\n  };\n}\n\n\n</code-example>\n<p translation-result=\"on\">關於規則和實用工具方法的詳細資訊，請參閱<a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\">預定義規則</a>。</p><p translation-origin=\"off\">For more information about rules and utility methods, see <a href=\"https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\">Provided Rules</a>.</p>\n\n<h2 id=\"running-your-library-schematic\" translation-result=\"on\">執行你的函式庫原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#running-your-library-schematic\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Running your library schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#running-your-library-schematic\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在建構庫和原理圖之後，你就可以安裝一個原理圖集合來執行你的專案了。下面的步驟介紹瞭如何使用上面建立的原理圖來產生服務。</p><p translation-origin=\"off\">After you build your library and schematics, you can install the schematics collection to run against your project.\nThe following steps show you how to generate a service using the schematic you created earlier.</p>\n\n<h3 id=\"build-your-library-and-schematics\" translation-result=\"on\">建構你的函式庫和原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#build-your-library-and-schematics\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Build your library and schematics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#build-your-library-and-schematics\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在工作區的根目錄下，執行庫的 <code>ng build</code> 命令。</p><p translation-origin=\"off\">From the root of your workspace, run the <code>ng build</code> command for your library.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng build my-lib\n\n</code-example>\n<p translation-result=\"on\">然後，進入庫目錄，建構原理圖</p><p translation-origin=\"off\">Then, you change into your library directory to build the schematic</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\ncd projects/my-lib\nnpm run build\n\n</code-example>\n<h3 id=\"link-the-library\" translation-result=\"on\">連結這個庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#link-the-library\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Link the library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#link-the-library\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">這些庫和原理圖都已打包好了，就放在你工作區根目錄下的 <code>dist/my-lib</code> 資料夾中。要執行這個原理圖，你需要把這個庫連結到 <code>node_modules</code> 資料夾中。在工作區的根目錄下，執行 <code>npm link</code> 命令，並把你的可分發庫的路徑作為引數。</p><p translation-origin=\"off\">Your library and schematics are packaged and placed in the <code>dist/my-lib</code> folder at the root of your workspace.\nFor running the schematic, you need to link the library into your <code>node_modules</code> folder.\nFrom the root of your workspace, run the <code>npm link</code> command with the path to your distributable library.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm link dist/my-lib\n\n</code-example>\n<h3 id=\"run-the-schematic\" translation-result=\"on\">執行原理圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#run-the-schematic\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Run the schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-for-libraries#run-the-schematic\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">現在你的函式庫已經安裝完畢，可以使用 <code>ng generate</code> 命令來執行原理圖了。</p><p translation-origin=\"off\">Now that your library is installed, run the schematic using the <code>ng generate</code> command.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate my-lib:my-service --name my-data\n\n</code-example>\n<p translation-result=\"on\">在控制檯中，你會看到原理圖已經執行過了，<code>my-data.service.ts</code> 檔案被建立在了你的 app 資料夾中。</p><p translation-origin=\"off\">In the console, you see that the schematic was run and the <code>my-data.service.ts</code> file was created in your application folder.</p>\n\n<code-example language=\"shell\" hidecopy=\"\">\n\nCREATE src/app/my-data.service.ts (208 bytes)\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/creating-libraries\n - guide/schematics\n - guide/schematics-authoring\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/core/Injectable\n - guide/schematics-for-libraries#add-template-files\n - guide/schematics-for-libraries#add-the-factory-function\n - guide/schematics-for-libraries#build-your-library-and-schematics\n - guide/schematics-for-libraries#building-your-schematics\n - guide/schematics-for-libraries#configure-the-new-schematic\n - guide/schematics-for-libraries#creating-a-schematics-collection\n - guide/schematics-for-libraries#define-a-generation-rule\n - guide/schematics-for-libraries#define-dependency-type\n - guide/schematics-for-libraries#define-the-rule\n - guide/schematics-for-libraries#get-the-project-configuration\n - guide/schematics-for-libraries#link-the-library\n - guide/schematics-for-libraries#providing-generation-support\n - guide/schematics-for-libraries#providing-installation-support\n - guide/schematics-for-libraries#run-the-schematic\n - guide/schematics-for-libraries#running-your-library-schematic\n - guide/schematics-for-libraries#schematics-for-libraries\n - guide/schematics-for-libraries#建立一個原理圖集合\n - guide/schematics-for-libraries#定義一個產生器規則\n - guide/schematics-for-libraries#定義依賴型別\n - guide/schematics-for-libraries#定義規則\n - guide/schematics-for-libraries#庫的原理圖\n - guide/schematics-for-libraries#提供安裝支援\n - guide/schematics-for-libraries#提供產生器支援\n - guide/schematics-for-libraries#建構你的原理圖\n - guide/schematics-for-libraries#建構你的函式庫和原理圖\n - guide/schematics-for-libraries#添加工廠函式\n - guide/schematics-for-libraries#新增範本檔案\n - guide/schematics-for-libraries#獲取專案配置\n - guide/schematics-for-libraries#執行你的函式庫原理圖\n - guide/schematics-for-libraries#執行原理圖\n - guide/schematics-for-libraries#配置新的原理圖\n - guide/schematics-for-libraries#連結這個庫\n - https://github.com/angular/angular-cli/blob/main/packages/angular_devkit/schematics/README.md\n - https://github.com/angular/angular-cli/tree/main/packages/angular_devkit/schematics#provided-rules\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/schematics-for-libraries.md?message=docs%3A%20請簡述你的修改...\n-->"}