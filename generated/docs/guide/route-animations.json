{"id":"guide/route-animations","title":"Route transition animations","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/route-animations.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"route-transition-animations\" translation-result=\"on\">路由過渡動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-transition-animations\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Route transition animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-transition-animations\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">對下列概念有基本的理解：</p><p translation-origin=\"off\">A basic understanding of the following concepts:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫簡介</a></p><p translation-origin=\"off\"><a href=\"guide/animations\">Introduction to Angular animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/transition-and-triggers\">過渡與觸發器</a></p><p translation-origin=\"off\"><a href=\"guide/transition-and-triggers\">Transition and triggers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reusable-animations\">可複用動畫</a></p><p translation-origin=\"off\"><a href=\"guide/reusable-animations\">Reusable animations</a></p>\n\n</li>\n</ul>\n<h2 id=\"enable-routing-transition-animation\" translation-result=\"on\">啟用路由過渡動畫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#enable-routing-transition-animation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Enable routing transition animation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#enable-routing-transition-animation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">路由能讓使用者在應用中的不同路由之間導航。當用戶從一個路由導航到另一個路由時，Angular 路由器會把這個 URL 對映到一個相關的元件，並顯示其檢視。為這種路由轉換新增動畫，將極大地提升使用者體驗。</p><p translation-origin=\"off\">When a user navigates from one route to another, the Angular router maps the URL path to a relevant component and displays its view.\nAnimating this route transition can greatly enhance the user experience.</p>\n\n<p translation-result=\"on\">Angular 路由器天生帶有高階動畫功能，它可以讓你為在路由變化時為檢視之間設定過渡動畫。要想在路由切換時產生動畫序列，你需要首先定義出巢狀(Nesting)的動畫序列。從宿主檢視的最上層元件開始，在這些內嵌檢視的宿主元件中巢狀(Nesting)動畫。</p><p translation-origin=\"off\">The Angular router comes with high-level animation functions that let you animate the transitions between views when a route changes.\nTo produce an animation sequence when switching between routes, you need to define nested animation sequences.\nStart with the top-level component that hosts the view, and nest animations in the components that host the embedded views.</p>\n\n<p translation-result=\"on\">要啟用路由過渡動畫，需要做如下步驟：</p><p translation-origin=\"off\">To enable routing transition animation, do the following:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">為應用匯入路由模組，並建立一個路由配置來定義可能的路由。</p><p translation-origin=\"off\">Import the routing module into the application and create a routing configuration that defines the possible routes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增路由器出口，來告訴 Angular 路由器要把啟用的元件放在 DOM 中的什麼位置。</p><p translation-origin=\"off\">Add a router outlet to tell the Angular router where to place the activated components in the DOM.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">定義動畫。</p><p translation-origin=\"off\">Define the animation.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">讓我們以兩個路由之間的導航過程來解釋一下路由過渡動畫，<em>Home</em> 和 <em>About</em> 分別與 <code>HomeComponent</code> 和 <code>AboutComponent</code> 的檢視相關聯。所有這些元件檢視都是最上層檢視的子節點，其宿主是 <code>AppComponent</code>。接下來將實現路由器過渡動畫，該動畫會在出現新檢視時向右滑動，並當在兩個路由之間導航時把舊檢視滑出。</p><p translation-origin=\"off\">Illustrate a router transition animation by navigating between two routes, <em>Home</em> and <em>About</em> associated with the <code>HomeComponent</code> and <code>AboutComponent</code> views respectively.\nBoth of these component views are children of the top-most view, hosted by <code>AppComponent</code>.\nImplement a router transition animation that slides in the new view to the right and slides out the old view when navigating between the two routes.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Animations in action\" width=\"440\" src=\"generated/images/guide/animations/route-animation.gif\">\n</div>\n<h2 id=\"route-configuration\" translation-result=\"on\">路由配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#route-configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">首先，使用 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 類提供的方法來配置一組路由。該路由配置會告訴路由器該如何導航。</p><p translation-origin=\"off\">To begin, configure a set of routes using methods available in the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> class.\nThis route configuration tells the router how to navigate.</p>\n\n<p translation-result=\"on\">使用 <code>RouterModule.forRoot</code> 方法來定義一組路由。同時，把其返回值新增到主模組 <code>AppModule</code> 的 <code>imports</code> 陣列中。</p><p translation-origin=\"off\">Use the <code>RouterModule.forRoot</code> method to define a set of routes.\nAlso, add <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>imports</code> array of the main module, <code>AppModule</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n在根模組 <code>AppModule</code> 中使用 <code>RouterModule.forRoot</code> 方法來註冊一些最上層應用路由和提供者。對於特性模組，則改用 <code>RouterModule.forChild</code> 方法。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nUse the <code>RouterModule.forRoot</code> method in the root module, <code>AppModule</code>, to register top-level application routes and providers.\nFor feature modules, call the <code>RouterModule.forChild</code> method instead.</p>\n\n</div>\n<p translation-result=\"on\">下列配置定義了應用程式中可能的路由。</p><p translation-origin=\"off\">The following configuration defines the possible routes for the application.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"animations/src/app/app.module.ts\" region=\"route-animation-data\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { OpenCloseComponent } from './open-close.component';\nimport { OpenClosePageComponent } from './open-close-page.component';\nimport { OpenCloseChildComponent } from './open-close.component.4';\nimport { ToggleAnimationsPageComponent } from './toggle-animations-page.component';\nimport { StatusSliderComponent } from './status-slider.component';\nimport { StatusSliderPageComponent } from './status-slider-page.component';\nimport { HeroListPageComponent } from './hero-list-page.component';\nimport { HeroListGroupPageComponent } from './hero-list-group-page.component';\nimport { HeroListGroupsComponent } from './hero-list-groups.component';\nimport { HeroListEnterLeavePageComponent } from './hero-list-enter-leave-page.component';\nimport { HeroListEnterLeaveComponent } from './hero-list-enter-leave.component';\nimport { HeroListAutoCalcPageComponent } from './hero-list-auto-page.component';\nimport { HeroListAutoComponent } from './hero-list-auto.component';\nimport { HomeComponent } from './home.component';\nimport { AboutComponent } from './about.component';\nimport { InsertRemoveComponent } from './insert-remove.component';\nimport { QueryingComponent } from './querying.component';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    RouterModule.forRoot([\n      { path: '', pathMatch: 'full', redirectTo: '/enter-leave' },\n      {\n        path: 'open-close',\n        component: OpenClosePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'openClosePage' }\n      },\n      {\n        path: 'status',\n        component: StatusSliderPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'statusPage' }\n      },\n      {\n        path: 'toggle',\n        component: ToggleAnimationsPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'togglePage' }\n      },\n      {\n        path: 'heroes',\n        component: HeroListPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'filterPage' }\n      },\n      {\n        path: 'hero-groups',\n        component: HeroListGroupPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'heroGroupPage' }\n      },\n      {\n        path: 'enter-leave',\n        component: HeroListEnterLeavePageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'enterLeavePage' }\n      },\n      {\n        path: 'auto',\n        component: HeroListAutoCalcPageComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'autoPage' }\n      },\n      {\n        path: 'insert-remove',\n        component: InsertRemoveComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'insertRemovePage' }\n      },\n      {\n        path: 'querying',\n        component: QueryingComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'queryingPage' }\n      },\n      {\n        path: 'home',\n        component: HomeComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'HomePage' }\n      },\n      {\n        path: 'about',\n        component: AboutComponent,\n        data: { <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'AboutPage' }\n      },\n    ])\n  ],\n\n</code-example>\n<p translation-result=\"on\"><code>home</code> 和 <code>about</code> 路徑分別關聯著 <code>HomeComponent</code> 和 <code>AboutComponent</code> 檢視。該路由配置告訴 Angular 路由器當導航匹配了相應的路徑時，就例項化 <code>HomeComponent</code> 和 <code>AboutComponent</code> 檢視。</p><p translation-origin=\"off\">The <code>home</code> and <code>about</code> paths are associated with the <code>HomeComponent</code> and <code>AboutComponent</code> views.\nThe route configuration tells the Angular router to instantiate the <code>HomeComponent</code> and <code>AboutComponent</code> views when the navigation matches the corresponding path.</p>\n\n<p translation-result=\"on\">每個路由定義中的 <code>data</code> 屬性也定義了與此路由有關的動畫配置。當路由變化時，<code>data</code> 屬性的值就會傳給 <code>AppComponent</code>。</p><p translation-origin=\"off\">The <code>data</code> property of each route defines the key animation-specific configuration associated with a route.\nThe <code>data</code> property value is passed into <code>AppComponent</code> when the route changes.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n這個 <code>data</code> 中的屬性名可以是任意的。比如，上面例子中使用的名字 <em>animation</em> 就是隨便起的。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe <code>data</code> property names that you use can be arbitrary.\nFor example, the name <em>animation</em> used in the preceding example is an arbitrary choice.</p>\n\n</div>\n<h2 id=\"router-outlet\" translation-result=\"on\">路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#router-outlet\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Router outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">配置好路由之後，還要告訴 Angular 路由器當路由匹配時，要把檢視渲染到那裡。你可以透過在根元件 <code>AppComponent</code> 的範本中插入一個 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 容器來指定路由出口的位置。</p><p translation-origin=\"off\">After configuring the routes, add a <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> inside the root <code>AppComponent</code> template.\nThe <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> directive tells the Angular router where to render the views when matched with a route.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a></code> 包含有關插座和啟用路由的資訊。我們可以用每個 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 的 <code>data</code> 屬性來為我們的路由轉換設定動畫。</p><p translation-origin=\"off\">The <code><a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a></code> holds information about outlets and activated routes.\nThe <code>data</code> property of each <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> can be used to animate routing transitions.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"animations/src/app/app.component.html\" region=\"route-animations-outlet\">\n&lt;div [@routeAnimations]=\"getRouteAnimationData()\"&gt;\n  &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 中定義了一個可以檢測檢視何時發生變化的方法，該方法會基於路由配置的 <code>data</code> 屬性值，將動畫狀態值賦值給動畫觸發器（<code>@routeAnimation</code>）。下面就是一個 <code>AppComponent</code> 中的範例方法，用於檢測路由在何時發生了變化。</p><p translation-origin=\"off\"><code>AppComponent</code> defines a method that can detect when a view changes.\nThe method assigns an animation state value to the animation trigger (<code>@routeAnimation</code>) based on the route configuration <code>data</code> property value.\nHere's an example of an <code>AppComponent</code> method that detects when a route change happens.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"get-route-animations-data\">\nconstructor(private contexts: <a href=\"api/router/ChildrenOutletContexts\" class=\"code-anchor\">ChildrenOutletContexts</a>) {}\n\ngetRouteAnimationData() {\n  return this.contexts.getContext('primary')?.route?.snapshot?.data?.['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n}\n\n</code-example>\n<p translation-result=\"on\">這裡的 <code>getRouteAnimationData()</code> 方法會獲取這個 outlet 指令的值（透過 <code>#outlet=\"outlet\"</code>）。它會根據當前活動路由的自訂資料返回一個表示動畫狀態的字串值。可以用這個資料來控制各個路由之間該執行哪個過渡。</p><p translation-origin=\"off\">The <code>getRouteAnimationData()</code> method takes the value of the outlet. It returns a string that represents the state of the animation based on the custom data of the current active route.\nUse this data to control which transition to run for each route.</p>\n\n<h2 id=\"animation-definition\" translation-result=\"on\">動畫定義<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#animation-definition\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Animation definition<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#animation-definition\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">動畫可以直接在元件中定義。對於此範例，我們會在獨立的檔案中定義動畫，這讓我們可以複用這些動畫。</p><p translation-origin=\"off\">Animations can be defined directly inside your components.\nFor this example you are defining the animations in a separate file, which allows re-use of animations.</p>\n\n<p translation-result=\"on\">下面的程式碼片段定義了一個名叫 <code>slideInAnimation</code> 的可複用動畫。</p><p translation-origin=\"off\">The following code snippet defines a reusable animation named <code>slideInAnimation</code>.</p>\n\n<code-example header=\"src/app/animations.ts\" path=\"animations/src/app/animations.ts\" region=\"route-animations\">\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ]),\n      ]),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>())\n      ]),\n    ])\n  ]);\n\n</code-example>\n<p translation-result=\"on\">該動畫定義做了如下事情：</p><p translation-origin=\"off\">The animation definition performs the following tasks:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">定義兩個過渡。每個觸發器都可以定義多個狀態和多個過渡</p><p translation-origin=\"off\">Defines two transitions (a single <code><a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a></code> can define multiple states and transitions)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">調整宿主檢視和子檢視的樣式，以便在過渡期間，控制它們的相對位置</p><p translation-origin=\"off\">Adjusts the styles of the host and child views to control their relative positions during the transition</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 來確定哪個子檢視正在進入或離開宿主檢視</p><p translation-origin=\"off\">Uses <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> to determine which child view is entering and which is leaving the host view</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">路由的變化會啟用這個動畫觸發器，並應用一個與該狀態變更相匹配的過渡</p><p translation-origin=\"off\">A route change activates the animation trigger, and a transition matching the state change is applied.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n這些過渡狀態必須和路由配置中定義的 <code>data</code> 屬性的值相一致。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe transition states must match the <code>data</code> property value defined in the route configuration.</p>\n\n</div>\n<p translation-result=\"on\">透過將可複用動畫 <code>slideInAnimation</code> 新增到 <code>AppComponent</code> 的 <code>animations</code> 元資料中，可以讓此動畫定義能用在你的應用中。</p><p translation-origin=\"off\">Make the animation definition available in your application by adding the reusable animation (<code>slideInAnimation</code>) to the <code>animations</code> metadata of the <code>AppComponent</code>.</p>\n\n<code-example header=\"src/app/app.component.ts\" path=\"animations/src/app/app.component.ts\" region=\"define\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  animations: [\n    slideInAnimation\n  ]\n})\n\n</code-example>\n<h3 id=\"style-the-host-and-child-components\" translation-result=\"on\">為宿主元件和子元件新增樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#style-the-host-and-child-components\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Style the host and child components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#style-the-host-and-child-components\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在過渡期間，新檢視將直接插入在舊檢視後面，並且這兩個元素會同時出現在螢幕上。要防止這種行為，就要修改宿主檢視，改用相對定位。然後，把已移除或已插入的子檢視改用絕對定位。在這些檢視中新增樣式，就可以讓容器就地播放動畫，並防止某個檢視影響頁面中其它檢視的位置。</p><p translation-origin=\"off\">During a transition, a new view is inserted directly after the old one and both elements appear on screen at the same time.\nTo prevent this behavior, update the host view to use relative positioning.\nThen, update the removed and inserted child views to use absolute positioning.\nAdding these styles to the views animates the containers in place and prevents one view from affecting the position of the other on the page.</p>\n\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"style-view\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &lt;=&gt; AboutPage', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n\n</code-example>\n<h3 id=\"query-the-view-containers\" translation-result=\"on\">查詢檢視的容器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#query-the-view-containers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Query the view containers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#query-the-view-containers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 方法可以找出當前宿主元件中的動畫元素。<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":enter\")</code> 陳述式會返回已插入的檢視，<code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":leave\")</code> 陳述式會返回已移除的檢視。</p><p translation-origin=\"off\">Use the <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> method to find and animate elements within the current host component.\nThe <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":enter\")</code> statement returns the view that is being inserted, and <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":leave\")</code> returns the view that is being removed.</p>\n\n<p translation-result=\"on\">假設你正在從 <em>Home</em> 過渡到 <em>About</em>，<code>Home =&gt; About</code>。</p><p translation-origin=\"off\">Assume that you are routing from the <em>Home =&gt; About</em>.</p>\n\n<code-example header=\"src/app/animations.ts (excerpt)\" path=\"animations/src/app/animations.ts\" region=\"query\">\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%' }))\n    ]),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ]),\n  ]),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &lt;=&gt; *', [\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ position: 'relative' }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%'\n    })\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' })\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%', opacity: 0 }))\n    ]),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%' }))\n    ]),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>('@*', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>())\n  ]),\n])\n\n</code-example>\n<p translation-result=\"on\">在設定了檢視的樣式之後，動畫程式碼會執行如下操作：</p><p translation-origin=\"off\">The animation code does the following after styling the views:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})</code> 會匹配新增的檢視，並透過將其定位在最左側來隱藏這個新檢視。</p><p translation-origin=\"off\"><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%' }))</code> matches the view that is added and hides the newly added view by positioning it to the far left.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在正在離開的檢視上呼叫 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code>，來執行其子動畫。</p><p translation-origin=\"off\">Calls <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> on the view that is leaving, to run its child animations.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用<a href=\"api/animations/group\"><code>group()</code></a>函式使內部動畫並行執行。</p><p translation-origin=\"off\">Uses <a href=\"api/animations/group\"><code>group()</code></a> function to make the inner animations run in parallel.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <a href=\"api/animations/group\"><code>group()</code></a> 函式中：</p><p translation-origin=\"off\">Within the <a href=\"api/animations/group\"><code>group()</code></a> function:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">查詢已移除的檢視，並讓它從右側滑出。</p><p translation-origin=\"off\">Queries the view that is removed and animates it to slide far to the right.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用緩動函式和持續時間定義的動畫，讓這個新檢視滑入。</p><p translation-origin=\"off\">Slides in the new view by animating the view with an easing function and duration.</p>\n\n<p translation-result=\"on\">此動畫將導致 <code>about</code> 檢視從左側劃入。</p><p translation-origin=\"off\">This animation results in the <code>about</code> view sliding in from the left.</p>\n\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">當主動畫完成之後，在這個新檢視上呼叫 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 方法，以執行其子動畫。</p><p translation-origin=\"off\">Calls the <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> method on the new view to run its child animations after the main animation completes.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">你現在有了一個基本的路由動畫，可以在從一個檢視路由到另一個檢視時播放動畫。</p><p translation-origin=\"off\">You now have a basic routable animation that animates routing from one view to another.</p>\n\n<h2 id=\"more-on-angular-animations\" translation-result=\"on\">關於 Angular 動畫的更多知識<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">More on Angular animations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#more-on-angular-animations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可能還對下列內容感興趣：</p><p translation-origin=\"off\">You might also be interested in the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/animations\">Angular 動畫簡介</a></p><p translation-origin=\"off\"><a href=\"guide/animations\">Introduction to Angular animations</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/transition-and-triggers\">過渡與觸發器</a></p><p translation-origin=\"off\"><a href=\"guide/transition-and-triggers\">Transition and triggers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/complex-animation-sequences\">複雜動畫序列</a></p><p translation-origin=\"off\"><a href=\"guide/complex-animation-sequences\">Complex animation sequences</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/reusable-animations\">可複用動畫</a></p><p translation-origin=\"off\"><a href=\"guide/reusable-animations\">Reusable animations</a></p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：10/11/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/group\n - api/animations/query\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/router/ChildrenOutletContexts\n - api/router/Route\n - api/router/RouterModule\n - api/router/RouterOutlet\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations#animation-definition\n - guide/route-animations#enable-routing-transition-animation\n - guide/route-animations#more-on-angular-animations\n - guide/route-animations#prerequisites\n - guide/route-animations#query-the-view-containers\n - guide/route-animations#route-configuration\n - guide/route-animations#route-transition-animations\n - guide/route-animations#router-outlet\n - guide/route-animations#style-the-host-and-child-components\n - guide/route-animations#為宿主元件和子元件新增樣式\n - guide/route-animations#關於-angular-動畫的更多知識\n - guide/route-animations#前提條件\n - guide/route-animations#動畫定義\n - guide/route-animations#啟用路由過渡動畫\n - guide/route-animations#查詢檢視的容器\n - guide/route-animations#路由出口\n - guide/route-animations#路由過渡動畫\n - guide/route-animations#路由配置\n - guide/transition-and-triggers\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/route-animations.md?message=docs%3A%20請簡述你的修改...\n-->"}