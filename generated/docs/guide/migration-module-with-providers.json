{"id":"guide/migration-module-with-providers","title":"ModuleWithProviders Migration","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-module-with-providers.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"modulewithproviders-migration\" translation-result=\"on\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 遷移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#modulewithproviders-遷移\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#modulewithproviders-migration\"><i class=\"material-icons\">link</i></a></h1>\n\n<h2 id=\"what-does-this-schematic-do\" translation-result=\"on\">這個原理圖做了什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What does this schematic do?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-schematic-do\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">一些 Angular 函式庫，比如 <code>@angular/router</code> 和 <code>@ngrx/store</code>，實現了某些返回 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 型別的 API（通常是一個名叫 <code>forRoot()</code> 的方法）。這種型別代表了一個 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 以及其提供者。Angular 9 不推薦使用不帶泛型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>，泛型型別就是 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的型別。</p><p translation-origin=\"off\">Some Angular libraries, such as <code>@angular/router</code> and <code>@ngrx/store</code>, implement APIs that return a type called <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> (typically via a method named <code>forRoot()</code>).\nThis type represents an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> along with additional providers.\nAngular version 9 deprecates use of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without an explicitly generic type, where the generic type refers to the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n<p translation-result=\"on\">這個原理圖會給那些缺少泛型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 用法新增泛型型別。在下面的例子中，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的型別是 <code>SomeModule</code>，所以原理圖就把型別修改為 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;SomeModule&gt;</code>。</p><p translation-origin=\"off\">This schematic will add a generic type to any <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> usages that are missing the generic.\nIn the example below, the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> is <code>SomeModule</code>, so the schematic changes the type to be <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;SomeModule&gt;</code>.</p>\n\n<p translation-result=\"on\"><strong>之前</strong></p><p translation-origin=\"off\"><strong>Before</strong></p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({…})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><strong>之後</strong></p><p translation-origin=\"off\"><strong>After</strong></p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({…})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;SomeModule&gt; {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config }\n      ]\n    };\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">在極少數情況下，原理圖無法確定 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 的型別，你可能會看到原理圖打印出一條 TODO 註釋來讓你手動更新程式碼。</p><p translation-origin=\"off\">In the rare case that the schematic can't determine the type of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>, you may see the schematic print a TODO comment to update the code manually.</p>\n\n<h2 id=\"why-is-this-migration-necessary\" translation-result=\"on\">為何這次遷移必不可少？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Why is this migration necessary?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#why-is-this-migration-necessary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">自 Angular 7 開始，<code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 就有了泛型型別，但它是可選的。即使缺了也可以正常編譯，因為 <code>metadata.json</code> 檔案中包含了所有的元資料。在 Ivy 中，不再需要 <code>metadata.json</code> 檔案了，所以框架不能再假定已經有了所有必要的型別。相反，Ivy 要依賴 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 的泛型型別來獲取正確的型別資訊。</p><p translation-origin=\"off\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> has had the generic type since Angular version 7, but it has been optional.\nThis has compiled because the <code>metadata.json</code> files contained all the metadata.\nWith Ivy, <code>metadata.json</code> files are no longer required, so the framework cannot assume that one with the necessary types has been provided.\nInstead, Ivy relies on the generic type for <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> to get the correct type information.</p>\n\n<p translation-result=\"on\">出於這個原因，Angular 9 版本不推薦使用不帶泛型型別的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>。Angular 的未來版本會刪除預設的泛型型別，並且要求一個明確的型別。</p><p translation-origin=\"off\">For this reason, Angular version 9 deprecates <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without a generic type.\nA future version of Angular will remove the default generic type, making an explicit type required.</p>\n\n<h2 id=\"should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\" translation-result=\"on\">當我把新的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 型別新增到應用中時，是否應該新增泛型？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#當我把新的-modulewithproviders-型別新增到應用中時是否應該新增泛型\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Should I add the generic type when I add new <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> types to my application?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">是的，任何時候，當你的程式碼參考了 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 型別，都要有一個與其返回的實際 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 相匹配的泛型型別（比如，<code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;MyModule&gt;</code>）。</p><p translation-origin=\"off\">Yes, any time your code references the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type, it should have a generic type that matches the actual <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> that is returned (for example, <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;MyModule&gt;</code>).</p>\n\n<h2 id=\"what-should-i-do-if-the-schematic-prints-a-todo-comment\" translation-result=\"on\">如果此原理圖打印出了 TODO 註釋，我該怎麼辦？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What should I do if the schematic prints a TODO comment?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">此原理圖會在它無法檢測出 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 型別的正確泛型型別的情況下列印 TODO 註釋。在這種情況下，你需要手動為 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 新增正確的泛型。它應該匹配 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 物件中返回的那個 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>。</p><p translation-origin=\"off\">The schematic will print a TODO comment in the event that it cannot detect the correct generic for the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type.\nIn this case, you'll want to manually add the correct generic to <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code>.\nIt should match the type of whichever <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> is returned in the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> object.</p>\n\n<h2 id=\"what-does-this-mean-for-libraries\" translation-result=\"on\">這對庫來說意味著什麼？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-mean-for-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What does this mean for libraries?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration-module-with-providers#what-does-this-mean-for-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">庫應該把泛型型別新增到 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 型別的任何一次使用中。</p><p translation-origin=\"off\">Libraries should add the generic type to any usages of the <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/16/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/deprecations\n-->\n<!-- links from this doc:\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/upgrade/static\n - guide/migration-module-with-providers#modulewithproviders-migration\n - guide/migration-module-with-providers#modulewithproviders-遷移\n - guide/migration-module-with-providers#should-i-add-the-generic-type-when-i-add-new-modulewithproviders-types-to-my-application\n - guide/migration-module-with-providers#what-does-this-mean-for-libraries\n - guide/migration-module-with-providers#what-does-this-schematic-do\n - guide/migration-module-with-providers#what-should-i-do-if-the-schematic-prints-a-todo-comment\n - guide/migration-module-with-providers#why-is-this-migration-necessary\n - guide/migration-module-with-providers#為何這次遷移必不可少\n - guide/migration-module-with-providers#如果此原理圖打印出了-todo-註釋我該怎麼辦\n - guide/migration-module-with-providers#當我把新的-modulewithproviders-型別新增到應用中時是否應該新增泛型\n - guide/migration-module-with-providers#這個原理圖做了什麼\n - guide/migration-module-with-providers#這對庫來說意味著什麼\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/migration-module-with-providers.md?message=docs%3A%20請簡述你的修改...\n-->"}