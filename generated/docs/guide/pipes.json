{"id":"guide/pipes","title":"Transforming Data Using Pipes","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/pipes.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"transforming-data-using-pipes\" translation-result=\"on\">用管道轉換資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-using-pipes\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Transforming Data Using Pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-using-pipes\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#pipe\" title=\"管道的定義\">管道</a>用來對字串、貨幣金額、日期和其他顯示資料進行轉換和格式化。管道是一些簡單的函式，可以在<a href=\"guide/glossary#template-expression\" title=\"範本表示式的定義\">範本表示式</a>中用來接受輸入值並返回一個轉換後的值。比如，你可以使用一個管道把日期顯示為 <strong>1988 年 4 月 15 日</strong>，而不是其原始字串格式。</p><p translation-origin=\"off\">Use <a href=\"guide/glossary#pipe\" title=\"Definition of a pipe\">pipes</a> to transform strings, currency amounts, dates, and other data for display.\nPipes are simple functions to use in <a href=\"guide/glossary#template-expression\" title=\"Definition of template expression\">template expressions</a> to accept an input value and return a transformed value.\nPipes are useful because you can use them throughout your application, while only declaring each pipe once.\nFor example, you would use a pipe to show a date as <strong>April 15, 1988</strong> rather than the raw string format.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本主題中使用的範例應用，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application used in this topic, see the <live-example></live-example>.</p>\n\n</div>\n<p translation-result=\"on\">Angular 為典型的資料轉換提供了內建的管道，包括國際化的轉換（i18n），它使用本地化資訊來格式化資料。資料格式化常用的內建管道如下：</p><p translation-origin=\"off\">Angular provides built-in pipes for typical data transformations, including transformations for internationalization (i18n), which use locale information to format data.\nThe following are commonly used built-in pipes for data formatting:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">管道</nt-wrapper><nt-wrapper translation-origin=\"off\">Pipes</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/DatePipe\"><code>DatePipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根據區域設定規則格式化日期值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Formats a date value according to locale rules.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/UpperCasePipe\"><code>UpperCasePipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把文字轉換成全大寫形式。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms text to all upper case.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/LowerCasePipe\"><code>LowerCasePipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把文字轉換成全小寫形式。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms text to all lower case.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/CurrencyPipe\"><code>CurrencyPipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把數字轉換成貨幣字串，根據語言環境中的規則進行格式化。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms a number to a currency string, formatted according to locale rules.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/DecimalPipe\"><code>DecimalPipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把數字轉換成帶小數點的字串，根據語言環境中的規則進行格式化。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms a number into a string with a decimal point, formatted according to locale rules.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/PercentPipe\"><code>PercentPipe</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把數字轉換成百分比字串，根據語言環境中的規則進行格式化。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms a number to a percentage string, formatted according to locale rules.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<ul>\n<li>\n<p translation-result=\"on\">關於內建管道的完整列表，請參閱<a href=\"api/common#pipes\" title=\"管道 API 參考總結\">管道 API 文件</a>。</p><p translation-origin=\"off\">For a complete list of built-in pipes, see the <a href=\"api/common#pipes\" title=\"Pipes API reference summary\">pipes API documentation</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要了解關於使用管道進行國際化（i18n）工作的更多資訊，請參閱<a href=\"guide/i18n-common-format-data-locale\" title=\"Format data based on locale | Angular\">根據語言環境格式化資料</a>。</p><p translation-origin=\"off\">To learn more about using pipes for internationalization (i18n) efforts, see <a href=\"guide/i18n-common-format-data-locale\" title=\"Format data based on locale | Angular\">formatting data based on locale</a>.</p>\n\n</li>\n</ul>\n</div>\n<p translation-result=\"on\">你還可以建立管道來封裝自訂轉換，並在範本表示式中使用自訂管道。</p><p translation-origin=\"off\">Create pipes to encapsulate custom transformations and use your custom pipes in template expressions.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提條件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想使用管道，你應該對這些內容有基本的瞭解：</p><p translation-origin=\"off\">To use pipes you should have a basic understanding of the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#typescript\" title=\"Typescript 的定義\">Typescript</a> 和 HTML5 程式設計</p><p translation-origin=\"off\"><a href=\"guide/glossary#typescript\" title=\"Definition of Typescript\">Typescript</a> and HTML5 programming</p>\n\n</li>\n<li>\n<p translation-result=\"on\">帶有 CSS 樣式的 HTML <a href=\"guide/glossary#template\" title=\"範本的定義\">範本</a></p><p translation-origin=\"off\"><a href=\"guide/glossary#template\" title=\"Definition of a template\">Templates</a> in HTML with CSS styles</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/glossary#component\" title=\"元件的定義\">元件</a></p><p translation-origin=\"off\"><a href=\"guide/glossary#component\" title=\"Definition of a component\">Components</a></p>\n\n</li>\n</ul>\n<h2 id=\"using-a-pipe-in-a-template\" translation-result=\"on\">在範本中使用管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-a-pipe-in-a-template\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Using a pipe in a template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-a-pipe-in-a-template\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要應用管道，請如下所示在範本表示式中使用管道運運算元（<code>|</code>），緊接著是該管道的<em>名字</em>，對於內建的 <a href=\"api/common/DatePipe\"><code>DatePipe</code></a> 它的名字是 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>。這個例子中的顯示如下：</p><p translation-origin=\"off\">To apply a pipe, use the pipe (<code>|</code>) character within a template expression as shown in the following code example, along with the <em>name</em> of the pipe, which is <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> for the built-in <a href=\"api/common/DatePipe\"><code>DatePipe</code></a>.\nThe tabs in the example show the following:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>app.component.html</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在另一個單獨的範本中使用 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 來顯示生日。</nt-wrapper><nt-wrapper translation-origin=\"off\">Uses <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> in a separate template to display a birthday.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>hero-birthday1.component.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用相同的管道作為元件內嵌範本的一部分，同時該元件也會設定生日值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Uses the same pipe as part of an in-line template in a component that also sets the birthday value.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html\" region=\"hero-birthday-template\" path=\"pipes/src/app/app.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&lt;/p&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/hero-birthday1.component.ts\" path=\"pipes/src/app/hero-birthday1.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-birthday',\n  template: \"&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&lt;/p&gt;\"\n})\nexport class HeroBirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">該元件的 <code>birthday</code> 值透過管道運運算元（|）流向 <a href=\"api/common/DatePipe\"><code>date</code></a> 函式。</p><p translation-origin=\"off\">The component's <code>birthday</code> value flows through the pipe operator, <code>|</code> to the <a href=\"api/common/DatePipe\"><code>date</code></a> function.</p>\n\n<p><a id=\"parameterizing-a-pipe\"></a></p>\n<h2 id=\"transforming-data-with-parameters-and-chained-pipes\" translation-result=\"on\">使用引數和管道鏈來格式化資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Transforming data with parameters and chained pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#transforming-data-with-parameters-and-chained-pipes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可以用可選引數微調管道的輸出。比如，你可以使用 <a href=\"api/common/CurrencyPipe\" title=\"API 參考\"><code>CurrencyPipe</code></a> 和國家程式碼（如 EUR）作為引數。範本表示式 <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> 會把 <code>amount</code> 轉換成歐元。緊跟在管道名稱（<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>）後面的是冒號（<code>:</code>）和引數值（<code>'EUR'</code>）。</p><p translation-origin=\"off\">Use optional parameters to fine-tune a pipe's output.\nFor example, use the <a href=\"api/common/CurrencyPipe\" title=\"API reference\"><code>CurrencyPipe</code></a> with a country code such as EUR as a parameter.\nThe template expression <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> transforms the <code>amount</code> to currency in euros.\nFollow the pipe name (<code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code>) with a colon (<code>:</code>) character and the parameter value (<code>'EUR'</code>).</p>\n\n<p translation-result=\"on\">如果管道能接受多個引數，就用冒號分隔這些值。比如，<code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> 會把第二個引數（字串 <code>'Euros '</code>）新增到輸出字串中。你可以使用任何有效的範本表示式作為引數，比如字串字面量或元件的屬性。</p><p translation-origin=\"off\">If the pipe accepts multiple parameters, separate the values with colons.\nFor example, <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> adds the second parameter, the string literal <code>'Euros '</code>, to the output string.\nUse any valid template expression as a parameter, such as a string literal or a component property.</p>\n\n<p translation-result=\"on\">有些管道需要至少一個引數，並且允許使用更多的可選引數，比如 <a href=\"api/common/SlicePipe\" title=\"SlicePipe 的 API 參考\"><code>SlicePipe</code></a>。比如，<code>{{ slice:1:5 }}</code> 會建立一個新陣列或字串，它以第 <code>1</code> 個元素開頭，並以第 <code>5</code> 個元素結尾。</p><p translation-origin=\"off\">Some pipes require at least one parameter and allow more optional parameters, such as <a href=\"api/common/SlicePipe\" title=\"API reference for SlicePipe\"><code>SlicePipe</code></a>.\nFor example, <code>{{ slice:1:5 }}</code> creates a new array or string containing a subset of the elements starting with element <code>1</code> and ending with element <code>5</code>.</p>\n\n<h3 id=\"example-formatting-a-date\" translation-result=\"on\">範例：格式化日期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Example: Formatting a date<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-formatting-a-date\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下面的例子顯示了兩種不同格式（<code>'shortDate'</code> 和 <code>'fullDate'</code>）之間的切換：</p><p translation-origin=\"off\">The tabs in the following example demonstrates toggling between two different formats (<code>'shortDate'</code> and <code>'fullDate'</code>):</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">該 <code>app.component.html</code> 範本使用 <a href=\"api/common/DatePipe\"><code>DatePipe</code></a>（名為 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>）的格式引數把日期顯示為 <strong>04/15/88</strong>。</p><p translation-origin=\"off\">The <code>app.component.html</code> template uses a format parameter for the <a href=\"api/common/DatePipe\"><code>DatePipe</code></a> (named <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>) to show the date as <strong>04/15/88</strong>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>hero-birthday2.component.ts</code> 元件把該管道的 format 引數繫結到 <code>template</code> 中元件的 <code>format</code> 屬性，並添加了一個按鈕，其 click 事件繫結到了該元件的 <code>toggleFormat()</code> 方法。</p><p translation-origin=\"off\">The <code>hero-birthday2.component.ts</code> component binds the pipe's format parameter to the component's <code>format</code> property in the <code>template</code> section, and adds a button for a click event bound to the component's <code>toggleFormat()</code> method.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>hero-birthday2.component.ts</code> 元件的 <code>toggleFormat()</code> 方法會在短格式（<code>'shortDate'</code>）和長格式（<code>'fullDate'</code>）之間切換該元件的 <code>format</code> 屬性。</p><p translation-origin=\"off\">The <code>hero-birthday2.component.ts</code> component's <code>toggleFormat()</code> method toggles the component's <code>format</code> property between a short form (<code>'shortDate'</code>) and a longer form (<code>'fullDate'</code>).</p>\n\n</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html\" region=\"format-birthday\" path=\"pipes/src/app/app.component.html\">\n&lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"MM/dd/yy\" }} &lt;/p&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/hero-birthday2.component.ts (template)\" region=\"template\" path=\"pipes/src/app/hero-birthday2.component.ts\">\ntemplate: `\n  &lt;p&gt;The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }}&lt;/p&gt;\n  &lt;button type=\"button\" (click)=\"toggleFormat()\"&gt;Toggle Format&lt;/button&gt;\n`\n\n</code-pane>\n    <code-pane header=\"src/app/hero-birthday2.component.ts (class)\" region=\"class\" path=\"pipes/src/app/hero-birthday2.component.ts\">\nexport class HeroBirthday2Component {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n  toggle = true; // start with true == shortDate\n\n  get format()   { return this.toggle ? 'shortDate' : 'fullDate'; }\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">點選 <strong>Toggle Format</strong> 按鈕可以在 <strong>04/15/1988</strong> 和 <strong>Friday, April 15, 1988</strong> 之間切換日期格式。</p><p translation-origin=\"off\">Clicking the <strong>Toggle Format</strong> button alternates the date format between <strong>04/15/1988</strong> and <strong>Friday, April 15, 1988</strong>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">關於 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 管道的格式選項，參閱 <a href=\"api/common/DatePipe\" title=\"DatePipe API 參考手冊頁面\">DatePipe</a>。</p><p translation-origin=\"off\">For <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> pipe format options, see <a href=\"api/common/DatePipe\" title=\"DatePipe API Reference page\">DatePipe</a>.</p>\n\n</div>\n<h3 id=\"example-applying-two-formats-by-chaining-pipes\" translation-result=\"on\">範例：透過串聯管道應用兩種格式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-applying-two-formats-by-chaining-pipes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Example: Applying two formats by chaining pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-applying-two-formats-by-chaining-pipes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以對管道進行串聯，以便一個管道的輸出成為下一個管道的輸入。</p><p translation-origin=\"off\">Chain pipes so that the output of one pipe becomes the input to the next.</p>\n\n<p translation-result=\"on\">在下面的範例中，串聯管道首先將格式應用於一個日期值，然後將格式化之後的日期轉換為大寫字元。<code>src/app/app.component.html</code> 範本的第一個標籤頁把 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> 和 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code> 的串聯起來，將其顯示為 <strong>APR 15, 1988</strong>。<code>src/app/app.component.html</code> 範本的第二個標籤頁在串聯 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 之前，還把 <code>fullDate</code> 引數傳給了 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code>，將其顯示為 <strong>FRIDAY, APRIL 15, 1988</strong>。</p><p translation-origin=\"off\">In the following example, chained pipes first apply a format to a date value, then convert the formatted date to uppercase characters.\nThe first tab for the <code>src/app/app.component.html</code> template chains <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code> and <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code> to display the birthday as <strong>APR 15, 1988</strong>.\nThe second tab for the <code>src/app/app.component.html</code> template passes the <code>fullDate</code> parameter to <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> before chaining to <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code>, which produces <strong>FRIDAY, APRIL 15, 1988</strong>.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html (1)\" region=\"chained-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html (2)\" region=\"chained-parameter-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{  birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n\n</code-pane>\n</code-tabs>\n<p><a id=\"Custom-pipes\"></a></p>\n<h2 id=\"creating-pipes-for-custom-data-transformations\" translation-result=\"on\">為自訂資料轉換建立管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Creating pipes for custom data transformations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#creating-pipes-for-custom-data-transformations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">建立自訂管道來封裝那些內建管道沒有提供的轉換。然後就可以在範本表示式中使用自訂管道了，像內建管道一樣，把輸入值轉換成顯示輸出。</p><p translation-origin=\"off\">Create custom pipes to encapsulate transformations that are not provided with the built-in pipes.\nThen, use your custom pipe in template expressions, the same way you use built-in pipes —to transform input values to output values for display.</p>\n\n<h3 id=\"marking-a-class-as-a-pipe\" translation-result=\"on\">把一個類別標記為一個管道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Marking a class as a pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#marking-a-class-as-a-pipe\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要把類標記為管道並提供配置元資料，請把 <a href=\"api/core/Pipe\" title=\"Pipe 的 API 參考\"><code>@Pipe</code></a> <a href=\"guide/glossary#decorator--decoration\" title=\"裝飾器的定義\">裝飾器</a>應用到這個類上。管道類別名稱是 <a href=\"guide/glossary#case-types\" title=\"案例型別的定義\">UpperCamelCase</a>（類別名稱的一般約定），相應的 <code>name</code> 字串是 <a href=\"guide/glossary#case-types\" title=\"案例型別的定義\">camelCase</a> 的。不要在 <code>name</code> 中使用連字元。詳細資訊和更多範例，請參閱<a href=\"guide/styleguide#pipe-names\" title=\"Angular 編碼風格指南中的管道名稱\">管道名稱</a>。</p><p translation-origin=\"off\">To mark a class as a pipe and supply configuration metadata, apply the <a href=\"api/core/Pipe\" title=\"API reference for Pipe\"><code>@Pipe</code></a> <a href=\"guide/glossary#decorator--decoration\" title=\"Definition for decorator\">decorator</a> to the class.\nUse <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">UpperCamelCase</a> (the general convention for class names) for the pipe class name, and <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">camelCase</a> for the corresponding <code>name</code> string.\nDo not use hyphens in the <code>name</code>.\nFor details and more examples, see <a href=\"guide/styleguide#pipe-names\" title=\"Pipe names in the Angular coding style guide\">Pipe names</a>.</p>\n\n<p translation-result=\"on\">在範本表示式中使用 <code>name</code> 就像在內建管道中一樣。</p><p translation-origin=\"off\">Use <code>name</code> in template expressions as you would for a built-in pipe.</p>\n\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p translation-result=\"on\">把你的管道包含在 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料的 <code>declarations</code> 欄位中，以便它能用於範本。請檢視範例應用中的 <code>app.module.ts</code> 檔案（<live-example></live-example>）。有關詳細資訊，請參閱 <a href=\"guide/ngmodules\" title=\"NgModules 簡介\">NgModules</a>。</p><p translation-origin=\"off\">Include your pipe in the <code>declarations</code> field of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata in order for it to be available to a template.\nSee the <code>app.module.ts</code> file in the example application (<live-example></live-example>).\nFor details, see <a href=\"guide/ngmodules\" title=\"NgModules introduction\">NgModules</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">註冊自訂管道。<a href=\"cli\" title=\"CLI 概述和命令參考\">Angular CLI</a> 的 <a href=\"cli/generate#pipe\" title=\"ng 在 CLI Command Reference 中產生管道\"><code>ng generate pipe</code></a> 命令會自動註冊該管道。</p><p translation-origin=\"off\">Register your custom pipes.\nThe <a href=\"cli\" title=\"CLI Overview and Command Reference\">Angular CLI</a> <a href=\"cli/generate#pipe\" title=\"ng generate pipe in the CLI Command Reference\"><code>ng generate pipe</code></a> command registers the pipe automatically.</p>\n\n</li>\n</ul>\n</div>\n<h3 id=\"using-the-pipetransform-interface\" translation-result=\"on\">使用 PipeTransform 介面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Using the PipeTransform interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#using-the-pipetransform-interface\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在自訂管道類中實現 <a href=\"api/core/PipeTransform\" title=\"PipeTransform 的 API 參考\"><code>PipeTransform</code></a> 介面來執行轉換。</p><p translation-origin=\"off\">Implement the <a href=\"api/core/PipeTransform\" title=\"API reference for PipeTransform\"><code>PipeTransform</code></a> interface in your custom pipe class to perform the transformation.</p>\n\n<p translation-result=\"on\">Angular 呼叫 <code>transform</code> 方法，該方法使用繫結的值作為第一個引數，把其它任何引數都以列表的形式作為第二個引數，並返回轉換後的值。</p><p translation-origin=\"off\">Angular invokes the <code>transform</code> method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.</p>\n\n<h3 id=\"example-transforming-a-value-exponentially\" translation-result=\"on\">範例：指數級轉換<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Example: Transforming a value exponentially<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#example-transforming-a-value-exponentially\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在遊戲中，可能希望實現一種指數級轉換，以指數級增加英雄的力量。比如，如果英雄的得分是 2，那麼英雄的能量會指數級增長 10 次，最終得分為 1024。你可以使用自訂管道進行這種轉換。</p><p translation-origin=\"off\">In a game, you might want to implement a transformation that raises a value exponentially to increase a hero's power.\nFor example, if the hero's score is 2, boosting the hero's power exponentially by 10 produces a score of 1024.\nUse a custom pipe for this transformation.</p>\n\n<p translation-result=\"on\">下列程式碼範例顯示了兩個元件定義：</p><p translation-origin=\"off\">The following code example shows two component definitions:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>exponential-strength.pipe.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">透過一個執行轉換的 <code>transform</code> 方法定義了一個名為 <code>exponentialStrength</code> 的自訂管道。它為傳給管道的引數定義了 <code>transform</code> 方法的一個引數（<code>exponent</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines a custom pipe named <code>exponentialStrength</code> with the <code>transform</code> method that performs the transformation. It defines an argument to the <code>transform</code> method (<code>exponent</code>) for a parameter passed to the pipe.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>power-booster.component.ts</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">示範瞭如何使用該管道，指定了一個值（<code>2</code>）和一個 exponent 引數（<code>10</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Demonstrates how to use the pipe, specifying a value (<code>2</code>) and the exponent parameter (<code>10</code>).</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 | exponentialStrength:10 }}\n *   formats to: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'exponentialStrength'})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent = 1): number {\n    return Math.pow(value, exponent);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-power-booster',\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<!--todo: replace with screen capture -->\n<p translation-result=\"on\">瀏覽器顯示如下：</p><p translation-origin=\"off\">The browser displays the following:</p>\n\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nPower Booster\n\nSuperpower boost: 1024\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢查 <code>exponentialStrength</code> 管道的行為，請檢視<live-example></live-example>，並在範本中修改值和可選的指數引數。</p><p translation-origin=\"off\">To examine the behavior the <code>exponentialStrength</code> pipe in the <live-example></live-example>, change the value and optional exponent in the template.</p>\n\n</div>\n<p><a id=\"change-detection\"></a></p>\n<h2 id=\"detecting-changes-with-data-binding-in-pipes\" translation-result=\"on\">透過管道中的資料繫結來檢測變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-changes-with-data-binding-in-pipes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Detecting changes with data binding in pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-changes-with-data-binding-in-pipes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以透過帶有管道的<a href=\"guide/glossary#data-binding\" title=\"資料繫結的定義\">資料繫結</a>來顯示值並響應使用者操作。如果是原始型別的輸入值，比如 <code>String</code> 或 <code>Number</code>，或者是物件參考型的輸入值，比如 <code>Date</code> 或 <code>Array</code>，那麼每當 Angular 檢測到輸入值或參考有變化時，就會執行該輸入管道。</p><p translation-origin=\"off\">You use <a href=\"guide/glossary#data-binding\" title=\"Definition of data binding\">data binding</a> with a  pipe to display values and respond to user actions.\nIf the data is a primitive input value, such as <code>String</code> or <code>Number</code>, or an object reference as input, such as <code>Date</code> or <code>Array</code>, Angular executes the pipe whenever it detects a change for the input value or reference.</p>\n\n<p translation-result=\"on\">比如，你可以修改前面的自訂管道範例，透過 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的雙向繫結來輸入數量和提升因子，如下面的程式碼範例所示。</p><p translation-origin=\"off\">For example, you could change the previous custom pipe example to use two-way data binding with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> to input the amount and boost factor, as shown in the following code example.</p>\n\n<code-example header=\"src/app/power-boost-calculator.component.ts\" path=\"pipes/src/app/power-boost-calculator.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-power-boost-calculator',\n  template: `\n    &lt;h2&gt;Power Boost Calculator&lt;/h2&gt;\n    &lt;label for=\"power-input\"&gt;Normal power: &lt;/label&gt;\n    &lt;input id=\"power-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"power\"&gt;\n    &lt;label for=\"boost-input\"&gt;Boost factor: &lt;/label&gt;\n    &lt;input id=\"boost-input\" type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"factor\"&gt;\n    &lt;p&gt;\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &lt;/p&gt;\n  `,\n  styles: ['input {margin: .5rem 0;}']\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n\n\n</code-example>\n<p translation-result=\"on\">每當使用者改變 “normal power” 值或 “boost factor” 時，就會執行 <code>exponentialStrength</code> 管道。</p><p translation-origin=\"off\">The <code>exponentialStrength</code> pipe executes every time the user changes the \"normal power\" value or the \"boost factor\".</p>\n\n<p translation-result=\"on\">Angular 會檢測每次變更，並立即執行該管道。對於原始輸入值，這很好。但是，如果要在複合物件中更改某些<em>內部值</em>（比如日期中的月份、陣列中的元素或物件中的屬性），就需要了解變更檢測的工作原理，以及如何使用 <code>impure</code>（非純）管道。</p><p translation-origin=\"off\">Angular detects each change and immediately runs the pipe.\nThis is fine for primitive input values.\nHowever, if you change something <em>inside</em> a composite object (such as the month of a date, an element of an array, or an object property), you need to understand how change detection works, and how to use an <code>impure</code> pipe.</p>\n\n<h3 id=\"how-change-detection-works\" translation-result=\"on\">變更檢測的工作原理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#how-change-detection-works\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">How change detection works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#how-change-detection-works\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 會在每次 DOM 事件（每次按鍵、滑鼠移動、計時器滴答和伺服器響應）之後執行的<a href=\"guide/glossary#change-detection\" title=\"變更檢測的定義\">變更檢測</a>過程中查詢對資料繫結值的<a href=\"guide/glossary#change-detection\" title=\"變更檢測的定義\">更改</a>。下面這段不使用管道的例子示範了 Angular 如何利用預設的變更檢測策略來監控和更新 <code>heroes</code> 陣列中每個英雄的顯示效果。範例顯示如下：</p><p translation-origin=\"off\">Angular looks for changes to data-bound values in a <a href=\"guide/glossary#change-detection\" title=\"Definition of change detection\">change detection</a> process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response.\nThe following example, which doesn't use a pipe, demonstrates how Angular uses its default change detection strategy to monitor and update its display of every hero in the <code>heroes</code> array.\nThe example tabs show the following:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">檔案</nt-wrapper><nt-wrapper translation-origin=\"off\">Files</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>flying-heroes.component.html (v1)</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 會重複顯示英雄的名字。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater displays the hero names.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>flying-heroes.component.ts (v1)</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">提供了一些英雄，把這些英雄新增到陣列中，並重置了該陣列。</nt-wrapper><nt-wrapper translation-origin=\"off\">Provides heroes, adds heroes into the array, and resets the array.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (v1)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-1\">\n&lt;label for=\"hero-name\"&gt;New hero name: &lt;/label&gt;\n&lt;input type=\"text\" #box\n       id=\"hero-name\"\n       (keyup.enter)=\"addHero(box.value); box.value=''\"\n       placeholder=\"hero name\"&gt;\n&lt;button type=\"button\" (click)=\"reset()\"&gt;Reset list of heroes&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.component.ts (v1)\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"v1\">\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    const hero = {name, canFly: this.canFly};\n    this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">每次使用者新增一個英雄時，Angular 都會更新顯示內容。如果使用者點選了 <strong>Reset</strong> 按鈕，Angular 就會用原來這些英雄組成的新陣列來替換 <code>heroes</code>，並更新顯示。如果你新增刪除或更改了某個英雄的能力，Angular 也會檢測這些變化並更新顯示。</p><p translation-origin=\"off\">Angular updates the display every time the user adds a hero.\nIf the user clicks the <strong>Reset</strong> button, Angular replaces <code>heroes</code> with a new array of the original heroes and updates the display.\nIf you add the ability to remove or change a hero, Angular would detect those changes and update the display as well.</p>\n\n<p translation-result=\"on\">然而，如果對於每次更改都執行一個管道來更新顯示，就會降低你應用的效能。因此，Angular 會使用更快的變更檢測演算法來執行管道，如下一節所述。</p><p translation-origin=\"off\">However, executing a pipe to update the display with every change would slow down your application's performance.\nSo Angular uses a faster change-detection algorithm for executing a pipe, as described in the next section.</p>\n\n<p><a id=\"pure-and-impure-pipes\"></a></p>\n<h3 id=\"detecting-pure-changes-to-primitives-and-object-references\" translation-result=\"on\">檢測原始型別和物件參考的純變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-pure-changes-to-primitives-and-object-references\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Detecting pure changes to primitives and object references<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-pure-changes-to-primitives-and-object-references\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過預設情況下，管道會定義成<em>純的（pure）</em>，這樣 Angular 只有在檢測到輸入值發生了<em>純變更</em>時才會執行該管道。純變更是對原始輸入值（比如 <code>String</code>、<code>Number</code>、<code>Boolean</code> 或 <code>Symbol</code>）的變更，或是對物件參考的變更（比如 <code>Date</code>、<code>Array</code>、<code>Function</code>、<code>Object</code>）。</p><p translation-origin=\"off\">By default, pipes are defined as <em>pure</em> so that Angular executes the pipe only when it detects a <em>pure change</em> to the input value.\nA pure change is either a change to a primitive input value (such as <code>String</code>, <code>Number</code>, <code>Boolean</code>, or <code>Symbol</code>), or a changed object reference (such as <code>Date</code>, <code>Array</code>, <code>Function</code>, or <code>Object</code>).</p>\n\n<p><a id=\"pure-pipe-pure-fn\"></a></p>\n<p translation-result=\"on\">純管道必須使用純函式，它能處理輸入並返回沒有副作用的值。換句話說，給定相同的輸入，純函式應該總是返回相同的輸出。</p><p translation-origin=\"off\">A pure pipe must use a pure function, which is one that processes inputs and returns values without side effects.\nIn other words, given the same input, a pure function should always return the same output.</p>\n\n<p translation-result=\"on\">使用純管道，Angular 會忽略複合物件中的變化，比如往現有陣列中新增的元素，因為檢查原始值或物件參考比對物件中的差異進行深度檢查要快得多。Angular 可以快速判斷是否可以跳過執行該管道並更新檢視。</p><p translation-origin=\"off\">With a pure pipe, Angular ignores changes within composite objects, such as a newly added element of an existing array, because checking a primitive value or object reference is much faster than performing a deep check for differences within objects.\nAngular can quickly determine if it can skip executing the pipe and updating the view.</p>\n\n<p translation-result=\"on\">但是，以陣列作為輸入的純管道可能無法正常工作。為了示範這個問題，修改前面的例子來把英雄列表過濾成那些會飛的英雄。在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 中使用 <code>FlyingHeroesPipe</code>，程式碼如下。這個例子的顯示如下：</p><p translation-origin=\"off\">However, a pure pipe with an array as input might not work the way you want.\nTo demonstrate this issue, change the previous example to filter the list of heroes to just those heroes who can fly.\nUse the <code>FlyingHeroesPipe</code> in the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater as shown in the following code.\nThe tabs for the example show the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">帶有新管道的範本（<code>flying-heroes.component.html (flyers)</code>）</p><p translation-origin=\"off\">The template (<code>flying-heroes.component.html (flyers)</code>) with the new pipe</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>FlyingHeroesPipe</code> 自訂管道實現（<code>flying-heroes.pipe.ts</code>）</p><p translation-origin=\"off\">The <code>FlyingHeroesPipe</code> custom pipe implementation (<code>flying-heroes.pipe.ts</code>)</p>\n\n</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.component.html (flyers)\" path=\"pipes/src/app/flying-heroes.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroes)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">該應用現在展示了意想不到的行為：當用戶添加了會飛的英雄時，它們都不會出現在 “Heroes who fly” 中。發生這種情況是因為新增英雄的程式碼會把它 push 到 <code>heroes</code> 陣列中：</p><p translation-origin=\"off\">The application now shows unexpected behavior: When the user adds flying heroes, none of them appear under \"Heroes who fly.\"\nThis happens because the code that adds a hero does so by pushing it onto the <code>heroes</code> array:</p>\n\n<code-example header=\"src/app/flying-heroes.component.ts\" path=\"pipes/src/app/flying-heroes.component.ts\" region=\"push\">\nthis.heroes.push(hero);\n\n</code-example>\n<p translation-result=\"on\">而變更檢測器會忽略對陣列元素的更改，所以管道不會執行。</p><p translation-origin=\"off\">The change detector ignores changes to elements of an array, so the pipe doesn't run.</p>\n\n<p translation-result=\"on\">Angular 忽略了被改變的陣列元素的原因是對陣列的<em>參考</em>沒有改變。由於 Angular 認為該陣列仍是相同的，所以不會更新其顯示。</p><p translation-origin=\"off\">The reason Angular ignores the changed array element is that the <em>reference</em> to the array hasn't changed.\nBecause the array is the same, Angular does not update the display.</p>\n\n<p translation-result=\"on\">獲得所需行為的方法之一是更改物件參考本身。可以用一個包含新更改過的元素的新陣列替換該陣列，然後把這個新陣列作為輸入傳給管道。在上面的例子中，你可以建立一個附加了新英雄的陣列，並把它賦值給 <code>heroes</code>。Angular 檢測到了這個陣列參考的變化，並執行了該管道。</p><p translation-origin=\"off\">One way to get the behavior you want is to change the object reference itself.\nReplace the array with a new array containing the newly changed elements, and then input the new array to the pipe.\nIn the preceding example, create an array with the new hero appended, and assign that to <code>heroes</code>.\nAngular detects the change in the array reference and executes the pipe.</p>\n\n<p translation-result=\"on\">總結一下，如果修改了輸入陣列，純管道就不會執行。如果<em>替換</em>了輸入陣列，就會執行該管道並更新顯示。</p><p translation-origin=\"off\">To summarize, if you mutate the input array, the pure pipe doesn't execute.\nIf you <em>replace</em> the input array, the pipe executes and the display is updated.</p>\n\n<p translation-result=\"on\">上述例子示範瞭如何更改元件的程式碼來適應某個管道。</p><p translation-origin=\"off\">The preceding example demonstrates changing a component's code to accommodate a pipe.</p>\n\n<p translation-result=\"on\">為了讓你的元件更簡單，獨立於那些使用管道的 HTML，你可以用一個<em>不純的</em>管道來檢測複合物件（如陣列）中的變化，如下一節所述。</p><p translation-origin=\"off\">To keep your component independent of HTML templates that use pipes, you can, as an alternative, use an <em>impure</em> pipe to detect changes within composite objects such as arrays, as described in the next section.</p>\n\n<p><a id=\"impure-flying-heroes\"></a></p>\n<h3 id=\"detecting-impure-changes-within-composite-objects\" translation-result=\"on\">檢測複合物件中的非純變更<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-impure-changes-within-composite-objects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Detecting impure changes within composite objects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#detecting-impure-changes-within-composite-objects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要在複合物件<em>內部</em>進行更改後執行自訂管道（比如更改陣列元素），就需要把管道定義為 <code>impure</code> 以檢測非純的變更。每當按鍵或滑鼠移動時，Angular 都會檢測到一次變更，從而執行一個非純管道。</p><p translation-origin=\"off\">To execute a custom pipe after a change <em>within</em> a composite object, such as a change to an element of an array, you need to define your pipe as <code>impure</code> to detect impure changes.\nAngular executes an impure pipe every time it detects a change with every keystroke or mouse movement.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">雖然非純管道很實用，但要小心使用。長時間執行非純管道可能會大大降低你的應用速度。</p><p translation-origin=\"off\">While an impure pipe can be useful, be careful using one.\nA long-running impure pipe could dramatically slow down your application.</p>\n\n</div>\n<p translation-result=\"on\">透過把 <code>pure</code> 標誌設定為 <code>false</code> 來把管道設定成非純的：</p><p translation-origin=\"off\">Make a pipe impure by setting its <code>pure</code> flag to <code>false</code>:</p>\n\n<code-example header=\"src/app/flying-heroes.pipe.ts\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pipe-decorator\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\n\n</code-example>\n<p translation-result=\"on\">下面的程式碼顯示了 <code>FlyingHeroesImpurePipe</code> 的完整實現，它擴充了 <code>FlyingHeroesPipe</code> 以繼承其特性。這個例子表明你不需要修改其他任何東西 - 唯一的區別就是在管道元資料中把 <code>pure</code> 標誌設定為 <code>false</code>。</p><p translation-origin=\"off\">The following code shows the complete implementation of <code>FlyingHeroesImpurePipe</code>, which extends <code>FlyingHeroesPipe</code> to inherit its characteristics.\nThe example shows that you don't have to change anything else—the only difference is setting the <code>pure</code> flag as <code>false</code> in the pipe metadata.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesImpurePipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"impure\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe {}\n\n</code-pane>\n    <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesPipe)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pure\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Hero } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Hero[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">對於非純管道，<code>FlyingHeroesImpurePipe</code> 是個不錯的選擇，因為它的 <code>transform</code> 函式非常簡單快捷：</p><p translation-origin=\"off\"><code>FlyingHeroesImpurePipe</code> is a good candidate for an impure pipe because the <code>transform</code> function is trivial and fast:</p>\n\n<code-example header=\"src/app/flying-heroes.pipe.ts (filter)\" path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"filter\">\nreturn allHeroes.filter(hero =&gt; hero.canFly);\n\n</code-example>\n<p translation-result=\"on\">你可以從 <code>FlyingHeroesComponent</code> 派生一個 <code>FlyingHeroesImpureComponent</code>。如下面的程式碼所示，只有範本中的管道發生了變化。</p><p translation-origin=\"off\">You can derive a <code>FlyingHeroesImpureComponent</code> from <code>FlyingHeroesComponent</code>.\nAs shown in the following code, only the pipe in the template changes.</p>\n\n<code-example header=\"src/app/flying-heroes-impure.component.html (excerpt)\" path=\"pipes/src/app/flying-heroes-impure.component.html\" region=\"template-flying-heroes\">\n&lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroesImpure)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要想確認是否在使用者新增英雄時更新了顯示，請參閱<live-example></live-example>。</p><p translation-origin=\"off\">To confirm that the display updates as the user adds heroes, see the <live-example></live-example>.</p>\n\n</div>\n<p><a id=\"async-pipe\"></a></p>\n<h2 id=\"unwrapping-data-from-an-observable\" translation-result=\"on\">從一個可觀察物件中解開封裝資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#unwrapping-data-from-an-observable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Unwrapping data from an observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#unwrapping-data-from-an-observable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"guide/glossary#observable\" title=\"可觀察物件的定義\">可觀察物件</a>能讓你在應用的各個部分之間傳遞訊息。建議在事件處理、非同步程式設計以及處理多個值時使用這些可觀察物件。可觀察物件可以提供任意類別型的單個或多個值，可以是同步的（作為一個函式為它的呼叫者提供一個值），也可以是非同步的。</p><p translation-origin=\"off\"><a href=\"guide/glossary#observable\" title=\"Definition of observable\">Observables</a> let you pass messages between parts of your application.\nObservables are recommended for event handling, asynchronous programming, and handling multiple values.\nObservables can deliver single or multiple values of any type, either synchronously (as a function delivers a value to its caller) or asynchronously on a schedule.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">關於可觀察物件的詳細資訊和範例，請參閱<a href=\"guide/observables#using-observables-to-pass-values\" title=\"使用可觀察物件傳遞值“\">可觀察物件概覽</a>。</p><p translation-origin=\"off\">For details and examples of observables, see the <a href=\"guide/observables#using-observables-to-pass-values\" title=\"Using observables to pass values\">Observables Overview</a>.</p>\n\n</div>\n<p translation-result=\"on\">使用內建的 <a href=\"api/common/AsyncPipe\" title=\"AsyncPipe 的 API 描述\"><code>AsyncPipe</code></a> 接受一個可觀察物件作為輸入，並自動訂閱輸入。如果沒有這個管道，你的元件程式碼就必須訂閱這個可觀察物件來使用它的值，提取已解析的值、把它們公開進行繫結，並在銷燬這段可觀察物件時取消訂閱，以防止記憶體洩漏。<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 是一個非純管道，可以節省元件中的樣板程式碼，以維護訂閱，並在資料到達時持續從該可觀察物件中提供值。</p><p translation-origin=\"off\">Use the built-in <a href=\"api/common/AsyncPipe\" title=\"API description of AsyncPipe\"><code>AsyncPipe</code></a> to accept an observable as input and subscribe to the input automatically.\nWithout this pipe, your component code would have to subscribe to the observable to consume its values, extract the resolved values, expose them for binding, and unsubscribe when the observable is destroyed in order to prevent memory leaks.\n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> is an impure pipe that saves boilerplate code in your component to maintain the subscription and keep delivering values from that observable as they arrive.</p>\n\n<p translation-result=\"on\">下列程式碼範例使用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道將帶有訊息字串（<code>message$</code>）的可觀察物件繫結到檢視中。</p><p translation-origin=\"off\">The following code example binds an observable of message strings\n(<code>message$</code>) to a view with the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe.</p>\n\n<code-example header=\"src/app/hero-async-message.component.ts\" path=\"pipes/src/app/hero-async-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Observable, interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-async-message',\n  template: `\n    &lt;h2&gt;Async Hero Message and <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>&lt;/h2&gt;\n    &lt;p&gt;Message: {{ message$ | async }}&lt;/p&gt;\n    &lt;button type=\"button\" (click)=\"resend()\"&gt;Resend&lt;/button&gt;`,\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&lt;string&gt;;\n\n  private messages = [\n    'You are my hero!',\n    'You are the best hero!',\n    'Will you be my hero?'\n  ];\n\n  constructor() {\n    this.message$ = this.getResendObservable();\n  }\n\n  resend() {\n    this.message$ = this.getResendObservable();\n  }\n\n  private getResendObservable() {\n    return interval(500).pipe(\n      map(i =&gt; this.messages[i]),\n      take(this.messages.length)\n    );\n  }\n}\n\n</code-example>\n<p><a id=\"no-filter-pipe\"></a></p>\n<h2 id=\"caching-http-requests\" translation-result=\"on\">快取 HTTP 請求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#caching-http-requests\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Caching HTTP requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#caching-http-requests\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">為了<a href=\"guide/http\" title=\"使用 HTTP 與後端服務進行通訊\">使用 HTTP 與後端服務進行通訊</a>，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服務使用了可觀察物件，並提供了 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法來從伺服器獲取資料。這個非同步方法會發送一個 HTTP 請求，並返回一個可觀察物件，它會發出請求到的響應資料。</p><p translation-origin=\"off\">To <a href=\"guide/http\" title=\"Communicating with backend services using HTTP\">communicate with backend services using HTTP</a>, the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service uses observables and offers the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method to fetch data from a server.\nThe asynchronous method sends an HTTP request, and returns an observable that emits the requested data for the response.</p>\n\n<p translation-result=\"on\">如 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 所示，你可以使用非純管道 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 接受一個可觀察物件作為輸入，並自動訂閱輸入。你也可以建立一個非純管道來建立和快取 HTTP 請求。</p><p translation-origin=\"off\">As shown in the previous section, use the impure <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> to accept an observable as input and subscribe to the input automatically.\nYou can also create an impure pipe to make and cache an HTTP request.</p>\n\n<p translation-result=\"on\">每當元件執行變更檢測時就會呼叫非純管道，這可能每隔幾毫秒就執行一次。為避免出現效能問題，只有當請求的 URL 發生變化時才會呼叫該伺服器（如下例所示），並使用該管道快取伺服器的響應。顯示如下：</p><p translation-origin=\"off\">Impure pipes are called whenever change detection runs for a component, which could be as often as every few milliseconds.\nTo avoid performance problems, call the server only when the requested URL changes, as shown in the following example, and use the pipe to cache the server response.\nThe tabs show the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>fetch</code> 管道（<code>fetch-json.pipe.ts</code>）。</p><p translation-origin=\"off\">The <code>fetch</code> pipe (<code>fetch-json.pipe.ts</code>).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">一個用於示範該請求的挽具元件（<code>hero-list.component.ts</code>），它使用一個範本，該範本定義了兩個到該管道的繫結，該管道會向 <code>heroes.json</code> 檔案請求英雄陣列。第二個繫結把 <code>fetch</code> 管道與內建的 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> 串聯起來，以 JSON 格式顯示同一份英雄資料。</p><p translation-origin=\"off\">A harness component (<code>hero-list.component.ts</code>) for demonstrating the request, using a template that defines two bindings to the pipe requesting the heroes from the <code>heroes.json</code> file.\nThe second binding chains the <code>fetch</code> pipe with the built-in <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code> to display the same hero data in JSON format.</p>\n\n</li>\n</ul>\n<code-tabs>\n    <code-pane header=\"src/app/fetch-json.pipe.ts\" path=\"pipes/src/app/fetch-json.pipe.ts\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'fetch',\n  pure: false\n})\nexport class FetchJsonPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  private cachedData: any = null;\n  private cachedUrl = '';\n\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  transform(url: string): any {\n    if (url !== this.cachedUrl) {\n      this.cachedData = null;\n      this.cachedUrl = url;\n      this.http.get(url).subscribe(result =&gt; this.cachedData = result);\n    }\n\n    return this.cachedData;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-list.component.ts\" path=\"pipes/src/app/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  template: `\n    &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n    &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of ('assets/heroes.json' | fetch) \"&gt;\n      {{hero.name}}\n    &lt;/div&gt;\n\n    &lt;p&gt;Heroes as JSON:\n      {{'assets/heroes.json' | fetch | json}}\n    &lt;/p&gt;`\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">在上面的例子中，管道請求資料時的剖面展示瞭如下幾點：</p><p translation-origin=\"off\">In the preceding example, a breakpoint on the pipe's request for data shows the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">每個繫結都有自己的管道例項。</p><p translation-origin=\"off\">Each binding gets its own pipe instance.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">每個管道例項都會快取自己的 URL 和資料，並且只調用一次伺服器。</p><p translation-origin=\"off\">Each pipe instance caches its own URL and data and calls the server only once.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\"><code>fetch</code> 和 <code>fetch-json</code> 管道會像這樣在瀏覽器中顯示英雄：</p><p translation-origin=\"off\">The <code>fetch</code> and <code>fetch-json</code> pipes display the heroes in the browser as follows:</p>\n\n<code-example format=\"output\" hidecopy=\"\" language=\"none\">\n\nHeroes from JSON File\n\nWindstorm\nBombasto\nMagneto\nTornado\n\nHeroes as JSON: [ { \"name\": \"Windstorm\", \"canFly\": true }, { \"name\": \"Bombasto\", \"canFly\": false }, { \"name\": \"Magneto\", \"canFly\": false }, { \"name\": \"Tornado\", \"canFly\": true } ]\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">內建的 <a href=\"api/common/JsonPipe\" title=\"JsonPipe 的 API 描述\">JsonPipe</a> 提供了一種方法來診斷一個離奇失敗的資料繫結，或用來檢查一個物件是否能用於將來的繫結。</p><p translation-origin=\"off\">The built-in <a href=\"api/common/JsonPipe\" title=\"API description for JsonPipe\">JsonPipe</a> provides a way to diagnose a mysteriously failing data binding or to inspect an object for future binding.</p>\n\n</div>\n<h2 id=\"pipes-and-precedence\" translation-result=\"on\">管道的優先順序<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#pipes-and-precedence\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Pipes and precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#pipes-and-precedence\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">管道運運算元要比三目運算子（<code>?:</code>）的優先順序高，這意味著 <code>a ? b : c | x</code> 會被解析成 <code>a ? b : (c | x)</code>。</p><p translation-origin=\"off\">The pipe operator has a higher precedence than the ternary operator (<code>?:</code>), which means <code>a ? b : c | x</code> is parsed as <code>a ? b : (c | x)</code>.\nThe pipe operator cannot be used without parentheses in the first and second operands of <code>?:</code>.</p>\n\n<p translation-result=\"on\">由於這種優先順序設定，如果你要用管道處理三目元算符的結果，就要把整個表示式包裹在括號中，比如 <code>(a ? b : c) | x</code>。</p><p translation-origin=\"off\">Due to precedence, if you want a pipe to apply to the result of a ternary, wrap the entire expression in parentheses; for example, <code>(a ? b : c) | x</code>.</p>\n\n<code-example header=\"src/app/precedence.component.html\" path=\"pipes/src/app/precedence.component.html\" region=\"precedence\">\n&lt;!-- use parentheses in the third operand so the pipe applies to the whole expression --&gt;\n{{ (true ? 'true' : 'false') | uppercase }}\n\n</code-example>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0302\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/bootstrapping\n - guide/example-apps-list\n - guide/glossary\n - guide/http\n - guide/http-handle-request-errors\n - guide/template-statements\n - guide/testing-pipes\n - start/start-routing\n - tutorial/tour-of-heroes/toh-pt1\n-->\n<!-- links from this doc:\n - api/common#pipes\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgFor\n - api/common/PercentPipe\n - api/common/SlicePipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/NgModel\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#component\n - guide/glossary#data-binding\n - guide/glossary#decorator--decoration\n - guide/glossary#observable\n - guide/glossary#pipe\n - guide/glossary#template\n - guide/glossary#template-expression\n - guide/glossary#typescript\n - guide/http\n - guide/i18n-common-format-data-locale\n - guide/ngmodules\n - guide/observables#using-observables-to-pass-values\n - guide/pipes#caching-http-requests\n - guide/pipes#creating-pipes-for-custom-data-transformations\n - guide/pipes#detecting-changes-with-data-binding-in-pipes\n - guide/pipes#detecting-impure-changes-within-composite-objects\n - guide/pipes#detecting-pure-changes-to-primitives-and-object-references\n - guide/pipes#example-applying-two-formats-by-chaining-pipes\n - guide/pipes#example-formatting-a-date\n - guide/pipes#example-transforming-a-value-exponentially\n - guide/pipes#how-change-detection-works\n - guide/pipes#marking-a-class-as-a-pipe\n - guide/pipes#pipes-and-precedence\n - guide/pipes#prerequisites\n - guide/pipes#transforming-data-using-pipes\n - guide/pipes#transforming-data-with-parameters-and-chained-pipes\n - guide/pipes#unwrapping-data-from-an-observable\n - guide/pipes#using-a-pipe-in-a-template\n - guide/pipes#using-the-pipetransform-interface\n - guide/pipes#為自訂資料轉換建立管道\n - guide/pipes#從一個可觀察物件中解開封裝資料\n - guide/pipes#使用-pipetransform-介面\n - guide/pipes#使用引數和管道鏈來格式化資料\n - guide/pipes#前提條件\n - guide/pipes#變更檢測的工作原理\n - guide/pipes#在範本中使用管道\n - guide/pipes#把一個類別標記為一個管道\n - guide/pipes#檢測原始型別和物件參考的純變更\n - guide/pipes#檢測複合物件中的非純變更\n - guide/pipes#用管道轉換資料\n - guide/pipes#管道的優先順序\n - guide/pipes#快取-http-請求\n - guide/pipes#範例指數級轉換\n - guide/pipes#範例格式化日期\n - guide/pipes#範例透過串聯管道應用兩種格式\n - guide/pipes#透過管道中的資料繫結來檢測變更\n - guide/styleguide#pipe-names\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/pipes.md?message=docs%3A%20請簡述你的修改...\n-->"}