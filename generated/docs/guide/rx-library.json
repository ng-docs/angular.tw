{"id":"guide/rx-library","title":"The RxJS library","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/rx-library.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"the-rxjs-library\" translation-result=\"on\">RxJS 庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#the-rxjs-library\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">The RxJS library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#the-rxjs-library\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">響應式程式設計是一種面向資料流和變更傳播的非同步程式設計正規化（<a href=\"https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B\">Wikipedia</a>）。RxJS（響應式擴充的 JavaScript 版）是一個使用可觀察物件進行響應式程式設計的函式庫，它讓組合非同步程式碼和基於回呼(Callback)的程式碼變得更簡單。參閱 <a href=\"https://rxjs.dev/guide/overview\">RxJS 官方文件</a>。</p><p translation-origin=\"off\">Reactive programming is an asynchronous programming paradigm concerned with data streams and the propagation of change (<a href=\"https://en.wikipedia.org/wiki/Reactive_programming\">Wikipedia</a>).\nRxJS (Reactive Extensions for JavaScript) is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code.\nSee (<a href=\"https://rxjs.dev/guide/overview\">RxJS Docs</a>).</p>\n\n<p translation-result=\"on\">RxJS 提供了一種對 <code>Observable</code> 型別的實現，直到 <code>Observable</code> 成為了 JavaScript 語言的一部分並且瀏覽器支援它之前，它都是必要的。這個庫還提供了一些工具函式，用於建立和使用可觀察物件。這些工具函式可用於：</p><p translation-origin=\"off\">RxJS provides an implementation of the <code>Observable</code> type, which is needed until the type becomes part of the language and until browsers support it.\nThe library also provides utility functions for creating and working with observables.\nThese utility functions can be used for:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">把現有的非同步程式碼轉換成可觀察物件</p><p translation-origin=\"off\">Converting existing code for async operations into observables</p>\n\n</li>\n<li>\n<p translation-result=\"on\">迭代流中的各個值</p><p translation-origin=\"off\">Iterating through the values in a stream</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把這些值對映成其它型別</p><p translation-origin=\"off\">Mapping values to different types</p>\n\n</li>\n<li>\n<p translation-result=\"on\">對流進行過濾</p><p translation-origin=\"off\">Filtering streams</p>\n\n</li>\n<li>\n<p translation-result=\"on\">組合多個流</p><p translation-origin=\"off\">Composing multiple streams</p>\n\n</li>\n</ul>\n<h2 id=\"observable-creation-functions\" translation-result=\"on\">建立可觀察物件的函式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#observable-creation-functions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Observable creation functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#observable-creation-functions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">RxJS 提供了一些用來建立可觀察物件的函式。這些函式可以簡化根據某些東西建立可觀察物件的過程，比如事件、定時器、 Promise 等等。比如：</p><p translation-origin=\"off\">RxJS offers a number of functions that can be used to create new observables.\nThese functions can simplify the process of creating observables from things such as events, timers, and promises.\nFor example:</p>\n\n<code-example header=\"Create an observable from a promise\" path=\"rx-library/src/simple-creation.1.ts\" region=\"promise\">\nimport { from, Observable } from 'rxjs';\n\n// Create an Observable out of a promise\nconst data = from(fetch('/api/endpoint'));\n// Subscribe to begin listening for async result\ndata.subscribe({\n  next(response) { console.log(response); },\n  error(err) { console.error('Error: ' + err); },\n  complete() { console.log('Completed'); }\n});\n\n\n</code-example>\n<code-example header=\"Create an observable from a counter\" path=\"rx-library/src/simple-creation.2.ts\" region=\"interval\">\nimport { interval } from 'rxjs';\n\n// Create an Observable that will publish a value on an interval\nconst secondsCounter = interval(1000);\n// Subscribe to begin publishing values\nconst subscription = secondsCounter.subscribe(n =&gt;\n  console.log(`It's been ${n + 1} seconds since subscribing!`));\n\n\n</code-example>\n<code-example header=\"Create an observable from an event\" path=\"rx-library/src/simple-creation.3.ts\" region=\"event\">\nimport { fromEvent } from 'rxjs';\n\nconst el = document.getElementById('my-element')!;\n\n// Create an Observable that will publish mouse movements\nconst mouseMoves = fromEvent&lt;MouseEvent&gt;(el, 'mousemove');\n\n// Subscribe to start listening for mouse-move events\nconst subscription = mouseMoves.subscribe(evt =&gt; {\n  // Log coords of mouse movements\n  console.log(`Coords: ${evt.clientX} X ${evt.clientY}`);\n\n  // When the mouse is over the upper-left of the screen,\n  // unsubscribe to stop listening for mouse movements\n  if (evt.clientX &lt; 40 &amp;&amp; evt.clientY &lt; 40) {\n    subscription.unsubscribe();\n  }\n});\n\n\n</code-example>\n<code-example header=\"Create an observable that creates an AJAX request\" path=\"rx-library/src/simple-creation.ts\" region=\"ajax\">\nimport { Observable } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\n\n// Create an Observable that will create an AJAX request\nconst apiData = ajax('/api/data');\n// Subscribe to create the request\napiData.subscribe(res =&gt; console.log(res.status, res.response));\n\n</code-example>\n<h2 id=\"operators\" translation-result=\"on\">操作<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">運運算元是基於可觀察物件建構的一些對集合進行復雜操作的函式。RxJS 定義了一些運運算元，比如 <code>map()</code>、<code>filter()</code>、<code>concat()</code> 和 <code>flatMap()</code>。</p><p translation-origin=\"off\">Operators are functions that build on the observables foundation to enable sophisticated manipulation of collections.\nFor example, RxJS defines operators such as <code>map()</code>, <code>filter()</code>, <code>concat()</code>, and <code>flatMap()</code>.</p>\n\n<p translation-result=\"on\">運運算元接受一些配置項，然後返回一個以來源可觀察物件為引數的函式。當執行這個返回的函式時，這個運運算元會觀察來源可觀察物件中發出的值，轉換它們，並返回由轉換後的值組成的新的可觀察物件。下面是一個簡單的例子：</p><p translation-origin=\"off\">Operators take configuration options, and they return a function that takes a source observable.\nWhen executing this returned function, the operator observes the source observable's emitted values, transforms them, and returns a new observable of those transformed values.\nHere is a simple example:</p>\n\n<code-example header=\"Map operator\" path=\"rx-library/src/operators.ts\">\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst nums = of(1, 2, 3);\n\nconst squareValues = map((val: number) =&gt; val * val);\nconst squaredNums = squareValues(nums);\n\nsquaredNums.subscribe(x =&gt; console.log(x));\n\n// Logs\n// 1\n// 4\n// 9\n\n\n</code-example>\n<p translation-result=\"on\">你可以使用<em>管道</em>來把這些運運算元連結起來。管道讓你可以把多個由運運算元返回的函式組合成一個。<code>pipe()</code> 函式以你要組合的這些函式作為引數，並且返回一個新的函式，當執行這個新函式時，就會順序執行那些被組合進去的函式。</p><p translation-origin=\"off\">You can use <em>pipes</em> to link operators together.\nPipes let you combine multiple functions into a single function.\nThe <code>pipe()</code> function takes as its arguments the functions you want to combine, and returns a new function that, when executed, runs the composed functions in sequence.</p>\n\n<p translation-result=\"on\">應用於某個可觀察物件上的一組運運算元就像一個處理流程 —— 也就是說，對你感興趣的這些值進行處理的一組操作步驟。這個處理流程本身不會做任何事。你需要呼叫 <code>subscribe()</code> 來透過處理流程得出並產生一個結果。</p><p translation-origin=\"off\">A set of operators applied to an observable is a recipe —that is, a set of instructions for producing the values you're interested in.\nBy itself, the recipe doesn't do anything.\nYou need to call <code>subscribe()</code> to produce a result through the recipe.</p>\n\n<p translation-result=\"on\">例子如下：</p><p translation-origin=\"off\">Here's an example:</p>\n\n<code-example header=\"Standalone pipe function\" path=\"rx-library/src/operators.1.ts\">\nimport { of, pipe } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nconst nums = of(1, 2, 3, 4, 5);\n\n// Create a function that accepts an Observable.\nconst squareOddVals = pipe(\n  filter((n: number) =&gt; n % 2 !== 0),\n  map(n =&gt; n * n)\n);\n\n// Create an Observable that will run the filter and map functions\nconst squareOdd = squareOddVals(nums);\n\n// Subscribe to run the combined functions\nsquareOdd.subscribe(x =&gt; console.log(x));\n\n\n</code-example>\n<p translation-result=\"on\"><code>pipe()</code> 函式也同時是 RxJS 的 <code>Observable</code> 上的一個方法，所以你可以用下列簡寫形式來達到同樣的效果：</p><p translation-origin=\"off\">The <code>pipe()</code> function is also a method on the RxJS <code>Observable</code>, so you use this shorter form to define the same operation:</p>\n\n<code-example header=\"Observable.pipe function\" path=\"rx-library/src/operators.2.ts\">\nimport { of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nconst squareOdd = of(1, 2, 3, 4, 5)\n  .pipe(\n    filter(n =&gt; n % 2 !== 0),\n    map(n =&gt; n * n)\n  );\n\n// Subscribe to get values\nsquareOdd.subscribe(x =&gt; console.log(x));\n\n\n</code-example>\n<h3 id=\"common-operators\" translation-result=\"on\">常用運運算元<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#common-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Common operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#common-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">RxJS 提供了很多運運算元，不過只有少數是常用的。下面是一個常用運運算元的列表和用法範例，參閱 <a href=\"https://rxjs.dev/api\">RxJS API 文件</a>。</p><p translation-origin=\"off\">RxJS provides many operators, but only a handful are used frequently.\nFor a list of operators and usage samples, visit the <a href=\"https://rxjs.dev/api\">RxJS API Documentation</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n對於 Angular 應用來說，我們提倡使用管道來組合運運算元，而不是使用鏈式寫法。鏈式寫法仍然在很多 RxJS 中使用著。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nFor Angular applications, we prefer combining operators with pipes, rather than chaining.\nChaining is used in many RxJS examples.</p>\n\n</div>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性區</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">操作</nt-wrapper><nt-wrapper translation-origin=\"off\">Operators</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立</nt-wrapper><nt-wrapper translation-origin=\"off\">Creation</nt-wrapper></td>\n<td align=\"left\"><code>from</code>, <code>fromEvent</code>, <code>of</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">組合</nt-wrapper><nt-wrapper translation-origin=\"off\">Combination</nt-wrapper></td>\n<td align=\"left\"><code>combineLatest</code>, <code>concat</code>, <code>merge</code>, <code>startWith</code> , <code>withLatestFrom</code>, <code>zip</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">過濾</nt-wrapper><nt-wrapper translation-origin=\"off\">Filtering</nt-wrapper></td>\n<td align=\"left\"><code>debounceTime</code>, <code>distinctUntilChanged</code>, <code>filter</code>, <code>take</code>, <code>takeUntil</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">轉換</nt-wrapper><nt-wrapper translation-origin=\"off\">Transformation</nt-wrapper></td>\n<td align=\"left\"><code>bufferTime</code>, <code>concatMap</code>, <code>map</code>, <code>mergeMap</code>, <code>scan</code>, <code>switchMap</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">工具</nt-wrapper><nt-wrapper translation-origin=\"off\">Utility</nt-wrapper></td>\n<td align=\"left\"><code>tap</code></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">多播</nt-wrapper><nt-wrapper translation-origin=\"off\">Multicasting</nt-wrapper></td>\n<td align=\"left\"><code>share</code></td>\n</tr>\n\n</tbody>\n</table>\n<h2 id=\"error-handling\" translation-result=\"on\">錯誤處理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#error-handling\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#error-handling\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">除了可以在訂閱時提供 <code>error()</code> 處理器外，RxJS 還提供了 <code>catchError</code> 運運算元，它允許你在管道中處理已知錯誤。</p><p translation-origin=\"off\">In addition to the <code>error()</code> handler that you provide on subscription, RxJS provides the <code>catchError</code> operator that lets you handle known errors in the observable recipe.</p>\n\n<p translation-result=\"on\">假設你有一個可觀察物件，它發起 API 請求，然後對伺服器返回的響應進行對映。如果伺服器返回了錯誤或值不存在，就會產生一個錯誤。如果你捕獲這個錯誤並提供了一個預設值，流就會繼續處理這些值，而不會報錯。</p><p translation-origin=\"off\">For instance, suppose you have an observable that makes an API request and maps to the response from the server.\nIf the server returns an error or the value doesn't exist, an error is produced.\nIf you catch this error and supply a default value, your stream continues to process values rather than erroring out.</p>\n\n<p translation-result=\"on\">下面是使用 <code>catchError</code> 運運算元實現這種效果的例子：</p><p translation-origin=\"off\">Here's an example of using the <code>catchError</code> operator to do this:</p>\n\n<code-example header=\"catchError operator\" path=\"rx-library/src/error-handling.ts\">\nimport { Observable, of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, catchError } from 'rxjs/operators';\n\n// Return \"response\" from the API. If an error happens,\n// return an empty array.\nconst apiData = ajax('/api/data').pipe(\n  map((res: any) =&gt; {\n    if (!res.response) {\n      throw new Error('Value expected!');\n    }\n    return res.response;\n  }),\n  catchError(() =&gt; of([]))\n);\n\napiData.subscribe({\n  next(x: T) { console.log('data: ', x); },\n  error() { console.log('errors already caught... will not run'); }\n});\n\n\n</code-example>\n<h3 id=\"retry-failed-observable\" translation-result=\"on\">重試失敗的可觀察物件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#retry-failed-observable\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Retry failed observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#retry-failed-observable\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>catchError</code> 提供了一種簡單的方式進行恢復，而 <code>retry</code> 運運算元讓你可以嘗試失敗的請求。</p><p translation-origin=\"off\">Where the <code>catchError</code> operator provides a simple path of recovery, the <code>retry</code> operator lets you retry a failed request.</p>\n\n<p translation-result=\"on\">可以在 <code>catchError</code> 之前使用 <code>retry</code> 運運算元。它會訂閱到原始的來源可觀察物件，它可以重新執行導致結果出錯的動作序列。如果其中包含 HTTP 請求，它就會重新發起那個 HTTP 請求。</p><p translation-origin=\"off\">Use the <code>retry</code> operator before the <code>catchError</code> operator.\nIt resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error.\nIf this includes an HTTP request, it will retry that HTTP request.</p>\n\n<p translation-result=\"on\">下列程式碼把前面的例子改成了在捕獲錯誤之前重發請求：</p><p translation-origin=\"off\">The following converts the previous example to retry the request before catching the error:</p>\n\n<code-example header=\"retry operator\" path=\"rx-library/src/retry-on-error.ts\">\nimport { Observable, of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, retry, catchError } from 'rxjs/operators';\n\nconst apiData = ajax('/api/data').pipe(\n  map((res: any) =&gt; {\n    if (!res.response) {\n      console.log('Error occurred.');\n      throw new Error('Value expected!');\n    }\n    return res.response;\n  }),\n  retry(3), // Retry up to 3 times before failing\n  catchError(() =&gt; of([]))\n);\n\napiData.subscribe({\n  next(x: T) { console.log('data: ', x); },\n  error() { console.log('errors already caught... will not run'); }\n});\n\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">不要重試<strong>登入認證</strong>請求，這些請求只應該由使用者操作觸發。我們肯定不會希望自動重複傳送登入請求導致使用者的帳號被鎖定。</p><p translation-origin=\"off\">Do not retry <strong>authentication</strong> requests, since these should only be initiated by user action.\nWe don't want to lock out user accounts with repeated login requests that the user has not initiated.</p>\n\n</div>\n<h2 id=\"naming-conventions-for-observables\" translation-result=\"on\">可觀察物件的命名約定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#naming-conventions-for-observables\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Naming conventions for observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/rx-library#naming-conventions-for-observables\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">由於 Angular 的應用幾乎都是用 TypeScript 寫的，你通常會希望知道某個變數是否可觀察物件。雖然 Angular 框架並沒有針對可觀察物件的強制性命名約定，不過你經常會看到可觀察物件的名字以“$”符號結尾。</p><p translation-origin=\"off\">Because Angular applications are mostly written in TypeScript, you will typically know when a variable is an observable.\nAlthough the Angular framework does not enforce a naming convention for observables, you will often see observables named with a trailing \"$\" sign.</p>\n\n<p translation-result=\"on\">這在快速瀏覽程式碼並查詢可觀察物件值時會非常有用。同樣的，如果你希望用某個屬性來儲存來自可觀察物件的最近一個值，它的命名慣例是與可觀察物件同名，但不帶“$”字尾。</p><p translation-origin=\"off\">This can be useful when scanning through code and looking for observable values.\nAlso, if you want a property to store the most recent value from an observable, it can be convenient to use the same name with or without the \"$\".</p>\n\n<p translation-result=\"on\">比如：</p><p translation-origin=\"off\">For example:</p>\n\n<code-example header=\"Naming observables\" path=\"rx-library/src/naming-convention.ts\">\n\n\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-stopwatch',\n  templateUrl: './stopwatch.component.html'\n})\nexport class StopwatchComponent {\n\n  stopwatchValue = 0;\n  stopwatchValue$!: Observable&lt;number&gt;;\n\n  start() {\n    this.stopwatchValue$.subscribe(num =&gt;\n      this.stopwatchValue = num\n    );\n  }\n}\n\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/http\n - guide/http-handle-request-errors\n - guide/http-request-data-from-server\n - guide/http-server-communication\n-->\n<!-- links from this doc:\n - api/core/Component\n - guide/rx-library#common-operators\n - guide/rx-library#error-handling\n - guide/rx-library#naming-conventions-for-observables\n - guide/rx-library#observable-creation-functions\n - guide/rx-library#operators\n - guide/rx-library#retry-failed-observable\n - guide/rx-library#rxjs-庫\n - guide/rx-library#the-rxjs-library\n - guide/rx-library#建立可觀察物件的函式\n - guide/rx-library#可觀察物件的命名約定\n - guide/rx-library#常用運運算元\n - guide/rx-library#操作\n - guide/rx-library#重試失敗的可觀察物件\n - guide/rx-library#錯誤處理\n - https://en.wikipedia.org/wiki/Reactive_programming\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/rx-library.md?message=docs%3A%20請簡述你的修改...\n - https://rxjs.dev/api\n - https://rxjs.dev/guide/overview\n - https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B\n-->"}