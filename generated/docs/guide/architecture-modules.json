{"id":"guide/architecture-modules","title":"Introduction to modules","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-modules.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"introduction-to-modules\" translation-result=\"on\">NgModule 簡介<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#introduction-to-modules\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Introduction to modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#introduction-to-modules\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 應用是模組化的，它擁有自己的模組化系統，稱作 <em>NgModule</em>。一個 NgModule 就是一個容器，用於存放一些內聚的程式碼塊，這些程式碼塊專注於某個應用領域、某個工作流或一組緊密相關的功能。它可以包含一些元件、服務提供者或其它程式碼檔案，其作用域由包含它們的 NgModule 定義。它還可以匯入一些由其它模組中匯出的功能，並匯出一些指定的功能供其它 NgModule 使用。</p><p translation-origin=\"off\">Angular applications are modular and Angular has its own modularity system called <em>NgModules</em>.\nNgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.\nThey can contain components, service providers, and other code files whose scope is defined by the containing NgModule.\nThey can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</p>\n\n<p translation-result=\"on\">每個 Angular 應用都至少有一個 NgModule 類，也就是<a href=\"guide/bootstrapping\">根模組</a>，它習慣上命名為 <code>AppModule</code>，並位於一個名叫 <code>app.module.ts</code> 的檔案中。<em>引導</em>這個根模組就可以啟動你的應用。</p><p translation-origin=\"off\">Every Angular application has at least one NgModule class, <a href=\"guide/bootstrapping\">the <em>root module</em></a>, which is conventionally named <code>AppModule</code> and resides in a file named <code>app.module.ts</code>.\nYou launch your application by <em>bootstrapping</em> the root NgModule.</p>\n\n<p translation-result=\"on\">雖然小型的應用可能只有一個 NgModule，不過大多數應用都會有很多<em>特性模組</em>。應用的<em>根模組</em>之所以叫根模組，是因為它可以包含任意深度的層次化子模組。</p><p translation-origin=\"off\">While a small application might have only one NgModule, most applications have many more <em>feature modules</em>.\nThe <em>root</em> NgModule for an application is so named because it can include child NgModules in a hierarchy of any depth.</p>\n\n<h2 id=\"ngmodule-metadata\" translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodule-元資料\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">NgModule metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodule-metadata\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">NgModule 是一個帶有 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 裝飾器的類別。<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 裝飾器是一個函式，它接受一個元資料物件，該物件的屬性用來描述這個模組。其中最重要的屬性如下。</p><p translation-origin=\"off\">An NgModule is defined by a class decorated with <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code>.\nThe <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> decorator is a function that takes a single metadata object, whose properties describe the module.\nThe most important properties are as follows.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Properties</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>declarations</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">那些屬於本 NgModule 的<a href=\"guide/architecture-components\">元件</a>、<em>指令</em>、<em>管道</em>。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <a href=\"guide/architecture-components\">components</a>, <em>directives</em>, and <em>pipes</em> that belong to this NgModule.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>exports</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">那些能在其它模組的<em>元件範本</em>中使用的可宣告物件的子集。</nt-wrapper><nt-wrapper translation-origin=\"off\">The subset of declarations that should be visible and usable in the <em>component templates</em> of other NgModules.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>imports</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">那些匯出了<em>本</em>模組中的元件範本所需的類別的其它模組。</nt-wrapper><nt-wrapper translation-origin=\"off\">Other modules whose exported classes are needed by component templates declared in <em>this</em> NgModule.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>providers</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">本模組向全域服務中貢獻的那些<a href=\"guide/architecture-services\">服務</a>的建立器。這些服務能被本應用中的任何部分使用。（你也可以在元件級別指定服務提供者。）</nt-wrapper><nt-wrapper translation-origin=\"off\">Creators of <a href=\"guide/architecture-services\">services</a> that this NgModule contributes to the global collection of services; they become accessible in all parts of the application. (You can also specify providers at the component level.)</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>bootstrap</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">應用的主檢視，稱為<em>根元件</em>。它是應用中所有其它檢視的宿主。只有<em>根模組</em>才應該設定這個 <code>bootstrap</code> 屬性。</nt-wrapper><nt-wrapper translation-origin=\"off\">The main application view, called the <em>root component</em>, which hosts all other application views. Only the <em>root NgModule</em> should set the <code>bootstrap</code> property.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">下面是一個簡單的根 NgModule 定義：</p><p translation-origin=\"off\">Here's a simple root NgModule definition.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"architecture/src/app/mini-app.ts\" region=\"module\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">把 <code>AppComponent</code> 放到 <code>exports</code> 中是為了示範匯出的語法，這在本例子中實際上是沒必要的。根模組沒有任何理由<em>匯出</em>任何東西，因為其它模組永遠不需要<em>匯入</em>根模組。</p><p translation-origin=\"off\"><code>AppComponent</code> is included in the <code>exports</code> list here for illustration; it isn't actually necessary in this example.\nA root NgModule has no reason to <em>export</em> anything because other modules don't need to <em>import</em> the root NgModule.</p>\n\n</div>\n<h2 id=\"ngmodules-and-components\" translation-result=\"on\">NgModule 和元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">NgModules and components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">NgModule 為其中的元件提供了一個<em>編譯上下文環境</em>。根模組總會有一個根元件，並在引導期間建立它。但是，任何模組都能包含任意數量的其它元件，這些元件可以透過路由器載入，也可以透過範本建立。那些屬於這個 NgModule 的元件會共享同一個編譯上下文環境。</p><p translation-origin=\"off\">NgModules provide a <em>compilation context</em> for their components.\nA root NgModule always has a root component that is created during bootstrap but any NgModule can include any number of additional components, which can be loaded through the router or created through the template.\nThe components that belong to an NgModule share a compilation context.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Component compilation context\" class=\"left\" src=\"generated/images/guide/architecture/compilation-context.png\" width=\"600\" height=\"202\">\n</div>\n<br class=\"clear\">\n<p translation-result=\"on\">元件及其範本共同定義<em>檢視</em>。元件還可以包含<em>檢視層次結構</em>，它能讓你定義任意複雜的螢幕區域，可以將其作為一個整體進行建立、修改和銷燬。一個檢視層次結構中可以混合使用由不同 NgModule 中的元件定義的檢視。這種情況很常見，特別是對一些 UI 庫來說。</p><p translation-origin=\"off\">A component and its template together define a <em>view</em>.\nA component can contain a <em>view hierarchy</em>, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit.\nA view hierarchy can mix views defined in components that belong to different NgModules.\nThis is often the case, especially for UI libraries.</p>\n\n<div class=\"lightbox\">\n<img alt=\"View hierarchy\" class=\"left\" src=\"generated/images/guide/architecture/view-hierarchy.png\" width=\"600\" height=\"303\">\n</div>\n<br class=\"clear\">\n<p translation-result=\"on\">當你建立一個元件時，它直接與一個叫做<em>宿主檢視</em>的檢視關聯起來。宿主檢視可以是檢視層次結構的根，該檢視層次結構可以包含一些<em>內嵌檢視</em>，這些內嵌檢視又是其它元件的宿主檢視。這些元件可以位於相同的 NgModule 中，也可以從其它 NgModule 中匯入。樹中的檢視可以巢狀(Nesting)到任意深度。</p><p translation-origin=\"off\">When you create a component, it's associated directly with a single view, called the <em>host view</em>.\nThe host view can be the root of a view hierarchy, which can contain <em>embedded views</em>, which are in turn the host views of other components.\nThose components can be in the same NgModule, or can be imported from other NgModules.\nViews in the tree can be nested to any depth.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n檢視的這種層次結構是 Angular 在 DOM 和應用資料中檢測與響應變更時的關鍵因素。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nThe hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and application data.</p>\n\n</div>\n<h2 id=\"ngmodules-and-javascript-modules\" translation-result=\"on\">NgModule 和 JavaScript 的模組<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">NgModules and JavaScript modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#ngmodules-and-javascript-modules\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">NgModule 系統與 JavaScript（ES2015）用來管理 JavaScript 物件的模組系統不同，而且也沒有直接關聯。這兩種模組系統不同但<em>互補</em>。你可以使用它們來共同編寫你的應用。</p><p translation-origin=\"off\">The NgModule system is different from, and unrelated to, the JavaScript (ES2015) module system for managing collections of JavaScript objects.\nThese are <em>complementary</em> module systems that you can use together to write your applications.</p>\n\n<p translation-result=\"on\">JavaScript 中，每個<em>檔案</em>是一個模組，檔案中定義的所有物件都從屬於那個模組。透過 <code>export</code> 關鍵字，模組可以把它的某些物件宣告為公共的。其它 JavaScript 模組可以使用<em>import 陳述式</em>來存取這些公共物件。</p><p translation-origin=\"off\">In JavaScript each <em>file</em> is a module and all objects defined in the file belong to that module.\nThe module declares some objects to be public by marking them with the <code>export</code> key word.\nOther JavaScript modules use <em>import statements</em> to access public objects from other modules.</p>\n\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"imports\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n</code-example>\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"export\">\nexport class AppModule { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"http://exploringjs.com/es6/ch_modules.html\">學習更多關於 JavaScript 模組的知識。</a>。</p><p translation-origin=\"off\"><a href=\"https://exploringjs.com/es6/ch_modules.html\">Learn more about the JavaScript module system on the web</a>.</p>\n\n</div>\n<h2 id=\"angular-libraries\" translation-result=\"on\">Angular 自帶的函式庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#angular-libraries\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Angular libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-modules#angular-libraries\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"lightbox\">\n<img alt=\"Component\" class=\"left\" src=\"generated/images/guide/architecture/library-module.png\" width=\"240\" height=\"181\">\n</div>\n<p translation-result=\"on\">Angular 會作為一組 JavaScript 模組進行載入，你可以把它們看成庫模組。每個 Angular 庫的名稱都帶有 <code>@angular</code> 字首。使用 <code>npm</code> 包管理器安裝 Angular 的函式庫，並使用 JavaScript 的 <code>import</code> 陳述式匯入其中的各個部分。</p><p translation-origin=\"off\">Angular loads as a collection of JavaScript modules.\nYou can think of them as library modules.\nEach Angular library name begins with the <code>@angular</code> prefix.\nInstall them with the node package manager <code>npm</code> and import parts of them with JavaScript <code>import</code> statements.</p>\n\n<br class=\"clear\">\n<p translation-result=\"on\">比如，像下面這樣，從 <code>@angular/core</code> 庫中匯入 Angular 的 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器：</p><p translation-origin=\"off\">For example, import Angular's <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator from the <code>@angular/core</code> library like this.</p>\n\n<code-example path=\"architecture/src/app/app.component.ts\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<p translation-result=\"on\">還可以使用 JavaScript 的匯入陳述式從 Angular <em>庫</em>中匯入 Angular <em>模組</em>。比如，下列程式碼從 <code>platform-browser</code> 庫中匯入了 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 這個 NgModule。</p><p translation-origin=\"off\">You also import NgModules from Angular <em>libraries</em> using JavaScript import statements.\nFor example, the following code imports the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> NgModule from the <code>platform-browser</code> library.</p>\n\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"import-browser-module\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\n</code-example>\n<p translation-result=\"on\">在上面這個簡單的根模組範例中，應用的根模組需要來自 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 中的素材。要存取這些素材，就要把它加入 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料的 <code>imports</code> 中，程式碼如下：</p><p translation-origin=\"off\">In the example of the simple root module above, the application module needs material from within\n<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>.\nTo access that material, add it to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata <code>imports</code> like this.</p>\n\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"ngmodule-imports\">\nimports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n\n</code-example>\n<p translation-result=\"on\">透過這種方式，你可以<em>同時</em>使用 Angular 和 JavaScript 的這兩種模組系統。雖然這兩種模組系統容易混淆（它們共享了同樣的詞彙 <code>import</code> 和 <code>export</code>），不過只要多用用你就會熟悉它們各自的語境了。</p><p translation-origin=\"off\">In this way, you're using the Angular and JavaScript module systems <em>together</em>.\nAlthough it's easy to confuse the two systems, which share the common vocabulary of \"imports\" and \"exports\", you will become familiar with the different contexts in which they are used.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">更多資訊，參閱 <a href=\"guide/ngmodules\">NgModules</a>。</p><p translation-origin=\"off\">Learn more from the <a href=\"guide/ngmodules\">NgModules</a> guide.</p>\n\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture\n - guide/architecture-services\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - guide/architecture-components\n - guide/architecture-modules#angular-libraries\n - guide/architecture-modules#angular-自帶的函式庫\n - guide/architecture-modules#introduction-to-modules\n - guide/architecture-modules#ngmodule-metadata\n - guide/architecture-modules#ngmodule-元資料\n - guide/architecture-modules#ngmodule-和-javascript-的模組\n - guide/architecture-modules#ngmodule-和元件\n - guide/architecture-modules#ngmodule-簡介\n - guide/architecture-modules#ngmodules-and-components\n - guide/architecture-modules#ngmodules-and-javascript-modules\n - guide/architecture-services\n - guide/bootstrapping\n - guide/ngmodules\n - http://exploringjs.com/es6/ch_modules.html\n - https://exploringjs.com/es6/ch_modules.html\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/architecture-modules.md?message=docs%3A%20請簡述你的修改...\n-->"}