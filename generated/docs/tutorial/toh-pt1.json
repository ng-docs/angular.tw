{"id":"tutorial/toh-pt1","title":"The hero editor","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt1.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"the-hero-editor\" translation-result=\"on\">英雄編輯器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"the-hero-editorlink\">The hero editor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">應用程式現在有了基本的標題。接下來你要建立一個新的元件來顯示英雄資訊並且把這個元件放到應用程式的外殼裡去。</p><p translation-origin=\"off\">The application now has a basic title.\nNext, create a new component to display hero information and place that component in the application shell.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"create-the-heroes-component\" translation-result=\"on\">建立英雄列表元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-the-heroes-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-heroes-componentlink\">Create the heroes component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-the-heroes-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 <code>ng generate</code> 建立一個名為 <code>heroes</code> 的新元件。</p><p translation-origin=\"off\">Use <code>ng generate</code> to create a new component named <code>heroes</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component heroes\n\n</code-example>\n<p translation-result=\"on\"><code>ng generate</code> 建立了一個新的資料夾 <code>src/app/heroes/</code>，並生成了 <code>HeroesComponent</code> 的四個檔案。</p><p translation-result=\"on\"><code>HeroesComponent</code> 的類檔案如下：</p><p translation-origin=\"off\"><code>ng generate</code> creates a new directory , <code>src/app/heroes/</code>, and generates the three files of the  <code>HeroesComponent</code> along with a test file.</p>\n\n<p translation-origin=\"off\">The <code>HeroesComponent</code> class file is as follows:</p>\n\n<code-example header=\"app/heroes/heroes.component.ts (initial version)\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">你要從 Angular 核心函式庫中匯入 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 符號，併為元件類加上 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器。</p><p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 是個裝飾器函式，用於為該元件指定 Angular 所需的元資料。</p><p translation-result=\"on\"><code>ng generate</code> 建立了三個元資料屬性：</p><p translation-origin=\"off\">You always import the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> symbol from the Angular core library and annotate the component class with <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n\n<p translation-origin=\"off\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> is a decorator function that specifies the Angular metadata for the component.</p>\n\n<p translation-origin=\"off\"><code>ng generate</code> created three metadata properties:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Properties</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>selector</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件的 CSS 元素選擇器</nt-wrapper><nt-wrapper translation-origin=\"off\">The component's CSS element selector.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>templateUrl</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件範本檔案的位置。</nt-wrapper><nt-wrapper translation-origin=\"off\">The location of the component's template file.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>styleUrls</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">元件私有 CSS 樣式表文件的位置。</nt-wrapper><nt-wrapper translation-origin=\"off\">The location of the component's private CSS styles.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/docs/Web/CSS/Type_selectors\">CSS 元素選擇器</a> <code>app-heroes</code> 用來在父元件的範本中匹配 HTML 元素的名稱，以識別出該元件。</p><p translation-result=\"on\"><code>ngOnInit()</code> 是一個<a href=\"guide/lifecycle-hooks#oninit\">生命週期鉤子</a>，Angular 在建立完元件後很快就會呼叫 <code>ngOnInit()</code>。這裡是放置初始化邏輯的好地方。</p><p translation-result=\"on\">始終要 <code>export</code> 這個元件類，以便在其它地方（比如 <code>AppModule</code>）匯入它。</p><p translation-origin=\"off\"><a id=\"selector\"></a></p>\n<p translation-origin=\"off\">The <a href=\"https://developer.mozilla.org/docs/Web/CSS/Type_selectors\">CSS element selector</a>, <code>'app-heroes'</code>, matches the name of the HTML element that identifies this component within a parent component's template.</p>\n\n<p translation-origin=\"off\">The <code>ngOnInit()</code> is a <a href=\"guide/lifecycle-hooks#oninit\">lifecycle hook</a>.\nAngular calls <code>ngOnInit()</code> shortly after creating a component.\nIt's a good place to put initialization logic.</p>\n\n<p translation-origin=\"off\">Always <code>export</code> the component class so you can <code>import</code> it elsewhere … like in the <code>AppModule</code>.</p>\n\n<h3 id=\"add-a-hero-property\" translation-result=\"on\">新增 <code>hero</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#add-a-hero-property\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-hero-propertylink\">Add a <code>hero</code> property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#add-a-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">往 <code>HeroesComponent</code> 中新增一個 <code>hero</code> 屬性，用來表示一個名叫 “Windstorm” 的英雄。</p><p translation-origin=\"off\">Add a <code>hero</code> property to the <code>HeroesComponent</code> for a hero named, <code>Windstorm</code>.</p>\n\n<code-example header=\"heroes.component.ts (hero property)\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\">\nhero = 'Windstorm';\n\n</code-example>\n<h3 id=\"show-the-hero\" translation-result=\"on\">顯示英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"show-the-herolink\">Show the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">開啟範本檔案 <code>heroes.component.html</code>。刪除 <code>ng generate</code> 自動產生的預設內容，改為到 <code>hero</code> 屬性的資料繫結。</p><p translation-origin=\"off\">Open the <code>heroes.component.html</code> template file.\nDelete the default text that <code>ng generate</code> created and replace it with a data binding to the new <code>hero</code> property.</p>\n\n<code-example header=\"heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-1\">\n&lt;h2&gt;{{hero}}&lt;/h2&gt;\n\n</code-example>\n<h2 id=\"show-the-heroescomponent-view\" translation-result=\"on\">顯示 <code>HeroesComponent</code> 檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-heroescomponent-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-the-heroescomponent-viewlink\">Show the <code>HeroesComponent</code> view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-heroescomponent-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要顯示 <code>HeroesComponent</code> 你必須把它加到殼元件 <code>AppComponent</code> 的範本中。</p><p translation-result=\"on\">別忘了，<code>app-heroes</code> 就是 <code>HeroesComponent</code> 的 <a href=\"tutorial/toh-pt1#selector\">元素選擇器</a>。\n把 <code>&lt;app-heroes&gt;</code> 元素新增到 <code>AppComponent</code> 的範本檔案中，就放在標題下方。</p><p translation-origin=\"off\">To display the <code>HeroesComponent</code>, you must add it to the template of the shell <code>AppComponent</code>.</p>\n\n<p translation-origin=\"off\">Remember that <code>app-heroes</code> is the <a href=\"tutorial/toh-pt1#selector\">element selector</a> for the <code>HeroesComponent</code>.\nAdd an <code>&lt;app-heroes&gt;</code> element to the <code>AppComponent</code> template file, just below the title.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n\n\n</code-example>\n<p translation-result=\"on\">如果 <code>ng serve</code> 命令仍在執行，瀏覽器就會自動重新整理，並且同時顯示出應用的標題和英雄的名字。</p><p translation-origin=\"off\">If  <code>ng serve</code> is still running,\nthe browser should refresh and display both the application title and the hero's name.</p>\n\n<h2 id=\"create-a-hero-interface\" translation-result=\"on\">建立 <code>Hero</code> 類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-a-hero-interface\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-a-hero-interfacelink\">Create a <code>Hero</code> interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#create-a-hero-interface\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">真實的英雄當然不止一個名字。</p><p translation-result=\"on\">在 <code>src/app</code> 資料夾中為 <code>Hero</code> 類建立一個檔案，並新增 <code>id</code> 和 <code>name</code> 屬性。</p><p translation-origin=\"off\">A real hero is more than a name.</p>\n\n<p translation-origin=\"off\">Create a <code>Hero</code> interface in its own file in the <code>src/app</code> directory .\nGive it <code>id</code> and <code>name</code> properties.</p>\n\n<code-example path=\"toh-pt1/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n<p translation-result=\"on\">回到 <code>HeroesComponent</code> 類，並且匯入這個 <code>Hero</code> 類別。</p><p translation-result=\"on\">把元件的 <code>hero</code> 屬性的型別重構為 <code>Hero</code>。然後以 <code>1</code> 為 <code>id</code>、以 “Windstorm” 為名字初始化它。</p><p translation-result=\"on\">修改後的 <code>HeroesComponent</code> 類應該是這樣的：</p><p translation-origin=\"off\">Return to the <code>HeroesComponent</code> class and import the <code>Hero</code> interface.</p>\n\n<p translation-origin=\"off\">Refactor the component's <code>hero</code> property to be of type <code>Hero</code>.\nInitialize it with an <code>id</code> of <code>1</code> and the name <code>Windstorm</code>.</p>\n\n<p translation-origin=\"off\">The revised <code>HeroesComponent</code> class file should look like this:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">頁面顯示變得不正常了，因為你剛剛把 <code>hero</code> 從字串改成了物件。</p><p translation-origin=\"off\">The page no longer displays properly because you changed the hero from a string to an object.</p>\n\n<h2 id=\"show-the-hero-object\" translation-result=\"on\">顯示 <code>hero</code> 物件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero-object\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"show-the-hero-objectlink\">Show the hero object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero-object\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">修改範本中的繫結，以顯示英雄的名字，並在詳情中顯示 <code>id</code> 和 <code>name</code>，就像這樣：</p><p translation-origin=\"off\">Update the binding in the template to announce the hero's name and show both <code>id</code> and <code>name</code> in a details display like this:</p>\n\n<code-example header=\"heroes.component.html (HeroesComponent template)\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\">\n&lt;h2&gt;{{hero.name}} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;name: &lt;/span&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">瀏覽器自動重新整理，並顯示這位英雄的資訊。</p><p translation-origin=\"off\">The browser refreshes and displays the hero's information.</p>\n\n<h2 id=\"format-with-the-uppercasepipe\" translation-result=\"on\">使用 <code>UppercasePipe</code> 進行格式化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#format-with-the-uppercasepipe\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"format-with-the-uppercasepipelink\">Format with the <code>UppercasePipe</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#format-with-the-uppercasepipe\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">把 <code>hero.name</code> 的繫結改成這樣。</p><p translation-origin=\"off\">Edit the <code>hero.name</code> binding like this:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\" region=\"pipe\">\n&lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n\n</code-example>\n<p translation-result=\"on\">瀏覽器重新整理了。現在，英雄的名字顯示成了大寫字母。</p><p translation-result=\"on\">繫結表示式中的 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 位於管道運運算元 <code>|</code> 後面，用來呼叫內建管道 <code>UppercasePipe</code>。</p><p translation-result=\"on\"><a href=\"guide/pipes\">管道</a> 是格式化字串、金額、日期和其它顯示資料的好辦法。Angular 釋出了一些內建管道，而且你還可以建立自己的管道。</p><p translation-origin=\"off\">The browser refreshes and now the hero's name is displayed in capital letters.</p>\n\n<p translation-origin=\"off\">The word <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> in the interpolation binding after the pipe <code>|</code> character, activates the built-in <code>UppercasePipe</code>.</p>\n\n<p translation-origin=\"off\"><a href=\"guide/pipes\">Pipes</a> are a good way to format strings, currency amounts, dates, and other display data.\nAngular ships with several built-in pipes and you can create your own.</p>\n\n<h2 id=\"edit-the-hero\" translation-result=\"on\">編輯英雄名字<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"edit-the-herolink\">Edit the hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用者應該能在一個 <code>&lt;input&gt;</code> 輸入框中編輯英雄的名字。</p><p translation-result=\"on\">當用戶輸入時，這個輸入框應該能同時<em>顯示</em>和<em>修改</em>英雄的 <code>name</code> 屬性。也就是說，資料流從元件類<strong>流出到螢幕</strong>，並且從螢幕<strong>流回到元件類</strong>。</p><p translation-result=\"on\">要想讓這種資料流動自動化，就要在表單元素 <code>&lt;input&gt;</code> 和元件的 <code>hero.name</code> 屬性之間建立雙向資料繫結。</p><p translation-origin=\"off\">Users should be able to edit the hero's name in an <code>&lt;input&gt;</code> text box.</p>\n\n<p translation-origin=\"off\">The text box should both <em>display</em> the hero's <code>name</code> property and <em>update</em> that property as the user types.\nThat means data flows from the component class <em>out to the screen</em> and from the screen <em>back to the class</em>.</p>\n\n<p translation-origin=\"off\">To automate that data flow, set up a two-way data binding between the <code>&lt;input&gt;</code> form element and the <code>hero.name</code> property.</p>\n\n<h3 id=\"two-way-binding\" translation-result=\"on\">雙向繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"two-way-bindinglink\">Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把範本中的英雄詳情區重構成這樣：</p><p translation-origin=\"off\">Refactor the details area in the <code>HeroesComponent</code> template so it looks like this:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html (HeroesComponent's template)\" path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\">\n&lt;div&gt;\n  &lt;label for=\"name\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 是 Angular 的雙向資料繫結語法。</p><p translation-result=\"on\">這裡把 <code>hero.name</code> 屬性繫結到了 HTML 的 textbox 元素上，以便資料流可以<strong>雙向流動</strong>。資料可以從 <code>hero.name</code> 屬性流動到 textbox，也可以從 textbox 流回到 <code>hero.name</code>。</p><p translation-origin=\"off\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> is Angular's two-way data binding syntax.</p>\n\n<p translation-origin=\"off\">Here it binds the <code>hero.name</code> property to the HTML text box so that data can flow <em>in both directions</em>.\nData can flow from the <code>hero.name</code> property to the text box and from the text box back to the <code>hero.name</code>.</p>\n\n<h3 id=\"the-missing-formsmodule\" translation-result=\"on\">缺少 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#缺少-formsmodule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-missing-formsmodulelink\">The missing <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-missing-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">注意，當你加上 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> 之後這個應用無法工作了。</p><p translation-result=\"on\">開啟瀏覽器的開發工具，就會在控制檯中看到如下資訊：</p><p translation-origin=\"off\">Notice that the application stopped working when you added <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>.</p>\n\n<p translation-origin=\"off\">To see the error, open the browser development tools and look in the console\nfor a message like</p>\n\n<code-example format=\"output\" hidecopy=\"\" language=\"shell\">\n\nTemplate parse errors:\nCan't bind to 'ngModel' since it isn't a known property of 'input'.\n\n</code-example>\n<p translation-result=\"on\">雖然 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 是一個有效的 Angular 指令，不過它在預設情況下是不可用的。</p><p translation-result=\"on\">它屬於一個可選模組 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>，你必須自行新增此模組才能使用該指令。</p><p translation-origin=\"off\">Although <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> is a valid Angular directive, it isn't available by default.</p>\n\n<p translation-origin=\"off\">It belongs to the optional <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and you must <em>opt in</em> to using it.</p>\n\n<h2 id=\"appmodule\"><code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#appmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-result=\"on\">Angular 需要知道如何把應用程式的各個部分組合到一起，以及該應用需要哪些其它檔案和庫。這些資訊被稱為<em>元資料（metadata）</em>。</p><p translation-result=\"on\">有些元資料位於 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 裝飾器中，你會把它加到元件類上。另一些關鍵性的元資料位於 <a href=\"guide/ngmodules\"><code>@NgModule</code></a> 裝飾器中。</p><p translation-result=\"on\">最重要的 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 裝飾器位於最上層類 <strong>AppModule</strong> 上。</p><p translation-result=\"on\"><code>ng new</code> 在建立專案的時候就在 <code>src/app/app.module.ts</code> 中建立了一個 <code>AppModule</code> 類別。這裡也就是你要新增 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 的地方。</p><p translation-origin=\"off\">Angular needs to know how the pieces of your application fit together and what other files and libraries the application requires.\nThis information is called <em>metadata</em>.</p>\n\n<p translation-origin=\"off\">Some of the metadata is in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorators that you added to your component classes.\nOther critical metadata is in <a href=\"guide/ngmodules\"><code>@NgModule</code></a> decorators.</p>\n\n<p translation-origin=\"off\">The most important <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator annotates the top-level <strong>AppModule</strong> class.</p>\n\n<p translation-origin=\"off\"><code>ng new</code> created an <code>AppModule</code> class in <code>src/app/app.module.ts</code> when it created the project.\nThis is where you <em>opt in</em> to the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n\n<h3 id=\"import-formsmodule\" translation-result=\"on\">匯入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#匯入-formsmodule\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"import-formsmodulelink\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-formsmodule\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">開啟 <code>app.module.ts</code> 並從 <code>@angular/forms</code> 庫中匯入 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 符號。</p><p translation-origin=\"off\">Open <code>app.module.ts</code> and import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> symbol from the <code>@angular/forms</code> library.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (FormsModule symbol import)\" region=\"formsmodule-js-import\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &lt;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\n</code-example>\n<p translation-result=\"on\">然後把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 新增到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 陣列中，這裡是該應用所需外部模組的列表。</p><p translation-origin=\"off\">Add <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the  <code>imports</code> array in <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nThe <code>imports</code> array contains the list of external modules that the application needs.</p>\n\n<code-example header=\"app.module.ts (@NgModule imports)\" path=\"toh-pt1/src/app/app.module.ts\" region=\"ng-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n],\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器，應用又能正常工作了。你可以編輯英雄的名字，並且會看到這個改動立刻體現在這個輸入框上方的 <code>&lt;h2&gt;</code> 中。</p><p translation-origin=\"off\">When the browser refreshes, the application should work again.\nYou can edit the hero's name and see the changes reflected immediately in the <code>&lt;h2&gt;</code> above the text box.</p>\n\n<h3 id=\"declare-heroescomponent\" translation-result=\"on\">宣告 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#declare-heroescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"declare-heroescomponentlink\">Declare <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#declare-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">每個元件都必須宣告在（<em>且只能宣告在</em>）一個 <a href=\"guide/ngmodules\">NgModule</a> 中。</p><p translation-result=\"on\"><em>你</em>沒有宣告過 <code>HeroesComponent</code>，可為什麼本應用卻正常呢？</p><p translation-result=\"on\">這是因為 Angular CLI 在產生 <code>HeroesComponent</code> 元件的時候就自動把它加到了 <code>AppModule</code> 中。</p><p translation-result=\"on\">開啟 <code>src/app/app.module.ts</code> 你就會發現 <code>HeroesComponent</code> 已經在頂部匯入過了。</p><p translation-origin=\"off\">Every component must be declared in <em>exactly one</em> <a href=\"guide/ngmodules\">NgModule</a>.</p>\n\n<p translation-origin=\"off\"><em>You</em> didn't declare the <code>HeroesComponent</code>.\nWhy did the application work?</p>\n\n<p translation-origin=\"off\">It worked because the <code>ng generate</code> declared <code>HeroesComponent</code> in <code>AppModule</code> when it created that component.</p>\n\n<p translation-origin=\"off\">Open <code>src/app/app.module.ts</code> and find <code>HeroesComponent</code> imported near the top.</p>\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"heroes-import\">\nimport { HeroesComponent } from './heroes/heroes.component';\n\n</code-example>\n<p translation-result=\"on\"><code>HeroesComponent</code> 也已經宣告在了 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 陣列中。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> is declared in the <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> array.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  HeroesComponent\n],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>AppModule</code> 聲明瞭應用中的所有元件，<code>AppComponent</code> 和 <code>HeroesComponent</code>。</p><p translation-origin=\"off\"><code>AppModule</code>  declares both application components, <code>AppComponent</code> and <code>HeroesComponent</code>.</p>\n\n</div>\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-reviewlink\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是本頁所提到的原始碼。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n&lt;div&gt;\n  &lt;label for=\"name\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &lt;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt1/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero.ts\" path=\"toh-pt1/src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summarylink\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">你使用 <code>ng generate</code> 建立了第二個元件 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">You used <code>ng generate</code> to create a second <code>HeroesComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你把 <code>HeroesComponent</code> 新增到了殼元件 <code>AppComponent</code> 中，以便顯示它。</p><p translation-origin=\"off\">You displayed the <code>HeroesComponent</code> by adding it to the <code>AppComponent</code> shell.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用 <code>UppercasePipe</code> 來格式化英雄的名字。</p><p translation-origin=\"off\">You applied the <code>UppercasePipe</code> to format the name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令實現了雙向資料繫結。</p><p translation-origin=\"off\">You used two-way data binding with the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你知道了 <code>AppModule</code>。</p><p translation-origin=\"off\">You learned about the <code>AppModule</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你把 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 匯入了 <code>AppModule</code>，以便 Angular 能識別並應用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令。</p><p translation-origin=\"off\">You imported the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> in the <code>AppModule</code> so that Angular would recognize and apply the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你知道了把元件宣告到 <code>AppModule</code> 是很重要的。</p><p translation-origin=\"off\">You learned the importance of declaring components in the <code>AppModule</code>.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n-->\n<!-- links from this doc:\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/lifecycle-hooks#oninit\n - guide/ngmodules\n - guide/pipes\n - tutorial/toh-pt1#add-a-hero-property\n - tutorial/toh-pt1#appmodule\n - tutorial/toh-pt1#create-a-hero-interface\n - tutorial/toh-pt1#create-the-heroes-component\n - tutorial/toh-pt1#declare-heroescomponent\n - tutorial/toh-pt1#edit-the-hero\n - tutorial/toh-pt1#final-code-review\n - tutorial/toh-pt1#format-with-the-uppercasepipe\n - tutorial/toh-pt1#import-formsmodule\n - tutorial/toh-pt1#selector\n - tutorial/toh-pt1#show-the-hero\n - tutorial/toh-pt1#show-the-hero-object\n - tutorial/toh-pt1#show-the-heroescomponent-view\n - tutorial/toh-pt1#summary\n - tutorial/toh-pt1#the-hero-editor\n - tutorial/toh-pt1#the-missing-formsmodule\n - tutorial/toh-pt1#two-way-binding\n - tutorial/toh-pt1#使用-uppercasepipe-進行格式化\n - tutorial/toh-pt1#建立-hero-類\n - tutorial/toh-pt1#建立英雄列表元件\n - tutorial/toh-pt1#雙向繫結\n - tutorial/toh-pt1#宣告-heroescomponent\n - tutorial/toh-pt1#匯入-formsmodule\n - tutorial/toh-pt1#小結\n - tutorial/toh-pt1#顯示-hero-物件\n - tutorial/toh-pt1#顯示-heroescomponent-檢視\n - tutorial/toh-pt1#顯示英雄\n - tutorial/toh-pt1#檢視最終程式碼\n - tutorial/toh-pt1#新增-hero-屬性\n - tutorial/toh-pt1#編輯英雄名字\n - tutorial/toh-pt1#缺少-formsmodule\n - tutorial/toh-pt1#英雄編輯器\n - https://developer.mozilla.org/docs/Web/CSS/Type_selectors\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt1.md?message=docs%3A%20請簡述你的修改...\n-->"}