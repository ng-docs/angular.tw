{"id":"tutorial/tour-of-heroes/toh-pt4","title":"Add services","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/tour-of-heroes/toh-pt4.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"add-services\" translation-result=\"on\">服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-services\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Add services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-services\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">英雄之旅的 <code>HeroesComponent</code> 目前獲取和顯示的都是模擬資料。</p><p translation-origin=\"off\">The Tour of Heroes <code>HeroesComponent</code> is getting and displaying fake data.</p>\n\n<p translation-result=\"on\">重構 <code>HeroesComponent</code> 的重點在於為檢視提供支援，並讓它更容易使用模擬服務進行單元測試。</p><p translation-origin=\"off\">Refactoring the <code>HeroesComponent</code> focuses on supporting the view and\nmaking it easier to unit-test with a mock service.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"why-services\" translation-result=\"on\">為什麼需要服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Why services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">元件不應該直接獲取或儲存資料，它們不應該瞭解是否在展示假資料。它們應該聚焦於展示資料，而把資料存取的職責委託給某個服務。</p><p translation-origin=\"off\">Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data.\nThey should focus on presenting data and delegate data access to a service.</p>\n\n<p translation-result=\"on\">本課程會建立一個 <code>HeroService</code>，應用中的所有類都可以使用它來獲取英雄列表。\n不要使用 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 關鍵字</a>來建立此服務，而使用 Angular 支援的<a href=\"guide/dependency-injection\"><em>依賴注入</em></a>機制把它注入到 <code>HeroesComponent</code> 的建構函式中。</p><p translation-origin=\"off\">This tutorial creates a <code>HeroService</code> that all application classes can use to get heroes.\nInstead of creating that service with the <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> keyword</a>, use the <a href=\"guide/dependency-injection\"><em>dependency injection</em></a> that Angular supports to inject it into the <code>HeroesComponent</code> constructor.</p>\n\n<p translation-result=\"on\">服務是在多個“互相不知道”的類之間共享資訊的好辦法。你將建立一個 <code>MessageService</code>，並且把它注入到兩個地方。</p><p translation-origin=\"off\">Services are a great way to share information among classes that <em>don't know each other</em>.\nCreate a <code>MessageService</code> next and inject it in these two places.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">注入到 <code>HeroService</code> 中，它會使用該服務傳送訊息</p><p translation-origin=\"off\">Inject in <code>HeroService</code>, which uses the service to send a message</p>\n\n</li>\n<li>\n<p translation-result=\"on\">注入到 <code>MessagesComponent</code> 中，它會顯示其中的訊息。當用戶點選某個英雄時，它還會顯示該英雄的 ID。</p><p translation-origin=\"off\">Inject in <code>MessagesComponent</code>, which displays that message, and also displays the ID when the user clicks a hero</p>\n\n</li>\n</ul>\n<h2 id=\"create-the-heroservice\" translation-result=\"on\">建立 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Create the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">執行 <code>ng generate</code> 以建立一個名叫 <code>hero</code> 的服務。</p><p translation-origin=\"off\">Run <code>ng generate</code> to create a service called <code>hero</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service hero\n\n</code-example>\n<p translation-result=\"on\">該命令會在 <code>src/app/hero.service.ts</code> 中產生 <code>HeroService</code> 類別的骨架，程式碼如下：</p><p translation-origin=\"off\">The command generates a skeleton <code>HeroService</code> class in <code>src/app/hero.service.ts</code> as follows:</p>\n\n<code-example header=\"src/app/hero.service.ts (new service)\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 id=\"injectable-services\" translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#injectable-服務\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">注意，這個新的服務匯入了 Angular 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符號，並且給這個服務類添加了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器。\n它把這個類標記為<em>依賴注入系統</em>的參與者之一。<code>HeroService</code> 類將會提供一個可注入的服務，並且它還可以擁有自己的待注入的依賴。\n目前它沒有任何依賴。</p><p translation-origin=\"off\">Notice that the new service imports the Angular <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> symbol and annotates the class with the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator. This marks the class as one that participates in the <em>dependency injection system</em>.\nThe <code>HeroService</code> class is going to provide an injectable service, and it can also have its own injected dependencies.\nIt doesn't have any dependencies yet.</p>\n\n<p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器會接受該服務的元資料物件，就像 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 對元件類別的作用一樣。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator accepts a metadata object for the service, the same way the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator did for your component classes.</p>\n\n<h3 id=\"get-hero-data\" translation-result=\"on\">獲取英雄資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Get hero data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroService</code> 可以從任何地方獲取資料，比如：Web 服務、本地儲存（LocalStorage）或一個模擬的資料源。</p><p translation-origin=\"off\">The <code>HeroService</code> could get hero data from anywhere such as a web service, local storage, or a mock data source.</p>\n\n<p translation-result=\"on\">從元件中移除資料存取邏輯，意味著將來任何時候你都可以改變目前的實現方式，而不用改動任何元件。這些元件不需要了解該服務的內部實現。</p><p translation-origin=\"off\">Removing data access from components means you can change your mind about the implementation anytime, without touching any components.\nThey don't know how the service works.</p>\n\n<p translation-result=\"on\">這節課中的實現仍然會提供<em>模擬的英雄列表</em>。</p><p translation-origin=\"off\">The implementation in <em>this</em> tutorial continues to deliver <em>mock heroes</em>.</p>\n\n<p translation-result=\"on\">匯入 <code>Hero</code> 和 <code>HEROES</code>。</p><p translation-origin=\"off\">Import the <code>Hero</code> and <code>HEROES</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p translation-result=\"on\">新增一個 <code>getHeroes</code> 方法，讓它返回<em>模擬的英雄列表</em>。</p><p translation-origin=\"off\">Add a <code>getHeroes</code> method to return the <em>mock heroes</em>.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<p><a id=\"provide\"></a></p>\n<h2 id=\"provide-the-heroservice\" translation-result=\"on\">提供（provide）<code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Provide the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你必須先註冊一個<em>服務提供者</em>，來讓 <code>HeroService</code> 在依賴注入系統中可用，Angular 才能把它注入到 <code>HeroesComponent</code> 中。所謂服務提供者就是某種可用來建立或交付一個服務的東西；在這裡，它透過例項化 <code>HeroService</code> 類，來提供該服務。</p><p translation-origin=\"off\">You must make the <code>HeroService</code> available to the dependency injection system before Angular can <em>inject</em> it into the <code>HeroesComponent</code> by registering a <em>provider</em>.\nA provider is something that can create or deliver a service. In this case, it instantiates the <code>HeroService</code> class to provide the service.</p>\n\n<p translation-result=\"on\">為了確保 <code>HeroService</code> 可以提供該服務，就要使用<em>注入器</em>來註冊它。注入器是一個物件，負責當應用要求獲取它的例項時選擇和注入該提供者。</p><p translation-origin=\"off\">To make sure that the <code>HeroService</code> can provide this service, register it with the <em>injector</em>. The <em>injector</em> is the object that chooses and injects the provider where the application requires it.</p>\n\n<p translation-result=\"on\">預設情況下，Angular CLI 命令 <code>ng generate service</code> 會透過給 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 裝飾器新增 <code>providedIn: 'root'</code> 元資料的形式，用<em>根注入器</em>將你的服務註冊成為提供者。</p><p translation-origin=\"off\">By default, <code>ng generate service</code> registers a provider with the <em>root injector</em> for your service by including provider metadata, that's <code>providedIn: 'root'</code> in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n\n</code-example>\n<p translation-result=\"on\">當你在最上層提供該服務時，Angular 就會為 <code>HeroService</code> 建立一個單一的、共享的例項，並把它注入到任何想要它的類上。在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元資料中註冊該提供者，還能允許 Angular 透過移除那些完全沒有用過的服務來進行最佳化。</p><p translation-origin=\"off\">When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code> and injects into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> metadata also allows Angular to optimize an application by removing the service if it isn't used.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解關於提供者的更多知識，參閱<a href=\"guide/providers\">提供者部分</a>。要了解關於注入器的更多知識，參閱<a href=\"guide/dependency-injection\">依賴注入指南</a>。</p><p translation-origin=\"off\">To learn more about providers, see the <a href=\"guide/providers\">Providers section</a>.\nTo learn more about injectors, see the <a href=\"guide/dependency-injection\">Dependency Injection guide</a>.</p>\n\n</div>\n<p translation-result=\"on\">現在 <code>HeroService</code> 已經準備好插入到 <code>HeroesComponent</code> 中了。</p><p translation-origin=\"off\">The <code>HeroService</code> is now ready to plug into the <code>HeroesComponent</code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">這是一個過渡性的程式碼範例，它將會允許你提供並使用 <code>HeroService</code>。此刻的程式碼和<a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最終程式碼</a>相差很大。</p><p translation-origin=\"off\">This is an interim code sample that allows you to provide and use the <code>HeroService</code>.\nAt this point, the code differs from the <code>HeroService</code> in the <a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">final code review</a>.</p>\n\n</div>\n<h2 id=\"update-heroescomponent\" translation-result=\"on\">修改 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Update <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">開啟 <code>HeroesComponent</code> 類檔案。</p><p translation-origin=\"off\">Open the <code>HeroesComponent</code> class file.</p>\n\n<p translation-result=\"on\">刪除 <code>HEROES</code> 的匯入陳述式，因為你以後不會再用它了。轉而匯入 <code>HeroService</code>。</p><p translation-origin=\"off\">Delete the <code>HEROES</code> import, because you won't need that anymore.\nImport the <code>HeroService</code> instead.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (import HeroService)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p translation-result=\"on\">把 <code>heroes</code> 屬性的定義改為一句簡單的宣告。</p><p translation-origin=\"off\">Replace the definition of the <code>heroes</code> property with a declaration.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[] = [];\n\n</code-example>\n<p><a id=\"inject\"></a></p>\n<h3 id=\"inject-the-heroservice\" translation-result=\"on\">注入 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Inject the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">往建構函式中新增一個私有的 <code>heroService</code>，其型別為 <code>HeroService</code>。</p><p translation-origin=\"off\">Add a private <code>heroService</code> parameter of type <code>HeroService</code> to the constructor.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) {}\n\n</code-example>\n<p translation-result=\"on\">這個引數聲明瞭一個私有 <code>heroService</code> 屬性，同時把它標記為一個 <code>HeroService</code> 的注入點。</p><p translation-origin=\"off\">The parameter simultaneously defines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p>\n\n<p translation-result=\"on\">當 Angular 建立 <code>HeroesComponent</code> 時，<a href=\"guide/dependency-injection\">依賴注入</a>系統就會把這個 <code>heroService</code> 引數設定為 <code>HeroService</code> 的單例物件。</p><p translation-origin=\"off\">When Angular creates a <code>HeroesComponent</code>, the <a href=\"guide/dependency-injection\">Dependency Injection</a> system sets the <code>heroService</code> parameter to the singleton instance of <code>HeroService</code>.</p>\n\n<h3 id=\"add-getheroes\" translation-result=\"on\">新增 <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add <code>getHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">建立一個方法，以從服務中獲取這些英雄資料。</p><p translation-origin=\"off\">Create a method to retrieve the heroes from the service.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p><a id=\"oninit\"></a></p>\n<h3 id=\"call-it-in-ngoninit\" translation-result=\"on\">在 <code>ngOnInit()</code> 中呼叫它<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Call it in <code>ngOnInit()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你固然可以在建構函式中呼叫 <code>getHeroes()</code>，但那不是最佳實踐。</p><p translation-origin=\"off\">While you could call <code>getHeroes()</code> in the constructor, that's not the best practice.</p>\n\n<p translation-result=\"on\">讓建構函式保持簡單，只做最小化的初始化操作，比如把建構函式的引數賦值給屬性。建構函式不應該<em>做任何事</em>。它當然不應該呼叫某個函式來向遠端服務（比如真實的資料服務）發起 HTTP 請求。</p><p translation-origin=\"off\">Reserve the constructor for minimal initialization such as wiring constructor parameters to properties.\nThe constructor shouldn't <em>do anything</em>.\nIt certainly shouldn't call a function that makes HTTP requests to a remote server as a <em>real</em> data service would.</p>\n\n<p translation-result=\"on\">而是選擇在 <a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命週期鉤子</em></a>中呼叫 <code>getHeroes()</code>，之後 Angular 會在構造出 <code>HeroesComponent</code> 的例項之後的某個合適的時機呼叫 <code>ngOnInit()</code>。</p><p translation-origin=\"off\">Instead, call <code>getHeroes()</code> inside the <a href=\"guide/lifecycle-hooks\"><em>ngOnInit lifecycle hook</em></a> and let Angular call <code>ngOnInit()</code> at an appropriate time <em>after</em> constructing a <code>HeroesComponent</code> instance.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 id=\"see-it-run\" translation-result=\"on\">檢視執行效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">See it run<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">重新整理瀏覽器，該應用仍執行的一如既往。顯示英雄列表，並且當你點選某個英雄的名字時顯示出英雄詳情檢視。</p><p translation-origin=\"off\">After the browser refreshes, the application should run as before, showing a list of heroes and a hero detail view when you click a hero name.</p>\n\n<h2 id=\"observable-data\" translation-result=\"on\">可觀察（Observable）的資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Observable data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroService.getHeroes()</code> 的函式簽名是<em>同步的</em>，它所隱含的假設是 <code>HeroService</code> 總是能同步獲取英雄列表資料。而 <code>HeroesComponent</code> 也同樣假設能同步取到 <code>getHeroes()</code> 的結果。</p><p translation-origin=\"off\">The <code>HeroService.getHeroes()</code> method has a <em>synchronous signature</em>, which implies that the <code>HeroService</code> can fetch heroes synchronously.\nThe <code>HeroesComponent</code> consumes the <code>getHeroes()</code> result as if heroes could be fetched synchronously.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p translation-result=\"on\">這種方法在使用非同步呼叫的真實應用中是不可能奏效的。現在能這麼做，只是因為目前該服務同步返回的是<em>模擬資料</em>。</p><p translation-origin=\"off\">This approach won't work in a real application that uses asynchronous calls.\nIt works now because your service synchronously returns <em>mock heroes</em>.</p>\n\n<p translation-result=\"on\">如果 <code>getHeroes()</code> 不能立即返回英雄資料，它就不能是同步的，否則在它等待返回資料期間就會阻塞瀏覽器。</p><p translation-origin=\"off\">If <code>getHeroes()</code> can't return immediately with hero data, it shouldn't be\nsynchronous, because that would block the browser as it waits to return data.</p>\n\n<p translation-result=\"on\"><code>HeroService.getHeroes()</code> 必須具有某種形式的<em>非同步函式簽名</em>。</p><p translation-origin=\"off\"><code>HeroService.getHeroes()</code> must have an <em>asynchronous signature</em> of some kind.</p>\n\n<p translation-result=\"on\">這節課，<code>HeroService.getHeroes()</code> 將會返回 <code>Observable</code>，部分原因在於它最終會使用 Angular 的 <code>HttpClient.get</code> 方法來獲取英雄資料，而 <a href=\"guide/http\"><code>HttpClient.get()</code> 會返回 <code>Observable</code></a>。</p><p translation-origin=\"off\">In this tutorial, <code>HeroService.getHeroes()</code> returns an <code>Observable</code> so that it can\nuse the Angular <code>HttpClient.get</code> method to fetch the heroes\nand have <a href=\"guide/http\"><code>HttpClient.get()</code></a> return an <code>Observable</code>.</p>\n\n<h3 id=\"observable-heroservice\" translation-result=\"on\">可觀察物件版本的 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Observable <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>Observable</code> 是 <a href=\"https://rxjs.dev\">RxJS 庫</a>中的一個關鍵類別。</p><p translation-origin=\"off\"><code>Observable</code> is one of the key classes in the <a href=\"https://rxjs.dev\">RxJS library</a>.</p>\n\n<p translation-result=\"on\">在<a href=\"tutorial/tour-of-heroes/toh-pt6\">稍後的 HTTP 課程</a>中，你就會知道 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法會返回 RxJS 的 <code>Observable</code>。這節課，你將使用 RxJS 的 <code>of()</code> 函式來模擬從伺服器返回資料。</p><p translation-origin=\"off\">In <a href=\"tutorial/tour-of-heroes/toh-pt6\">the tutorial on HTTP</a>, you can see how Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return RxJS <code>Observable</code> objects.\nThis tutorial simulates getting data from the server with the RxJS <code>of()</code> function.</p>\n\n<p translation-result=\"on\">開啟 <code>HeroService</code> 檔案，並從 RxJS 中匯入 <code>Observable</code> 和 <code>of</code> 符號。</p><p translation-origin=\"off\">Open the <code>HeroService</code> file and import the <code>Observable</code> and <code>of</code> symbols from RxJS.</p>\n\n<code-example header=\"src/app/hero.service.ts (Observable imports)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-observable\">\nimport { Observable, of } from 'rxjs';\n\n</code-example>\n<p translation-result=\"on\">把 <code>getHeroes()</code> 方法改成這樣：</p><p translation-origin=\"off\">Replace the <code>getHeroes()</code> method with the following:</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p translation-result=\"on\"><code>of(HEROES)</code> 會返回一個 <code>Observable&lt;Hero[]&gt;</code>，它會發出單個值，這個值就是這些模擬英雄的陣列。</p><p translation-origin=\"off\"><code>of(HEROES)</code> returns an <code>Observable&lt;Hero[]&gt;</code> that emits  <em>a single value</em>, the array of mock heroes.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在 <a href=\"tutorial/tour-of-heroes/toh-pt6\">HTTP 課程</a>中，你將會呼叫 <code>HttpClient.get&lt;Hero[]&gt;()</code> 它也同樣返回一個 <code>Observable&lt;Hero[]&gt;</code>，它也會發出單個值，這個值就是來自 HTTP 回應內文中的英雄陣列。</p><p translation-origin=\"off\">The <a href=\"tutorial/tour-of-heroes/toh-pt6\">HTTP tutorial</a> shows you how to call <code>HttpClient.get&lt;Hero[]&gt;()</code>, which also returns an <code>Observable&lt;Hero[]&gt;</code> that emits  <em>a single value</em>, an array of heroes from the body of the HTTP response.</p>\n\n</div>\n<h3 id=\"subscribe-in-heroescomponent\" translation-result=\"on\">在 <code>HeroesComponent</code> 中訂閱<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Subscribe in <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroService.getHeroes</code> 方法之前返回一個 <code>Hero[]</code>，現在它返回的是 <code>Observable&lt;Hero[]&gt;</code>。</p><p translation-origin=\"off\">The <code>HeroService.getHeroes</code> method used to return a <code>Hero[]</code>.\nNow it returns an <code>Observable&lt;Hero[]&gt;</code>.</p>\n\n<p translation-result=\"on\">你必須在 <code>HeroesComponent</code> 中也向本服務中的這種形式看齊。</p><p translation-origin=\"off\">You need to adjust your application to work with that change to <code>HeroesComponent</code>.</p>\n\n<p translation-result=\"on\">找到 <code>getHeroes</code> 方法，並且把它替換為如下程式碼。下面是新程式碼和當前版本的對比顯示。</p><p translation-origin=\"off\">Find the <code>getHeroes</code> method and replace it with the following code. the new code is shown side-by-side with the current version for comparison.</p>\n\n<code-tabs>\n    <code-pane header=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes);\n}\n\n</code-pane>\n    <code-pane header=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\"><code>Observable.subscribe()</code> 是關鍵的差異點。</p><p translation-origin=\"off\"><code>Observable.subscribe()</code> is the critical difference.</p>\n\n<p translation-result=\"on\">上一個版本把英雄的陣列賦值給了該元件的 <code>heroes</code> 屬性。這種賦值是<em>同步</em>的，這裡包含的假設是伺服器能立即返回英雄陣列或者瀏覽器能在等待伺服器響應時凍結介面。</p><p translation-origin=\"off\">The previous version assigns an array of heroes to the component's <code>heroes</code> property.\nThe assignment occurs <em>synchronously</em>, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</p>\n\n<p translation-result=\"on\">當 <code>HeroService</code> 真的向遠端伺服器發起請求時，這種方式就行不通了。</p><p translation-origin=\"off\">That <em>won't work</em> when the <code>HeroService</code> is actually making requests of a remote server.</p>\n\n<p translation-result=\"on\">新的版本等待 <code>Observable</code> 發出這個英雄陣列，這可能立即發生，也可能會在幾分鐘之後。然後，<code>subscribe()</code> 方法把這個英雄陣列傳給這個回呼(Callback)函式，該函式把英雄陣列賦值給元件的 <code>heroes</code> 屬性。</p><p translation-origin=\"off\">The new version waits for the <code>Observable</code> to emit the array of heroes, which could happen now or several minutes from now.\nThe <code>subscribe()</code> method passes the emitted array to the callback,\nwhich sets the component's <code>heroes</code> property.</p>\n\n<p translation-result=\"on\">使用這種非同步方式，當 <code>HeroService</code> 從遠端伺服器獲取英雄資料時，就<em>可以工作了</em>。</p><p translation-origin=\"off\">This asynchronous approach <em>works</em> when the <code>HeroService</code> requests heroes from the server.</p>\n\n<h2 id=\"show-messages\" translation-result=\"on\">顯示訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Show messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">這一節將指導你：</p><p translation-origin=\"off\">This section guides you through the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">新增一個 <code>MessagesComponent</code>，它在螢幕的底部顯示應用中的訊息。</p><p translation-origin=\"off\">Adding a <code>MessagesComponent</code> that displays application messages at the bottom of the screen</p>\n\n</li>\n<li>\n<p translation-result=\"on\">建立一個可注入的、全應用級別的 <code>MessageService</code>，用於傳送要顯示的訊息。</p><p translation-origin=\"off\">Creating an injectable, application-wide <code>MessageService</code> for sending messages to be displayed</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把 <code>MessageService</code> 注入到 <code>HeroService</code> 中。</p><p translation-origin=\"off\">Injecting <code>MessageService</code> into the <code>HeroService</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">當 <code>HeroService</code> 成功獲取了英雄資料時顯示一條訊息。</p><p translation-origin=\"off\">Displaying a message when <code>HeroService</code> fetches heroes successfully</p>\n\n</li>\n</ul>\n<h3 id=\"create-messagescomponent\" translation-result=\"on\">建立 <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Create <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 CLI 建立 <code>MessagesComponent</code>。</p><p translation-origin=\"off\">Use <code>ng generate</code> to create the <code>MessagesComponent</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component messages\n\n</code-example>\n<p translation-result=\"on\">CLI 在 <code>src/app/messages</code> 中建立了元件檔案，並且把 <code>MessagesComponent</code> 宣告在了 <code>AppModule</code> 中。</p><p translation-origin=\"off\"><code>ng generate</code> creates the component files in the <code>src/app/messages</code> directory and declares the <code>MessagesComponent</code> in <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">修改 <code>AppComponent</code> 的範本來顯示 <code>MessagesComponent</code>。</p><p translation-origin=\"off\">Edit the <code>AppComponent</code> template to display the <code>MessagesComponent</code>.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-example>\n<p translation-result=\"on\">你可以在頁面的底部看到來自的 <code>MessagesComponent</code> 的預設內容。</p><p translation-origin=\"off\">You should see the default paragraph from <code>MessagesComponent</code> at the bottom of the page.</p>\n\n<h3 id=\"create-the-messageservice\" translation-result=\"on\">建立 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Create the <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">使用 CLI 在 <code>src/app</code> 中建立 <code>MessageService</code>。</p><p translation-origin=\"off\">Use <code>ng generate</code> to create the <code>MessageService</code> in <code>src/app</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service message\n\n</code-example>\n<p translation-result=\"on\">開啟 <code>MessageService</code>，並把它的內容改成這樣。</p><p translation-origin=\"off\">Open <code>MessageService</code> and replace its contents with the following.</p>\n\n<code-example header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">該服務公開其 <code>messages</code> 快取和兩個方法：</p><p translation-origin=\"off\">The service exposes its cache of <code>messages</code> and two methods:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">將 <code>add()</code> 訊息新增到快取中的一種。</p><p translation-origin=\"off\">One to <code>add()</code> a message to the cache.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">另一個 <code>clear()</code> 快取。</p><p translation-origin=\"off\">Another to <code>clear()</code> the cache.</p>\n\n</li>\n</ul>\n<p>該服務對外暴露了它的 <code>messages</code> 快取，以及兩個方法：<code>add()</code> 方法往快取中新增一條訊息，<code>clear()</code> 方法用於清空快取。</p>\n<p><a id=\"inject-message-service\"></a></p>\n<h3 id=\"inject-it-into-the-heroservice\" translation-result=\"on\">把它注入到 <code>HeroService</code> 中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Inject it into the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>HeroService</code> 中匯入 <code>MessageService</code>。</p><p translation-origin=\"off\">In <code>HeroService</code>, import the <code>MessageService</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p translation-result=\"on\">修改這個建構函式，新增一個私有的 <code>messageService</code> 屬性引數。Angular 將會在建立 <code>HeroService</code> 時把 <code>MessageService</code> 的單例注入到這個屬性中。</p><p translation-origin=\"off\">Edit the constructor with a parameter that declares a private <code>messageService</code> property.\nAngular injects the singleton <code>MessageService</code> into that property when it creates the <code>HeroService</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">這是一個典型的“服務中的服務”場景，你把 <code>MessageService</code> 注入到了 <code>HeroService</code> 中，而 <code>HeroService</code> 又被注入到了 <code>HeroesComponent</code> 中。</p><p translation-origin=\"off\">This is an example of a typical <em>service-in-service</em> scenario in which\nyou inject the <code>MessageService</code> into the <code>HeroService</code> which is injected into the <code>HeroesComponent</code>.</p>\n\n</div>\n<h3 id=\"send-a-message-from-heroservice\" translation-result=\"on\">從 <code>HeroService</code> 中傳送一條訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Send a message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">修改 <code>getHeroes()</code> 方法，在獲取到英雄陣列時傳送一條訊息。</p><p translation-origin=\"off\">Edit the <code>getHeroes()</code> method to send a message when the heroes are fetched.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  this.messageService.add('HeroService: fetched heroes');\n  return heroes;\n}\n\n</code-example>\n<h3 id=\"display-the-message-from-heroservice\" translation-result=\"on\">從 <code>HeroService</code> 中顯示訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Display the message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>MessagesComponent</code> 可以顯示所有訊息，包括當 <code>HeroService</code> 獲取到英雄資料時傳送的那條。</p><p translation-origin=\"off\">The <code>MessagesComponent</code> should display all messages, including the message sent by the <code>HeroService</code> when it fetches heroes.</p>\n\n<p translation-result=\"on\">開啟 <code>MessagesComponent</code>，並且匯入 <code>MessageService</code>。</p><p translation-origin=\"off\">Open <code>MessagesComponent</code> and import the <code>MessageService</code>.</p>\n\n<code-example header=\"src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p translation-result=\"on\">修改建構函式，新增一個 <strong>public</strong> 的 <code>messageService</code> 屬性。Angular 將會在建立 <code>MessagesComponent</code> 的例項時 把 <code>MessageService</code> 的例項注入到這個屬性中。</p><p translation-origin=\"off\">Edit the constructor with a parameter that declares a <strong>public</strong> <code>messageService</code> property.\nAngular injects the singleton <code>MessageService</code> into that property when it creates the <code>MessagesComponent</code>.</p>\n\n<code-example header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p translation-result=\"on\">這個 <code>messageService</code> 屬性必須是公共屬性，因為你將會在範本中繫結到它。</p><p translation-origin=\"off\">The <code>messageService</code> property <strong>must be public</strong> because you're going to bind to it in the template.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">Angular 只會繫結到元件的<em>公共</em>屬性。</p><p translation-origin=\"off\">Angular only binds to <em>public</em> component properties.</p>\n\n</div>\n<h3 id=\"bind-to-the-messageservice\" translation-result=\"on\">繫結到 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Bind to the <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把 <code>ng generate</code> 建立的 <code>MessagesComponent</code> 的範本改成這樣。</p><p translation-origin=\"off\">Replace the <code>MessagesComponent</code> template created by <code>ng generate</code> with the following.</p>\n\n<code-example header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">這個範本直接繫結到了元件的 <code>messageService</code> 屬性上。</p><p translation-origin=\"off\">This template binds directly to the component's <code>messageService</code>.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">只有在有訊息時才會顯示訊息區。</nt-wrapper><nt-wrapper translation-origin=\"off\">Only displays the messages area if there are messages to show.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在一系列 <code>&lt;div&gt;</code> 元素中展示訊息列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">Presents the list of messages in repeated <code>&lt;div&gt;</code> elements.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Angular <a href=\"guide/event-binding\">事件繫結</a></nt-wrapper><nt-wrapper translation-origin=\"off\">Angular <a href=\"guide/event-binding\">event binding</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把按鈕的 <code>click</code> 事件繫結到了 <code>MessageService.clear()</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the button's click event to <code>MessageService.clear()</code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">當你把 <a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">最終程式碼</a> 某一頁的內容新增到 <code>messages.component.css</code> 中時，這些訊息會變得好看一些。</p><p translation-origin=\"off\">The messages look better after you add the private CSS styles to <code>messages.component.css</code> as listed in one of the <a href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\">\"final code review\"</a> tabs below.</p>\n\n<h2 id=\"add-messageservice-to-heroescomponent\" translation-result=\"on\">為 hero 服務新增額外的訊息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Add MessageService to HeroesComponent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面的例子展示了當使用者點選某個英雄時發生的歷史。當你學到後面的<a href=\"tutorial/tour-of-heroes/toh-pt5\">路由</a>一章時，這會很有幫助。</p><p translation-origin=\"off\">The following example shows how to display a history of each time the user clicks on a hero.\nThis helps when you get to the next section on <a href=\"tutorial/tour-of-heroes/toh-pt5\">Routing</a>.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器，頁面顯示出了英雄列表。滾動到底部，就會在訊息區看到來自 <code>HeroService</code> 的訊息。點選 <strong>Clear messages</strong> 按鈕，訊息區不見了。</p><p translation-origin=\"off\">Refresh the browser to see the list of heroes, and scroll to the bottom to see the messages from the HeroService.\nEach time you click a hero, a new message appears to record the selection.\nUse the <strong>Clear messages</strong> button to clear the message history.</p>\n\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是本頁所提到的原始碼。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n}\n\n</code-pane>\n    <code-pane header=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero?: Hero;\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService, private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent {\n\n  constructor(public messageService: MessageService) {}\n\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\"&gt;\n\n  &lt;h2&gt;Messages&lt;/h2&gt;\n  &lt;button type=\"button\" class=\"clear\"\n          (click)=\"messageService.clear()\"&gt;Clear messages&lt;/button&gt;\n  &lt;div *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: #A80000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\n\n.clear {\n  color: #333;\n  background-color: #eee;\n  margin-bottom: 12px;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.clear:hover {\n  color: white;\n  background-color: #42545C;\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    // no need to place any providers due to the `providedIn` flag...\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">你把資料存取邏輯重構到了 <code>HeroService</code> 類中。</p><p translation-origin=\"off\">You refactored data access to the <code>HeroService</code> class.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你在根注入器中把 <code>HeroService</code> 註冊為該服務的提供者，以便在別處可以注入它。</p><p translation-origin=\"off\">You registered the <code>HeroService</code> as the <em>provider</em> of its service at the root level so that it can be injected anywhere in the application.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用 <a href=\"guide/dependency-injection\">Angular 依賴注入</a>機制把它注入到了元件中。</p><p translation-origin=\"off\">You used <a href=\"guide/dependency-injection\">Angular Dependency Injection</a> to inject it into a component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你給 <code>HeroService</code> 中獲取資料的方法提供了一個非同步的函式簽名。</p><p translation-origin=\"off\">You gave the <code>HeroService</code> <code>get data</code> method an asynchronous signature.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你發現了 <code>Observable</code> 以及 RxJS 庫。</p><p translation-origin=\"off\">You discovered <code>Observable</code> and the RxJS <code>Observable</code> library.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用 RxJS 的 <code>of()</code> 方法返回了一個模擬英雄資料的<em>可觀察物件</em> (<code>Observable&lt;Hero[]&gt;</code>)。</p><p translation-origin=\"off\">You used RxJS <code>of()</code> to return <code>Observable&lt;Hero[]&gt;</code> an observable of mock heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在元件的 <code>ngOnInit</code> 生命週期鉤子中呼叫 <code>HeroService</code> 方法，而不是建構函式中。</p><p translation-origin=\"off\">The component's <code>ngOnInit</code> lifecycle hook calls the <code>HeroService</code> method, not the constructor.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你建立了一個 <code>MessageService</code>，以便在類之間實現松耦合通訊。</p><p translation-origin=\"off\">You created a <code>MessageService</code> for loosely coupled communication between classes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>HeroService</code> 連同注入到它的服務 <code>MessageService</code> 一起，注入到了元件中。</p><p translation-origin=\"off\">The <code>HeroService</code> injected into a component is created with another injected service, <code>MessageService</code>.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間：2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - errors/NG0201\n - guide/example-apps-list\n - guide/lifecycle-hooks\n - guide/localizing-angular\n - guide/router-tutorial-toh\n - guide/singleton-services\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/event-binding\n - guide/http\n - guide/lifecycle-hooks\n - guide/providers\n - tutorial/tour-of-heroes/toh-pt4#add-getheroes\n - tutorial/tour-of-heroes/toh-pt4#add-messageservice-to-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#add-services\n - tutorial/tour-of-heroes/toh-pt4#bind-to-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#call-it-in-ngoninit\n - tutorial/tour-of-heroes/toh-pt4#create-messagescomponent\n - tutorial/tour-of-heroes/toh-pt4#create-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#create-the-messageservice\n - tutorial/tour-of-heroes/toh-pt4#display-the-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#final-code-review\n - tutorial/tour-of-heroes/toh-pt4#get-hero-data\n - tutorial/tour-of-heroes/toh-pt4#inject-it-into-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#inject-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#injectable-services\n - tutorial/tour-of-heroes/toh-pt4#injectable-服務\n - tutorial/tour-of-heroes/toh-pt4#observable-data\n - tutorial/tour-of-heroes/toh-pt4#observable-heroservice\n - tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice\n - tutorial/tour-of-heroes/toh-pt4#see-it-run\n - tutorial/tour-of-heroes/toh-pt4#send-a-message-from-heroservice\n - tutorial/tour-of-heroes/toh-pt4#show-messages\n - tutorial/tour-of-heroes/toh-pt4#subscribe-in-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#summary\n - tutorial/tour-of-heroes/toh-pt4#update-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#why-services\n - tutorial/tour-of-heroes/toh-pt4#為-hero-服務新增額外的訊息\n - tutorial/tour-of-heroes/toh-pt4#為什麼需要服務\n - tutorial/tour-of-heroes/toh-pt4#從-heroservice-中傳送一條訊息\n - tutorial/tour-of-heroes/toh-pt4#從-heroservice-中顯示訊息\n - tutorial/tour-of-heroes/toh-pt4#修改-heroescomponent\n - tutorial/tour-of-heroes/toh-pt4#建立-heroservice\n - tutorial/tour-of-heroes/toh-pt4#建立-messagescomponent\n - tutorial/tour-of-heroes/toh-pt4#建立-messageservice\n - tutorial/tour-of-heroes/toh-pt4#可觀察observable的資料\n - tutorial/tour-of-heroes/toh-pt4#可觀察物件版本的-heroservice\n - tutorial/tour-of-heroes/toh-pt4#在-heroescomponent-中訂閱\n - tutorial/tour-of-heroes/toh-pt4#在-ngoninit-中呼叫它\n - tutorial/tour-of-heroes/toh-pt4#小結\n - tutorial/tour-of-heroes/toh-pt4#把它注入到-heroservice-中\n - tutorial/tour-of-heroes/toh-pt4#提供provideheroservice\n - tutorial/tour-of-heroes/toh-pt4#顯示訊息\n - tutorial/tour-of-heroes/toh-pt4#服務\n - tutorial/tour-of-heroes/toh-pt4#檢視最終程式碼\n - tutorial/tour-of-heroes/toh-pt4#檢視執行效果\n - tutorial/tour-of-heroes/toh-pt4#注入-heroservice\n - tutorial/tour-of-heroes/toh-pt4#新增-getheroes\n - tutorial/tour-of-heroes/toh-pt4#繫結到-messageservice\n - tutorial/tour-of-heroes/toh-pt4#獲取英雄資料\n - tutorial/tour-of-heroes/toh-pt5\n - tutorial/tour-of-heroes/toh-pt6\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/new\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/tour-of-heroes/toh-pt4.md?message=docs%3A%20請簡述你的修改...\n - https://rxjs.dev\n-->"}