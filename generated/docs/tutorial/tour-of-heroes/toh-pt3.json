{"id":"tutorial/tour-of-heroes/toh-pt3","title":"Create a feature component","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/tour-of-heroes/toh-pt3.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"create-a-feature-component\" translation-result=\"on\">主從元件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Create a feature component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">此刻，<code>HeroesComponent</code> 同時顯示了英雄列表和所選英雄的詳情。</p><p translation-origin=\"off\">At the moment, the <code>HeroesComponent</code> displays both the list of heroes and the selected hero's details.</p>\n\n<p translation-result=\"on\">把所有特性都放在同一個元件中，將會使應用“長大”後變得不可維護。你要把大型元件拆分成小一點的子元件，每個子元件都要集中精力處理某個特定的任務或工作流。</p><p translation-origin=\"off\">Keeping all features in one component as the application grows won't be maintainable.\nThis tutorial splits up large components into smaller subcomponents, each focused on a specific task or workflow.</p>\n\n<p translation-result=\"on\">第一步是把英雄詳情移入一個獨立的、可複用的 <code>HeroDetailComponent</code>。最終將：</p><p translation-origin=\"off\">The first step is to move the hero details into a separate, reusable <code>HeroDetailComponent</code> and end up with:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>HeroesComponent</code> 用來展示英雄列表。</p><p translation-origin=\"off\">A <code>HeroesComponent</code> that presents the list of heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 用來展示所選英雄的詳情。</p><p translation-origin=\"off\">A <code>HeroDetailComponent</code> that presents the details of a selected hero.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">  For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"make-the-herodetailcomponent\" translation-result=\"on\">製作 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make the <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 <code>ng generate</code> 建立一個名叫 <code>hero-detail</code> 的新元件。</p><p translation-origin=\"off\">Use this <code>ng generate</code> command to create a new component named <code>hero-detail</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-detail\n\n</code-example>\n<p translation-result=\"on\">這個命令會做這些事：</p><p translation-origin=\"off\">The command scaffolds the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">建立目錄 <code>src/app/hero-detail</code>。</p><p translation-origin=\"off\">Creates a directory <code>src/app/hero-detail</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">在這個目錄中會產生四個檔案：</p><p translation-origin=\"off\">Inside that directory, four files are created:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">作為元件樣式的 CSS 檔案。</p><p translation-origin=\"off\">A CSS file for the component styles.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">作為元件範本的 HTML 檔案。</p><p translation-origin=\"off\">An HTML file for the component template.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">存放元件類 <code>HeroDetailComponent</code> 的 TypeScript 檔案。</p><p translation-origin=\"off\">A TypeScript file with a component class named <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 類別的測試檔案。</p><p translation-origin=\"off\">A test file for the <code>HeroDetailComponent</code> class.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">該命令還會把 <code>HeroDetailComponent</code> 新增到 <code>src/app/app.module.ts</code> 檔案中 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>declarations</code> 列表中。</p><p translation-origin=\"off\">The command also adds the <code>HeroDetailComponent</code> as a declaration in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator of the <code>src/app/app.module.ts</code> file.</p>\n\n<h3 id=\"write-the-template\" translation-result=\"on\">編寫範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Write the template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#write-the-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">從 <code>HeroesComponent</code> 範本的底部把表示英雄詳情的 HTML 程式碼剪下貼上並覆蓋 <code>HeroDetailComponent</code> 範本的樣板程式碼。</p><p translation-origin=\"off\">Cut the HTML for the hero detail from the bottom of the <code>HeroesComponent</code> template and paste it over the boilerplate content in the <code>HeroDetailComponent</code> template.</p>\n\n<p translation-result=\"on\">所貼上的 HTML 參考了 <code>selectedHero</code>。新的 <code>HeroDetailComponent</code> 可以展示<em>任意</em>英雄，而不僅僅所選的。把範本中的所有 <code>selectedHero</code> 替換為 <code>hero</code>。</p><p translation-origin=\"off\">The pasted HTML refers to a <code>selectedHero</code>.\nThe new <code>HeroDetailComponent</code> can present <em>any</em> hero, not just a selected hero.\nReplace <code>selectedHero</code> with <code>hero</code> everywhere in the template.</p>\n\n<p translation-result=\"on\">完工之後，<code>HeroDetailComponent</code> 的範本應該是這樣的：</p><p translation-origin=\"off\">When you're done, the <code>HeroDetailComponent</code> template should look like this:</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-example>\n<h3 id=\"add-the-input-hero-property\" translation-result=\"on\">新增 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero</code> 屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#新增-input-hero-屬性\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> hero property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 範本中綁定了元件中的 <code>hero</code> 屬性，它的型別是 <code>Hero</code>。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> template binds to the component's <code>hero</code> property\nwhich is of type <code>Hero</code>.</p>\n\n<p translation-result=\"on\">開啟 <code>HeroDetailComponent</code> 類檔案，並匯入 <code>Hero</code> 符號。</p><p translation-origin=\"off\">Open the <code>HeroDetailComponent</code> class file and import the <code>Hero</code> symbol.</p>\n\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\nimport { Hero } from '../hero';\n\n</code-example>\n<p translation-result=\"on\"><code>hero</code> 屬性<a href=\"guide/inputs-outputs\" title=\"Input and Output properties\">必須是一個帶有 <code>@Input()</code> 裝飾器的輸入屬性</a>，因為<em>外部的</em> <code>HeroesComponent</code> 元件<a href=\"tutorial/tour-of-heroes/toh-pt3#heroes-component-template\">會繫結到它</a>。就像這樣：</p><p translation-origin=\"off\">The <code>hero</code> property\n<a href=\"guide/inputs-outputs\" title=\"Input and Output properties\">must be an <code>Input</code> property</a>,\nannotated with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator,\nbecause the <em>external</em> <code>HeroesComponent</code> <a href=\"tutorial/tour-of-heroes/toh-pt3#heroes-component-template\">binds to it</a> like this.</p>\n\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p translation-result=\"on\">修改 <code>@angular/core</code> 的匯入陳述式，匯入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 符號。</p><p translation-origin=\"off\">Amend the <code>@angular/core</code> import statement to include the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> symbol.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (import Input)\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p translation-result=\"on\">新增一個帶有 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 裝飾器的 <code>hero</code> 屬性。</p><p translation-origin=\"off\">Add a <code>hero</code> property, preceded by the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n\n</code-example>\n<p translation-result=\"on\">這就是你要對 <code>HeroDetailComponent</code> 類做的唯一一項修改。沒有其它屬性，也沒有展示邏輯。這個元件所做的只是透過 <code>hero</code> 屬性接收一個英雄物件，並顯示它。</p><p translation-origin=\"off\">That's the only change you should make to the <code>HeroDetailComponent</code> class.\nThere are no more properties. There's no presentation logic.\nThis component only receives a hero object through its <code>hero</code> property and displays it.</p>\n\n<h2 id=\"show-the-herodetailcomponent\" translation-result=\"on\">顯示 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Show the <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 會自行顯示英雄的詳情，但後面我們要移除這部分。本節會指導你把這部分邏輯委派給 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> used to display the hero details on its own, before you removed that part of the template.\nThis section guides you through delegating logic to the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">這兩個元件將會具有父子關係。當用戶從列表中選擇了某個英雄時，父元件 <code>HeroesComponent</code> 將透過把要顯示的新英雄傳送給子元件 <code>HeroDetailComponent</code>，來控制子元件。</p><p translation-origin=\"off\">The two components have a parent/child relationship.\nThe parent, <code>HeroesComponent</code>, controls the child, <code>HeroDetailComponent</code> by\nsending it a new hero to display whenever the user selects a hero from the list.</p>\n\n<p translation-result=\"on\">你不用修改 <code>HeroesComponent</code> <em>類</em>，但是要修改它的<em>範本</em>。</p><p translation-origin=\"off\">You don't need to change the <code>HeroesComponent</code> <em>class</em>, instead change its <em>template</em>.</p>\n\n<p><a id=\"heroes-component-template\"></a></p>\n<h3 id=\"update-the-heroescomponent-template\" translation-result=\"on\">修改 <code>HeroesComponent</code> 的範本<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Update the <code>HeroesComponent</code> template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 的選擇器是 <code>'app-hero-detail'</code>。把 <code>&lt;app-hero-detail&gt;</code> 新增到 <code>HeroesComponent</code> 範本的底部，以便把英雄詳情的檢視顯示到那裡。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> selector is <code>'app-hero-detail'</code>.\nAdd an <code>&lt;app-hero-detail&gt;</code> element near the bottom of the <code>HeroesComponent</code> template, where the hero detail view used to be.</p>\n\n<p translation-result=\"on\">把 <code>HeroesComponent.selectedHero</code> 繫結到該元素的 <code>hero</code> 屬性，就像這樣。</p><p translation-origin=\"off\">Bind the <code>HeroesComponent.selectedHero</code> to the element's <code>hero</code> property like this.</p>\n\n<code-example header=\"heroes.component.html (HeroDetail binding)\" path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>[hero]=\"selectedHero\"</code> 是 Angular 的<a href=\"guide/property-binding\">屬性繫結</a>語法。</p><p translation-origin=\"off\"><code>[hero]=\"selectedHero\"</code> is an Angular <a href=\"guide/property-binding\">property binding</a>.</p>\n\n<p translation-result=\"on\">這是一種<em>單向</em>資料繫結。從 <code>HeroesComponent</code> 的 <code>selectedHero</code> 屬性繫結到目標元素的 <code>hero</code> 屬性，並對映到了 <code>HeroDetailComponent</code> 的 <code>hero</code> 屬性。</p><p translation-origin=\"off\">It's a <em>one-way</em> data binding from\nthe <code>selectedHero</code> property of the <code>HeroesComponent</code> to the <code>hero</code> property of the target element, which maps to the <code>hero</code> property of the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">現在，當用戶在列表中點選某個英雄時，<code>selectedHero</code> 就改變了。當 <code>selectedHero</code> 改變時，<em>屬性繫結</em>會修改 <code>HeroDetailComponent</code> 的 <code>hero</code> 屬性，<code>HeroDetailComponent</code> 就會顯示這個新的英雄。</p><p translation-origin=\"off\">Now when the user clicks a hero in the list, the <code>selectedHero</code> changes.\nWhen the <code>selectedHero</code> changes, the <em>property binding</em> updates <code>hero</code> and\nthe <code>HeroDetailComponent</code> displays the new hero.</p>\n\n<p translation-result=\"on\">修改後的 <code>HeroesComponent</code> 的範本是這樣的：</p><p translation-origin=\"off\">The revised <code>HeroesComponent</code> template should look like this:</p>\n\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" header=\"heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-example>\n<p translation-result=\"on\">瀏覽器重新整理，應用又像以前一樣開始工作了。</p><p translation-origin=\"off\">The browser refreshes and the application starts working again as it did before.</p>\n\n<h2 id=\"what-changed\" translation-result=\"on\">有哪些變化？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">What changed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">像<a href=\"tutorial/tour-of-heroes/toh-pt2\">以前</a>一樣，一旦使用者點選了一個英雄的名字，該英雄的詳情就顯示在了英雄列表下方。現在，<code>HeroDetailComponent</code> 負責顯示那些詳情，而不再是 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">As <a href=\"tutorial/tour-of-heroes/toh-pt2\">before</a>, whenever a user clicks on a hero name,\nthe hero detail appears below the hero list.\nNow the <code>HeroDetailComponent</code> is presenting those details instead of the <code>HeroesComponent</code>.</p>\n\n<p translation-result=\"on\">把原來的 <code>HeroesComponent</code> 重構成兩個元件帶來了一些優點，無論是現在還是未來：</p><p translation-origin=\"off\">Refactoring the original <code>HeroesComponent</code> into two components yields benefits, both now and in the future:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">你透過縮減 <code>HeroesComponent</code> 的職責縮小了該元件。</p><p translation-origin=\"off\">You reduced the <code>HeroesComponent</code> responsibilities.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以把 <code>HeroDetailComponent</code> 改進成一個功能豐富的英雄編輯器，而不用改動父元件 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">You can evolve the <code>HeroDetailComponent</code> into a rich hero editor\nwithout touching the parent <code>HeroesComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以改進 <code>HeroesComponent</code>，而不用改動英雄詳情檢視。</p><p translation-origin=\"off\">You can evolve the <code>HeroesComponent</code> without touching the hero detail view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將來你可以在其它元件的範本中重複使用 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">You can re-use the <code>HeroDetailComponent</code> in the template of some future component.</p>\n\n</li>\n</ol>\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是本頁所提到的原始碼。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero?: Hero;\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;app-hero-detail [hero]=\"selectedHero\"&gt;&lt;/app-hero-detail&gt;\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt3/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/tour-of-heroes/toh-pt3#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">你建立了一個獨立的、可複用的 <code>HeroDetailComponent</code> 元件。</p><p translation-origin=\"off\">You created a separate, reusable <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你用<a href=\"guide/property-binding\">屬性繫結</a>語法來讓父元件 <code>HeroesComponent</code> 可以控制子元件 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">You used a <a href=\"guide/property-binding\">property binding</a> to give the parent <code>HeroesComponent</code> control over the child <code>HeroDetailComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你用 <a href=\"guide/inputs-outputs\"><code>@Input</code> 裝飾器</a>來讓 <code>hero</code> 屬性可以在外部的 <code>HeroesComponent</code> 中繫結。</p><p translation-origin=\"off\">You used the <a href=\"guide/inputs-outputs\"><code>@Input</code> decorator</a>\nto make the <code>hero</code> property available for binding\nby the external <code>HeroesComponent</code>.</p>\n\n</li>\n</ul>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Input\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/inputs-outputs\n - guide/property-binding\n - tutorial/tour-of-heroes/toh-pt2\n - tutorial/tour-of-heroes/toh-pt3#add-the-input-hero-property\n - tutorial/tour-of-heroes/toh-pt3#create-a-feature-component\n - tutorial/tour-of-heroes/toh-pt3#final-code-review\n - tutorial/tour-of-heroes/toh-pt3#heroes-component-template\n - tutorial/tour-of-heroes/toh-pt3#make-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#show-the-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#summary\n - tutorial/tour-of-heroes/toh-pt3#update-the-heroescomponent-template\n - tutorial/tour-of-heroes/toh-pt3#what-changed\n - tutorial/tour-of-heroes/toh-pt3#write-the-template\n - tutorial/tour-of-heroes/toh-pt3#主從元件\n - tutorial/tour-of-heroes/toh-pt3#修改-heroescomponent-的範本\n - tutorial/tour-of-heroes/toh-pt3#製作-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#小結\n - tutorial/tour-of-heroes/toh-pt3#顯示-herodetailcomponent\n - tutorial/tour-of-heroes/toh-pt3#有哪些變化\n - tutorial/tour-of-heroes/toh-pt3#檢視最終程式碼\n - tutorial/tour-of-heroes/toh-pt3#新增-input-hero-屬性\n - tutorial/tour-of-heroes/toh-pt3#編寫範本\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/tour-of-heroes/toh-pt3.md?message=docs%3A%20請簡述你的修改...\n-->"}