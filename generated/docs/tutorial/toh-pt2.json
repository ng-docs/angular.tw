{"id":"tutorial/toh-pt2","title":"Display a selection list","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt2.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"display-a-selection-list\" translation-result=\"on\">顯示英雄列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-a-selection-list\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"display-a-selection-listlink\">Display a selection list<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-a-selection-list\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本課程向你展示瞭如何：</p><p translation-origin=\"off\">This tutorial shows you how to:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">展開《英雄之旅》應用以顯示英雄列表。</p><p translation-origin=\"off\">Expand the Tour of Heroes application to display a list of heroes.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">允許使用者選擇英雄並顯示英雄的詳細資訊。</p><p translation-origin=\"off\">Allow users to select a hero and display the hero's details.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"create-mock-heroes\" translation-result=\"on\">建立模擬（mock）的英雄資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-mock-heroeslink\">Create mock heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">第一步是建立一些要顯示的英雄。</p><p translation-result=\"on\">在 <code>src/app/</code> 目錄下建立一個名叫 <code>mock-heroes.ts</code> 的檔案。定義一個包含十個英雄的常量陣列 <code>HEROES</code>，並匯出它。該檔案是這樣的。</p><p translation-origin=\"off\">The first step is to create some heroes to display.</p>\n\n<p translation-origin=\"off\">Create a file called <code>mock-heroes.ts</code> in the <code>src/app/</code> directory.\nDefine a <code>HEROES</code> constant as an array of ten heroes and export it.\nThe file should look like this.</p>\n\n<code-example header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<h2 id=\"displaying-heroes\" translation-result=\"on\">顯示這些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"displaying-heroeslink\">Displaying heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">開啟 <code>HeroesComponent</code> 類檔案，並匯入模擬的 <code>HEROES</code>。</p><p translation-origin=\"off\">Open the <code>HeroesComponent</code> class file and import the mock <code>HEROES</code>.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (import HEROES)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\">\nimport { HEROES } from '../mock-heroes';\n\n</code-example>\n<p translation-result=\"on\">往類中新增一個 <code>heroes</code> 屬性，這樣可以暴露出這個 <code>HEROES</code> 陣列，以供繫結。</p><p translation-origin=\"off\">In <code>HeroesComponent</code> class, define a component property called <code>heroes</code> to expose the <code>HEROES</code> array for binding.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"component\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n}\n\n</code-example>\n<h3 id=\"list-heroes-with-ngfor\" translation-result=\"on\">使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 列出這些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#使用-ngfor-列出這些英雄\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"list-heroes-with-ngforlink\">List heroes with <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">開啟 <code>HeroesComponent</code> 的範本檔案，並做如下修改：</p><p translation-origin=\"off\">Open the <code>HeroesComponent</code> template file and make the following changes:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在頂部新增 <code>&lt;h2&gt;</code>，。</p><p translation-origin=\"off\">Add an <code>&lt;h2&gt;</code> at the top.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>&lt;h2&gt;</code> 下方，新增 <code>&lt;ul&gt;</code> 元素。</p><p translation-origin=\"off\">Below the <code>&lt;h2&gt;</code>, add a <code>&lt;ul&gt;</code> element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>&lt;ul&gt;</code> 元素中，插入 <code>&lt;li&gt;</code> 。</p><p translation-origin=\"off\">In the <code>&lt;ul&gt;</code> element, insert an <code>&lt;li&gt;</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>&lt;li&gt;</code> 中放一個 <code>&lt;button&gt;</code> 元素，以便在 <code>&lt;span&gt;</code> 元素中顯示單個 <code>hero</code> 的屬性。</p><p translation-origin=\"off\">Place a <code>&lt;button&gt;</code> inside the <code>&lt;li&gt;</code> that displays properties of a <code>hero</code> inside <code>&lt;span&gt;</code> elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增 CSS 類以設定元件的樣式。</p><p translation-origin=\"off\">Add CSS classes to style the component.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">做完之後應該是這樣的：</p><p translation-origin=\"off\">to look like this:</p>\n\n<code-example header=\"heroes.component.html (heroes template)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li&gt;\n    &lt;button type=\"button\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">由於屬性 <code>hero</code> 不存在，因此會顯示一個錯誤。要存取每個英雄並列出所有英雄，請在 <code>&lt;li&gt;</code> 上新增 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 以遍歷英雄列表：</p><p translation-origin=\"off\">That displays an error since the <code>hero</code> property doesn't exist.\nTo have access to each individual hero and list them all, add an <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to the <code>&lt;li&gt;</code> to iterate through the list of heroes:</p>\n\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a> 是一個 Angular 的複寫器（repeater）指令。它會為列表中的每項資料複寫它的宿主元素。</p><p translation-result=\"on\">這個例子中涉及的語法如下：</p><p translation-origin=\"off\">The <a href=\"guide/built-in-directives#ngFor\"><code>*ngFor</code></a> is Angular's <em>repeater</em> directive.\nIt repeats the host element for each element in a list.</p>\n\n<p translation-origin=\"off\">The syntax in this example is as follows:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">語法</nt-wrapper><nt-wrapper translation-origin=\"off\">Syntax</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>&lt;li&gt;</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宿主元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">The host element.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>heroes</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">來自 <code>HeroesComponent</code> 類別的存放模擬（mock）英雄的列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">Holds the mock heroes list from the <code>HeroesComponent</code> class, the mock heroes list.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>hero</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">儲存列表每次迭代的當前 hero 物件。</nt-wrapper><nt-wrapper translation-origin=\"off\">Holds the current hero object for each iteration through the list.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">不要忘了在 <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 前面放上星號（<code>*</code>），它是該語法中的關鍵部分。</p><p translation-origin=\"off\">Don't forget to put the asterisk <code>*</code> in front of <code><a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nIt's a critical part of the syntax.</p>\n\n</div>\n<p translation-result=\"on\">瀏覽器重新整理之後，英雄列表出現了。</p><p translation-origin=\"off\">After the browser refreshes, the list of heroes appears.</p>\n\n<div class=\"callout is-helpful\">\n<header ng-should-translate=\"\" translation-result=\"on\">互動元素</header><header ng-should-translate=\"\" translation-origin=\"off\">Interactive elements</header>\n\n<p translation-result=\"on\">在 <code>&lt;li&gt;</code> 元素中，新增一個 <code>&lt;button&gt;</code> 元素，以包裹此英雄的詳細資訊，然後讓 hero 程式設計可點選的。要增強無障礙性的，最好使用原生互動式 HTML 元素（例如 <code>&lt;button&gt;</code>），而不是向非互動式元素新增事件偵聽器（例如 <code>&lt;li&gt;</code>）。在這裡，就使用了互動元素 <code>&lt;button&gt;</code>，而不是往 <code>&lt;li&gt;</code> 元素上直接新增事件。</p><p translation-result=\"on\">有關無障礙性的更多詳細資訊，請參閱<a href=\"guide/accessibility\">Angular</a>中的無障礙性。</p><p translation-origin=\"off\">Inside the <code>&lt;li&gt;</code> element, add a <code>&lt;button&gt;</code> element to wrap the hero's details, and then make the hero clickable. To improve accessibility, use HTML elements that are inherently interactive instead of adding an event listener to a non-interactive element. In this case, the interactive <code>&lt;button&gt;</code> element is used instead of adding an event to the <code>&lt;li&gt;</code> element.</p>\n\n<p translation-origin=\"off\">For more details on accessibility, see <a href=\"guide/accessibility\">Accessibility in Angular</a>.</p>\n\n</div>\n<p><a id=\"styles\"></a></p>\n<h3 id=\"style-the-heroes\" translation-result=\"on\">給英雄列表“美容”<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"style-the-heroeslink\">Style the heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">英雄列表應該富有吸引力，並且當用戶把滑鼠移到某個英雄上和從列表中選中某個英雄時，應該給出視覺反饋。</p><p translation-result=\"on\">在<a href=\"tutorial/toh-pt0#app-wide-styles\">課程的第一章</a>，你曾在 <code>styles.css</code> 中為整個應用設定了一些基礎的樣式。但那個樣式表並不包含英雄列表所需的樣式。</p><p translation-result=\"on\">固然，你可以把更多樣式加入到 <code>styles.css</code>，並且放任它隨著你新增更多元件而不斷膨脹。</p><p translation-result=\"on\">你可以定義屬於特定元件的私有樣式。這會讓元件所需的一切（比如程式碼、HTML 和 CSS）都放在一起。</p><p translation-result=\"on\">這種方式讓你在其它地方複用該元件更加容易，並且即使全域樣式和這裡不一樣，元件也仍然具有期望的外觀。</p><p translation-result=\"on\">你可以用多種方式定義私有樣式，或者內聯在 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 陣列中，或者在 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 所指出的樣式表文件中。</p><p translation-result=\"on\">當 <code>ng generate</code> 建立 <code>HeroesComponent</code> 時，它也同時為 <code>HeroesComponent</code> 建立了空白的 <code>heroes.component.css</code> 樣式表文件，並且讓 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 指向它，就像這樣。</p><p translation-origin=\"off\">The heroes list should be attractive and should respond visually when users\nhover over and select a hero from the list.</p>\n\n<p translation-origin=\"off\">In the <a href=\"tutorial/toh-pt0#app-wide-styles\">first tutorial</a>, you set the basic styles for the entire application in <code>styles.css</code>.\nThat style sheet didn't include styles for this list of heroes.</p>\n\n<p translation-origin=\"off\">You could add more styles to <code>styles.css</code> and keep growing that style sheet as you add components.</p>\n\n<p translation-origin=\"off\">You may prefer instead to define private styles for a specific component. This keeps everything a component needs, such as the code, the HTML, and the CSS, together in one place.</p>\n\n<p translation-origin=\"off\">This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</p>\n\n<p translation-origin=\"off\">You define private styles either inline in the <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> array or as style sheet files identified in the <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> array.</p>\n\n<p translation-origin=\"off\">When the <code>ng generate</code> created the <code>HeroesComponent</code>, it created an empty <code>heroes.component.css</code> style sheet for the <code>HeroesComponent</code> and pointed to it in <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> like this.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (@Component)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\n</code-example>\n<p translation-result=\"on\">開啟 <code>heroes.component.css</code> 檔案，並且把 <code>HeroesComponent</code> 的私有 CSS 樣式貼上進去。\n你可以在<a href=\"tutorial/toh-pt2#final-code-review\">檢視最終程式碼</a>中找到它們。</p><p translation-origin=\"off\">Open the <code>heroes.component.css</code> file and paste in the private CSS styles for the <code>HeroesComponent</code> from the <a href=\"tutorial/toh-pt2#final-code-review\">final code review</a>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元資料中指定的樣式和樣式表都是侷限於該元件的。<code>heroes.component.css</code> 中的樣式只會作用於 <code>HeroesComponent</code>，既不會影響到元件外的 HTML，也不會影響到其它元件中的 HTML。</p><p translation-origin=\"off\">Styles and style sheets identified in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata are scoped to that specific component.\nThe <code>heroes.component.css</code> styles apply only to the <code>HeroesComponent</code> and don't affect the outer HTML or the HTML in any other component.</p>\n\n</div>\n<h2 id=\"viewing-details\" translation-result=\"on\">檢視詳情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#viewing-details\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"viewing-detailslink\">Viewing details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#viewing-details\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當用戶在此列表中點選一個英雄時，該元件應該在頁面底部顯示所選英雄的詳情。</p><p translation-result=\"on\">本節中的程式碼會監聽英雄條目的點選事件，並顯示與更新英雄的詳情。</p><p translation-origin=\"off\">When the user clicks a hero in the list, the component should display the selected hero's details at the bottom of the page.</p>\n\n<p translation-origin=\"off\">The code in this section listens for the hero item click event and display/update the hero details.</p>\n\n<h3 id=\"add-a-click-event-binding\" translation-result=\"on\">新增 <code>click</code> 事件繫結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-click-event-bindinglink\">Add a click event binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">為 <code>&lt;li&gt;</code> 中的 <code>&lt;button&gt;</code> 上新增一個點選事件的繫結程式碼：</p><p translation-origin=\"off\">Add a click event binding to the <code>&lt;button&gt;</code> in the <code>&lt;li&gt;</code> like this:</p>\n\n<code-example header=\"heroes.component.html (template excerpt)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n  &lt;button type=\"button\" (click)=\"onSelect(hero)\"&gt;\n  &lt;!-- ... --&gt;\n\n</code-example>\n<p translation-result=\"on\">這是 Angular <a href=\"guide/event-binding\">事件繫結</a> 語法的例子。</p><p translation-result=\"on\"><code>click</code> 外面的圓括號會讓 Angular 監聽這個 <code>&lt;button&gt;</code> 元素的 <code>click</code> 事件。\n當用戶點選 <code>&lt;button&gt;</code> 時，Angular 就會執行表示式 <code>onSelect(hero)</code>。</p><p translation-result=\"on\">下一部分，會在 <code>HeroesComponent</code> 上定義一個 <code>onSelect()</code> 方法，用來顯示 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 表示式所定義的那個英雄（<code>hero</code>）。</p><p translation-origin=\"off\">This is an example of Angular's <a href=\"guide/event-binding\">event binding</a> syntax.</p>\n\n<p translation-origin=\"off\">The parentheses around <code>click</code> tell Angular to listen for the <code>&lt;button&gt;</code> element's <code>click</code> event.\nWhen the user clicks in the <code>&lt;button&gt;</code>, Angular executes the <code>onSelect(hero)</code> expression.</p>\n\n<p translation-origin=\"off\">In the next section, define an <code>onSelect()</code> method in <code>HeroesComponent</code> to display the hero that was defined in the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> expression.</p>\n\n<h3 id=\"add-the-click-event-handler\" translation-result=\"on\">新增 <code>click</code> 事件處理器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-the-click-event-handlerlink\">Add the click event handler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">把該元件的 <code>hero</code> 屬性改名為 <code>selectedHero</code>，但不要為它賦值。\n因為應用剛剛啟動時並沒有<em>所選英雄</em>。</p><p translation-result=\"on\">新增如下 <code>onSelect()</code> 方法，它會把範本中被點選的英雄賦值給元件的 <code>selectedHero</code> 屬性。</p><p translation-origin=\"off\">Rename the component's <code>hero</code> property to <code>selectedHero</code> but don't assign any value to it since there is no <em>selected hero</em> when the application starts.</p>\n\n<p translation-origin=\"off\">Add the following <code>onSelect()</code> method, which assigns the clicked hero from the template to the component's <code>selectedHero</code>.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (onSelect)\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\">\nselectedHero?: Hero;\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<h3 id=\"add-a-details-section\" translation-result=\"on\">新增詳情區<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-details-section\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-details-sectionlink\">Add a details section<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-details-section\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">現在，元件的範本中有一個列表。要想在點選列表中英雄的名字時顯示該英雄的詳情，就要在範本中新增一個區域，用來顯示這些詳情。在 <code>heroes.component.html</code> 中該列表的緊下方，新增如下程式碼：</p><p translation-origin=\"off\">Currently, you have a list in the component template.\nTo show details about a hero when you click their name in the list, add a section\nin the template that displays their details.\nAdd the following to <code>heroes.component.html</code> beneath the list section:</p>\n\n<code-example header=\"heroes.component.html (selected hero details)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n  &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;id: {{selectedHero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">只有在選擇英雄時才會顯示英雄詳細資訊。最初建立元件時，沒有所選的 hero。將 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令新增到包裝 hero 詳細資訊的 <code>&lt;div&gt;</code> 中。該指令會告訴 Angular 僅在實際定義 <code>selectedHero</code> 時（在它被透過點選英雄來選擇）。</p><p translation-origin=\"off\">The hero details should only be displayed when a hero is selected. When a component is created initially, there is no selected hero. Add the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive to the <code>&lt;div&gt;</code> that wraps the hero details. This directive tells Angular to render the section only when the <code>selectedHero</code> is defined after it has been selected by clicking on a hero.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">不要忘了 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星號（<code>*</code>），它是該語法中的關鍵部分。</p><p translation-origin=\"off\">Don't forget the asterisk <code>*</code> character in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.\nIt's a critical part of the syntax.</p>\n\n</div>\n<h3 id=\"style-the-selected-hero\" translation-result=\"on\">為選定的英雄設定樣式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"style-the-selected-herolink\">Style the selected hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">為了標出選定的英雄，你可以在<a href=\"tutorial/toh-pt2#styles\">以前新增過的樣式中</a>增加 CSS 類 <code>.selected</code>。若要把 <code>.selected</code> 類應用於此 <code>&lt;li&gt;</code> 上，請使用類繫結。</p><p translation-origin=\"off\">To help identify the selected hero, you can use the <code>.selected</code> CSS class in the <a href=\"tutorial/toh-pt2#styles\">styles you added earlier</a>.\nTo apply the <code>.selected</code> class to the <code>&lt;li&gt;</code> when the user clicks it, use class binding.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Selected hero with dark background and light text that differentiates it from unselected list items\" src=\"generated/images/guide/toh/heroes-list-selected.png\" width=\"594\" height=\"290\">\n</div>\n<p translation-result=\"on\">Angular 的<a href=\"guide/class-binding\">類繫結</a>可以有條件地新增和刪除 CSS 類別。只需將 <code>[class.some-css-class]=\"some-condition\"</code> 新增到要設定樣式的元素即可。</p><p translation-result=\"on\">在 <code>HeroesComponent</code> 範本中的 <code>&lt;button&gt;</code> 元素上新增 <code>[class.selected]</code> 繫結，程式碼如下：</p><p translation-origin=\"off\">Angular's <a href=\"guide/class-binding\">class binding</a> can add and remove a CSS class conditionally.\nAdd <code>[class.some-css-class]=\"some-condition\"</code> to the element you want to style.</p>\n\n<p translation-origin=\"off\">Add the following <code>[class.selected]</code> binding to the <code>&lt;button&gt;</code> in the <code>HeroesComponent</code> template:</p>\n\n<code-example header=\"heroes.component.html (toggle the 'selected' CSS class)\" path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p translation-result=\"on\">如果當前行的英雄和 <code>selectedHero</code> 相同，Angular 就會新增 CSS 類 <code>selected</code>，否則就會移除它。</p><p translation-result=\"on\">最終的 <code>&lt;li&gt;</code> 是這樣的：</p><p translation-origin=\"off\">When the current row hero is the same as the <code>selectedHero</code>, Angular adds the <code>selected</code> CSS class.\nWhen the two heroes are different, Angular removes the class.</p>\n\n<p translation-origin=\"off\">The finished <code>&lt;li&gt;</code> looks like this:</p>\n\n<code-example header=\"heroes.component.html (list item hero)\" path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n  &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n    &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n  &lt;/button&gt;\n&lt;/li&gt;\n\n</code-example>\n<p><a id=\"final-code-review\"></a></p>\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-reviewlink\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">下面是本頁面中所提及的程式碼檔案，包括 <code>HeroesComponent</code> 的樣式。</p><p translation-origin=\"off\">Here are the code files discussed on this page, including the <code>HeroesComponent</code> styles.</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 12, name: 'Dr. Nice' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr. IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HEROES } from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n  selectedHero?: Hero;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button [class.selected]=\"hero === selectedHero\" type=\"button\" (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\"&gt;\n  &lt;h2&gt;{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;id: {{selectedHero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n.heroes li {\n  display: flex;\n}\n\n.heroes button {\n  flex: 1;\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: 0;\n  border-radius: 4px;\n  display: flex;\n  align-items: stretch;\n  height: 1.8em;\n}\n\n.heroes button:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n  left: .1em;\n}\n\n.heroes button:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes button.selected {\n  background-color: black;\n  color: white;\n}\n\n.heroes button.selected:hover {\n  background-color: #505050;\n  color: white;\n}\n\n.heroes button.selected:active {\n  background-color: black;\n  color: white;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.heroes .name {\n  align-self: center;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summarylink\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">英雄之旅應用在一個主從檢視中顯示了英雄列表。</p><p translation-origin=\"off\">The Tour of Heroes application displays a list of heroes with a detail view.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用者可以選擇一個英雄，並檢視該英雄的詳情。</p><p translation-origin=\"off\">The user can select a hero and see that hero's details.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 顯示了一個列表。</p><p translation-origin=\"off\">You used <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> to display a list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 來根據條件包含或排除了一段 HTML。</p><p translation-origin=\"off\">You used <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to conditionally include or exclude a block of HTML.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你可以用 <code>class</code> 繫結來切換 CSS 的樣式類別。</p><p translation-origin=\"off\">You can toggle a CSS style class with a <code>class</code> binding.</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間： 5/23/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/OnInit\n - api/forms/NgModel\n - guide/accessibility\n - guide/built-in-directives#ngFor\n - guide/class-binding\n - guide/event-binding\n - tutorial/toh-pt0#app-wide-styles\n - tutorial/toh-pt2#add-a-click-event-binding\n - tutorial/toh-pt2#add-a-details-section\n - tutorial/toh-pt2#add-the-click-event-handler\n - tutorial/toh-pt2#create-mock-heroes\n - tutorial/toh-pt2#display-a-selection-list\n - tutorial/toh-pt2#displaying-heroes\n - tutorial/toh-pt2#final-code-review\n - tutorial/toh-pt2#list-heroes-with-ngfor\n - tutorial/toh-pt2#style-the-heroes\n - tutorial/toh-pt2#style-the-selected-hero\n - tutorial/toh-pt2#styles\n - tutorial/toh-pt2#summary\n - tutorial/toh-pt2#viewing-details\n - tutorial/toh-pt2#為選定的英雄設定樣式\n - tutorial/toh-pt2#使用-ngfor-列出這些英雄\n - tutorial/toh-pt2#建立模擬mock的英雄資料\n - tutorial/toh-pt2#小結\n - tutorial/toh-pt2#顯示英雄列表\n - tutorial/toh-pt2#顯示這些英雄\n - tutorial/toh-pt2#檢視最終程式碼\n - tutorial/toh-pt2#檢視詳情\n - tutorial/toh-pt2#新增-click-事件處理器\n - tutorial/toh-pt2#新增-click-事件繫結\n - tutorial/toh-pt2#新增詳情區\n - tutorial/toh-pt2#給英雄列表美容\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt2.md?message=docs%3A%20請簡述你的修改...\n-->"}