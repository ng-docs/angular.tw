{"id":"tutorial/toh-pt5","title":"Add navigation with routing","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt5.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"add-navigation-with-routing\" translation-result=\"on\">用路由新增導航支援<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-navigation-with-routing\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"add-navigation-with-routinglink\">Add navigation with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-navigation-with-routing\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">《英雄之旅》有一些新需求：</p><p translation-origin=\"off\">The Tour of Heroes application has new requirements:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">新增一個<em>儀表盤</em>檢視</p><p translation-origin=\"off\">Add a <em>Dashboard</em> view</p>\n\n</li>\n<li>\n<p translation-result=\"on\">新增在<em>英雄列表</em>和<em>儀表盤</em>檢視之間導航的能力</p><p translation-origin=\"off\">Add the ability to navigate between the <em>Heroes</em> and <em>Dashboard</em> views</p>\n\n</li>\n<li>\n<p translation-result=\"on\">無論在哪個檢視中點選一個英雄，都會導航到該英雄的詳情頁</p><p translation-origin=\"off\">When users click a hero name in either view, navigate to a detail view of the selected hero</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在郵件中點選一個<em>深連結</em>，會直接開啟一個特定英雄的詳情檢視</p><p translation-origin=\"off\">When users click a <em>deep link</em> in an email, open the detail view for a particular hero</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<p translation-result=\"on\">完成時，使用者就能像這樣在應用中導航：</p><p translation-origin=\"off\">When you're done, users can navigate the application like this:</p>\n\n<div class=\"lightbox\">\n<img alt=\"View navigations\" src=\"generated/images/guide/toh/nav-diagram.png\" width=\"1550\" height=\"822\">\n</div>\n<h2 id=\"add-the-approutingmodule\" translation-result=\"on\">新增 <code>AppRoutingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-approutingmodule\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-the-approutingmodulelink\">Add the <code>AppRoutingModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-approutingmodule\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中，最好在一個獨立的最上層模組中載入和配置路由器，它專注於路由功能，然後由根模組 <code>AppModule</code> 匯入它。</p><p translation-result=\"on\">按照慣例，這個模組類別的名字叫做 <code>AppRoutingModule</code>，並且位於 <code>src/app</code> 下的 <code>app-routing.module.ts</code> 檔案中。</p><p translation-result=\"on\">執行 <code>ng generate</code> 以建立該應用的路由模組。</p><p translation-origin=\"off\">In Angular, the best practice is to load and configure the router in a separate, top-level module.\nThe router is dedicated to routing and imported by the root <code>AppModule</code>.</p>\n\n<p translation-origin=\"off\">By convention, the module class name is <code>AppRoutingModule</code> and it belongs in the <code>app-routing.module.ts</code> in the <code>src/app</code> directory.</p>\n\n<p translation-origin=\"off\">Run <code>ng generate</code> to create the application routing module.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate module app-routing --flat --module=app\n\n</code-example>\n<div class=\"alert is-helpful\">\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">引數</nt-wrapper><nt-wrapper translation-origin=\"off\">Parameter</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>--flat</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把這個檔案放進了 <code>src/app</code> 中，而不是單獨的目錄中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Puts the file in <code>src/app</code> instead of its own directory.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>--module=app</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">告訴 <code>ng generate</code> 把它註冊到 <code>AppModule</code> 的 <code>imports</code> 陣列中。</nt-wrapper><nt-wrapper translation-origin=\"off\">Tells <code>ng generate</code> to register it in the <code>imports</code> array of the <code>AppModule</code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</div>\n<p translation-result=\"on\"><code>ng generate</code> 建立的檔案是這樣的：</p><p translation-origin=\"off\">The file that <code>ng generate</code> creates looks like this:</p>\n\n<code-example header=\"src/app/app-routing.module.ts (generated)\" path=\"toh-pt5/src/app/app-routing.module.0.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">把它替換為如下程式碼：</p><p translation-origin=\"off\">Replace it with the following:</p>\n\n<code-example header=\"src/app/app-routing.module.ts (updated)\" path=\"toh-pt5/src/app/app-routing.module.1.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\nimport { HeroesComponent } from './heroes/heroes.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p translation-result=\"on\">首先，<code>app-routing.module.ts</code> 會匯入 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 和 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>，以便該應用具有路由功能。配置好路由後，接著匯入 <code>HeroesComponent</code>，它將告訴路由器要去什麼地方。</p><p translation-result=\"on\">注意，對 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 的參考和 <code>declarations</code> 陣列不是必要的，因此它們不再是 <code>AppRoutingModule</code> 的一部分。以下各節將詳細介紹 <code>AppRoutingModule</code> 的其餘部分。</p><p translation-origin=\"off\">First, the <code>app-routing.module.ts</code> file imports <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> and <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> so the application can have routing capability.\nThe next import, <code>HeroesComponent</code>, gives the Router somewhere to go once you configure the routes.</p>\n\n<p translation-origin=\"off\">Notice that the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> references and <code>declarations</code> array are unnecessary, so are no longer part of <code>AppRoutingModule</code>.\nThe following sections explain the rest of the <code>AppRoutingModule</code> in more detail.</p>\n\n<h3 id=\"routes\" translation-result=\"on\">路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"routeslink\">Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">該檔案的下一部分是你的路由配置。<em>Routes</em> 告訴路由器，當用戶單擊連結或將 URL 貼上進瀏覽器位址列時要顯示哪個檢視。</p><p translation-result=\"on\">由於 <code>app-routing.module.ts</code> 已經匯入了 <code>HeroesComponent</code>，因此你可以直接在 <code>routes</code> 陣列中使用它：</p><p translation-origin=\"off\">The next part of the file is where you configure your routes.\n<em>Routes</em> tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</p>\n\n<p translation-origin=\"off\">Since <code>app-routing.module.ts</code> already imports <code>HeroesComponent</code>, you can use it in the <code>routes</code> array:</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"heroes-route\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<p translation-result=\"on\">典型的 Angular <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 具有兩個屬性：</p><p translation-origin=\"off\">A typical Angular <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> has two properties:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">屬性</nt-wrapper><nt-wrapper translation-origin=\"off\">Properties</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用來匹配瀏覽器位址列中 URL 的字串。</nt-wrapper><nt-wrapper translation-origin=\"off\">A string that matches the URL in the browser address bar.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>component</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">導航到該路由時，路由器應該建立的元件。</nt-wrapper><nt-wrapper translation-origin=\"off\">The component that the router should create when navigating to this route.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">這會告訴路由器把該 URL 與 <code>path：'heroes'</code> 匹配。如果網址類似於 <code>localhost:4200/heroes</code> 就顯示 <code>HeroesComponent</code>。</p><p translation-origin=\"off\">This tells the router to match that URL to <code>path: 'heroes'</code> and display the <code>HeroesComponent</code> when the URL is something like <code>localhost:4200/heroes</code>.</p>\n\n<h3 id=\"routermoduleforroot\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routermoduleforroot\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 元資料會初始化路由器，並開始監聽瀏覽器地址的變化。</p><p translation-result=\"on\">下面的程式碼行將 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 新增到 <code>AppRoutingModule</code> 的 <code>imports</code> 陣列中，同時透過呼叫 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 來用這些 <code>routes</code> 配置它：</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata initializes the router and starts it listening for browser location changes.</p>\n\n<p translation-origin=\"off\">The following line adds the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>AppRoutingModule</code> <code>imports</code> array and configures it with the <code>routes</code> in one step by calling <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code>:</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">這個方法之所以叫 <code>forRoot()</code>，是因為你要在應用的最上層配置這個路由器。<code>forRoot()</code> 方法會提供路由所需的服務提供者和指令，還會基於瀏覽器的當前 URL 執行首次導航。</p><p translation-origin=\"off\">The method is called <code>forRoot()</code> because you configure the router at the application's root level.\nThe <code>forRoot()</code> method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</p>\n\n</div>\n<p translation-result=\"on\">接下來，<code>AppRoutingModule</code> 匯出 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>，以便它在整個應用程式中生效。</p><p translation-origin=\"off\">Next, <code>AppRoutingModule</code> exports <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to be available throughout the application.</p>\n\n<code-example header=\"src/app/app-routing.module.ts (exports array)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"export-routermodule\">\nexports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n\n</code-example>\n<h2 id=\"add-routeroutlet\" translation-result=\"on\">新增 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#新增-routeroutlet\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-routeroutletlink\">Add <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-routeroutlet\"><i class=\"material-icons\">link</i></a></h2>\n\n<!-- markdownlint-disable MD001 -->\n<p translation-result=\"on\">開啟 <code>AppComponent</code> 的範本，把 <code>&lt;app-heroes&gt;</code> 元素替換為 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 元素。</p><p translation-origin=\"off\">Open the <code>AppComponent</code> template and replace the <code>&lt;app-heroes&gt;</code> element with a <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> element.</p>\n\n<code-example header=\"src/app/app.component.html (router-outlet)\" path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 的範本不再需要 <code>&lt;app-heroes&gt;</code>，因為只有當用戶導航到這裡時，才需要顯示 <code>HeroesComponent</code>。</p><p translation-result=\"on\"><code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 會告訴路由器要在哪裡顯示路由的檢視。</p><p translation-origin=\"off\">The <code>AppComponent</code> template no longer needs <code>&lt;app-heroes&gt;</code> because the application only displays the <code>HeroesComponent</code> when the user navigates to it.</p>\n\n<p translation-origin=\"off\">The <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> tells the router where to display routed views.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">能在 <code>AppComponent</code> 中使用 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>，是因為 <code>AppModule</code> 匯入了 <code>AppRoutingModule</code>，而 <code>AppRoutingModule</code> 中匯出了 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。在本課程開始時你執行的那個 <code>ng generate</code> 命令添加了這個匯入，是因為 <code>--module=app</code> 標誌。如果你沒有使用 <code>ng generate</code> 命令來建立 <code>app-routing.module.ts</code>，就要把 <code>AppRoutingModule</code> 匯入到 <code>app.module.ts</code> 中，並且把它新增到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 陣列中。</p><p translation-origin=\"off\">The <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> is one of the router directives that became available to the <code>AppComponent</code> because <code>AppModule</code> imports <code>AppRoutingModule</code> which exported <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nThe <code>ng generate</code> command you ran at the start of this tutorial added this import because of the <code>--module=app</code> flag.\nIf you didn't use the <code>ng generate</code> command to create <code>app-routing.module.ts</code>, import <code>AppRoutingModule</code> into <code>app.module.ts</code> and add it to the <code>imports</code> array of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</p>\n\n</div>\n<!-- markdownlint-disable MD024 -->\n<h4 id=\"try-it\" translation-result=\"on\">試試看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-itlink\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果應用伺服器沒有在執行，請執行 <code>ng serve</code> 命令，以便在瀏覽器中看到你的應用。</p><p translation-result=\"on\">瀏覽器應該重新整理，並顯示著應用的標題，但是沒有顯示英雄列表。</p><p translation-result=\"on\">看看瀏覽器的位址列。URL 是以 <code>/</code> 結尾的。而到 <code>HeroesComponent</code> 的路由路徑是 <code>/heroes</code>。</p><p translation-result=\"on\">在位址列中把 <code>/heroes</code> 追加到 URL 後面。你應該能看到熟悉的主從結構的英雄顯示介面。</p><p translation-result=\"on\">從瀏覽器位址列中的 URL 中移除 <code>/heroes</code>。瀏覽器就會重新整理，並且顯示本應用的標題，而不顯示英雄列表。</p><p translation-origin=\"off\">If you're not still serving your application, run <code>ng serve</code> to see your application in the browser.</p>\n\n<p translation-origin=\"off\">The browser should refresh and display the application title but not the list of heroes.</p>\n\n<p translation-origin=\"off\">Look at the browser's address bar.\nThe URL ends in <code>/</code>.\nThe route path to <code>HeroesComponent</code> is <code>/heroes</code>.</p>\n\n<p translation-origin=\"off\">Append <code>/heroes</code> to the URL in the browser address bar.\nYou should see the familiar heroes overview/detail view.</p>\n\n<p translation-origin=\"off\">Remove <code>/heroes</code> from the URL in the browser address bar.\nThe browser should refresh and display the application title but not the list of heroes.</p>\n\n<!-- markdownlint-enable MD001 -->\n<!-- markdownlint-enable MD024 -->\n<p><a id=\"routerlink\"></a></p>\n<h2 id=\"add-a-navigation-link-using-routerlink\" translation-result=\"on\">新增路由連結 (<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#新增路由連結-routerlink\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-navigation-link-using-routerlinklink\">Add a navigation link using <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-navigation-link-using-routerlink\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">理想情況下，使用者應該能透過點選連結進行導航，而不用被迫把路由的 URL 貼上到位址列。</p><p translation-result=\"on\">新增一個 <code>&lt;nav&gt;</code> 元素，並在其中放一個連結 <code>&lt;a&gt;</code> 元素，當點選它時，就會觸發一個到 <code>HeroesComponent</code> 的導航。修改過的 <code>AppComponent</code> 範本如下：</p><p translation-origin=\"off\">Ideally, users should be able to click a link to navigate rather than pasting a route URL into the address bar.</p>\n\n<p translation-origin=\"off\">Add a <code>&lt;nav&gt;</code> element and, within that, an anchor element that, when clicked, triggers navigation to the <code>HeroesComponent</code>.\nThe revised <code>AppComponent</code> template looks like this:</p>\n\n<code-example header=\"src/app/app.component.html (heroes RouterLink)\" path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p translation-result=\"on\"><a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> 屬性</a>的值為 <code>\"/heroes\"</code>，路由器會用它來匹配出指向 <code>HeroesComponent</code> 的路由。\n<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 是 <a href=\"api/router/RouterLink\"><code>RouterLink</code> 指令</a>的選擇器，它會把使用者的點選轉換為路由器的導航操作。\n它是 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中的另一個公共指令。</p><p translation-result=\"on\">重新整理瀏覽器，顯示出了應用的標題和指向英雄列表的連結，但並沒有顯示英雄列表。</p><p translation-result=\"on\">點選這個連結。位址列變成了 <code>/heroes</code>，並且顯示出了英雄列表。</p><p translation-origin=\"off\">A <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> attribute</a> is set to <code>\"/heroes\"</code>, the string that the router matches to the route to <code>HeroesComponent</code>.\nThe <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> is the selector for the <a href=\"api/router/RouterLink\"><code>RouterLink</code> directive</a> that turns user clicks into router navigations.\nIt's another of the public directives in the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.</p>\n\n<p translation-origin=\"off\">The browser refreshes and displays the application title and heroes link, but not the heroes list.</p>\n\n<p translation-origin=\"off\">Click the link.\nThe address bar updates to <code>/heroes</code> and the list of heroes appears.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">從下面的 <a href=\"tutorial/toh-pt5#appcomponent\">最終程式碼</a>中把私有 CSS 樣式新增到 <code>app.component.css</code> 中，可以讓導航連結變得更好看一點。</p><p translation-origin=\"off\">Make this and future navigation links look better by adding private CSS styles to <code>app.component.css</code> as listed in the <a href=\"tutorial/toh-pt5#appcomponent\">final code review</a> below.</p>\n\n</div>\n<h2 id=\"add-a-dashboard-view\" translation-result=\"on\">新增儀表盤檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-dashboard-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-dashboard-viewlink\">Add a dashboard view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-dashboard-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當你的的應用有多個檢視時，路由會更有價值。不過目前的《英雄之旅》應用還只有一個英雄列表檢視。</p><p translation-result=\"on\">要想新增 <code>DashboardComponent</code>，請執行如下 <code>ng generate</code> 命令：</p><p translation-origin=\"off\">Routing makes more sense when your application has more than one view, yet\nthe <em>Tour of Heroes</em> application has only the heroes view.</p>\n\n<p translation-origin=\"off\">To add a <code>DashboardComponent</code>, run <code>ng generate</code> as shown here:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component dashboard\n\n</code-example>\n<p translation-result=\"on\">CLI 生成了 <code>DashboardComponent</code> 的相關檔案，並把它宣告到 <code>AppModule</code> 中。</p><p translation-result=\"on\">把這三個檔案中的內容改成這樣：</p><p translation-origin=\"off\"><code>ng generate</code> creates the files for the <code>DashboardComponent</code> and declares it in <code>AppModule</code>.</p>\n\n<p translation-origin=\"off\">Replace the default content in these files as shown here:</p>\n\n<code-tabs>\n    <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: #000;\n}\n\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">這個<em>範本</em>用來表示由英雄名字連結組成的一個陣列。</p><p translation-origin=\"off\">The  <em>template</em> presents a grid of hero name links.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 複寫器為元件的 <code>heroes</code> 陣列中的每個條目建立了一個連結。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater creates as many links as are in the component's <code>heroes</code> array.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">這些連結被 <code>dashboard.component.css</code> 中的樣式格式化成了一些色塊。</p><p translation-origin=\"off\">The links are styled as colored blocks by the <code>dashboard.component.css</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">這些連結還沒有指向任何地方。</p><p translation-origin=\"off\">The links don't go anywhere yet.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">這個<em>類</em>和 <code>HeroesComponent</code> 類很像。</p><p translation-origin=\"off\">The <em>class</em> is like the <code>HeroesComponent</code> class.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">它定義了一個 <code>heroes</code> 陣列屬性。</p><p translation-origin=\"off\">It defines a <code>heroes</code> array property</p>\n\n</li>\n<li>\n<p translation-result=\"on\">它的建構函式希望 Angular 把 <code>HeroService</code> 注入到私有的 <code>heroService</code> 屬性中。</p><p translation-origin=\"off\">The constructor expects Angular to inject the <code>HeroService</code> into a private <code>heroService</code> property</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>ngOnInit()</code> 生命週期鉤子中呼叫 <code>getHeroes()</code>。</p><p translation-origin=\"off\">The <code>ngOnInit()</code> lifecycle hook calls <code>getHeroes()</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">這個 <code>getHeroes()</code> 函式會擷取第 1 到 第 5 位英雄，也就是說只返回第二、第三、第四和第五個英雄。</p><p translation-origin=\"off\">This <code>getHeroes()</code> returns the sliced list of heroes at positions 1 and 5, returning only Heroes two, three, four, and five.</p>\n\n<code-example header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n<h3 id=\"add-the-dashboard-route\" translation-result=\"on\">新增儀表盤路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-dashboard-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-the-dashboard-routelink\">Add the dashboard route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-dashboard-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要導航到儀表盤，路由器中就需要一個相應的路由。</p><p translation-result=\"on\">把 <code>DashboardComponent</code> 匯入到 <code>app-routing-module.ts</code> 中。</p><p translation-origin=\"off\">To navigate to the dashboard, the router needs an appropriate route.</p>\n\n<p translation-origin=\"off\">Import the <code>DashboardComponent</code> in the <code>app-routing-module.ts</code> file.</p>\n\n<code-example header=\"src/app/app-routing.module.ts (import DashboardComponent)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\">\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\n</code-example>\n<p translation-result=\"on\">把一個指向 <code>DashboardComponent</code> 的路由新增到 <code>routes</code> 陣列中。</p><p translation-origin=\"off\">Add a route to the <code>routes</code> array that matches a path to the <code>DashboardComponent</code>.</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: 'dashboard', component: DashboardComponent },\n\n</code-example>\n<h3 id=\"add-a-default-route\" translation-result=\"on\">新增預設路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-default-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-default-routelink\">Add a default route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-default-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當應用啟動時，瀏覽器的位址列指向了網站的根路徑。它沒有匹配到任何現存路由，因此路由器也不會導航到任何地方。<code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 下方是空白的。</p><p translation-result=\"on\">要讓應用自動導航到這個儀表盤，請把下列路由新增到 <code>routes</code> 陣列中。</p><p translation-origin=\"off\">When the application starts, the browser's address bar points to the web site's root.\nThat doesn't match any existing route so the router doesn't navigate anywhere.\nThe space below the <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> is blank.</p>\n\n<p translation-origin=\"off\">To make the application navigate to the dashboard automatically, add the following route to the <code>routes</code> array.</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n</code-example>\n<p translation-result=\"on\">這個路由會把一個與空路徑“完全匹配”的 URL 重新導向到路徑為 <code>'/dashboard'</code> 的路由。</p><p translation-result=\"on\">瀏覽器重新整理之後，路由器載入了 <code>DashboardComponent</code>，並且瀏覽器的位址列會顯示出 <code>/dashboard</code> 這個 URL。</p><p translation-origin=\"off\">This route redirects a URL that fully matches the empty path to the route whose path is <code>'/dashboard'</code>.</p>\n\n<p translation-origin=\"off\">After the browser refreshes, the router loads the <code>DashboardComponent</code> and the browser address bar shows the <code>/dashboard</code> URL.</p>\n\n<h3 id=\"add-dashboard-link-to-the-shell\" translation-result=\"on\">把儀表盤連結新增到殼元件中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-dashboard-link-to-the-shell\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-dashboard-link-to-the-shelllink\">Add dashboard link to the shell<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-dashboard-link-to-the-shell\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">應該允許使用者透過點選頁面頂部導航區的各個連結在 <code>DashboardComponent</code> 和 <code>HeroesComponent</code> 之間來回導航。</p><p translation-result=\"on\">把儀表盤的導航連結新增到殼元件 <code>AppComponent</code> 的範本中，就放在 <em>Heroes</em> 連結的前面。</p><p translation-origin=\"off\">The user should be able to navigate between the <code>DashboardComponent</code> and the <code>HeroesComponent</code> by clicking links in the navigation area near the top of the page.</p>\n\n<p translation-origin=\"off\">Add a dashboard navigation link to the <code>AppComponent</code> shell template, just above the <em>Heroes</em> link.</p>\n\n<code-example header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器，你就能透過點選這些連結在這兩個檢視之間自由導航了。</p><p translation-origin=\"off\">After the browser refreshes you can navigate freely between the two views by clicking the links.</p>\n\n<p><a id=\"hero-details\"></a></p>\n<h2 id=\"navigating-to-hero-details\" translation-result=\"on\">導航到英雄詳情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"navigating-to-hero-detailslink\">Navigating to hero details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 可以顯示所選英雄的詳情。此刻，<code>HeroDetailComponent</code> 只能在 <code>HeroesComponent</code> 的底部看到。</p><p translation-result=\"on\">使用者應該能透過三種途徑看到這些詳情。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> displays details of a selected hero.\nAt the moment the <code>HeroDetailComponent</code> is only visible at the bottom of the <code>HeroesComponent</code></p>\n\n<p translation-origin=\"off\">The user should be able to get to these details in three ways.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">透過在儀表盤中點選某個英雄。</p><p translation-origin=\"off\">By clicking a hero in the dashboard.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過在英雄列表中點選某個英雄。</p><p translation-origin=\"off\">By clicking a hero in the heroes list.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過把一個“深連結” URL 貼上到瀏覽器的位址列中來指定要顯示的英雄。</p><p translation-origin=\"off\">By pasting a \"deep link\" URL into the browser address bar that identifies the hero to display.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">這一節棄用了導航到 <code>HeroDetailComponent</code> 的功能，並把它從 <code>HeroesComponent</code> 中解放出來。</p><p translation-origin=\"off\">This section enables navigation to the <code>HeroDetailComponent</code> and liberate it from the <code>HeroesComponent</code>.</p>\n\n<h3 id=\"delete-hero-details-from-heroescomponent\" translation-result=\"on\">從 <code>HeroesComponent</code> 中刪除<em>英雄詳情</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#delete-hero-details-from-heroescomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"delete-hero-details-from-heroescomponentlink\">Delete <em>hero details</em> from <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#delete-hero-details-from-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當用戶在 <code>HeroesComponent</code> 中點選某個英雄條目時，應用應該能導航到 <code>HeroDetailComponent</code>，從英雄列表檢視切換到英雄詳情檢視。英雄列表檢視將不再顯示，而英雄詳情檢視要顯示出來。</p><p translation-result=\"on\">開啟 <code>heroes/heroes.component.html</code>，並從底部刪除 <code>&lt;app-hero-detail&gt;</code> 元素。</p><p translation-result=\"on\">目前，點選某個英雄條目還沒有反應。不過當你啟用了到 <code>HeroDetailComponent</code> 的路由之後，<a href=\"tutorial/toh-pt5#heroes-component-links\">很快就能修復它</a>。</p><p translation-origin=\"off\">When the user clicks a hero in <code>HeroesComponent</code>, the application should navigate to the <code>HeroDetailComponent</code>, replacing the heroes list view with the hero detail view.\nThe heroes list view should no longer show hero details as it does now.</p>\n\n<p translation-origin=\"off\">Open the <code>heroes/heroes.component.html</code> and delete the <code>&lt;app-hero-detail&gt;</code> element from the bottom.</p>\n\n<p translation-origin=\"off\">Clicking a hero item now does nothing.\nYou can fix that after you enable routing to the <code>HeroDetailComponent</code>.</p>\n\n<h3 id=\"add-a-hero-detail-route\" translation-result=\"on\">新增<em>英雄詳情</em>檢視<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-hero-detail-route\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-hero-detail-routelink\">Add a <em>hero detail</em> route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-hero-detail-route\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要導航到 <code>id</code> 為 <code>11</code> 的英雄的<em>詳情</em>檢視，類似於 <code>~/detail/11</code> 的 URL 將是一個不錯的 URL。</p><p translation-result=\"on\">開啟 <code>app-routing.module.ts</code> 並匯入 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">A URL like <code>~/detail/11</code> would be a good URL for navigating to the <em>Hero Detail</em> view of the hero whose <code>id</code> is <code>11</code>.</p>\n\n<p translation-origin=\"off\">Open <code>app-routing.module.ts</code> and import <code>HeroDetailComponent</code>.</p>\n\n<code-example header=\"src/app/app-routing.module.ts (import HeroDetailComponent)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\">\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n</code-example>\n<p translation-result=\"on\">然後把一個<em>引數化</em>路由新增到 <code>routes</code> 陣列中，它要匹配指向<em>英雄詳情</em>檢視的路徑。</p><p translation-origin=\"off\">Then add a <em>parameterized</em> route to the <code>routes</code> array that matches the path pattern to the <em>hero detail</em> view.</p>\n\n<code-example header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: 'detail/:id', component: HeroDetailComponent },\n\n</code-example>\n<p translation-result=\"on\"><code>path</code> 中的冒號（<code>:</code>）表示 <code>:id</code> 是一個佔位符，它表示某個特定英雄的 <code>id</code>。</p><p translation-result=\"on\">此刻，應用中的所有路由都就緒了。</p><p translation-origin=\"off\">The colon <code>:</code> character in the <code>path</code> indicates that <code>:id</code> is a placeholder for a specific hero <code>id</code>.</p>\n\n<p translation-origin=\"off\">At this point, all application routes are in place.</p>\n\n<code-example header=\"src/app/app-routing.module.ts (all routes)\" path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<h3 id=\"dashboardcomponent-hero-links\" translation-result=\"on\"><code>DashboardComponent</code> 中的英雄連結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"dashboardcomponent-hero-linkslink\"><code>DashboardComponent</code> hero links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">此刻，<code>DashboardComponent</code> 中的英雄連線還沒有反應。</p><p translation-result=\"on\">路由器已經有一個指向 <code>HeroDetailComponent</code> 的路由了，修改儀表盤中的英雄連線，讓它們透過引數化的英雄詳情路由進行導航。</p><p translation-origin=\"off\">The <code>DashboardComponent</code> hero links do nothing at the moment.</p>\n\n<p translation-origin=\"off\">Now that the router has a route to <code>HeroDetailComponent</code>, fix the dashboard hero links to navigate using the <em>parameterized</em> dashboard route.</p>\n\n<code-example header=\"src/app/dashboard/dashboard.component.html (hero links)\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\">\n&lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n  <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n  {{hero.name}}\n&lt;/a&gt;\n\n</code-example>\n<p translation-result=\"on\">你正在 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 複寫器中使用 Angular 的<a href=\"guide/interpolation\">插值繫結</a>來把當前迭代的 <code>hero.id</code> 插入到每個 <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a> 中。</p><p translation-origin=\"off\">You're using Angular <a href=\"guide/interpolation\">interpolation binding</a> within the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater to insert the current iteration's <code>hero.id</code> into each <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a>.</p>\n\n<p><a id=\"heroes-component-links\"></a></p>\n<h3 id=\"heroescomponent-hero-links\" translation-result=\"on\"><code>HeroesComponent</code> 中的英雄連結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"heroescomponent-hero-linkslink\"><code>HeroesComponent</code> hero links<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent-hero-links\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 中的這些英雄條目都是 <code>&lt;li&gt;</code> 元素，它們的點選事件都繫結到了元件的 <code>onSelect()</code> 方法中。</p><p translation-origin=\"off\">The hero items in the <code>HeroesComponent</code> are <code>&lt;li&gt;</code> elements whose click events are bound to the component's <code>onSelect()</code> method.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html (list with onSelect)\" path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;button type=\"button\" (click)=\"onSelect(hero)\" [class.selected]=\"hero === selectedHero\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt;\n      &lt;span class=\"name\"&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">移除 <code>&lt;li&gt;</code>，只保留它的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。把徽章（<code>&lt;badge&gt;</code>）和名字包裹進一個 <code>&lt;a&gt;</code> 元素中。\n像儀表盤的範本中那樣為這個 <code>&lt;a&gt;</code> 元素新增一個 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 屬性。</p><p translation-origin=\"off\">Remove the <code>&lt;li&gt;</code> back to just its <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>.\nWrap the badge and name in an anchor <code>&lt;a&gt;</code> element.\nAdd a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute to the anchor that's the same as in the dashboard template.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html (list with links)\" path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">還要修改 <code>heroes.component.css</code> 中的私有樣式表，讓列表恢復到以前的外觀。\n修改後的樣式表參閱本指南底部的<a href=\"tutorial/toh-pt5#heroescomponent\">最終程式碼</a>。</p><p translation-origin=\"off\">Be sure to fix the private style sheet in <code>heroes.component.css</code> to make the list look as it did before.\nRevised styles are in the <a href=\"tutorial/toh-pt5#heroescomponent\">final code review</a> at the bottom of this guide.</p>\n\n<h4 id=\"remove-dead-code---optional\" translation-result=\"on\">移除死程式碼（可選）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#remove-dead-code---optional\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"remove-dead-code---optionallink\">Remove dead code - optional<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#remove-dead-code---optional\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">雖然 <code>HeroesComponent</code> 類仍然能正常工作，但 <code>onSelect()</code> 方法和 <code>selectedHero</code> 屬性已經沒用了。</p><p translation-result=\"on\">為了將來更好維護，你最好清理掉它們。下面是刪除了死程式碼之後的類別。</p><p translation-origin=\"off\">While the <code>HeroesComponent</code> class still works, the <code>onSelect()</code> method and <code>selectedHero</code> property are no longer used.</p>\n\n<p translation-origin=\"off\">It's nice to tidy things up for your future self.\nHere's the class after pruning away the dead code.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (cleaned up)\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n</code-example>\n<h2 id=\"routable-herodetailcomponent\" translation-result=\"on\">支援路由的 <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routable-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"routable-herodetailcomponentlink\">Routable <code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routable-herodetailcomponent\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">父元件 <code>HeroesComponent</code> 以前會設定 <code>HeroDetailComponent.hero</code> 屬性，然後 <code>HeroDetailComponent</code> 就會顯示這個英雄。</p><p translation-result=\"on\"><code>HeroesComponent</code> 已經不會再那麼做了。現在，當路由器會在響應形如 <code>~/detail/11</code> 的 URL 時建立 <code>HeroDetailComponent</code>。</p><p translation-result=\"on\"><code>HeroDetailComponent</code> 需要從一種新的途徑獲取<em>要顯示的英雄</em>。本節會講解如下操作：</p><p translation-origin=\"off\">The parent <code>HeroesComponent</code> used to set the <code>HeroDetailComponent.hero</code> property and the <code>HeroDetailComponent</code> displayed the hero.</p>\n\n<p translation-origin=\"off\"><code>HeroesComponent</code> doesn't do that anymore.\nNow the router creates the <code>HeroDetailComponent</code> in response to a URL such as <code>~/detail/12</code>.</p>\n\n<p translation-origin=\"off\">The <code>HeroDetailComponent</code> needs a new way to get the hero to display.\nThis section explains the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">獲取建立本元件的路由</p><p translation-origin=\"off\">Get the route that created it</p>\n\n</li>\n<li>\n<p translation-result=\"on\">從這個路由中提取出 <code>id</code></p><p translation-origin=\"off\">Extract the <code>id</code> from the route</p>\n\n</li>\n<li>\n<p translation-result=\"on\">透過 <code>HeroService</code> 從伺服器上獲取具有這個 <code>id</code> 的英雄資料。</p><p translation-origin=\"off\">Get the hero with that <code>id</code> from the server using the <code>HeroService</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">先新增下列匯入陳述式：</p><p translation-origin=\"off\">Add the following imports:</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p translation-result=\"on\">然後把 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>、<code>HeroService</code> 和 <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服務注入到建構函式中，將它們的值儲存到私有變數裡：</p><p translation-origin=\"off\"><a id=\"hero-detail-ctor\"></a></p>\n<p translation-origin=\"off\">Inject the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, <code>HeroService</code>, and <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> services into the constructor, saving their values in private fields:</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private heroService: HeroService,\n  private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n) {}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> 儲存著到這個 <code>HeroDetailComponent</code> 例項的路由資訊。這個元件對從 URL 中提取的路由引數感興趣。其中的 <code>id</code> 引數就是要顯示的英雄的 <code>id</code>。</p><p translation-result=\"on\"><a href=\"tutorial/toh-pt4\"><code>HeroService</code></a> 從遠端伺服器獲取英雄資料，本元件將使用它來獲取要顯示的英雄。</p><p translation-result=\"on\"><a href=\"api/common/Location\"><code>location</code></a> 是一個 Angular 的服務，用來與瀏覽器打交道。\n<a href=\"tutorial/toh-pt5#goback\">稍後</a>，你就會使用它來導航回上一個檢視。</p><p translation-origin=\"off\">The <a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a> holds information about the route to this instance of the <code>HeroDetailComponent</code>.\nThis component is interested in the route's parameters extracted from the URL.\nThe \"id\" parameter is the <code>id</code> of the hero to display.</p>\n\n<p translation-origin=\"off\">The <a href=\"tutorial/toh-pt4\"><code>HeroService</code></a> gets hero data from the remote server and this component uses it to get the hero-to-display.</p>\n\n<p translation-origin=\"off\">The <a href=\"api/common/Location\"><code>location</code></a> is an Angular service for interacting with the browser.\nThis service lets you navigate back to the previous view.</p>\n\n<h3 id=\"extract-the-id-route-parameter\" translation-result=\"on\">從路由引數中提取 <code>id</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#extract-the-id-route-parameter\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"extract-the-id-route-parameterlink\">Extract the <code>id</code> route parameter<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#extract-the-id-route-parameter\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">生命週期鉤子</a> 中呼叫 <code>getHero()</code>，程式碼如下。</p><p translation-origin=\"off\">In the <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">lifecycle hook</a> call <code>getHero()</code> and define it as follows.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = Number(this.route.snapshot.paramMap.get('id'));\n  this.heroService.getHero(id)\n    .subscribe(hero =&gt; this.hero = hero);\n}\n\n</code-example>\n<p translation-result=\"on\"><code>route.snapshot</code> 是一個路由資訊的靜態快照，抓取自元件剛剛建立完畢之後。</p><p translation-result=\"on\"><code>paramMap</code> 是一個從 URL 中提取的路由引數值的字典。<code>\"id\"</code> 對應的值就是要獲取的英雄的 <code>id</code>。</p><p translation-result=\"on\">路由引數總會是字串。JavaScript 的 <code>Number</code> 函式會把字串轉換成數字，英雄的 <code>id</code> 就是數字型別。</p><p translation-result=\"on\">重新整理瀏覽器，應用掛了。出現一個編譯錯誤，因為 <code>HeroService</code> 沒有一個名叫 <code>getHero()</code> 的方法。這就新增它。</p><p translation-origin=\"off\">The <code>route.snapshot</code> is a static image of the route information shortly after the component was created.</p>\n\n<p translation-origin=\"off\">The <code>paramMap</code> is a dictionary of route parameter values extracted from the URL.\nThe <code>\"id\"</code> key returns the <code>id</code> of the hero to fetch.</p>\n\n<p translation-origin=\"off\">Route parameters are always strings.\nThe JavaScript <code>Number</code> function converts the string to a number,\nwhich is what a hero <code>id</code> should be.</p>\n\n<p translation-origin=\"off\">The browser refreshes and the application crashes with a compiler error.\n<code>HeroService</code> doesn't have a <code>getHero()</code> method.\nAdd it now.</p>\n\n<h3 id=\"add-heroservicegethero\" translation-result=\"on\">新增 <code>HeroService.getHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-heroservicegetherolink\">Add <code>HeroService.getHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">新增 <code>HeroService</code>，並在 <code>getHeroes()</code> 後面新增如下的 <code>getHero()</code> 方法，它接收 <code>id</code> 引數：</p><p translation-origin=\"off\">Open <code>HeroService</code> and add the following <code>getHero()</code> method with the <code>id</code> after the <code>getHeroes()</code> method:</p>\n\n<code-example header=\"src/app/hero.service.ts (getHero)\" path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\">\ngetHero(id: number): Observable&lt;Hero&gt; {\n  // For now, assume that a hero with the specified `id` always exists.\n  // Error handling will be added in the next step of the tutorial.\n  const hero = HEROES.find(h =&gt; h.id === id)!;\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(hero);\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>重要</strong>：<br>\n反引號 ( ` ) 用於定義 JavaScript 的 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals\">範本字串字面量</a>，以便嵌入 <code>id</code>。</p><p translation-origin=\"off\"><strong>IMPORTANT</strong>: <br>\nThe backtick ( <code>`</code> ) characters define a JavaScript <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals\">template literal</a> for embedding the <code>id</code>.</p>\n\n</div>\n<p translation-result=\"on\">像 <a href=\"tutorial/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a> 一樣，<code>getHero()</code> 也有一個非同步函式簽名。它用 RxJS 的 <code>of()</code> 函式返回一個 <code>Observable</code> 形式的<em>模擬英雄資料</em>。</p><p translation-result=\"on\">你可以將 <code>getHero()</code> 重寫為真實的 <code>Http</code> 請求，而無需更改呼叫它的 <code>HeroDetailComponent</code> 。</p><p translation-result=\"on\">你將來可以用一個真實的 <code>Http</code> 請求來重新實現 <code>getHero()</code>，而不用修改呼叫了它的 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">Like <a href=\"tutorial/toh-pt4#observable-heroservice\"><code>getHeroes()</code></a>, <code>getHero()</code> has an asynchronous signature.\nIt returns a <em>mock hero</em> as an <code>Observable</code>, using the RxJS <code>of()</code> function.</p>\n\n<p translation-origin=\"off\">You can rewrite <code>getHero()</code> as a real <code>Http</code> request without having to change the <code>HeroDetailComponent</code> that calls it.</p>\n\n<!-- markdownlint-disable MD024 -->\n\n<h4 id=\"try-it-1\" translation-result=\"on\">試試看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it-1\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-itlink-1\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#try-it-1\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">重新整理瀏覽器，應用又恢復正常了。你可以在儀表盤或英雄列表中點選一個英雄來導航到該英雄的詳情檢視。</p><p translation-result=\"on\">如果你在瀏覽器位址列中貼上 <code>localhost:4200/detail/12</code> ，路由器會導航到 <code>id: 12</code> 的英雄, <strong>Dr Nice</strong>的詳細檢視。</p><p translation-result=\"on\">如果你在瀏覽器的位址列中貼上了 <code>localhost:4200/detail/11</code>，路由器也會導航到 <code>id: 11</code> 的英雄（\"Dr. Nice\"）的詳情檢視。</p><p translation-origin=\"off\">The browser refreshes and the application is working again.\nYou can click a hero in the dashboard or in the heroes list and navigate to that hero's detail view.</p>\n\n<p translation-origin=\"off\">If you paste <code>localhost:4200/detail/12</code> in the browser address bar, the router navigates to the detail view for the hero with <code>id: 12</code>, <strong>Dr Nice</strong>.</p>\n\n<!-- markdownlint-enable MD024 -->\n\n<p><a id=\"goback\"></a></p>\n<h3 id=\"find-the-way-back\" translation-result=\"on\">回到原路<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"find-the-way-backlink\">Find the way back<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">透過點選瀏覽器的後退按鈕，你可以回到前一頁。它可能是英雄列表或儀表盤檢視，這取決於你從哪裡進入的詳情檢視。</p><p translation-result=\"on\">如果能在 <code>HeroDetail</code> 檢視中也有這麼一個按鈕就更好了。</p><p translation-result=\"on\">把一個<em>後退</em>按鈕新增到元件範本的底部，並且把它繫結到元件的 <code>goBack()</code> 方法。</p><p translation-origin=\"off\">By clicking the browser's back button, you can go back to the previous page. This could be the hero list or dashboard view, depending upon which sent you to the detail view.</p>\n\n<p translation-origin=\"off\">It would be nice to have a button on the <code>HeroDetail</code> view that can do that.</p>\n\n<p translation-origin=\"off\">Add a <em>go back</em> button to the bottom of the component template and bind it to the component's <code>goBack()</code> method.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.html (back button)\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\">\n&lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">在元件類中新增一個 <code>goBack()</code> 方法，利用<a href=\"tutorial/toh-pt5#hero-detail-ctor\">你以前注入的</a> <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 服務在瀏覽器的歷史棧中後退一步。</p><p translation-origin=\"off\">Add a <code>goBack()</code> <em>method</em> to the component class that navigates backward one step in the browser's history stack\nusing the <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> service that you <a href=\"tutorial/toh-pt5#hero-detail-ctor\">used to inject</a>.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (goBack)\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器，並開始點選。使用者能在應用中導航：從儀表盤到英雄詳情再回來，從英雄列表到 mini 版英雄詳情到英雄詳情，再回到英雄列表。</p><p translation-result=\"on\">當你將一些私有 CSS 樣式新增到 <code>hero-detail.component.css</code> 裡之後，其細節看起來會更好，如下面的<a href=\"tutorial/toh-pt5#final-code-review\">“檢視最終程式碼”</a>標籤頁中所示。</p><p translation-origin=\"off\">Refresh the browser and start clicking.\nUsers can now navigate around the application using the new buttons.</p>\n\n<p translation-origin=\"off\">The details look better when you add the private CSS styles to <code>hero-detail.component.css</code> as listed in one of the <a href=\"tutorial/toh-pt5#final-code-review\">\"final code review\"</a> tabs below.</p>\n\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-reviewlink\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<!-- markdownlint-disable MD001 -->\n<p translation-result=\"on\">下面是本頁所提到的原始碼。</p><p translation-origin=\"off\">Here are the code files discussed on this page.</p>\n\n<p><a id=\"approutingmodule\"></a>\n<a id=\"appmodule\"></a></p>\n<h4 id=\"approutingmodule-appmodule-and-heroservice\" translation-result=\"on\"><code>AppRoutingModule</code>、<code>AppModule</code> 和 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"approutingmodule-appmodule-and-heroservicelink\"><code>AppRoutingModule</code>, <code>AppModule</code>, and <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\"><i class=\"material-icons\">link</i></a></h4>\n\n<code-tabs>\n    <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt5/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { MessagesComponent } from './messages/messages.component';\n\nimport { AppRoutingModule } from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n    <code-pane header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n    <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt5/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id: number): Observable&lt;Hero&gt; {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h =&gt; h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"appcomponent\"></a></p>\n<h4 id=\"appcomponent\"><code>AppComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#appcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n  &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\"&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt5/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/app.component.css\" path=\"toh-pt5/src/app/app.component.css\">\n/* AppComponent's private CSS styles */\nh1 {\n  margin-bottom: 0;\n}\nnav a {\n  padding: 1rem;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #e8e8e8;\n  color: #3d3d3d;\n  border-radius: 4px;\n}\n\nnav a:hover {\n  color: white;\n  background-color: #42545C;\n}\nnav a:active {\n  background-color: black;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"dashboardcomponent\"></a></p>\n<h4 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n    {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: #000;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"heroescomponent\"></a></p>\n<h4 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt5/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt5/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n  display: block;\n  width: 100%;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herodetailcomponent\"></a></p>\n<h4 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"Hero name\"/&gt;\n  &lt;/div&gt;\n  &lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero | undefined;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"src/app/hero-detail/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  color: #435960;\n  font-weight: bold;\n}\ninput {\n  font-size: 1em;\n  padding: .5rem;\n}\nbutton {\n  margin-top: 20px;\n  background-color: #eee;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<!-- markdownlint-enable MD001 -->\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summarylink\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\">添加了 Angular <em>路由器</em>在各個不同元件之間導航</p><p translation-origin=\"off\">You added the Angular router to navigate among different components</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用一些 <code>&lt;a&gt;</code> 連結和一個 <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code> 把 <code>AppComponent</code> 轉換成了一個導航用的殼元件</p><p translation-origin=\"off\">You turned the <code>AppComponent</code> into a navigation shell with <code>&lt;a&gt;</code> links and a <code>&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">你在 <code>AppRoutingModule</code> 中配置了路由器</p><p translation-origin=\"off\">You configured the router in an <code>AppRoutingModule</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">你定義了一些簡單路由、一個重新導向路由和一個引數化路由</p><p translation-origin=\"off\">You defined routes, a redirect route, and a parameterized route</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你在 <code>&lt;a&gt;</code> 元素中使用了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令</p><p translation-origin=\"off\">You used the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive in anchor elements</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你把一個緊耦合的主從檢視重構成了帶路由的詳情檢視</p><p translation-origin=\"off\">You refactored a tightly coupled main/detail view into a routed detail view</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你使用路由連結引數來導航到所選英雄的詳情檢視</p><p translation-origin=\"off\">You used router link parameters to navigate to the detail view of a user-selected hero</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在多個元件之間共享了 <code>HeroService</code> 服務</p><p translation-origin=\"off\">You shared the <code>HeroService</code> with other components</p>\n\n</li>\n</ul>\n\n  <div class=\"reviewed\">最後複查時間： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/Location\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/interpolation\n - guide/lifecycle-hooks#oninit\n - tutorial/toh-pt4\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt5#add-a-dashboard-view\n - tutorial/toh-pt5#add-a-default-route\n - tutorial/toh-pt5#add-a-hero-detail-route\n - tutorial/toh-pt5#add-a-navigation-link-using-routerlink\n - tutorial/toh-pt5#add-dashboard-link-to-the-shell\n - tutorial/toh-pt5#add-heroservicegethero\n - tutorial/toh-pt5#add-navigation-with-routing\n - tutorial/toh-pt5#add-routeroutlet\n - tutorial/toh-pt5#add-the-approutingmodule\n - tutorial/toh-pt5#add-the-dashboard-route\n - tutorial/toh-pt5#appcomponent\n - tutorial/toh-pt5#approutingmodule-appmodule-and-heroservice\n - tutorial/toh-pt5#approutingmoduleappmodule-和-heroservice\n - tutorial/toh-pt5#dashboardcomponent\n - tutorial/toh-pt5#dashboardcomponent-hero-links\n - tutorial/toh-pt5#dashboardcomponent-中的英雄連結\n - tutorial/toh-pt5#delete-hero-details-from-heroescomponent\n - tutorial/toh-pt5#extract-the-id-route-parameter\n - tutorial/toh-pt5#final-code-review\n - tutorial/toh-pt5#find-the-way-back\n - tutorial/toh-pt5#goback\n - tutorial/toh-pt5#hero-detail-ctor\n - tutorial/toh-pt5#herodetailcomponent\n - tutorial/toh-pt5#heroes-component-links\n - tutorial/toh-pt5#heroescomponent\n - tutorial/toh-pt5#heroescomponent-hero-links\n - tutorial/toh-pt5#heroescomponent-中的英雄連結\n - tutorial/toh-pt5#navigating-to-hero-details\n - tutorial/toh-pt5#remove-dead-code---optional\n - tutorial/toh-pt5#routable-herodetailcomponent\n - tutorial/toh-pt5#routerlink\n - tutorial/toh-pt5#routermoduleforroot\n - tutorial/toh-pt5#routes\n - tutorial/toh-pt5#summary\n - tutorial/toh-pt5#try-it\n - tutorial/toh-pt5#try-it-1\n - tutorial/toh-pt5#從-heroescomponent-中刪除英雄詳情\n - tutorial/toh-pt5#從路由引數中提取-id\n - tutorial/toh-pt5#回到原路\n - tutorial/toh-pt5#導航到英雄詳情\n - tutorial/toh-pt5#小結\n - tutorial/toh-pt5#把儀表盤連結新增到殼元件中\n - tutorial/toh-pt5#支援路由的-herodetailcomponent\n - tutorial/toh-pt5#檢視最終程式碼\n - tutorial/toh-pt5#新增-approutingmodule\n - tutorial/toh-pt5#新增-heroservicegethero\n - tutorial/toh-pt5#新增-routeroutlet\n - tutorial/toh-pt5#新增儀表盤檢視\n - tutorial/toh-pt5#新增儀表盤路由\n - tutorial/toh-pt5#新增英雄詳情檢視\n - tutorial/toh-pt5#新增路由連結-routerlink\n - tutorial/toh-pt5#新增預設路由\n - tutorial/toh-pt5#用路由新增導航支援\n - tutorial/toh-pt5#移除死程式碼可選\n - tutorial/toh-pt5#試試看\n - tutorial/toh-pt5#試試看-1\n - tutorial/toh-pt5#路由\n - https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt5.md?message=docs%3A%20請簡述你的修改...\n-->"}