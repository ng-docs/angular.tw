{"id":"tutorial/toh-pt6","title":"Get data from a server","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt6.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"get-data-from-a-server\" translation-result=\"on\">從伺服器端獲取資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"get-data-from-a-serverlink\">Get data from a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-data-from-a-server\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本課程會將藉助 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 來新增一些資料持久化特性。</p><p translation-origin=\"off\">This tutorial adds the following data persistence features with help from Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>HeroService</code> 透過 HTTP 請求獲取英雄資料</p><p translation-origin=\"off\">The <code>HeroService</code> gets hero data with HTTP requests</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用者可以新增、編輯和刪除英雄，並透過 HTTP 來儲存這些更改</p><p translation-origin=\"off\">Users can add, edit, and delete heroes and save these changes over HTTP</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用者可以根據名字搜尋英雄</p><p translation-origin=\"off\">Users can search for heroes by name</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要檢視本頁所講的範例程式，參閱<live-example></live-example>。</p><p translation-origin=\"off\">For the sample application that this page describes, see the <live-example></live-example>.</p>\n\n</div>\n<h2 id=\"enable-http-services\" translation-result=\"on\">啟用 HTTP 服務<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"enable-http-serviceslink\">Enable HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 是 Angular 透過 HTTP 與遠端伺服器通訊的機制。</p><p translation-result=\"on\">要讓 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在應用中隨處可用，需要兩個步驟。首先，用匯入陳述式把它新增到根模組 <code>AppModule</code> 中：</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP.</p>\n\n<p translation-origin=\"off\">Make <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> available everywhere in the application in two steps.\nFirst, add it to the root <code>AppModule</code> by importing it:</p>\n\n<code-example header=\"src/app/app.module.ts (HttpClientModule import)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-http-client\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p translation-result=\"on\">接下來，仍然在 <code>AppModule</code> 中，把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 新增到 <code>imports</code> 陣列中：</p><p translation-origin=\"off\">Next, still in the <code>AppModule</code>, add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>imports</code> array:</p>\n\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-httpclientmodule\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n})\n\n</code-example>\n<h2 id=\"simulate-a-data-server\" translation-result=\"on\">模擬資料伺服器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"simulate-a-data-serverlink\">Simulate a data server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">這個教學例子會與一個使用 <a href=\"https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\" title=\"In-memory Web API\">記憶體 Web API（<em>In-memory Web API</em>）</a> 模擬出的遠端資料伺服器通訊。</p><p translation-result=\"on\">安裝完這個模組之後，應用將會透過 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 來發起請求和接收響應。本應用不在乎實際上是這個記憶體 Web API 在攔截這些請求、操作一個記憶體資料庫，並且給出模擬的響應。</p><p translation-result=\"on\">透過使用記憶體 Web API，你不用架設伺服器就可以學習 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 了。</p><p translation-origin=\"off\">This tutorial sample mimics communication with a remote data server by using the <a href=\"https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\" title=\"In-memory Web API\">In-memory Web API</a> module.</p>\n\n<p translation-origin=\"off\">After installing the module, the application makes requests to and receive responses from the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>. The application doesn't know that the <em>In-memory Web API</em> is intercepting those requests, applying them to an in-memory data store, and returning simulated responses.</p>\n\n<p translation-origin=\"off\">By using the In-memory Web API, you won't have to set up a server to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>重要</strong>：<br>\n這個<em>記憶體 Web API</em> 模組與 Angular 中的 HTTP 模組無關。</p><p translation-result=\"on\">如果你只是在<em>閱讀</em>本課程來學習 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那麼可以<a href=\"tutorial/toh-pt6#import-heroes\">跳過</a>這一步。\n如果你正在隨著本課程<em>敲程式碼</em>，那就留下來，並加上這個<em>記憶體 Web API</em>。</p><p translation-origin=\"off\"><strong>IMPORTANT</strong>: <br>\nThe In-memory Web API module has nothing to do with HTTP in Angular.</p>\n\n<p translation-origin=\"off\">If you're reading this tutorial to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you can <a href=\"tutorial/toh-pt6#import-heroes\">skip over</a> this step.\nIf you're coding along with this tutorial, stay here and add the In-memory Web API now.</p>\n\n</div>\n<p translation-result=\"on\">用如下命令從 <code>npm</code> 中安裝這個<em>記憶體 Web API</em> 套件（譯註：請使用 0.5+ 的版本，不要使用 0.4-）</p><p translation-origin=\"off\">Install the In-memory Web API package from npm with the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nnpm install angular-in-memory-web-api --save\n\n</code-example>\n<p translation-result=\"on\">在 <code>AppModule</code> 中，匯入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 類，稍後你將建立它們。</p><p translation-origin=\"off\">In the <code>AppModule</code>, import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class, which you create next.</p>\n\n<code-example header=\"src/app/app.module.ts (In-memory Web API imports)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\n</code-example>\n<p translation-result=\"on\">在 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 之後，將 <code>HttpClientInMemoryWebApiModule</code> 新增到 <code>AppModule</code> 的 <code>imports</code> 陣列中，並以 <code>InMemoryDataService</code> 為引數對其進行配置。</p><p translation-origin=\"off\">After the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>, add the <code>HttpClientInMemoryWebApiModule</code> to the <code>AppModule</code> <code>imports</code> array and configure it with the <code>InMemoryDataService</code>.</p>\n\n<code-example header=\"src/app/app.module.ts (imports array excerpt)\" path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when a real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p translation-result=\"on\"><code>forRoot()</code> 配置方法接收一個 <code>InMemoryDataService</code> 類來初始化記憶體資料庫。</p><p translation-result=\"on\">使用以下命令產生類 <code>src/app/in-memory-data.service.ts</code>：</p><p translation-origin=\"off\">The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class that primes the in-memory database.</p>\n\n<p translation-origin=\"off\">Generate the class <code>src/app/in-memory-data.service.ts</code> with the following command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate service InMemoryData\n\n</code-example>\n<p translation-result=\"on\">將 <code>in-memory-data.service.ts</code> 改為以下內容：</p><p translation-origin=\"off\">Replace the default contents of <code>in-memory-data.service.ts</code> with the following:</p>\n\n<code-example header=\"src/app/in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>in-memory-data.service.ts</code> 檔案已代替了 <code>mock-heroes.ts</code> 檔案。\n先不要刪除 <code>mock-heroes.ts</code>。本課程後面還有幾步需要用到它。</p><p translation-result=\"on\">等伺服器就緒後，就可以拋棄這個記憶體 Web API，以便應用的請求能直接傳到伺服器。</p><p translation-origin=\"off\">The <code>in-memory-data.service.ts</code> file takes over the function of <code>mock-heroes.ts</code>.\nDon't delete <code>mock-heroes.ts</code> yet. You still need it for a few more steps of this tutorial.</p>\n\n<p translation-origin=\"off\">After the server is ready, detach the In-memory Web API so the application's requests can go through to the server.</p>\n\n<p><a id=\"import-heroes\"></a></p>\n<h2 id=\"heroes-and-http\" translation-result=\"on\">英雄與 HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"heroes-and-httplink\">Heroes and HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 <code>HeroService</code> 中，匯入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 和 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>：</p><p translation-origin=\"off\">In the <code>HeroService</code>, import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> and <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code>:</p>\n\n<code-example header=\"src/app/hero.service.ts (import HTTP symbols)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p translation-result=\"on\">仍然在 <code>HeroService</code> 中，把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到建構函式中一個名叫 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 的私有屬性中。</p><p translation-origin=\"off\">Still in the <code>HeroService</code>, inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor in a private property called <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p translation-result=\"on\">注意保留對 <code>MessageService</code> 的注入，但是因為你將頻繁呼叫它，因此請把它包裹進一個私有的 <code>log</code> 方法中。</p><p translation-origin=\"off\">Notice that you keep injecting the <code>MessageService</code> but since your application calls it so frequently, wrap it in a private <code>log()</code> method:</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"log\">\n/** Log a HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n}\n\n</code-example>\n<p translation-result=\"on\">把伺服器上英雄資料資源的存取地址 <code>heroesURL</code> 定義為 <code>:base/:collectionName</code> 的形式。這裡的 <code>base</code> 是要請求的資源，而 <code>collectionName</code> 是 <code>in-memory-data-service.ts</code> 中的英雄資料物件。</p><p translation-origin=\"off\">Define the <code>heroesUrl</code> of the form <code>:base/:collectionName</code> with the address of the heroes resource on the server.\nHere <code>base</code> is the resource to which requests are made, and <code>collectionName</code> is the heroes data object in the <code>in-memory-data-service.ts</code>.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\" translation-result=\"on\">透過 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 獲取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#透過-httpclient-獲取英雄\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"get-heroes-with-httpclientlink\">Get heroes with <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函式來把模擬英雄資料返回為 <code>Observable&lt;Hero[]&gt;</code> 格式。</p><p translation-origin=\"off\">The current <code>HeroService.getHeroes()</code> uses the RxJS <code>of()</code> function to return an array of mock heroes as an <code>Observable&lt;Hero[]&gt;</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts (getHeroes with RxJs 'of()')\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  const heroes = of(HEROES);\n  return heroes;\n}\n\n</code-example>\n<p translation-result=\"on\">把該方法轉換成使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的，程式碼如下：</p><p translation-origin=\"off\">Convert that method to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> as follows:</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n}\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器後，英雄資料就會從模擬伺服器被成功讀取。</p><p translation-result=\"on\">你用 <code>http.get()</code> 替換了 <code>of()</code>，沒有做其它修改，但是應用仍然在正常工作，這是因為這兩個函式都返回了 <code>Observable&lt;Hero[]&gt;</code>。</p><p translation-origin=\"off\">Refresh the browser.\nThe hero data should successfully load from the mock server.</p>\n\n<p translation-origin=\"off\">You've swapped <code>of()</code> for <code>http.get()</code> and the application keeps working without any other changes\nbecause both functions return an <code>Observable&lt;Hero[]&gt;</code>.</p>\n\n<h3 id=\"httpclient-methods-return-one-value\" translation-result=\"on\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法返回單個值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-的方法返回單個值\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"httpclient-methods-return-one-valuelink\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return one value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclient-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">所有的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法都會返回某個值的 RxJS <code>Observable</code>。</p><p translation-result=\"on\">HTTP 是一個請求/響應式協議。你發起請求，它返回單個的響應。</p><p translation-result=\"on\">通常，<code>Observable</code> <em>可以</em>在一段時間內返回多個值。但來自 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>Observable</code> 總是發出一個值，然後結束，再也不會發出其它值。</p><p translation-result=\"on\">具體到這次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 呼叫，它返回一個 <code>Observable&lt;Hero[]&gt;</code>，也就是“一個英雄陣列的可觀察物件”。在實踐中，它也只會返回一個英雄陣列。</p><p translation-origin=\"off\">All <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>\n\n<p translation-origin=\"off\">HTTP is a request/response protocol.\nYou make a request, it returns a single response.</p>\n\n<p translation-origin=\"off\">In general, an observable <em>can</em> return more than one value over time.\nAn observable from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>\n\n<p translation-origin=\"off\">This particular call to <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns an <code>Observable&lt;Hero[]&gt;</code>, which is <em>an observable of hero arrays</em>.\nIn practice, it only returns a single hero array.</p>\n\n<h3 id=\"httpclientget-returns-response-data\" translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 返回響應資料<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-返回響應資料\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"httpclientget-returns-response-datalink\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 預設情況下把回應內文當做無型別的 JSON 物件進行返回。如果指定了可選的範本型別 <code>&lt;Hero[]&gt;</code>，就會給返回你一個類別型化的物件。</p><p translation-result=\"on\">伺服器的資料 API 決定了 JSON 資料的具體形態。<em>英雄之旅</em>的資料 API 會把英雄資料作為一個數組進行返回。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns the body of the response as an untyped JSON object by default.\nApplying the optional type specifier, <code>&lt;Hero[]&gt;</code> , adds TypeScript capabilities, which reduce errors during compile time.</p>\n\n<p translation-origin=\"off\">The server's data API determines the shape of the JSON data.\nThe <em>Tour of Heroes</em> data API returns the hero data as an array.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">其它 API 可能在返回物件中深埋著你想要的資料。你可能要藉助 RxJS 的 <code>map()</code> 運運算元對 <code>Observable</code> 的結果進行處理，以便把這些資料探勘出來。</p><p translation-result=\"on\">雖然不打算在此展開討論，不過你可以到範例原始碼中的 <code>getHeroNo404()</code> 方法中找到一個使用 <code>map()</code> 運運算元的例子。</p><p translation-origin=\"off\">Other APIs may bury the data that you want within an object.\nYou might have to dig that data out by processing the <code>Observable</code> result with the RxJS <code>map()</code> operator.</p>\n\n<p translation-origin=\"off\">Although not discussed here, there's an example of <code>map()</code> in the <code>getHeroNo404()</code> method included in the sample source code.</p>\n\n</div>\n<h3 id=\"error-handling\" translation-result=\"on\">錯誤處理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"error-handlinglink\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">凡事皆會出錯，特別是當你從遠端伺服器獲取資料的時候。<code>HeroService.getHeroes()</code> 方法應該捕獲錯誤，並做適當的處理。</p><p translation-result=\"on\">要捕獲錯誤，你就要使用 RxJS 的 <code>catchError()</code> 運運算元來<strong>建立對 Observable 結果的處理管道（pipe）</strong>。</p><p translation-result=\"on\">從 <code>rxjs/operators</code> 中匯入 <code>catchError</code> 符號，以及你稍後將會用到的其它運運算元。</p><p translation-origin=\"off\">Things go wrong, especially when you're getting data from a remote server.\nThe <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>\n\n<p translation-origin=\"off\">To catch errors, you <strong>\"pipe\" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>\n\n<p translation-origin=\"off\">Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators to use later.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p translation-result=\"on\">現在，使用 <code>pipe()</code> 方法來擴充 <code>Observable</code> 的結果，並給它一個 <code>catchError()</code> 運運算元。</p><p translation-origin=\"off\">Now extend the observable result with the <code>pipe()</code> method and give it a <code>catchError()</code> operator.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\"><code>catchError()</code> 運運算元會攔截<strong>失敗的 <code>Observable</code></strong>。它把錯誤物件傳給<em>錯誤處理器</em>，<em>錯誤處理器</em>會處理這個錯誤。</p><p translation-result=\"on\">下面的 <code>handleError()</code> 方法會報告這個錯誤，並返回一個無害的結果（安全值），以便應用能正常工作。</p><p translation-origin=\"off\">The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.\nThe operator then passes the error to the error handling function.</p>\n\n<p translation-origin=\"off\">The following <code>handleError()</code> method reports the error and then returns an innocuous result so that the application keeps working.</p>\n\n<h4 id=\"handleerror\"><code>handleError</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">下面這個 <code>handleError()</code> 將會在很多 <code>HeroService</code> 的方法之間共享，所以要把它通用化，以支援這些彼此不同的需求。</p><p translation-result=\"on\">它不再直接處理這些錯誤，而是返回給 <code>catchError</code> 返回一個錯誤處理函式。還要用操作名和出錯時要返回的安全值來對這個錯誤處理函式進行配置。</p><p translation-origin=\"off\">The following <code>handleError()</code> can be shared by many <code>HeroService</code> methods so it's generalized to meet their different needs.</p>\n\n<p translation-origin=\"off\">Instead of handling the error directly, it returns an error handler function to <code>catchError</code>. This function is configured with both the name of the operation that failed and a safe return value.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&lt;T&gt;(operation = 'operation', result?: T) {\n  return (error: any): Observable&lt;T&gt; =&gt; {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p translation-result=\"on\">在控制檯中彙報了這個錯誤之後，這個處理器會彙報一個使用者友好的訊息，並給應用返回一個安全值，讓應用繼續工作。</p><p translation-result=\"on\">因為每個服務方法都會返回不同型別的 <code>Observable</code> 結果，因此 <code>handleError()</code> 也需要一個類別型引數，以便它返回一個此型別的安全值，正如應用所期望的那樣。</p><p translation-origin=\"off\">After reporting the error to the console, the handler constructs a friendly message and returns a safe value so the application can keep working.</p>\n\n<p translation-origin=\"off\">Because each service method returns a different kind of <code>Observable</code> result, <code>handleError()</code> takes a type parameter to return the safe value as the type that the application expects.</p>\n\n<h3 id=\"tap-into-the-observable\" translation-result=\"on\">窺探 <code>Observable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"tap-into-the-observablelink\">Tap into the Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroService</code> 的方法將會窺探 <code>Observable</code> 的資料流，並透過 <code>log()</code> 方法往頁面底部發送一條訊息。</p><p translation-result=\"on\">RxJS 的 <code>tap()</code> 運運算元可以透過檢視 Observable 中的值來實現此功能，可以用那些值做一些事情，並且把它們傳出來。這種 <code>tap()</code> 回呼(Callback)不會改變這些值本身。</p><p translation-result=\"on\">下面是 <code>getHeroes()</code> 的最終版本，它使用 <code>tap()</code> 來記錄各種操作。</p><p translation-origin=\"off\">The <code>HeroService</code> methods taps into the flow of observable values and send a message, using the <code>log()</code> method, to the message area at the bottom of the page.</p>\n\n<p translation-origin=\"off\">The RxJS <code>tap()</code> operator enables this ability by looking at the observable values, doing something with those values, and passing them along.\nThe <code>tap()</code> call back doesn't access the values themselves.</p>\n\n<p translation-origin=\"off\">Here is the final version of <code>getHeroes()</code> with the <code>tap()</code> that logs the operation.</p>\n\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" header=\"src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes(): Observable&lt;Hero[]&gt; {\n  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    .pipe(\n      tap(_ =&gt; this.log('fetched heroes')),\n      catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\" translation-result=\"on\">透過 id 獲取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"get-hero-by-idlink\">Get hero by id<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">大多數的 Web API 都支援以 <code>:baseURL/:id</code> 的形式根據 id 進行獲取。</p><p translation-result=\"on\">這裡的 <code>baseURL</code> 就是在 <a href=\"tutorial/toh-pt6#heroes-and-http\">英雄列表與 HTTP</a> 部分定義過的 <code>heroesURL</code>（在 <code>api/heroes</code> 中）。而 <code>id</code> 則是你要獲取的英雄的編號，比如，<code>api/heroes/11</code>。</p><p translation-result=\"on\">把 <code>HeroService.getHero()</code> 方法改成這樣，以發起該請求：</p><p translation-origin=\"off\">Most web APIs support a <em>get by id</em> request in the form <code>:baseURL/:id</code>.</p>\n\n<p translation-origin=\"off\">Here, the <em>base URL</em> is the <code>heroesURL</code> defined in the <a href=\"tutorial/toh-pt6#heroes-and-http\">Heroes and HTTP</a> section in <code>api/heroes</code> and <em>id</em> is the number of the hero that you want to retrieve.\nFor example, <code>api/heroes/11</code>.</p>\n\n<p translation-origin=\"off\">Update the <code>HeroService</code> <code>getHero()</code> method with the following to make that request:</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&lt;Hero&gt; {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&lt;Hero&gt;(url).pipe(\n    tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">這裡和 <code>getHeroes()</code> 相比有三個顯著的差異:</p><p translation-origin=\"off\"><code>getHero()</code> has three significant differences from  <code>getHeroes()</code>:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>getHero()</code> 使用想獲取的英雄的 id 構造了一個請求 URL</p><p translation-origin=\"off\"><code>getHero()</code> constructs a request URL with the desired hero's id</p>\n\n</li>\n<li>\n<p translation-result=\"on\">伺服器應該使用單個英雄作為回應，而不是一個英雄陣列</p><p translation-origin=\"off\">The server should respond with a single hero rather than an array of heroes</p>\n\n</li>\n<li>\n<p translation-result=\"on\">所以，<code>getHero()</code> 會返回 <code>Observable&lt;Hero&gt;</code>，它是一個 <code>Hero</code> 物件型別的 Observable，而不是一個 <code>Hero</code> <em>陣列</em>型別的 Observable。</p><p translation-origin=\"off\"><code>getHero()</code> returns an <code>Observable&lt;Hero&gt;</code>, which is an observable of <code>Hero</code> <em>objects</em> rather than an observable of <code>Hero</code> <em>arrays</em>.</p>\n\n</li>\n</ul>\n<h2 id=\"update-heroes\" translation-result=\"on\">修改英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"update-heroeslink\">Update heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n\n<!-- markdownlint-disable MD001 -->\n<p translation-result=\"on\">在<em>英雄詳情</em>檢視中編輯英雄的名字。隨著輸入，英雄的名字也跟著在頁面頂部的標題區更新了。但是當你點選“後退”按鈕時，這些修改都丟失了。</p><p translation-result=\"on\">如果你希望保留這些修改，就要把它們寫回到伺服器。</p><p translation-result=\"on\">在英雄詳情範本的底部新增一個儲存按鈕，它綁定了一個 <code>click</code> 事件，事件繫結會呼叫元件中一個名叫 <code>save()</code> 的新方法。</p><p translation-origin=\"off\">Edit a hero's name in the hero detail view.\nAs you type, the hero name updates the heading at the top of the page, yet\nwhen you click <strong>Go back</strong>, your changes are lost.</p>\n\n<p translation-origin=\"off\">If you want changes to persist, you must write them back to the server.</p>\n\n<p translation-origin=\"off\">At the end of the hero detail template, add a save button with a <code>click</code> event binding that invokes a new component method named <code>save()</code>.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.html (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\">\n&lt;button type=\"button\" (click)=\"save()\"&gt;save&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">在 <code>HeroDetail</code> 元件類中，新增如下的 <code>save()</code> 方法，它使用英雄服務中的 <code>updateHero()</code> 方法來儲存對英雄名字的修改，然後導航回前一個檢視。</p><p translation-origin=\"off\">In the <code>HeroDetail</code> component class, add the following <code>save()</code> method, which persists hero name changes using the hero service <code>updateHero()</code> method and then navigates back to the previous view.</p>\n\n<code-example header=\"src/app/hero-detail/hero-detail.component.ts (save)\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\">\nsave(): void {\n  if (this.hero) {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() =&gt; this.goBack());\n  }\n}\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\" translation-result=\"on\">新增 <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"add-heroserviceupdateherolink\">Add <code>HeroService.updateHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>updateHero()</code> 的總體結構和 <code>getHeroes()</code> 很相似，但它會使用 <code>http.put()</code> 來把修改後的英雄儲存到伺服器上。把下列程式碼新增進 <code>HeroService</code>。</p><p translation-origin=\"off\">The structure of the <code>updateHero()</code> method is like that of <code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero on the server.\nAdd the following to the <code>HeroService</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts (update)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server */\nupdateHero(hero: Hero): Observable&lt;any&gt; {\n  return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&lt;any&gt;('updateHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三個引數：</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> method takes three parameters:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">URL 地址</p><p translation-origin=\"off\">The URL</p>\n\n</li>\n<li>\n<p translation-result=\"on\">要修改的資料，這裡就是修改後的英雄</p><p translation-origin=\"off\">The data to update, which is the modified hero in this case</p>\n\n</li>\n<li>\n<p translation-result=\"on\">選項</p><p translation-origin=\"off\">Options</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">URL 沒變。英雄 Web API 透過英雄物件的 <code>id</code> 就可以知道要修改哪個英雄。</p><p translation-result=\"on\">英雄 Web API 期待在儲存時的請求中有一個特殊的頭。這個頭是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定義的。</p><p translation-origin=\"off\">The URL is unchanged.\nThe heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>\n\n<p translation-origin=\"off\">The heroes web API expects a special header in HTTP save requests.\nThat header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>.\nAdd the following to the <code>HeroService</code> class.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\">\nhttpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p translation-result=\"on\">重新整理瀏覽器，修改英雄名，儲存這些修改。在 <code>HeroDetailComponent</code> 的 <code>save()</code> 方法中導航到前一個檢視。現在，改名後的英雄已經顯示在列表中了。</p><p translation-origin=\"off\">Refresh the browser, change a hero name and save your change.\nThe <code>save()</code> method in <code>HeroDetailComponent</code> navigates to the previous view.\nThe hero now appears in the list with the changed name.</p>\n\n<h2 id=\"add-a-new-hero\" translation-result=\"on\">新增一個新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"add-a-new-herolink\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要新增英雄，本應用中只需要英雄的名字。你可以使用一個和新增按鈕成對的 <code>&lt;input&gt;</code> 元素。</p><p translation-result=\"on\">把下列程式碼插入到 <code>HeroesComponent</code> 範本中標題的緊後面：</p><p translation-origin=\"off\">To add a hero, this application only needs the hero's name.\nYou can use an <code>&lt;input&gt;</code> element paired with an add button.</p>\n\n<p translation-origin=\"off\">Insert the following into the <code>HeroesComponent</code> template, after the heading:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\">\n&lt;div&gt;\n  &lt;label for=\"new-hero\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"new-hero\" #heroName /&gt;\n\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    Add hero\n  &lt;/button&gt;\n&lt;/div&gt;\n\n</code-example>\n<p translation-result=\"on\">當點選事件觸發時，呼叫元件的點選處理器（<code>add()</code>），然後清空這個輸入框，以便用來輸入另一個名字。把下列程式碼新增到 <code>HeroesComponent</code> 類：</p><p translation-origin=\"off\">In response to a click event, call the component's click handler, <code>add()</code>, and then clear the input field so that it's ready for another name.\nAdd the following to the <code>HeroesComponent</code> class:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (add)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero =&gt; {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p translation-result=\"on\">當指定的名字非空時，這個處理器會用這個名字建立一個基於此英雄名字的物件。此處理器把這個物件的名字傳給服務的 <code>addHero()</code> 方法。</p><p translation-result=\"on\">當 <code>addHero()</code> 儲存成功時，<code>subscribe()</code> 的回呼(Callback)函式會收到這個新英雄，並把它追加到 <code>heroes</code> 列表中以供顯示。</p><p translation-result=\"on\">往 <code>HeroService</code> 類中新增 <code>addHero()</code> 方法。</p><p translation-origin=\"off\">When the given name isn't blank, the handler creates an object based on the hero's name.\nThe handler passes the object name to the service's <code>addHero()</code> method.</p>\n\n<p translation-origin=\"off\">When <code>addHero()</code> creates a new object, the <code>subscribe()</code> callback receives the new hero and pushes it into to the <code>heroes</code> list for display.</p>\n\n<p translation-origin=\"off\">Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>\n\n<code-example header=\"src/app/hero.service.ts (addHero)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the server */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, this.httpOptions).pipe(\n    tap((newHero: Hero) =&gt; this.log(`added hero w/ id=${newHero.id}`)),\n    catchError(this.handleError&lt;Hero&gt;('addHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\"><code>addHero()</code> 和 <code>updateHero()</code> 有兩點不同。</p><p translation-origin=\"off\"><code>addHero()</code> differs from <code>updateHero()</code> in two ways:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">它呼叫 <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 <code>put()</code>。</p><p translation-origin=\"off\">It calls <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> instead of <code>put()</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">它期待伺服器為這個新的英雄產生一個 id，然後把它透過 <code>Observable&lt;Hero&gt;</code> 返回給呼叫者。</p><p translation-origin=\"off\">It expects the server to create an id for the new hero, which it returns in the <code>Observable&lt;Hero&gt;</code> to the caller</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">重新整理瀏覽器，並新增一些英雄。</p><p translation-origin=\"off\">Refresh the browser and add some heroes.</p>\n\n<h2 id=\"delete-a-hero\" translation-result=\"on\">刪除某個英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"delete-a-herolink\">Delete a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">英雄列表中的每個英雄都有一個刪除按鈕。</p><p translation-result=\"on\">把下列按鈕（<code>button</code>）元素新增到 <code>HeroesComponent</code> 的範本中，就在每個 <code>&lt;li&gt;</code> 元素中的英雄名字後方。</p><p translation-origin=\"off\">Each hero in the heroes list should have a delete button.</p>\n\n<p translation-origin=\"off\">Add the following button element to the <code>HeroesComponent</code> template, after the hero name in the repeated <code>&lt;li&gt;</code> element.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n  (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n\n</code-example>\n<p translation-result=\"on\">英雄列表的 HTML 應該是這樣的：</p><p translation-origin=\"off\">The HTML for the list of heroes should look like this:</p>\n\n<code-example header=\"src/app/heroes/heroes.component.html (list of heroes)\" path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\">\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n    &lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">要把刪除按鈕定位在每個英雄條目的最右邊，就要從<a href=\"tutorial/toh-pt6#heroescomponent\">最終程式碼</a> 中往 <code>heroes.component.css</code> 中新增一些 CSS。</p><p translation-result=\"on\">把 <code>delete()</code> 處理器新增到元件中。</p><p translation-origin=\"off\">To position the delete button at the far right of the hero entry, add some CSS from the <a href=\"tutorial/toh-pt6#heroescomponent\">final review code</a> to the <code>heroes.component.css</code>.</p>\n\n<p translation-origin=\"off\">Add the <code>delete()</code> handler to the component class.</p>\n\n<code-example header=\"src/app/heroes/heroes.component.ts (delete)\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h =&gt; h !== hero);\n  this.heroService.deleteHero(hero.id).subscribe();\n}\n\n</code-example>\n<p translation-result=\"on\">雖然這個元件把刪除英雄的邏輯委託給了 <code>HeroService</code>，但仍保留了更新它自己的英雄列表的職責。元件的 <code>delete()</code> 方法會在 <code>HeroService</code> 對伺服器的操作成功之前，先從列表中移除<em>要刪除的英雄</em>。</p><p translation-result=\"on\">元件與 <code>heroService.deleteHero()</code> 返回的 <code>Observable</code> 還完全沒有關聯。<strong>必須訂閱它</strong>。</p><p translation-result=\"on\">接下來，把 <code>deleteHero()</code> 方法新增到 <code>HeroService</code> 中，程式碼如下。</p><p translation-origin=\"off\">Although the component delegates hero deletion to the <code>HeroService</code>, it remains responsible for updating its own list of heroes.\nThe component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list, anticipating that the <code>HeroService</code> succeeds on the server.</p>\n\n<p translation-origin=\"off\">There's really nothing for the component to do with the <code>Observable</code> returned by <code>heroService.deleteHero()</code> <strong>but it must subscribe anyway</strong>.</p>\n\n<p translation-origin=\"off\">Next, add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>\n\n<code-example header=\"src/app/hero.service.ts (delete)\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;Hero&gt; {\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&lt;Hero&gt;(url, this.httpOptions).pipe(\n    tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">注意以下關鍵點：</p><p translation-origin=\"off\">Notice the following key points:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>deleteHero()</code> 呼叫了 <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code></p><p translation-origin=\"off\"><code>deleteHero()</code> calls <code><a href=\"api/common/http/HttpClient#delete\" class=\"code-anchor\">HttpClient.delete()</a></code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">URL 就是英雄的資源 URL 加上要刪除的英雄的 <code>id</code></p><p translation-origin=\"off\">The URL is the heroes resource URL plus the <code>id</code> of the hero to delete</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你不用像 <code>put()</code> 和 <code>post()</code> 中那樣傳送任何資料</p><p translation-origin=\"off\">You don't send data as you did with <code>put()</code> and <code>post()</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">你仍要傳送 <code>httpOptions</code></p><p translation-origin=\"off\">You still send the <code>httpOptions</code></p>\n\n</li>\n</ul>\n<p translation-result=\"on\">重新整理瀏覽器並嘗試新的刪除特性。</p><p translation-origin=\"off\">Refresh the browser and try the new delete capability.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果你忘了 <code>subscribe()</code>，此服務就不會向伺服器傳送刪除請求。作為一條規則 <code>Observable</code> 在被訂閱前<strong>不會做任何事</strong>。</p><p translation-result=\"on\">你可以透過暫時移除 <code>subscribe()</code> 來確認這一點，點選 <strong>Dashboard</strong>，然後點選 <strong>Heroes</strong>。這裡應該始終展示著英雄列表。</p><p translation-origin=\"off\">If you neglect to <code>subscribe()</code>, the service can't send the delete request to the server.\nAs a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes.</p>\n\n<p translation-origin=\"off\">Confirm this for yourself by temporarily removing the <code>subscribe()</code>, clicking <strong>Dashboard</strong>, then clicking <strong>Heroes</strong>.\nThis shows the full list of heroes again.</p>\n\n</div>\n<p>重新整理瀏覽器，並試一下這個新的刪除功能。</p>\n<h2 id=\"search-by-name\" translation-result=\"on\">根據名字搜尋<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"search-by-namelink\">Search by name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在最後一次練習中，你要學到把 <code>Observable</code> 的運運算元串在一起，讓你能將相似 HTTP 請求的數量最小化，並節省網路頻寬。</p><p translation-origin=\"off\">In this last exercise, you learn to chain <code>Observable</code> operators together so you can reduce the number of similar HTTP requests to consume network bandwidth economically.</p>\n\n<h3 id=\"add-a-heroes-search-feature-to-the-dashboard\" translation-result=\"on\">往<em>儀表盤</em>中加入<em>英雄搜尋</em>特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-a-heroes-search-feature-to-the-dashboardlink\">Add a heroes search feature to the Dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">當用戶在搜尋框中輸入名字時，你的應用就會不斷髮送根據名字過濾英雄的 HTTP 請求。你的目標是僅僅發出儘可能少的必要請求。</p><p translation-origin=\"off\">As the user types a name into a search box, your application makes repeated HTTP requests for heroes filtered by that name.\nYour goal is to issue only as many requests as necessary.</p>\n\n<h4 id=\"heroservicesearchheroes\"><code>HeroService.searchHeroes()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">先把 <code>searchHeroes()</code> 方法新增到 <code>HeroService</code> 中。</p><p translation-origin=\"off\">Start by adding a <code>searchHeroes()</code> method to the <code>HeroService</code>.</p>\n\n<code-example header=\"src/app/hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&lt;Hero[]&gt; {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&lt;Hero[]&gt;(`${this.heroesUrl}/?name=${term}`).pipe(\n    tap(x =&gt; x.length ?\n       this.log(`found heroes matching \"${term}\"`) :\n       this.log(`no heroes matching \"${term}\"`)),\n    catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p translation-result=\"on\">如果沒有搜尋詞，該方法立即返回一個空陣列。剩下的部分和 <code>getHeroes()</code> 很像。唯一的不同點是 URL，它包含了一個由搜尋片語成的查詢字串。</p><p translation-origin=\"off\">The method returns immediately with an empty array if there is no search term.\nThe rest of it closely resembles <code>getHeroes()</code>, the only significant difference being the URL, which includes a query string with the search term.</p>\n\n<h3 id=\"add-search-to-the-dashboard\" translation-result=\"on\">為儀表盤新增搜尋功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"add-search-to-the-dashboardlink\">Add search to the dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">開啟 <code>DashboardComponent</code> 的範本並且把用於搜尋英雄的元素 <code>&lt;app-hero-search&gt;</code> 新增到程式碼的底部。</p><p translation-origin=\"off\">Open the <code>DashboardComponent</code> template and\nadd the hero search element, <code>&lt;app-hero-search&gt;</code>, to the bottom of the markup.</p>\n\n<code-example header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;app-hero-search&gt;&lt;/app-hero-search&gt;\n\n\n</code-example>\n<p translation-result=\"on\">這個範本看起來很像 <code>HeroesComponent</code> 範本中的 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 複寫器。</p><p translation-result=\"on\">為此，下一步就是新增一個元件，它的選擇器要能匹配 <code>&lt;app-hero-search&gt;</code>。</p><p translation-origin=\"off\">This template looks a lot like the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>\n\n<p translation-origin=\"off\">For this to work, the next step is to add a component with a selector that matches <code>&lt;app-hero-search&gt;</code>.</p>\n\n<h3 id=\"create-herosearchcomponent\" translation-result=\"on\">建立 <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"create-herosearchcomponentlink\">Create <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">執行 <code>ng generate</code> 以建立一個 <code>HeroSearchComponent</code>。</p><p translation-origin=\"off\">Run <code>ng generate</code> to create a <code>HeroSearchComponent</code>.</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng generate component hero-search\n\n</code-example>\n<p translation-result=\"on\">CLI 生成了 <code>HeroSearchComponent</code> 的三個檔案，並把該元件新增到了 <code>AppModule</code> 的宣告中。</p><p translation-result=\"on\">把產生的 <code>HeroSearchComponent</code> 的<em>範本</em>改成一個 <code>&lt;input&gt;</code> 和一個匹配到的搜尋結果的列表。程式碼如下。</p><p translation-origin=\"off\"><code>ng generate</code> creates the three <code>HeroSearchComponent</code> files and adds the component to the <code>AppModule</code> declarations.</p>\n\n<p translation-origin=\"off\">Replace the <code>HeroSearchComponent</code> template with an <code>&lt;input&gt;</code> and a list of matching search results, as follows.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;label for=\"search-box\"&gt;Hero Search&lt;/label&gt;\n  &lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" &gt;\n      &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-example>\n<p translation-result=\"on\">從下面的 <a href=\"tutorial/toh-pt6#herosearchcomponent\">最終程式碼</a> 中把私有 CSS 樣式新增到 <code>hero-search.component.css</code> 中。</p><p translation-result=\"on\">當用戶在搜尋框中輸入時，一個 <code>input</code> 事件繫結會呼叫該元件的 <code>search()</code> 方法，並傳入新的搜尋框的值。</p><p translation-origin=\"off\">Add private CSS styles to <code>hero-search.component.css</code> as listed in the <a href=\"tutorial/toh-pt6#herosearchcomponent\">final code review</a> below.</p>\n\n<p translation-origin=\"off\">As the user types in the search box, an input event binding calls the component's <code>search()</code> method with the new search box value.</p>\n\n<p><a id=\"asyncpipe\"></a></p>\n<h3 id=\"asyncpipe\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 會重複渲染這些英雄物件。注意，<code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 在一個名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。<code>$</code> 是一個約定，表示 <code>heroes$</code> 是一個 <code>Observable</code> 而不是陣列。</p><p translation-origin=\"off\">The <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> repeats hero objects.\nNotice that the <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>.\nThe <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" &gt;\n\n</code-example>\n<p translation-result=\"on\">由於 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> 不能直接使用 <code>Observable</code>，所以要使用一個管道字元（<code>|</code>），後面緊跟著一個 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code>。這表示 Angular 的 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 管道，它會自動訂閱 <code>Observable</code>，這樣你就不用在元件類中這麼做了。</p><p translation-origin=\"off\">Since <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code> can't do anything with an <code>Observable</code>, use the pipe <code>|</code> character followed by <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code>.\nThis identifies Angular's <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> and subscribes to an <code>Observable</code> automatically so you won't have to do so in the component class.</p>\n\n<h3 id=\"edit-the-herosearchcomponent-class\" translation-result=\"on\">修正 <code>HeroSearchComponent</code> 類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"edit-the-herosearchcomponent-classlink\">Edit the <code>HeroSearchComponent</code> class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#edit-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">修改所產生的 <code>HeroSearchComponent</code> 類及其元資料，程式碼如下。</p><p translation-origin=\"off\">Replace the <code>HeroSearchComponent</code> class and metadata as follows.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\">注意，<code>heroes$</code> 宣告為一個 <code>Observable</code></p><p translation-origin=\"off\">Notice the declaration of <code>heroes$</code> as an <code>Observable</code>:</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$!: Observable&lt;Hero[]&gt;;\n\n</code-example>\n<p translation-result=\"on\">你將會在 <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中設定它，在此之前，先仔細看看 <code>searchTerms</code> 的定義。</p><p translation-origin=\"off\">Set this in <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a>.\nBefore you do, focus on the definition of <code>searchTerms</code>.</p>\n\n<h3 id=\"the-searchterms-rxjs-subject\" translation-result=\"on\">RxJS <code>Subject</code> 型別的 <code>searchTerms</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-searchterms-rxjs-subjectlink\">The <code>searchTerms</code> RxJS subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>searchTerms</code> 屬性是 RxJS 的 <code>Subject</code> 型別。</p><p translation-origin=\"off\">The <code>searchTerms</code> property is an RxJS <code>Subject</code>.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&lt;string&gt;();\n\n// Push a search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p translation-result=\"on\"><code>Subject</code> 既是可觀察物件的資料源，本身也是 <code>Observable</code>。你可以像訂閱任何 <code>Observable</code> 一樣訂閱 <code>Subject</code>。</p><p translation-result=\"on\">你還可以透過呼叫它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一樣。</p><p translation-result=\"on\">文字框的 <code>input</code> 事件的<em>事件繫結</em>會呼叫 <code>search()</code> 方法。</p><p translation-origin=\"off\">A <code>Subject</code> is both a source of observable values and an <code>Observable</code> itself.\nYou can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>\n\n<p translation-origin=\"off\">You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method as the <code>search()</code> method does.</p>\n\n<p translation-origin=\"off\">The event binding to the text box's <code>input</code> event calls the <code>search()</code> method.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n</code-example>\n<p translation-result=\"on\">每當使用者在文字框中輸入時，這個事件繫結就會使用文字框的值（搜尋詞）呼叫 <code>search()</code> 函式。<code>searchTerms</code> 變成了一個能發出搜尋詞的穩定的流。</p><p translation-origin=\"off\">Every time the user types in the text box, the binding calls <code>search()</code> with the text box value as a <em>search term</em>.\nThe <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>\n\n<p><a id=\"search-pipe\"></a></p>\n<h3 id=\"chaining-rxjs-operators\" translation-result=\"on\">串聯 RxJS 運運算元<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"chaining-rxjs-operatorslink\">Chaining RxJS operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果每當使用者按鍵後就直接呼叫 <code>searchHeroes()</code> 將導致建立海量的 HTTP 請求，浪費伺服器資源並干擾資料排程計劃。</p><p translation-result=\"on\">應該怎麼做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 這個可觀察物件的處理管道中加入了一系列 RxJS 運運算元，用以縮減對 <code>searchHeroes()</code> 的呼叫次數。最終，它返回一個可及時給出英雄搜尋結果的可觀察物件，這裡每次都是 <code>Hero[]</code>。</p><p translation-result=\"on\">程式碼如下。</p><p translation-origin=\"off\">Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke creates excessive HTTP requests, which taxes server resources and burning through data plans.</p>\n\n<p translation-origin=\"off\">Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>. Ultimately, this returns an observable of timely hero search results where each one is a <code>Hero[]</code>.</p>\n\n<p translation-origin=\"off\">Here's a closer look at the code.</p>\n\n<code-example header=\"src/app/hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<p translation-result=\"on\">各個運運算元的工作方式如下：</p><p translation-origin=\"off\">Each operator works as follows:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在傳出最終字串之前，<code>debounceTime(300)</code> 將會等待，直到新增字串的事件暫停了 300 毫秒。你實際發起請求的間隔永遠不會小於 300ms。</p><p translation-origin=\"off\"><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds before passing along the latest string.\nRequests aren't likely to happen more frequently than 300&nbsp;ms.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>distinctUntilChanged()</code> 會確保只在過濾條件變化時才傳送請求。</p><p translation-origin=\"off\"><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>switchMap()</code> 會為每個從 <code>debounce()</code> 和 <code>distinctUntilChanged()</code> 中透過的搜尋詞調用搜索服務。它會取消並丟棄以前的搜尋可觀察物件，只保留最近的。</p><p translation-origin=\"off\"><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce()</code> and <code>distinctUntilChanged()</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">藉助 <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap 運運算元</a>，每個有效的按鍵事件都會觸發一次 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 方法呼叫。即使在每個請求之間都有至少 300ms 的間隔，仍然可能會同時存在多個尚未返回的 HTTP 請求。</p><p translation-result=\"on\"><code>switchMap()</code> 會記住原始的請求順序，只會返回最近一次 HTTP 方法呼叫的結果。以前的那些請求都會被取消和捨棄。</p><p translation-origin=\"off\">With the <a href=\"https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\"><code>switchMap</code> operator</a>, every qualifying key event can trigger an <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method call.\nEven with a 300&nbsp;ms pause between requests, you could have many HTTP requests in flight and they may not return in the order sent.</p>\n\n<p translation-origin=\"off\"><code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.\nResults from prior calls are canceled and discarded.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n取消前一個 <code>searchHeroes()</code> 可觀察物件並不會中止尚未完成的 HTTP 請求。那些不想要的結果只會在它們抵達應用程式碼之前被捨棄。</p><p translation-origin=\"off\">Canceling a previous <code>searchHeroes()</code> Observable doesn't actually cancel a pending HTTP request.\nUnwanted results are discarded before they reach your application code.</p>\n\n</div>\n</div>\n<p translation-result=\"on\">記住，元件類中並沒有訂閱 <code>heroes$</code> 這個可觀察物件，而是由範本中的 <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 完成的。</p><p translation-origin=\"off\">Remember that the component <em>class</em> doesn't subscribe to the <code>heroes$</code> <em>observable</em>.\nThat's the job of the <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> in the template.</p>\n\n<h4 id=\"try-it\" translation-result=\"on\">試試看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"try-itlink\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">再次執行本應用。在這個 <em>儀表盤</em> 中，在搜尋框中輸入一些文字。如果你輸入的字元匹配上了任何現有英雄的名字，你將會看到如下效果。</p><p translation-origin=\"off\">Run the application again.\nIn the <em>Dashboard</em>, enter some text in the search box.\nEnter characters that match any existing hero names, and look for something like this.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Hero Search field with the letters 'm' and 'a' along with four search results that match the query displayed in a list beneath the search input\" src=\"generated/images/guide/toh/toh-hero-search.gif\" width=\"400\" height=\"299\">\n</div>\n<h2 id=\"final-code-review\" translation-result=\"on\">檢視最終程式碼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"final-code-reviewlink\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本文討論過的程式碼檔案如下。它們都位於 <code>src/app/</code> 資料夾中。</p><p translation-origin=\"off\">Here are the code files discussed on this page. They're found in the <code>src/app/</code> directory.</p>\n\n<p><a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a></p>\n<p><a id=\"appmodule\"></a></p>\n<h3 id=\"heroservice-inmemorydataservice-appmodule\"><code>HeroService</code>, <code>InMemoryDataService</code>, <code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  httpOptions = {\n    headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable&lt;Hero[]&gt; {\n    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n      .pipe(\n        tap(_ =&gt; this.log('fetched heroes')),\n        catchError(this.handleError&lt;Hero[]&gt;('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&lt;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>&gt;(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&lt;Hero[]&gt;(url)\n      .pipe(\n        map(heroes =&gt; heroes[0]), // returns a {0|1} element array\n        tap(h =&gt; {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&lt;Hero&gt;(url).pipe(\n      tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&lt;Hero[]&gt; {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&lt;Hero[]&gt;(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x =&gt; x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable&lt;Hero&gt; {\n    return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) =&gt; this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError&lt;Hero&gt;('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&lt;Hero&gt;(url, this.httpOptions).pipe(\n      tap(_ =&gt; this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&lt;Hero&gt;('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable&lt;any&gt; {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&lt;any&gt;('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&lt;T&gt;(operation = 'operation', result?: T) {\n    return (error: any): Observable&lt;T&gt; =&gt; {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 12, name: 'Dr. Nice' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr. IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroSearchComponent } from './hero-search/hero-search.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when a real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"heroescomponent\"></a></p>\n<h3 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n\n&lt;div&gt;\n  &lt;label for=\"new-hero\"&gt;Hero name: &lt;/label&gt;\n  &lt;input id=\"new-hero\" #heroName /&gt;\n\n  &lt;!-- (click) passes input value to add() and then clears the input --&gt;\n  &lt;button type=\"button\" class=\"add-button\" (click)=\"add(heroName.value); heroName.value=''\"&gt;\n    Add hero\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"&gt;\n    &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n    &lt;button type=\"button\" class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero =&gt; {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h =&gt; h !== hero);\n    this.heroService.deleteHero(hero.id).subscribe();\n  }\n\n}\n\n\n</code-pane>\n    <code-pane header=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\ninput {\n  display: block;\n  width: 100%;\n  padding: .5rem;\n  margin: 1rem 0;\n  box-sizing: border-box;\n}\n\n.heroes li {\n  position: relative;\n  cursor: pointer;\n}\n\n.heroes li:hover {\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n  display: block;\n  width: 100%;\n}\n\n.heroes a:hover {\n  color: #2c3a41;\n  background-color: #e6e6e6;\n}\n\n.heroes a:active {\n  background-color: #525252;\n  color: #fafafa;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n.add-button {\n padding: .5rem 1.5rem;\n font-size: 1rem;\n margin-bottom: 2rem;\n}\n\n.add-button:hover {\n  color: white;\n  background-color: #42545C;\n}\n\nbutton.delete {\n  position: absolute;\n  left: 210px;\n  top: 5px;\n  background-color: white;\n  color:  #525252;\n  font-size: 1.1rem;\n  margin: 0;\n  padding: 1px 10px 3px 10px;\n}\n\nbutton.delete:hover {\n  background-color: #525252;\n  color: white;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herodetailcomponent\"></a></p>\n<h3 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&lt;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&lt;/h2&gt;\n  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label for=\"hero-name\"&gt;Hero name: &lt;/label&gt;\n    &lt;input id=\"hero-name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"Hero name\"/&gt;\n  &lt;/div&gt;\n  &lt;button type=\"button\" (click)=\"goBack()\"&gt;go back&lt;/button&gt;\n  &lt;button type=\"button\" (click)=\"save()\"&gt;save&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero | undefined;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = parseInt(this.route.snapshot.paramMap.get('id')!, 10);\n    this.heroService.getHero(id)\n      .subscribe(hero =&gt; this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n  save(): void {\n    if (this.hero) {\n      this.heroService.updateHero(this.hero)\n        .subscribe(() =&gt; this.goBack());\n    }\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-detail/hero-detail.component.css\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent's private CSS styles */\nlabel {\n  color: #435960;\n  font-weight: bold;\n}\ninput {\n  font-size: 1em;\n  padding: .5rem;\n}\nbutton {\n  margin-top: 20px;\n  margin-right: .5rem;\n  background-color: #eee;\n  padding: 1rem;\n  border-radius: 4px;\n  font-size: 1rem;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"dashboardcomponent\"></a></p>\n<h3 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&lt;h2&gt;Top Heroes&lt;/h2&gt;\n&lt;div class=\"heroes-menu\"&gt;\n  &lt;a *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n      {{hero.name}}\n  &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;app-hero-search&gt;&lt;/app-hero-search&gt;\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.ts\" path=\"toh-pt6/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"dashboard/dashboard.component.css\" path=\"toh-pt6/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent's private CSS styles */\n\nh2 {\n  text-align: center;\n}\n\n.heroes-menu {\n  padding: 0;\n  margin: auto;\n  max-width: 1000px;\n\n  /* flexbox */\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-content: flex-start;\n  align-items: flex-start;\n}\n\na {\n  background-color: #3f525c;\n  border-radius: 2px;\n  padding: 1rem;\n  font-size: 1.2rem;\n  text-decoration: none;\n  display: inline-block;\n  color: #fff;\n  text-align: center;\n  width: 100%;\n  min-width: 70px;\n  margin: .5rem auto;\n  box-sizing: border-box;\n\n  /* flexbox */\n  order: 0;\n  flex: 0 1 auto;\n  align-self: auto;\n}\n\n@media (min-width: 600px) {\n  a {\n    width: 18%;\n    box-sizing: content-box;\n  }\n}\n\na:hover {\n  background-color: black;\n}\n\n\n</code-pane>\n</code-tabs>\n<p><a id=\"herosearchcomponent\"></a></p>\n<h3 id=\"herosearchcomponent\"><code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs>\n    <code-pane header=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&lt;div id=\"search-component\"&gt;\n  &lt;label for=\"search-box\"&gt;Hero Search&lt;/label&gt;\n  &lt;input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" /&gt;\n\n  &lt;ul class=\"search-result\"&gt;\n    &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | async\" &gt;\n      &lt;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\"&gt;\n        {{hero.name}}\n      &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$!: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n    <code-pane header=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n\nlabel {\n  display: block;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin-top: 1rem;\n  margin-bottom: .5rem;\n\n}\ninput {\n  padding: .5rem;\n  width: 100%;\n  max-width: 600px;\n  box-sizing: border-box;\n  display: block;\n}\n\ninput:focus {\n  outline: #336699 auto 1px;\n}\n\nli {\n  list-style-type: none;\n}\n.search-result li a {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  display: inline-block;\n  width: 100%;\n  max-width: 600px;\n  padding: .5rem;\n  box-sizing: border-box;\n  text-decoration: none;\n  color: black;\n}\n\n.search-result li a:hover {\n  background-color: #435A60;\n  color: white;\n}\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\" translation-result=\"on\">小結<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"summarylink\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">旅程即將結束，不過你已經收穫頗豐。</p><p translation-origin=\"off\">You're at the end of your journey, and you've accomplished a lot.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">你添加了在應用程式中使用 HTTP 的必備依賴</p><p translation-origin=\"off\">You added the necessary dependencies to use HTTP in the application</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你重構了 <code>HeroService</code>，以透過 web API 來載入英雄資料</p><p translation-origin=\"off\">You refactored <code>HeroService</code> to load heroes from a web API</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你擴充了 <code>HeroService</code> 來支援 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法</p><p translation-origin=\"off\">You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你修改了元件，以允許使用者新增、編輯和刪除英雄</p><p translation-origin=\"off\">You updated the components to allow adding, editing, and deleting of heroes</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你配置了一個記憶體 Web API</p><p translation-origin=\"off\">You configured an in-memory web API</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你學會了如何使用“可觀察物件”</p><p translation-origin=\"off\">You learned how to use observables</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">《英雄之旅》課程結束了。如果你準備開始學習 Angular 開發的原理，請開始 <a href=\"guide/architecture\" title=\"Architecture\">架構</a> 一章。</p><p translation-origin=\"off\">This concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section, starting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n\n\n  <div class=\"reviewed\">最後複查時間： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/example-apps-list\n - guide/localizing-angular\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgFor\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#delete\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - guide/architecture\n - tutorial/toh-pt6#add-a-heroes-search-feature-to-the-dashboard\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#dashboardcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#edit-the-herosearchcomponent-class\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#get-data-from-a-server\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#httpclient-methods-return-one-value\n - tutorial/toh-pt6#httpclient-的方法返回單個值\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#httpclientget-返回響應資料\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#rxjs-subject-型別的-searchterms\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#update-heroes\n - tutorial/toh-pt6#串聯-rxjs-運運算元\n - tutorial/toh-pt6#為儀表盤新增搜尋功能\n - tutorial/toh-pt6#從伺服器端獲取資料\n - tutorial/toh-pt6#修改英雄\n - tutorial/toh-pt6#修正-herosearchcomponent-類\n - tutorial/toh-pt6#建立-herosearchcomponent\n - tutorial/toh-pt6#刪除某個英雄\n - tutorial/toh-pt6#啟用-http-服務\n - tutorial/toh-pt6#小結\n - tutorial/toh-pt6#往儀表盤中加入英雄搜尋特性\n - tutorial/toh-pt6#檢視最終程式碼\n - tutorial/toh-pt6#根據名字搜尋\n - tutorial/toh-pt6#模擬資料伺服器\n - tutorial/toh-pt6#新增-heroserviceupdatehero\n - tutorial/toh-pt6#新增一個新英雄\n - tutorial/toh-pt6#窺探-observable\n - tutorial/toh-pt6#英雄與-http\n - tutorial/toh-pt6#試試看\n - tutorial/toh-pt6#透過-httpclient-獲取英雄\n - tutorial/toh-pt6#透過-id-獲取英雄\n - tutorial/toh-pt6#錯誤處理\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/angular/tree/main/packages/misc/angular-in-memory-web-api\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/tutorial/toh-pt6.md?message=docs%3A%20請簡述你的修改...\n - https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap\n-->"}