{"id":"errors/NG3003","title":"NG3003: Import cycles would need to be created to compile this component\n\n編譯此元件時需要建立迴圈匯入","contents":"<h1 id=\"ng3003-import-cycles-would-need-to-be-created-to-compile-this-component--編譯此元件時需要建立迴圈匯入\">NG3003: Import cycles would need to be created to compile this component\n<br>\n編譯此元件時需要建立迴圈匯入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component--編譯此元件時需要建立迴圈匯入\"><i class=\"material-icons\">link</i></a></h1>\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/errors/NG3003.md?message=docs(...)%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n\n\n<div class=\"content\">\n  <h2 translation-result=\"on\" id=\"說明\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#說明\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">該元件參考的元件、指令或管道將要求編譯器新增某個匯入，而這將導致迴圈匯入。比如，考慮一個場景，其中 <code>ParentComponent</code> 在其範本中參考了 <code>ChildComponent</code></p><p translation-origin=\"off\">A component, directive or pipe that is referenced by this component would require the compiler\nto add an import that would lead to a cycle of imports.  For example, consider a scenario where\na <code>ParentComponent</code> references a <code>ChildComponent</code> in its template:</p>\n\n<code-example path=\"errors/cyclic-imports/parent.component.ts\" header=\"parent.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-parent', template: '&lt;app-child&gt;&lt;/app-child&gt;'})\nexport class ParentComponent {}\n\n\n</code-example>\n<code-example path=\"errors/cyclic-imports/child.component.ts\" header=\"child.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { ParentComponent } from './parent.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-child', template: 'The child!'})\nexport class ChildComponent {\n  constructor(private parent: ParentComponent) {}\n}\n\n\n</code-example>\n<p translation-result=\"on\">由於 <code>ChildComponent</code> 在其建構函式中參考了 <code>ParentComponent</code> ，因此已經有一個從 <code>child.component.ts</code> 到 <code>parent.component.ts</code> 的匯入。</p><p translation-result=\"on\">但是請注意，父元件的範本中包含 <code>&lt;child&gt;&lt;/child&gt;</code>。因此，該範本的產生後代碼必須包含對 <code>ChildComponent</code> 類別的參考。而為了進行此參考，編譯器必須將從 <code>parent.component.ts</code> 的匯入新增到 <code>child.component.ts</code> ，這將導致迴圈匯入：</p><p translation-origin=\"off\">There is already an import from <code>child.component.ts</code> to <code>parent.component.ts</code> since the <code>ChildComponent</code>\nreferences the <code>ParentComponent</code> in its constructor.</p>\n\n<p translation-origin=\"off\">But note that the parent component's template contains <code>&lt;child&gt;&lt;/child&gt;</code>. The generated code for this\ntemplate must therefore contain a reference to the <code>ChildComponent</code> class. In order to make this reference\nthe compiler would have to add an import from <code>parent.component.ts</code> to <code>child.component.ts</code>, which would\ncause an import cycle:</p>\n\n<code-example>\nparent.component.ts -&gt; child.component.ts -&gt; parent.component.ts\n</code-example>\n<h3 id=\"remote-scoping\" translation-result=\"on\">遠端作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#remote-scoping\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"remote-scoping\">Remote Scoping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#remote-scoping\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">為了避免新增會導致迴圈的匯入，可以將一些額外程式碼新增到 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 類中，在該類中宣告聯絡依賴關係的元件。這稱為“遠端作用域”。</p><p translation-origin=\"off\">To avoid adding imports that create cycles, additional code is added to the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class where\nthe component is declared that wires up the dependencies. This is known as \"remote scoping\".</p>\n\n<h3 id=\"libraries\" translation-result=\"on\">庫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#libraries\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"libraries\">Libraries<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#libraries\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不幸的是，“遠端作用域”程式碼有副作用，它會阻止搖樹最佳化，並且不能在庫中使用。因此，當使用 <code>\"compilationMode\": \"partial\"</code> 設定來建構庫時，任何需要迴圈匯入的元件都將引發此 <code>NG3003</code> 編譯器錯誤。</p><p translation-origin=\"off\">Unfortunately, \"remote scoping\" code is side-effectful, which prevents tree shaking, and cannot\nbe used in libraries. So when building libraries using the <code>\"compilationMode\": \"partial\"</code> setting,\nany component that would require a cyclic import will cause this <code>NG3003</code> compiler error to be raised.</p>\n\n\n</div>\n<br>\n<div class=\"debugging\">\n  <h2 translation-result=\"on\" id=\"如何排除本錯誤\">如何排除本錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#如何排除本錯誤\"><i class=\"material-icons\">link</i></a></h2>\n  <h2 translation-origin=\"off\" id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG3003#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">這種迴圈會顯示為錯誤訊息的一部分。比如：</p><p translation-origin=\"off\">The cycle that would be generated is shown as part of the error message. For example:</p>\n\n<code-example hidecopy=\"true\">\n<span class=\"nocode\">The component ChildComponent is used in the template but importing it would create a cycle:\n/parent.component.ts -&gt; /child.component.ts -&gt; /parent.component.ts</span>\n</code-example>\n<p translation-result=\"on\">使用它來確定所參考的元件、管道或指令是如何反向依賴要編譯的元件的。以下是一些解決問題的方法：</p><p translation-origin=\"off\">Use this to identify how the referenced component, pipe or directive has a dependency back to the\ncomponent being compiled. Here are some ideas for fixing the problem:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">嘗試重新安排你的依賴關係，以避免迴圈。比如，使用儲存在獨立檔案中的中間介面，可以將該檔案匯入兩個相關檔案中而不會導致迴圈匯入。</p><p translation-origin=\"off\">Try to re-arrange your dependencies to avoid the cycle. For example using an intermediate interface\nthat is stored in an independent file that can be imported to both dependent files without\ncausing an import cycle.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">將相互參考的類移到同一檔案中，以避免它們之間的任何匯入。</p><p translation-origin=\"off\">Move the classes that reference each other into the same file, to avoid any imports between them.</p>\n\n</li>\n</ul>\n\n</div>\n\n\n<!-- links to this doc:\n - errors\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - errors/NG3003#debugging-the-error\n - errors/NG3003#description\n - errors/NG3003#libraries\n - errors/NG3003#ng3003-import-cycles-would-need-to-be-created-to-compile-this-component--編譯此元件時需要建立迴圈匯入\n - errors/NG3003#remote-scoping\n - errors/NG3003#如何排除本錯誤\n - errors/NG3003#說明\n - https://github.com/angular/angular-cn/edit/aio/aio/content/errors/NG3003.md?message=docs(...)%3A%20請簡述你的修改...\n-->"}