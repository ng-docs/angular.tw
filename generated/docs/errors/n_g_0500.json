{"id":"errors/NG0500","title":"NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.\n\n在水合（hydration，Angular 的伺服器端渲染技術）期間，Angular 期望一個 DOM 節點，但實際的 DOM 節點要麼與此不同，要麼沒有找到。","contents":"<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/errors/NG0500.md?message=docs(...)%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n<div class=\"content\">\n\n  <h1 id=\"ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的伺服器端渲染技術期間angular-期望一個-dom-節點但實際的-dom-節點要麼與此不同要麼沒有找到\">NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.\n\n在水合（hydration，Angular 的伺服器端渲染技術）期間，Angular 期望一個 DOM 節點，但實際的 DOM 節點要麼與此不同，要麼沒有找到。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的伺服器端渲染技術期間angular-期望一個-dom-節點但實際的-dom-節點要麼與此不同要麼沒有找到\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 translation-result=\"on\" id=\"說明\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#說明\"><i class=\"material-icons\">link</i></a></h2>\n    <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\">這個錯誤意味著在水合過程中，Angular 期望 DOM 結構在伺服器端渲染期間渲染並加上註釋節點。但是，在客戶端，DOM 樹與伺服器端渲染出的 DOM 樹不同。</p><p translation-origin=\"off\">This error means that during the hydration process, Angular expected a DOM structure as rendered and annotated during server side rendering. However, on the client, the DOM tree was different than the server rendered DOM tree.</p>\n\n<p translation-result=\"on\">此錯誤通常是由於使用原生瀏覽器 API 直接操作 DOM 而發生的，這些 API 在 Angular 產生的內容之外更改了 DOM 結構。你可以透過重構元件以使用原生 Angular API 而不是原生 DOM API 來解決此問題。如果那做不到，你可以將 <code>ngSkipHydration</code> 屬性新增到元件的宿主節點，這將禁用元件及其子元件的水合。<code>ngSkipHydration</code> 只能作為最後的手段使用，並且應該視為某種需要修復的錯誤。</p><p translation-origin=\"off\">This error typically happens due to direct DOM manipulation using native browser APIs that alter the DOM structure outside of what Angular produced. You can resolve this by refactoring the component to use native Angular APIs instead of native APIs. If that's not possible, you can add the <code>ngSkipHydration</code> attribute to your component's host node, which will disable hydration for the component and its children. <code>ngSkipHydration</code> should only be used as a last resort and should be considered a bug that needs to be fixed.</p>\n\n<p translation-result=\"on\">有關水合的更多資訊，請參閱<a href=\"guide/hydration\">本指南</a>。</p><p translation-origin=\"off\">More information about hydration can be found in <a href=\"guide/hydration\">this guide</a>.</p>\n\n<p translation-result=\"on\">以下範例將觸發錯誤。</p><p translation-origin=\"off\">The following example will trigger the error.</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'example-cmp',\n  template: '&lt;div&gt;&lt;span&gt;world&lt;/span&gt;&lt;/div&gt;',\n})\nexport class ExampleCmp {\n  hostElement = inject(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>).nativeElement;\n\n  ngOnInit() {\n    // Create a new &lt;p&gt; element with the `Hello` text inside\n    const newNode = document.createElement('p');\n    newNode.innerHTML = 'Hello';\n\n    // Insert the &lt;p&gt; before the first element. Since Angular has no information\n    // about the &lt;p&gt; element, it will be looking for the &lt;div&gt; element at the first\n    // element position instead. As a result, a hydration mismatch error would be\n    // thrown. Instead, update component's template to create the &lt;p&gt; element.\n    this.hostElement.insertBefore(newNode, this.hostElement.firstChild);\n  }\n}\n</code-example>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 translation-result=\"on\" id=\"如何排除本錯誤\">如何排除本錯誤<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#如何排除本錯誤\"><i class=\"material-icons\">link</i></a></h2>\n    <h2 translation-origin=\"off\" id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\">開發人員控制檯中的錯誤訊息會包含關於導致問題的應用程式 DOM 結構的特定部位的資訊。檢查應用程式的相應部位是否存在與水合相關的錯誤，例如使用原生 API 的直接 DOM 操作。檢查你的範本是否具有有效的 HTML 結構。請參閱<a href=\"guide/hydration#valid-html-structure\">水合指南</a>中的更多資訊。可能的解決方案之一是，你可以將 <code>ngSkipHydration</code> 屬性新增到元件中的原生節點。</p><p translation-origin=\"off\">The error message in the developer console should contain information on a specific part of the application's DOM structure that is causing the problem. Review that part of the application for hydration-related errors, such as direct DOM manipulation using native APIs.\nCheck that your template has valid HTML structure. See more information in the <a href=\"guide/hydration#valid-html-structure\">hydration guide</a>.\nYou can add the <code>ngSkipHydration</code> attribute to your component host node as a possible workaround.</p>\n\n<p translation-result=\"on\">如果你的應用程式在開發環境中執行，但你在生產建構中看到水合錯誤，請確保所產生的發給瀏覽器的 HTML 包含 Angular 在伺服器端渲染期間產生的註釋節點。Angular 執行時使用這些註釋節點作為檢視容器的錨點（無論是否水合），而水合過程會期望它們出現在原始位置。如果你有某種自訂邏輯會從伺服器端渲染產生的 HTML 中刪除註釋節點，或者你已將 CDN 配置為在提供內容之前刪除它們 - 禁用刪除註釋節點的特性並檢查水合錯誤是否消失了。</p><p translation-origin=\"off\">If your application works in development environment, but you see hydration errors in production builds, make sure that the generated HTML that is delivered to a browser contains comment nodes produced by Angular during the rendering on the server. Those comment nodes are used by Angular runtime as anchors for view containers (with and without hydration) and hydration process expects them to be present at their original locations. If you have a custom logic to remove comment nodes from the HTML generated by the server-side rendering or you've configured your CDN to remove them before serving the content - disable the comment nodes removal and check if hydration errors are gone.</p>\n\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n - errors/NG0501\n - errors/NG0502\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ElementRef\n - errors/NG0500#debugging-the-error\n - errors/NG0500#description\n - errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的伺服器端渲染技術期間angular-期望一個-dom-節點但實際的-dom-節點要麼與此不同要麼沒有找到\n - errors/NG0500#如何排除本錯誤\n - errors/NG0500#說明\n - guide/hydration\n - guide/hydration#valid-html-structure\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/errors/NG0500.md?message=docs(...)%3A%20請簡述你的修改...\n-->"}